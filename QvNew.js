/*!
 * jQuery JavaScript Library v1.7.1
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Mon Nov 21 21:11:03 2011 -0500
 */
(function(bd, N) {
    var ax = bd.document, bw = bd.navigator, bn = bd.location;
    var b = (function() {
        var bI = function(b3, b4) {
            return new bI.fn.init(b3, b4, bG)
        }, bX = bd.jQuery, bK = bd.$, bG, b1 = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/, bP = /\S/, bL = /^\s+/, bH = /\s+$/, bD = /^<(\w+)\s*\/?>(?:<\/\1>)?$/, bQ = /^[\],:{}\s]*$/, bZ = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, bS = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, bM = /(?:^|:|,)(?:\s*\[)+/g, bB = /(webkit)[ \/]([\w.]+)/, bU = /(opera)(?:.*version)?[ \/]([\w.]+)/, bT = /(msie) ([\w.]+)/, bV = /(mozilla)(?:.*? rv:([\w.]+))?/, bE = /-([a-z]|[0-9])/ig, b2 = /^-ms-/, bW = function(b3, b4) {
            return(b4 + "").toUpperCase()
        }, b0 = bw.userAgent, bY, bF, bx, bO = Object.prototype.toString, bJ = Object.prototype.hasOwnProperty, bC = Array.prototype.push, bN = Array.prototype.slice, bR = String.prototype.trim, by = Array.prototype.indexOf, bA = {};
        bI.fn = bI.prototype = {constructor: bI, init: function(b3, b7, b6) {
                var b5, b8, b4, b9;
                if (!b3) {
                    return this
                }
                if (b3.nodeType) {
                    this.context = this[0] = b3;
                    this.length = 1;
                    return this
                }
                if (b3 === "body" && !b7 && ax.body) {
                    this.context = ax;
                    this[0] = ax.body;
                    this.selector = b3;
                    this.length = 1;
                    return this
                }
                if (typeof b3 === "string") {
                    if (b3.charAt(0) === "<" && b3.charAt(b3.length - 1) === ">" && b3.length >= 3) {
                        b5 = [null, b3, null]
                    } else {
                        b5 = b1.exec(b3)
                    }
                    if (b5 && (b5[1] || !b7)) {
                        if (b5[1]) {
                            b7 = b7 instanceof bI ? b7[0] : b7;
                            b9 = (b7 ? b7.ownerDocument || b7 : ax);
                            b4 = bD.exec(b3);
                            if (b4) {
                                if (bI.isPlainObject(b7)) {
                                    b3 = [ax.createElement(b4[1])];
                                    bI.fn.attr.call(b3, b7, true)
                                } else {
                                    b3 = [b9.createElement(b4[1])]
                                }
                            } else {
                                b4 = bI.buildFragment([b5[1]], [b9]);
                                b3 = (b4.cacheable ? bI.clone(b4.fragment) : b4.fragment).childNodes
                            }
                            return bI.merge(this, b3)
                        } else {
                            b8 = ax.getElementById(b5[2]);
                            if (b8 && b8.parentNode) {
                                if (b8.id !== b5[2]) {
                                    return b6.find(b3)
                                }
                                this.length = 1;
                                this[0] = b8
                            }
                            this.context = ax;
                            this.selector = b3;
                            return this
                        }
                    } else {
                        if (!b7 || b7.jquery) {
                            return(b7 || b6).find(b3)
                        } else {
                            return this.constructor(b7).find(b3)
                        }
                    }
                } else {
                    if (bI.isFunction(b3)) {
                        return b6.ready(b3)
                    }
                }
                if (b3.selector !== N) {
                    this.selector = b3.selector;
                    this.context = b3.context
                }
                return bI.makeArray(b3, this)
            }, selector: "", jquery: "1.7.1", length: 0, size: function() {
                return this.length
            }, toArray: function() {
                return bN.call(this, 0)
            }, get: function(b3) {
                return b3 == null ? this.toArray() : (b3 < 0 ? this[this.length + b3] : this[b3])
            }, pushStack: function(b4, b6, b3) {
                var b5 = this.constructor();
                if (bI.isArray(b4)) {
                    bC.apply(b5, b4)
                } else {
                    bI.merge(b5, b4)
                }
                b5.prevObject = this;
                b5.context = this.context;
                if (b6 === "find") {
                    b5.selector = this.selector + (this.selector ? " " : "") + b3
                } else {
                    if (b6) {
                        b5.selector = this.selector + "." + b6 + "(" + b3 + ")"
                    }
                }
                return b5
            }, each: function(b4, b3) {
                return bI.each(this, b4, b3)
            }, ready: function(b3) {
                bI.bindReady();
                bF.add(b3);
                return this
            }, eq: function(b3) {
                b3 = +b3;
                return b3 === -1 ? this.slice(b3) : this.slice(b3, b3 + 1)
            }, first: function() {
                return this.eq(0)
            }, last: function() {
                return this.eq(-1)
            }, slice: function() {
                return this.pushStack(bN.apply(this, arguments), "slice", bN.call(arguments).join(","))
            }, map: function(b3) {
                return this.pushStack(bI.map(this, function(b5, b4) {
                    return b3.call(b5, b4, b5)
                }))
            }, end: function() {
                return this.prevObject || this.constructor(null)
            }, push: bC, sort: [].sort, splice: [].splice};
        bI.fn.init.prototype = bI.fn;
        bI.extend = bI.fn.extend = function() {
            var cc, b5, b3, b4, b9, ca, b8 = arguments[0] || {}, b7 = 1, b6 = arguments.length, cb = false;
            if (typeof b8 === "boolean") {
                cb = b8;
                b8 = arguments[1] || {};
                b7 = 2
            }
            if (typeof b8 !== "object" && !bI.isFunction(b8)) {
                b8 = {}
            }
            if (b6 === b7) {
                b8 = this;
                --b7
            }
            for (; b7 < b6; b7++) {
                if ((cc = arguments[b7]) != null) {
                    for (b5 in cc) {
                        b3 = b8[b5];
                        b4 = cc[b5];
                        if (b8 === b4) {
                            continue
                        }
                        if (cb && b4 && (bI.isPlainObject(b4) || (b9 = bI.isArray(b4)))) {
                            if (b9) {
                                b9 = false;
                                ca = b3 && bI.isArray(b3) ? b3 : []
                            } else {
                                ca = b3 && bI.isPlainObject(b3) ? b3 : {}
                            }
                            b8[b5] = bI.extend(cb, ca, b4)
                        } else {
                            if (b4 !== N) {
                                b8[b5] = b4
                            }
                        }
                    }
                }
            }
            return b8
        };
        bI.extend({noConflict: function(b3) {
                if (bd.$ === bI) {
                    bd.$ = bK
                }
                if (b3 && bd.jQuery === bI) {
                    bd.jQuery = bX
                }
                return bI
            }, isReady: false, readyWait: 1, holdReady: function(b3) {
                if (b3) {
                    bI.readyWait++
                } else {
                    bI.ready(true)
                }
            }, ready: function(b3) {
                if ((b3 === true && !--bI.readyWait) || (b3 !== true && !bI.isReady)) {
                    if (!ax.body) {
                        return setTimeout(bI.ready, 1)
                    }
                    bI.isReady = true;
                    if (b3 !== true && --bI.readyWait > 0) {
                        return
                    }
                    bF.fireWith(ax, [bI]);
                    if (bI.fn.trigger) {
                        bI(ax).trigger("ready").off("ready")
                    }
                }
            }, bindReady: function() {
                if (bF) {
                    return
                }
                bF = bI.Callbacks("once memory");
                if (ax.readyState === "complete") {
                    return setTimeout(bI.ready, 1)
                }
                if (ax.addEventListener) {
                    ax.addEventListener("DOMContentLoaded", bx, false);
                    bd.addEventListener("load", bI.ready, false)
                } else {
                    if (ax.attachEvent) {
                        ax.attachEvent("onreadystatechange", bx);
                        bd.attachEvent("onload", bI.ready);
                        var b3 = false;
                        try {
                            b3 = bd.frameElement == null
                        } catch (b4) {
                        }
                        if (ax.documentElement.doScroll && b3) {
                            bz()
                        }
                    }
                }
            }, isFunction: function(b3) {
                return bI.type(b3) === "function"
            }, isArray: Array.isArray || function(b3) {
                return bI.type(b3) === "array"
            }, isWindow: function(b3) {
                return b3 && typeof b3 === "object" && "setInterval" in b3
            }, isNumeric: function(b3) {
                return !isNaN(parseFloat(b3)) && isFinite(b3)
            }, type: function(b3) {
                return b3 == null ? String(b3) : bA[bO.call(b3)] || "object"
            }, isPlainObject: function(b5) {
                if (!b5 || bI.type(b5) !== "object" || b5.nodeType || bI.isWindow(b5)) {
                    return false
                }
                try {
                    if (b5.constructor && !bJ.call(b5, "constructor") && !bJ.call(b5.constructor.prototype, "isPrototypeOf")) {
                        return false
                    }
                } catch (b4) {
                    return false
                }
                var b3;
                for (b3 in b5) {
                }
                return b3 === N || bJ.call(b5, b3)
            }, isEmptyObject: function(b4) {
                for (var b3 in b4) {
                    return false
                }
                return true
            }, error: function(b3) {
                throw new Error(b3)
            }, parseJSON: function(b3) {
                if (typeof b3 !== "string" || !b3) {
                    return null
                }
                b3 = bI.trim(b3);
                if (bd.JSON && bd.JSON.parse) {
                    return bd.JSON.parse(b3)
                }
                if (bQ.test(b3.replace(bZ, "@").replace(bS, "]").replace(bM, ""))) {
                    return(new Function("return " + b3))()
                }
                bI.error("Invalid JSON: " + b3)
            }, parseXML: function(b5) {
                var b3, b4;
                try {
                    if (bd.DOMParser) {
                        b4 = new DOMParser();
                        b3 = b4.parseFromString(b5, "text/xml")
                    } else {
                        b3 = new ActiveXObject("Microsoft.XMLDOM");
                        b3.async = "false";
                        b3.loadXML(b5)
                    }
                } catch (b6) {
                    b3 = N
                }
                if (!b3 || !b3.documentElement || b3.getElementsByTagName("parsererror").length) {
                    bI.error("Invalid XML: " + b5)
                }
                return b3
            }, noop: function() {
            }, globalEval: function(b3) {
                if (b3 && bP.test(b3)) {
                    (bd.execScript || function(b4) {
                        bd["eval"].call(bd, b4)
                    })(b3)
                }
            }, camelCase: function(b3) {
                return b3.replace(b2, "ms-").replace(bE, bW)
            }, nodeName: function(b4, b3) {
                return b4.nodeName && b4.nodeName.toUpperCase() === b3.toUpperCase()
            }, each: function(b6, b9, b5) {
                var b4, b7 = 0, b8 = b6.length, b3 = b8 === N || bI.isFunction(b6);
                if (b5) {
                    if (b3) {
                        for (b4 in b6) {
                            if (b9.apply(b6[b4], b5) === false) {
                                break
                            }
                        }
                    } else {
                        for (; b7 < b8; ) {
                            if (b9.apply(b6[b7++], b5) === false) {
                                break
                            }
                        }
                    }
                } else {
                    if (b3) {
                        for (b4 in b6) {
                            if (b9.call(b6[b4], b4, b6[b4]) === false) {
                                break
                            }
                        }
                    } else {
                        for (; b7 < b8; ) {
                            if (b9.call(b6[b7], b7, b6[b7++]) === false) {
                                break
                            }
                        }
                    }
                }
                return b6
            }, trim: bR ? function(b3) {
                return b3 == null ? "" : bR.call(b3)
            } : function(b3) {
                return b3 == null ? "" : b3.toString().replace(bL, "").replace(bH, "")
            }, makeArray: function(b6, b4) {
                var b3 = b4 || [];
                if (b6 != null) {
                    var b5 = bI.type(b6);
                    if (b6.length == null || b5 === "string" || b5 === "function" || b5 === "regexp" || bI.isWindow(b6)) {
                        bC.call(b3, b6)
                    } else {
                        bI.merge(b3, b6)
                    }
                }
                return b3
            }, inArray: function(b5, b6, b4) {
                var b3;
                if (b6) {
                    if (by) {
                        return by.call(b6, b5, b4)
                    }
                    b3 = b6.length;
                    b4 = b4 ? b4 < 0 ? Math.max(0, b3 + b4) : b4 : 0;
                    for (; b4 < b3; b4++) {
                        if (b4 in b6 && b6[b4] === b5) {
                            return b4
                        }
                    }
                }
                return -1
            }, merge: function(b7, b5) {
                var b6 = b7.length, b4 = 0;
                if (typeof b5.length === "number") {
                    for (var b3 = b5.length; b4 < b3; b4++) {
                        b7[b6++] = b5[b4]
                    }
                } else {
                    while (b5[b4] !== N) {
                        b7[b6++] = b5[b4++]
                    }
                }
                b7.length = b6;
                return b7
            }, grep: function(b4, b9, b3) {
                var b5 = [], b8;
                b3 = !!b3;
                for (var b6 = 0, b7 = b4.length; b6 < b7; b6++) {
                    b8 = !!b9(b4[b6], b6);
                    if (b3 !== b8) {
                        b5.push(b4[b6])
                    }
                }
                return b5
            }, map: function(b3, ca, cb) {
                var b8, b9, b7 = [], b5 = 0, b4 = b3.length, b6 = b3 instanceof bI || b4 !== N && typeof b4 === "number" && ((b4 > 0 && b3[0] && b3[b4 - 1]) || b4 === 0 || bI.isArray(b3));
                if (b6) {
                    for (; b5 < b4; b5++) {
                        b8 = ca(b3[b5], b5, cb);
                        if (b8 != null) {
                            b7[b7.length] = b8
                        }
                    }
                } else {
                    for (b9 in b3) {
                        b8 = ca(b3[b9], b9, cb);
                        if (b8 != null) {
                            b7[b7.length] = b8
                        }
                    }
                }
                return b7.concat.apply([], b7)
            }, guid: 1, proxy: function(b7, b6) {
                if (typeof b6 === "string") {
                    var b5 = b7[b6];
                    b6 = b7;
                    b7 = b5
                }
                if (!bI.isFunction(b7)) {
                    return N
                }
                var b3 = bN.call(arguments, 2), b4 = function() {
                    return b7.apply(b6, b3.concat(bN.call(arguments)))
                };
                b4.guid = b7.guid = b7.guid || b4.guid || bI.guid++;
                return b4
            }, access: function(b3, cb, b9, b5, b8, ca) {
                var b4 = b3.length;
                if (typeof cb === "object") {
                    for (var b6 in cb) {
                        bI.access(b3, b6, cb[b6], b5, b8, b9)
                    }
                    return b3
                }
                if (b9 !== N) {
                    b5 = !ca && b5 && bI.isFunction(b9);
                    for (var b7 = 0; b7 < b4; b7++) {
                        b8(b3[b7], cb, b5 ? b9.call(b3[b7], b7, b8(b3[b7], cb)) : b9, ca)
                    }
                    return b3
                }
                return b4 ? b8(b3[0], cb) : N
            }, now: function() {
                return(new Date()).getTime()
            }, uaMatch: function(b4) {
                b4 = b4.toLowerCase();
                var b3 = bB.exec(b4) || bU.exec(b4) || bT.exec(b4) || b4.indexOf("compatible") < 0 && bV.exec(b4) || [];
                return{browser: b3[1] || "", version: b3[2] || "0"}
            }, sub: function() {
                function b3(b6, b7) {
                    return new b3.fn.init(b6, b7)
                }
                bI.extend(true, b3, this);
                b3.superclass = this;
                b3.fn = b3.prototype = this();
                b3.fn.constructor = b3;
                b3.sub = this.sub;
                b3.fn.init = function b5(b6, b7) {
                    if (b7 && b7 instanceof bI && !(b7 instanceof b3)) {
                        b7 = b3(b7)
                    }
                    return bI.fn.init.call(this, b6, b7, b4)
                };
                b3.fn.init.prototype = b3.fn;
                var b4 = b3(ax);
                return b3
            }, browser: {}});
        bI.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(b4, b3) {
            bA["[object " + b3 + "]"] = b3.toLowerCase()
        });
        bY = bI.uaMatch(b0);
        if (bY.browser) {
            bI.browser[bY.browser] = true;
            bI.browser.version = bY.version
        }
        if (bI.browser.webkit) {
            bI.browser.safari = true
        }
        if (bP.test("\xA0")) {
            bL = /^[\s\xA0]+/;
            bH = /[\s\xA0]+$/
        }
        bG = bI(ax);
        if (ax.addEventListener) {
            bx = function() {
                ax.removeEventListener("DOMContentLoaded", bx, false);
                bI.ready()
            }
        } else {
            if (ax.attachEvent) {
                bx = function() {
                    if (ax.readyState === "complete") {
                        ax.detachEvent("onreadystatechange", bx);
                        bI.ready()
                    }
                }
            }
        }
        function bz() {
            if (bI.isReady) {
                return
            }
            try {
                ax.documentElement.doScroll("left")
            } catch (b3) {
                setTimeout(bz, 1);
                return
            }
            bI.ready()
        }
        return bI
    })();
    var a4 = {};
    function Z(bx) {
        var by = a4[bx] = {}, bz, bA;
        bx = bx.split(/\s+/);
        for (bz = 0, bA = bx.length; bz < bA; bz++) {
            by[bx[bz]] = true
        }
        return by
    }
    b.Callbacks = function(bz) {
        bz = bz ? (a4[bz] || Z(bz)) : {};
        var bE = [], bF = [], bA, bB, by, bC, bD, bH = function(bI) {
            var bJ, bM, bL, bK, bN;
            for (bJ = 0, bM = bI.length; bJ < bM; bJ++) {
                bL = bI[bJ];
                bK = b.type(bL);
                if (bK === "array") {
                    bH(bL)
                } else {
                    if (bK === "function") {
                        if (!bz.unique || !bG.has(bL)) {
                            bE.push(bL)
                        }
                    }
                }
            }
        }, bx = function(bJ, bI) {
            bI = bI || [];
            bA = !bz.memory || [bJ, bI];
            bB = true;
            bD = by || 0;
            by = 0;
            bC = bE.length;
            for (; bE && bD < bC; bD++) {
                if (bE[bD].apply(bJ, bI) === false && bz.stopOnFalse) {
                    bA = true;
                    break
                }
            }
            bB = false;
            if (bE) {
                if (!bz.once) {
                    if (bF && bF.length) {
                        bA = bF.shift();
                        bG.fireWith(bA[0], bA[1])
                    }
                } else {
                    if (bA === true) {
                        bG.disable()
                    } else {
                        bE = []
                    }
                }
            }
        }, bG = {add: function() {
                if (bE) {
                    var bI = bE.length;
                    bH(arguments);
                    if (bB) {
                        bC = bE.length
                    } else {
                        if (bA && bA !== true) {
                            by = bI;
                            bx(bA[0], bA[1])
                        }
                    }
                }
                return this
            }, remove: function() {
                if (bE) {
                    var bI = arguments, bK = 0, bL = bI.length;
                    for (; bK < bL; bK++) {
                        for (var bJ = 0; bJ < bE.length; bJ++) {
                            if (bI[bK] === bE[bJ]) {
                                if (bB) {
                                    if (bJ <= bC) {
                                        bC--;
                                        if (bJ <= bD) {
                                            bD--
                                        }
                                    }
                                }
                                bE.splice(bJ--, 1);
                                if (bz.unique) {
                                    break
                                }
                            }
                        }
                    }
                }
                return this
            }, has: function(bJ) {
                if (bE) {
                    var bI = 0, bK = bE.length;
                    for (; bI < bK; bI++) {
                        if (bJ === bE[bI]) {
                            return true
                        }
                    }
                }
                return false
            }, empty: function() {
                bE = [];
                return this
            }, disable: function() {
                bE = bF = bA = N;
                return this
            }, disabled: function() {
                return !bE
            }, lock: function() {
                bF = N;
                if (!bA || bA === true) {
                    bG.disable()
                }
                return this
            }, locked: function() {
                return !bF
            }, fireWith: function(bJ, bI) {
                if (bF) {
                    if (bB) {
                        if (!bz.once) {
                            bF.push([bJ, bI])
                        }
                    } else {
                        if (!(bz.once && bA)) {
                            bx(bJ, bI)
                        }
                    }
                }
                return this
            }, fire: function() {
                bG.fireWith(this, arguments);
                return this
            }, fired: function() {
                return !!bA
            }};
        return bG
    };
    var aL = [].slice;
    b.extend({Deferred: function(bB) {
            var bA = b.Callbacks("once memory"), bz = b.Callbacks("once memory"), by = b.Callbacks("memory"), bx = "pending", bD = {resolve: bA, reject: bz, notify: by}, bF = {done: bA.add, fail: bz.add, progress: by.add, state: function() {
                    return bx
                }, isResolved: bA.fired, isRejected: bz.fired, then: function(bH, bG, bI) {
                    bE.done(bH).fail(bG).progress(bI);
                    return this
                }, always: function() {
                    bE.done.apply(bE, arguments).fail.apply(bE, arguments);
                    return this
                }, pipe: function(bI, bH, bG) {
                    return b.Deferred(function(bJ) {
                        b.each({done: [bI, "resolve"], fail: [bH, "reject"], progress: [bG, "notify"]}, function(bL, bO) {
                            var bK = bO[0], bN = bO[1], bM;
                            if (b.isFunction(bK)) {
                                bE[bL](function() {
                                    bM = bK.apply(this, arguments);
                                    if (bM && b.isFunction(bM.promise)) {
                                        bM.promise().then(bJ.resolve, bJ.reject, bJ.notify)
                                    } else {
                                        bJ[bN + "With"](this === bE ? bJ : this, [bM])
                                    }
                                })
                            } else {
                                bE[bL](bJ[bN])
                            }
                        })
                    }).promise()
                }, promise: function(bH) {
                    if (bH == null) {
                        bH = bF
                    } else {
                        for (var bG in bF) {
                            bH[bG] = bF[bG]
                        }
                    }
                    return bH
                }}, bE = bF.promise({}), bC;
            for (bC in bD) {
                bE[bC] = bD[bC].fire;
                bE[bC + "With"] = bD[bC].fireWith
            }
            bE.done(function() {
                bx = "resolved"
            }, bz.disable, by.lock).fail(function() {
                bx = "rejected"
            }, bA.disable, by.lock);
            if (bB) {
                bB.call(bE, bE)
            }
            return bE
        }, when: function(bD) {
            var bA = aL.call(arguments, 0), by = 0, bx = bA.length, bE = new Array(bx), bz = bx, bB = bx, bF = bx <= 1 && bD && b.isFunction(bD.promise) ? bD : b.Deferred(), bH = bF.promise();
            function bG(bI) {
                return function(bJ) {
                    bA[bI] = arguments.length > 1 ? aL.call(arguments, 0) : bJ;
                    if (!(--bz)) {
                        bF.resolveWith(bF, bA)
                    }
                }
            }
            function bC(bI) {
                return function(bJ) {
                    bE[bI] = arguments.length > 1 ? aL.call(arguments, 0) : bJ;
                    bF.notifyWith(bH, bE)
                }
            }
            if (bx > 1) {
                for (; by < bx; by++) {
                    if (bA[by] && bA[by].promise && b.isFunction(bA[by].promise)) {
                        bA[by].promise().then(bG(by), bF.reject, bC(by))
                    } else {
                        --bz
                    }
                }
                if (!bz) {
                    bF.resolveWith(bF, bA)
                }
            } else {
                if (bF !== bD) {
                    bF.resolveWith(bF, bx ? [bD] : [])
                }
            }
            return bH
        }});
    b.support = (function() {
        var bL, bK, bH, bI, bz, bG, bC, bF, bB, bM, bD, bA, by, bx = ax.createElement("div"), bJ = ax.documentElement;
        bx.setAttribute("className", "t");
        bx.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
        bK = bx.getElementsByTagName("*");
        bH = bx.getElementsByTagName("a")[0];
        if (!bK || !bK.length || !bH) {
            return{}
        }
        bI = ax.createElement("select");
        bz = bI.appendChild(ax.createElement("option"));
        bG = bx.getElementsByTagName("input")[0];
        bL = {leadingWhitespace: (bx.firstChild.nodeType === 3), tbody: !bx.getElementsByTagName("tbody").length, htmlSerialize: !!bx.getElementsByTagName("link").length, style: /top/.test(bH.getAttribute("style")), hrefNormalized: (bH.getAttribute("href") === "/a"), opacity: /^0.55/.test(bH.style.opacity), cssFloat: !!bH.style.cssFloat, checkOn: (bG.value === "on"), optSelected: bz.selected, getSetAttribute: bx.className !== "t", enctype: !!ax.createElement("form").enctype, html5Clone: ax.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>", submitBubbles: true, changeBubbles: true, focusinBubbles: false, deleteExpando: true, noCloneEvent: true, inlineBlockNeedsLayout: false, shrinkWrapBlocks: false, reliableMarginRight: true};
        bG.checked = true;
        bL.noCloneChecked = bG.cloneNode(true).checked;
        bI.disabled = true;
        bL.optDisabled = !bz.disabled;
        try {
            delete bx.test
        } catch (bE) {
            bL.deleteExpando = false
        }
        if (!bx.addEventListener && bx.attachEvent && bx.fireEvent) {
            bx.attachEvent("onclick", function() {
                bL.noCloneEvent = false
            });
            bx.cloneNode(true).fireEvent("onclick")
        }
        bG = ax.createElement("input");
        bG.value = "t";
        bG.setAttribute("type", "radio");
        bL.radioValue = bG.value === "t";
        bG.setAttribute("checked", "checked");
        bx.appendChild(bG);
        bF = ax.createDocumentFragment();
        bF.appendChild(bx.lastChild);
        bL.checkClone = bF.cloneNode(true).cloneNode(true).lastChild.checked;
        bL.appendChecked = bG.checked;
        bF.removeChild(bG);
        bF.appendChild(bx);
        bx.innerHTML = "";
        if (bd.getComputedStyle) {
            bC = ax.createElement("div");
            bC.style.width = "0";
            bC.style.marginRight = "0";
            bx.style.width = "2px";
            bx.appendChild(bC);
            bL.reliableMarginRight = (parseInt((bd.getComputedStyle(bC, null) || {marginRight: 0}).marginRight, 10) || 0) === 0
        }
        if (bx.attachEvent) {
            for (bA in {submit: 1, change: 1, focusin: 1}) {
                bD = "on" + bA;
                by = (bD in bx);
                if (!by) {
                    bx.setAttribute(bD, "return;");
                    by = (typeof bx[bD] === "function")
                }
                bL[bA + "Bubbles"] = by
            }
        }
        bF.removeChild(bx);
        bF = bI = bz = bC = bx = bG = null;
        b(function() {
            var bP, bX, bY, bW, bQ, bR, bO, bV, bU, bN, bS, bT = ax.getElementsByTagName("body")[0];
            if (!bT) {
                return
            }
            bO = 1;
            bV = "position:absolute;top:0;left:0;width:1px;height:1px;margin:0;";
            bU = "visibility:hidden;border:0;";
            bN = "style='" + bV + "border:5px solid #000;padding:0;'";
            bS = "<div " + bN + "><div></div></div><table " + bN + " cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
            bP = ax.createElement("div");
            bP.style.cssText = bU + "width:0;height:0;position:static;top:0;margin-top:" + bO + "px";
            bT.insertBefore(bP, bT.firstChild);
            bx = ax.createElement("div");
            bP.appendChild(bx);
            bx.innerHTML = "<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";
            bB = bx.getElementsByTagName("td");
            by = (bB[0].offsetHeight === 0);
            bB[0].style.display = "";
            bB[1].style.display = "none";
            bL.reliableHiddenOffsets = by && (bB[0].offsetHeight === 0);
            bx.innerHTML = "";
            bx.style.width = bx.style.paddingLeft = "1px";
            b.boxModel = bL.boxModel = bx.offsetWidth === 2;
            if (typeof bx.style.zoom !== "undefined") {
                bx.style.display = "inline";
                bx.style.zoom = 1;
                bL.inlineBlockNeedsLayout = (bx.offsetWidth === 2);
                bx.style.display = "";
                bx.innerHTML = "<div style='width:4px;'></div>";
                bL.shrinkWrapBlocks = (bx.offsetWidth !== 2)
            }
            bx.style.cssText = bV + bU;
            bx.innerHTML = bS;
            bX = bx.firstChild;
            bY = bX.firstChild;
            bQ = bX.nextSibling.firstChild.firstChild;
            bR = {doesNotAddBorder: (bY.offsetTop !== 5), doesAddBorderForTableAndCells: (bQ.offsetTop === 5)};
            bY.style.position = "fixed";
            bY.style.top = "20px";
            bR.fixedPosition = (bY.offsetTop === 20 || bY.offsetTop === 15);
            bY.style.position = bY.style.top = "";
            bX.style.overflow = "hidden";
            bX.style.position = "relative";
            bR.subtractsBorderForOverflowNotVisible = (bY.offsetTop === -5);
            bR.doesNotIncludeMarginInBodyOffset = (bT.offsetTop !== bO);
            bT.removeChild(bP);
            bx = bP = null;
            b.extend(bL, bR)
        });
        return bL
    })();
    var aU = /^(?:\{.*\}|\[.*\])$/, aC = /([A-Z])/g;
    b.extend({cache: {}, uuid: 0, expando: "jQuery" + (b.fn.jquery + Math.random()).replace(/\D/g, ""), noData: {embed: true, object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000", applet: true}, hasData: function(bx) {
            bx = bx.nodeType ? b.cache[bx[b.expando]] : bx[b.expando];
            return !!bx && !U(bx)
        }, data: function(bA, by, bC, bB) {
            if (!b.acceptData(bA)) {
                return
            }
            var bJ, bD, bG, bH = b.expando, bF = typeof by === "string", bI = bA.nodeType, bx = bI ? b.cache : bA, bz = bI ? bA[bH] : bA[bH] && bH, bE = by === "events";
            if ((!bz || !bx[bz] || (!bE && !bB && !bx[bz].data)) && bF && bC === N) {
                return
            }
            if (!bz) {
                if (bI) {
                    bA[bH] = bz = ++b.uuid
                } else {
                    bz = bH
                }
            }
            if (!bx[bz]) {
                bx[bz] = {};
                if (!bI) {
                    bx[bz].toJSON = b.noop
                }
            }
            if (typeof by === "object" || typeof by === "function") {
                if (bB) {
                    bx[bz] = b.extend(bx[bz], by)
                } else {
                    bx[bz].data = b.extend(bx[bz].data, by)
                }
            }
            bJ = bD = bx[bz];
            if (!bB) {
                if (!bD.data) {
                    bD.data = {}
                }
                bD = bD.data
            }
            if (bC !== N) {
                bD[b.camelCase(by)] = bC
            }
            if (bE && !bD[by]) {
                return bJ.events
            }
            if (bF) {
                bG = bD[by];
                if (bG == null) {
                    bG = bD[b.camelCase(by)]
                }
            } else {
                bG = bD
            }
            return bG
        }, removeData: function(bA, by, bB) {
            if (!b.acceptData(bA)) {
                return
            }
            var bE, bD, bC, bF = b.expando, bG = bA.nodeType, bx = bG ? b.cache : bA, bz = bG ? bA[bF] : bF;
            if (!bx[bz]) {
                return
            }
            if (by) {
                bE = bB ? bx[bz] : bx[bz].data;
                if (bE) {
                    if (!b.isArray(by)) {
                        if (by in bE) {
                            by = [by]
                        } else {
                            by = b.camelCase(by);
                            if (by in bE) {
                                by = [by]
                            } else {
                                by = by.split(" ")
                            }
                        }
                    }
                    for (bD = 0, bC = by.length; bD < bC; bD++) {
                        delete bE[by[bD]]
                    }
                    if (!(bB ? U : b.isEmptyObject)(bE)) {
                        return
                    }
                }
            }
            if (!bB) {
                delete bx[bz].data;
                if (!U(bx[bz])) {
                    return
                }
            }
            if (b.support.deleteExpando || !bx.setInterval) {
                delete bx[bz]
            } else {
                bx[bz] = null
            }
            if (bG) {
                if (b.support.deleteExpando) {
                    delete bA[bF]
                } else {
                    if (bA.removeAttribute) {
                        bA.removeAttribute(bF)
                    } else {
                        bA[bF] = null
                    }
                }
            }
        }, _data: function(by, bx, bz) {
            return b.data(by, bx, bz, true)
        }, acceptData: function(by) {
            if (by.nodeName) {
                var bx = b.noData[by.nodeName.toLowerCase()];
                if (bx) {
                    return !(bx === true || by.getAttribute("classid") !== bx)
                }
            }
            return true
        }});
    b.fn.extend({data: function(bB, bD) {
            var bE, bx, bz, bC = null;
            if (typeof bB === "undefined") {
                if (this.length) {
                    bC = b.data(this[0]);
                    if (this[0].nodeType === 1 && !b._data(this[0], "parsedAttrs")) {
                        bx = this[0].attributes;
                        for (var bA = 0, by = bx.length; bA < by; bA++) {
                            bz = bx[bA].name;
                            if (bz.indexOf("data-") === 0) {
                                bz = b.camelCase(bz.substring(5));
                                a7(this[0], bz, bC[bz])
                            }
                        }
                        b._data(this[0], "parsedAttrs", true)
                    }
                }
                return bC
            } else {
                if (typeof bB === "object") {
                    return this.each(function() {
                        b.data(this, bB)
                    })
                }
            }
            bE = bB.split(".");
            bE[1] = bE[1] ? "." + bE[1] : "";
            if (bD === N) {
                bC = this.triggerHandler("getData" + bE[1] + "!", [bE[0]]);
                if (bC === N && this.length) {
                    bC = b.data(this[0], bB);
                    bC = a7(this[0], bB, bC)
                }
                return bC === N && bE[1] ? this.data(bE[0]) : bC
            } else {
                return this.each(function() {
                    var bF = b(this), bG = [bE[0], bD];
                    bF.triggerHandler("setData" + bE[1] + "!", bG);
                    b.data(this, bB, bD);
                    bF.triggerHandler("changeData" + bE[1] + "!", bG)
                })
            }
        }, removeData: function(bx) {
            return this.each(function() {
                b.removeData(this, bx)
            })
        }, getPath: function() {
            if (this.length != 1) {
                throw"Requires one element."
            }
            var bB, bA = this;
            while (bA.length) {
                var bz = bA[0], bx = bz.localName;
                if (!bx) {
                    break
                }
                bx = bx.toLowerCase();
                var by = bA.parent();
                var bC = by.children(bx);
                if (bC.length > 1) {
                    bx += ":eq(" + bC.index(bz) + ")"
                }
                bB = bx + (bB ? ">" + bB : "");
                bA = by
            }
            return bB
        }});
    function a7(bz, by, bA) {
        if (bA === N && bz.nodeType === 1) {
            var bx = "data-" + by.replace(aC, "-$1").toLowerCase();
            bA = bz.getAttribute(bx);
            if (typeof bA === "string") {
                try {
                    bA = bA === "true" ? true : bA === "false" ? false : bA === "null" ? null : b.isNumeric(bA) ? parseFloat(bA) : aU.test(bA) ? b.parseJSON(bA) : bA
                } catch (bB) {
                }
                b.data(bz, by, bA)
            } else {
                bA = N
            }
        }
        return bA
    }
    function U(by) {
        for (var bx in by) {
            if (bx === "data" && b.isEmptyObject(by[bx])) {
                continue
            }
            if (bx !== "toJSON") {
                return false
            }
        }
        return true
    }
    function bk(bB, bA, bD) {
        var bz = bA + "defer", by = bA + "queue", bx = bA + "mark", bC = b._data(bB, bz);
        if (bC && (bD === "queue" || !b._data(bB, by)) && (bD === "mark" || !b._data(bB, bx))) {
            setTimeout(function() {
                if (!b._data(bB, by) && !b._data(bB, bx)) {
                    b.removeData(bB, bz, true);
                    bC.fire()
                }
            }, 0)
        }
    }
    b.extend({_mark: function(by, bx) {
            if (by) {
                bx = (bx || "fx") + "mark";
                b._data(by, bx, (b._data(by, bx) || 0) + 1)
            }
        }, _unmark: function(bB, bA, by) {
            if (bB !== true) {
                by = bA;
                bA = bB;
                bB = false
            }
            if (bA) {
                by = by || "fx";
                var bx = by + "mark", bz = bB ? 0 : ((b._data(bA, bx) || 1) - 1);
                if (bz) {
                    b._data(bA, bx, bz)
                } else {
                    b.removeData(bA, bx, true);
                    bk(bA, by, "mark")
                }
            }
        }, queue: function(by, bx, bA) {
            var bz;
            if (by) {
                bx = (bx || "fx") + "queue";
                bz = b._data(by, bx);
                if (bA) {
                    if (!bz || b.isArray(bA)) {
                        bz = b._data(by, bx, b.makeArray(bA))
                    } else {
                        bz.push(bA)
                    }
                }
                return bz || []
            }
        }, dequeue: function(bB, bA) {
            bA = bA || "fx";
            var by = b.queue(bB, bA), bz = by.shift(), bx = {};
            if (bz === "inprogress") {
                bz = by.shift()
            }
            if (bz) {
                if (bA === "fx") {
                    by.unshift("inprogress")
                }
                b._data(bB, bA + ".run", bx);
                bz.call(bB, function() {
                    b.dequeue(bB, bA)
                }, bx)
            }
            if (!by.length) {
                b.removeData(bB, bA + "queue " + bA + ".run", true);
                bk(bB, bA, "queue")
            }
        }});
    b.fn.extend({queue: function(bx, by) {
            if (typeof bx !== "string") {
                by = bx;
                bx = "fx"
            }
            if (by === N) {
                return b.queue(this[0], bx)
            }
            return this.each(function() {
                var bz = b.queue(this, bx, by);
                if (bx === "fx" && bz[0] !== "inprogress") {
                    b.dequeue(this, bx)
                }
            })
        }, dequeue: function(bx) {
            return this.each(function() {
                b.dequeue(this, bx)
            })
        }, delay: function(by, bx) {
            by = b.fx ? b.fx.speeds[by] || by : by;
            bx = bx || "fx";
            return this.queue(bx, function(bA, bz) {
                var bB = setTimeout(bA, by);
                bz.stop = function() {
                    clearTimeout(bB)
                }
            })
        }, clearQueue: function(bx) {
            return this.queue(bx || "fx", [])
        }, promise: function(bG, bz) {
            if (typeof bG !== "string") {
                bz = bG;
                bG = N
            }
            bG = bG || "fx";
            var bx = b.Deferred(), by = this, bB = by.length, bE = 1, bC = bG + "defer", bD = bG + "queue", bF = bG + "mark", bA;
            function bH() {
                if (!(--bE)) {
                    bx.resolveWith(by, [by])
                }
            }
            while (bB--) {
                if ((bA = b.data(by[bB], bC, N, true) || (b.data(by[bB], bD, N, true) || b.data(by[bB], bF, N, true)) && b.data(by[bB], bC, b.Callbacks("once memory"), true))) {
                    bE++;
                    bA.add(bH)
                }
            }
            bH();
            return bx.promise()
        }});
    var aR = /[\n\t\r]/g, ah = /\s+/, aW = /\r/g, g = /^(?:button|input)$/i, F = /^(?:button|input|object|select|textarea)$/i, m = /^a(?:rea)?$/i, aq = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i, H = b.support.getSetAttribute, bg, a0, aH;
    b.fn.extend({attr: function(bx, by) {
            return b.access(this, bx, by, true, b.attr)
        }, removeAttr: function(bx) {
            return this.each(function() {
                b.removeAttr(this, bx)
            })
        }, prop: function(bx, by) {
            return b.access(this, bx, by, true, b.prop)
        }, removeProp: function(bx) {
            bx = b.propFix[bx] || bx;
            return this.each(function() {
                try {
                    this[bx] = N;
                    delete this[bx]
                } catch (by) {
                }
            })
        }, addClass: function(bB) {
            var bD, bz, by, bA, bC, bE, bx;
            if (b.isFunction(bB)) {
                return this.each(function(bF) {
                    b(this).addClass(bB.call(this, bF, this.className))
                })
            }
            if (bB && typeof bB === "string") {
                bD = bB.split(ah);
                for (bz = 0, by = this.length; bz < by; bz++) {
                    bA = this[bz];
                    if (bA.nodeType === 1) {
                        if (!bA.className && bD.length === 1) {
                            bA.className = bB
                        } else {
                            bC = " " + bA.className + " ";
                            for (bE = 0, bx = bD.length; bE < bx; bE++) {
                                if (!~bC.indexOf(" " + bD[bE] + " ")) {
                                    bC += bD[bE] + " "
                                }
                            }
                            bA.className = b.trim(bC)
                        }
                    }
                }
            }
            return this
        }, removeClass: function(bC) {
            var bD, bz, by, bB, bA, bE, bx;
            if (b.isFunction(bC)) {
                return this.each(function(bF) {
                    b(this).removeClass(bC.call(this, bF, this.className))
                })
            }
            if ((bC && typeof bC === "string") || bC === N) {
                bD = (bC || "").split(ah);
                for (bz = 0, by = this.length; bz < by; bz++) {
                    bB = this[bz];
                    if (bB.nodeType === 1 && bB.className) {
                        if (bC) {
                            bA = (" " + bB.className + " ").replace(aR, " ");
                            for (bE = 0, bx = bD.length; bE < bx; bE++) {
                                bA = bA.replace(" " + bD[bE] + " ", " ")
                            }
                            bB.className = b.trim(bA)
                        } else {
                            bB.className = ""
                        }
                    }
                }
            }
            return this
        }, toggleClass: function(bA, by) {
            var bz = typeof bA, bx = typeof by === "boolean";
            if (b.isFunction(bA)) {
                return this.each(function(bB) {
                    b(this).toggleClass(bA.call(this, bB, this.className, by), by)
                })
            }
            return this.each(function() {
                if (bz === "string") {
                    var bD, bC = 0, bB = b(this), bE = by, bF = bA.split(ah);
                    while ((bD = bF[bC++])) {
                        bE = bx ? bE : !bB.hasClass(bD);
                        bB[bE ? "addClass" : "removeClass"](bD)
                    }
                } else {
                    if (bz === "undefined" || bz === "boolean") {
                        if (this.className) {
                            b._data(this, "__className__", this.className)
                        }
                        this.className = this.className || bA === false ? "" : b._data(this, "__className__") || ""
                    }
                }
            })
        }, hasClass: function(bx) {
            var bA = " " + bx + " ", bz = 0, by = this.length;
            for (; bz < by; bz++) {
                if (this[bz].nodeType === 1 && (" " + this[bz].className + " ").replace(aR, " ").indexOf(bA) > -1) {
                    return true
                }
            }
            return false
        }, val: function(bA) {
            var bx, by, bB, bz = this[0];
            if (!arguments.length) {
                if (bz) {
                    bx = b.valHooks[bz.nodeName.toLowerCase()] || b.valHooks[bz.type];
                    if (bx && "get" in bx && (by = bx.get(bz, "value")) !== N) {
                        return by
                    }
                    by = bz.value;
                    return typeof by === "string" ? by.replace(aW, "") : by == null ? "" : by
                }
                return
            }
            bB = b.isFunction(bA);
            return this.each(function(bD) {
                var bC = b(this), bE;
                if (this.nodeType !== 1) {
                    return
                }
                if (bB) {
                    bE = bA.call(this, bD, bC.val())
                } else {
                    bE = bA
                }
                if (bE == null) {
                    bE = ""
                } else {
                    if (typeof bE === "number") {
                        bE += ""
                    } else {
                        if (b.isArray(bE)) {
                            bE = b.map(bE, function(bF) {
                                return bF == null ? "" : bF + ""
                            })
                        }
                    }
                }
                bx = b.valHooks[this.nodeName.toLowerCase()] || b.valHooks[this.type];
                if (!bx || !("set" in bx) || bx.set(this, bE, "value") === N) {
                    this.value = bE
                }
            })
        }});
    b.extend({valHooks: {option: {get: function(bx) {
                    var by = bx.attributes.value;
                    return !by || by.specified ? bx.value : bx.text
                }}, select: {get: function(bx) {
                    var bD, by, bC, bA, bB = bx.selectedIndex, bE = [], bF = bx.options, bz = bx.type === "select-one";
                    if (bB < 0) {
                        return null
                    }
                    by = bz ? bB : 0;
                    bC = bz ? bB + 1 : bF.length;
                    for (; by < bC; by++) {
                        bA = bF[by];
                        if (bA.selected && (b.support.optDisabled ? !bA.disabled : bA.getAttribute("disabled") === null) && (!bA.parentNode.disabled || !b.nodeName(bA.parentNode, "optgroup"))) {
                            bD = b(bA).val();
                            if (bz) {
                                return bD
                            }
                            bE.push(bD)
                        }
                    }
                    if (bz && !bE.length && bF.length) {
                        return b(bF[bB]).val()
                    }
                    return bE
                }, set: function(by, bz) {
                    var bx = b.makeArray(bz);
                    b(by).find("option").each(function() {
                        this.selected = b.inArray(b(this).val(), bx) >= 0
                    });
                    if (!bx.length) {
                        by.selectedIndex = -1
                    }
                    return bx
                }}}, attrFn: {val: true, css: true, html: true, text: true, data: true, width: true, height: true, offset: true}, attr: function(bD, bA, bE, bC) {
            var bz, bx, bB, by = bD.nodeType;
            if (!bD || by === 3 || by === 8 || by === 2) {
                return
            }
            if (bC && bA in b.attrFn) {
                return b(bD)[bA](bE)
            }
            if (typeof bD.getAttribute === "undefined") {
                return b.prop(bD, bA, bE)
            }
            bB = by !== 1 || !b.isXMLDoc(bD);
            if (bB) {
                bA = bA.toLowerCase();
                bx = b.attrHooks[bA] || (aq.test(bA) ? a0 : bg)
            }
            if (bE !== N) {
                if (bE === null) {
                    b.removeAttr(bD, bA);
                    return
                } else {
                    if (bx && "set" in bx && bB && (bz = bx.set(bD, bE, bA)) !== N) {
                        return bz
                    } else {
                        bD.setAttribute(bA, "" + bE);
                        return bE
                    }
                }
            } else {
                if (bx && "get" in bx && bB && (bz = bx.get(bD, bA)) !== null) {
                    return bz
                } else {
                    bz = bD.getAttribute(bA);
                    return bz === null ? N : bz
                }
            }
        }, removeAttr: function(bA, bC) {
            var bB, bD, by, bx, bz = 0;
            if (bC && bA.nodeType === 1) {
                bD = bC.toLowerCase().split(ah);
                bx = bD.length;
                for (; bz < bx; bz++) {
                    by = bD[bz];
                    if (by) {
                        bB = b.propFix[by] || by;
                        b.attr(bA, by, "");
                        bA.removeAttribute(H ? by : bB);
                        if (aq.test(by) && bB in bA) {
                            bA[bB] = false
                        }
                    }
                }
            }
        }, attrHooks: {type: {set: function(bx, by) {
                    if (g.test(bx.nodeName) && bx.parentNode) {
                        b.error("type property can't be changed")
                    } else {
                        if (!b.support.radioValue && by === "radio" && b.nodeName(bx, "input")) {
                            var bz = bx.value;
                            bx.setAttribute("type", by);
                            if (bz) {
                                bx.value = bz
                            }
                            return by
                        }
                    }
                }}, value: {get: function(by, bx) {
                    if (bg && b.nodeName(by, "button")) {
                        return bg.get(by, bx)
                    }
                    return bx in by ? by.value : null
                }, set: function(by, bz, bx) {
                    if (bg && b.nodeName(by, "button")) {
                        return bg.set(by, bz, bx)
                    }
                    by.value = bz
                }}}, propFix: {tabindex: "tabIndex", readonly: "readOnly", "for": "htmlFor", "class": "className", maxlength: "maxLength", cellspacing: "cellSpacing", cellpadding: "cellPadding", rowspan: "rowSpan", colspan: "colSpan", usemap: "useMap", frameborder: "frameBorder", contenteditable: "contentEditable"}, prop: function(bC, bA, bD) {
            var bz, bx, bB, by = bC.nodeType;
            if (!bC || by === 3 || by === 8 || by === 2) {
                return
            }
            bB = by !== 1 || !b.isXMLDoc(bC);
            if (bB) {
                bA = b.propFix[bA] || bA;
                bx = b.propHooks[bA]
            }
            if (bD !== N) {
                if (bx && "set" in bx && (bz = bx.set(bC, bD, bA)) !== N) {
                    return bz
                } else {
                    return(bC[bA] = bD)
                }
            } else {
                if (bx && "get" in bx && (bz = bx.get(bC, bA)) !== null) {
                    return bz
                } else {
                    return bC[bA]
                }
            }
        }, propHooks: {tabIndex: {get: function(by) {
                    var bx = by.getAttributeNode("tabindex");
                    return bx && bx.specified ? parseInt(bx.value, 10) : F.test(by.nodeName) || m.test(by.nodeName) && by.href ? 0 : N
                }}}});
    b.attrHooks.tabindex = b.propHooks.tabIndex;
    a0 = {get: function(by, bx) {
            var bA, bz = b.prop(by, bx);
            return bz === true || typeof bz !== "boolean" && (bA = by.getAttributeNode(bx)) && bA.nodeValue !== false ? bx.toLowerCase() : N
        }, set: function(by, bA, bx) {
            var bz;
            if (bA === false) {
                b.removeAttr(by, bx)
            } else {
                bz = b.propFix[bx] || bx;
                if (bz in by) {
                    by[bz] = true
                }
                by.setAttribute(bx, bx.toLowerCase())
            }
            return bx
        }};
    if (!H) {
        aH = {name: true, id: true};
        bg = b.valHooks.button = {get: function(bz, by) {
                var bx;
                bx = bz.getAttributeNode(by);
                return bx && (aH[by] ? bx.nodeValue !== "" : bx.specified) ? bx.nodeValue : N
            }, set: function(bz, bA, by) {
                var bx = bz.getAttributeNode(by);
                if (!bx) {
                    bx = ax.createAttribute(by);
                    bz.setAttributeNode(bx)
                }
                return(bx.nodeValue = bA + "")
            }};
        b.attrHooks.tabindex.set = bg.set;
        b.each(["width", "height"], function(by, bx) {
            b.attrHooks[bx] = b.extend(b.attrHooks[bx], {set: function(bz, bA) {
                    if (bA === "") {
                        bz.setAttribute(bx, "auto");
                        return bA
                    }
                }})
        });
        b.attrHooks.contenteditable = {get: bg.get, set: function(by, bz, bx) {
                if (bz === "") {
                    bz = "false"
                }
                bg.set(by, bz, bx)
            }}
    }
    if (!b.support.hrefNormalized) {
        b.each(["href", "src", "width", "height"], function(by, bx) {
            b.attrHooks[bx] = b.extend(b.attrHooks[bx], {get: function(bA) {
                    var bz = bA.getAttribute(bx, 2);
                    return bz === null ? N : bz
                }})
        })
    }
    if (!b.support.style) {
        b.attrHooks.style = {get: function(bx) {
                return bx.style.cssText.toLowerCase() || N
            }, set: function(bx, by) {
                return(bx.style.cssText = "" + by)
            }}
    }
    if (!b.support.optSelected) {
        b.propHooks.selected = b.extend(b.propHooks.selected, {get: function(by) {
                var bx = by.parentNode;
                if (bx) {
                    bx.selectedIndex;
                    if (bx.parentNode) {
                        bx.parentNode.selectedIndex
                    }
                }
                return null
            }})
    }
    if (!b.support.enctype) {
        b.propFix.enctype = "encoding"
    }
    if (!b.support.checkOn) {
        b.each(["radio", "checkbox"], function() {
            b.valHooks[this] = {get: function(bx) {
                    return bx.getAttribute("value") === null ? "on" : bx.value
                }}
        })
    }
    b.each(["radio", "checkbox"], function() {
        b.valHooks[this] = b.extend(b.valHooks[this], {set: function(bx, by) {
                if (b.isArray(by)) {
                    return(bx.checked = b.inArray(b(bx).val(), by) >= 0)
                }
            }})
    });
    var bf = /^(?:textarea|input|select)$/i, o = /^([^\.]*)?(?:\.(.+))?$/, L = /\bhover(\.\S+)?\b/, aQ = /^key/, bh = /^(?:mouse|contextmenu)|click/, V = /^(?:focusinfocus|focusoutblur)$/, W = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/, aa = function(bx) {
        var by = W.exec(bx);
        if (by) {
            by[1] = (by[1] || "").toLowerCase();
            by[3] = by[3] && new RegExp("(?:^|\\s)" + by[3] + "(?:\\s|$)")
        }
        return by
    }, k = function(bz, bx) {
        var by = bz.attributes || {};
        return((!bx[1] || bz.nodeName.toLowerCase() === bx[1]) && (!bx[2] || (by.id || {}).value === bx[2]) && (!bx[3] || bx[3].test((by["class"] || {}).value)))
    }, bv = function(bx) {
        return b.event.special.hover ? bx : bx.replace(L, "mouseenter$1 mouseleave$1")
    };
    b.event = {add: function(bA, bF, bM, bD, bB) {
            var bG, bE, bN, bL, bK, bI, bx, bJ, by, bC, bz, bH;
            if (bA.nodeType === 3 || bA.nodeType === 8 || !bF || !bM || !(bG = b._data(bA))) {
                return
            }
            if (bM.handler) {
                by = bM;
                bM = by.handler
            }
            if (!bM.guid) {
                bM.guid = b.guid++
            }
            bN = bG.events;
            if (!bN) {
                bG.events = bN = {}
            }
            bE = bG.handle;
            if (!bE) {
                bG.handle = bE = function(bO) {
                    return typeof b !== "undefined" && (!bO || b.event.triggered !== bO.type) ? b.event.dispatch.apply(bE.elem, arguments) : N
                };
                bE.elem = bA
            }
            bF = b.trim(bv(bF)).split(" ");
            for (bL = 0; bL < bF.length; bL++) {
                bK = o.exec(bF[bL]) || [];
                bI = bK[1];
                bx = (bK[2] || "").split(".").sort();
                bH = b.event.special[bI] || {};
                bI = (bB ? bH.delegateType : bH.bindType) || bI;
                bH = b.event.special[bI] || {};
                bJ = b.extend({type: bI, origType: bK[1], data: bD, handler: bM, guid: bM.guid, selector: bB, quick: aa(bB), namespace: bx.join(".")}, by);
                bz = bN[bI];
                if (!bz) {
                    bz = bN[bI] = [];
                    bz.delegateCount = 0;
                    if (!bH.setup || bH.setup.call(bA, bD, bx, bE) === false) {
                        if (bA.addEventListener) {
                            bA.addEventListener(bI, bE, false)
                        } else {
                            if (bA.attachEvent) {
                                bA.attachEvent("on" + bI, bE)
                            }
                        }
                    }
                }
                if (bH.add) {
                    bH.add.call(bA, bJ);
                    if (!bJ.handler.guid) {
                        bJ.handler.guid = bM.guid
                    }
                }
                if (bB) {
                    bz.splice(bz.delegateCount++, 0, bJ)
                } else {
                    bz.push(bJ)
                }
                b.event.global[bI] = true
            }
            bA = null
        }, global: {}, remove: function(bM, bH, by, bK, bE) {
            var bL = b.hasData(bM) && b._data(bM), bI, bA, bC, bO, bF, bD, bJ, bz, bB, bN, bG, bx;
            if (!bL || !(bz = bL.events)) {
                return
            }
            bH = b.trim(bv(bH || "")).split(" ");
            for (bI = 0; bI < bH.length; bI++) {
                bA = o.exec(bH[bI]) || [];
                bC = bO = bA[1];
                bF = bA[2];
                if (!bC) {
                    for (bC in bz) {
                        b.event.remove(bM, bC + bH[bI], by, bK, true)
                    }
                    continue
                }
                bB = b.event.special[bC] || {};
                bC = (bK ? bB.delegateType : bB.bindType) || bC;
                bG = bz[bC] || [];
                bD = bG.length;
                bF = bF ? new RegExp("(^|\\.)" + bF.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
                for (bJ = 0; bJ < bG.length; bJ++) {
                    bx = bG[bJ];
                    if ((bE || bO === bx.origType) && (!by || by.guid === bx.guid) && (!bF || bF.test(bx.namespace)) && (!bK || bK === bx.selector || bK === "**" && bx.selector)) {
                        bG.splice(bJ--, 1);
                        if (bx.selector) {
                            bG.delegateCount--
                        }
                        if (bB.remove) {
                            bB.remove.call(bM, bx)
                        }
                    }
                }
                if (bG.length === 0 && bD !== bG.length) {
                    if (!bB.teardown || bB.teardown.call(bM, bF) === false) {
                        b.removeEvent(bM, bC, bL.handle)
                    }
                    delete bz[bC]
                }
            }
            if (b.isEmptyObject(bz)) {
                bN = bL.handle;
                if (bN) {
                    bN.elem = null
                }
                b.removeData(bM, ["events", "handle"], true)
            }
        }, customEvent: {getData: true, setData: true, changeData: true}, trigger: function(by, bG, bD, bM) {
            if (bD && (bD.nodeType === 3 || bD.nodeType === 8)) {
                return
            }
            var bJ = by.type || by, bA = [], bx, bz, bF, bK, bC, bB, bI, bH, bE, bL;
            if (V.test(bJ + b.event.triggered)) {
                return
            }
            if (bJ.indexOf("!") >= 0) {
                bJ = bJ.slice(0, -1);
                bz = true
            }
            if (bJ.indexOf(".") >= 0) {
                bA = bJ.split(".");
                bJ = bA.shift();
                bA.sort()
            }
            if ((!bD || b.event.customEvent[bJ]) && !b.event.global[bJ]) {
                return
            }
            by = typeof by === "object" ? by[b.expando] ? by : new b.Event(bJ, by) : new b.Event(bJ);
            by.type = bJ;
            by.isTrigger = true;
            by.exclusive = bz;
            by.namespace = bA.join(".");
            by.namespace_re = by.namespace ? new RegExp("(^|\\.)" + bA.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
            bB = bJ.indexOf(":") < 0 ? "on" + bJ : "";
            if (!bD) {
                bx = b.cache;
                for (bF in bx) {
                    if (bx[bF].events && bx[bF].events[bJ]) {
                        b.event.trigger(by, bG, bx[bF].handle.elem, true)
                    }
                }
                return
            }
            by.result = N;
            if (!by.target) {
                by.target = bD
            }
            bG = bG != null ? b.makeArray(bG) : [];
            bG.unshift(by);
            bI = b.event.special[bJ] || {};
            if (bI.trigger && bI.trigger.apply(bD, bG) === false) {
                return
            }
            bE = [[bD, bI.bindType || bJ]];
            if (!bM && !bI.noBubble && !b.isWindow(bD)) {
                bL = bI.delegateType || bJ;
                bK = V.test(bL + bJ) ? bD : bD.parentNode;
                bC = null;
                for (; bK; bK = bK.parentNode) {
                    bE.push([bK, bL]);
                    bC = bK
                }
                if (bC && bC === bD.ownerDocument) {
                    bE.push([bC.defaultView || bC.parentWindow || bd, bL])
                }
            }
            for (bF = 0; bF < bE.length && !by.isPropagationStopped(); bF++) {
                bK = bE[bF][0];
                by.type = bE[bF][1];
                bH = (b._data(bK, "events") || {})[by.type] && b._data(bK, "handle");
                if (bH) {
                    bH.apply(bK, bG)
                }
                bH = bB && bK[bB];
                if (bH && b.acceptData(bK) && bH.apply(bK, bG) === false) {
                    by.preventDefault()
                }
            }
            by.type = bJ;
            if (!bM && !by.isDefaultPrevented()) {
                if ((!bI._default || bI._default.apply(bD.ownerDocument, bG) === false) && !(bJ === "click" && b.nodeName(bD, "a")) && b.acceptData(bD)) {
                    if (bB && bD[bJ] && ((bJ !== "focus" && bJ !== "blur") || by.target.offsetWidth !== 0) && !b.isWindow(bD)) {
                        bC = bD[bB];
                        if (bC) {
                            bD[bB] = null
                        }
                        b.event.triggered = bJ;
                        bD[bJ]();
                        b.event.triggered = N;
                        if (bC) {
                            bD[bB] = bC
                        }
                    }
                }
            }
            return by.result
        }, dispatch: function(bx) {
            bx = b.event.fix(bx || bd.event);
            var bC = ((b._data(this, "events") || {})[bx.type] || []), bD = bC.delegateCount, bJ = [].slice.call(arguments, 0), bB = !bx.exclusive && !bx.namespace, bK = [], bF, bE, bN, bA, bI, bH, by, bG, bL, bz, bM;
            bJ[0] = bx;
            bx.delegateTarget = this;
            if (bD && !bx.target.disabled && !(bx.button && bx.type === "click")) {
                bA = b(this);
                bA.context = this.ownerDocument || this;
                for (bN = bx.target; bN != this; bN = bN.parentNode || this) {
                    bH = {};
                    bG = [];
                    bA[0] = bN;
                    for (bF = 0; bF < bD; bF++) {
                        bL = bC[bF];
                        bz = bL.selector;
                        if (bH[bz] === N) {
                            bH[bz] = (bL.quick ? k(bN, bL.quick) : bA.is(bz))
                        }
                        if (bH[bz]) {
                            bG.push(bL)
                        }
                    }
                    if (bG.length) {
                        bK.push({elem: bN, matches: bG})
                    }
                }
            }
            if (bC.length > bD) {
                bK.push({elem: this, matches: bC.slice(bD)})
            }
            for (bF = 0; bF < bK.length && !bx.isPropagationStopped(); bF++) {
                by = bK[bF];
                bx.currentTarget = by.elem;
                for (bE = 0; bE < by.matches.length && !bx.isImmediatePropagationStopped(); bE++) {
                    bL = by.matches[bE];
                    if (bB || (!bx.namespace && !bL.namespace) || bx.namespace_re && bx.namespace_re.test(bL.namespace)) {
                        bx.data = bL.data;
                        bx.handleObj = bL;
                        bI = ((b.event.special[bL.origType] || {}).handle || bL.handler).apply(by.elem, bJ);
                        if (bI !== N) {
                            bx.result = bI;
                            if (bI === false) {
                                bx.preventDefault();
                                bx.stopPropagation()
                            }
                        }
                    }
                }
            }
            return bx.result
        }, props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "), fixHooks: {}, keyHooks: {props: "char charCode key keyCode".split(" "), filter: function(by, bx) {
                if (by.which == null) {
                    by.which = bx.charCode != null ? bx.charCode : bx.keyCode
                }
                return by
            }}, mouseHooks: {props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "), filter: function(bA, bz) {
                var bB, bC, bx, by = bz.button, bD = bz.fromElement;
                if (bA.pageX == null && bz.clientX != null) {
                    bB = bA.target.ownerDocument || ax;
                    bC = bB.documentElement;
                    bx = bB.body;
                    bA.pageX = bz.clientX + (bC && bC.scrollLeft || bx && bx.scrollLeft || 0) - (bC && bC.clientLeft || bx && bx.clientLeft || 0);
                    bA.pageY = bz.clientY + (bC && bC.scrollTop || bx && bx.scrollTop || 0) - (bC && bC.clientTop || bx && bx.clientTop || 0)
                }
                if (!bA.relatedTarget && bD) {
                    bA.relatedTarget = bD === bA.target ? bz.toElement : bD
                }
                if (!bA.which && by !== N) {
                    bA.which = (by & 1 ? 1 : (by & 2 ? 3 : (by & 4 ? 2 : 0)))
                }
                return bA
            }}, fix: function(bz) {
            if (bz[b.expando]) {
                return bz
            }
            var by, bC, bx = bz, bA = b.event.fixHooks[bz.type] || {}, bB = bA.props ? this.props.concat(bA.props) : this.props;
            bz = b.Event(bx);
            for (by = bB.length; by; ) {
                bC = bB[--by];
                bz[bC] = bx[bC]
            }
            if (!bz.target) {
                bz.target = bx.srcElement || ax
            }
            if (bz.target.nodeType === 3) {
                bz.target = bz.target.parentNode
            }
            if (bz.metaKey === N) {
                bz.metaKey = bz.ctrlKey
            }
            return bA.filter ? bA.filter(bz, bx) : bz
        }, special: {ready: {setup: b.bindReady}, load: {noBubble: true}, focus: {delegateType: "focusin"}, blur: {delegateType: "focusout"}, beforeunload: {setup: function(bz, by, bx) {
                    if (b.isWindow(this)) {
                        this.onbeforeunload = bx
                    }
                }, teardown: function(by, bx) {
                    if (this.onbeforeunload === bx) {
                        this.onbeforeunload = null
                    }
                }}}, simulate: function(by, bA, bz, bx) {
            var bB = b.extend(new b.Event(), bz, {type: by, isSimulated: true, originalEvent: {}});
            if (bx) {
                b.event.trigger(bB, null, bA)
            } else {
                b.event.dispatch.call(bA, bB)
            }
            if (bB.isDefaultPrevented()) {
                bz.preventDefault()
            }
        }};
    b.event.handle = b.event.dispatch;
    b.removeEvent = ax.removeEventListener ? function(by, bx, bz) {
        if (by.removeEventListener) {
            by.removeEventListener(bx, bz, false)
        }
    } : function(by, bx, bz) {
        if (by.detachEvent) {
            by.detachEvent("on" + bx, bz)
        }
    };
    b.Event = function(by, bx) {
        if (!(this instanceof b.Event)) {
            return new b.Event(by, bx)
        }
        if (by && by.type) {
            this.originalEvent = by;
            this.type = by.type;
            this.isDefaultPrevented = (by.defaultPrevented || by.returnValue === false || by.getPreventDefault && by.getPreventDefault()) ? j : bm
        } else {
            this.type = by
        }
        if (bx) {
            b.extend(this, bx)
        }
        this.timeStamp = by && by.timeStamp || b.now();
        this[b.expando] = true
    };
    function bm() {
        return false
    }
    function j() {
        return true
    }
    b.Event.prototype = {preventDefault: function() {
            this.isDefaultPrevented = j;
            var bx = this.originalEvent;
            if (!bx) {
                return
            }
            if (bx.preventDefault) {
                bx.preventDefault()
            } else {
                bx.returnValue = false
            }
        }, stopPropagation: function() {
            this.isPropagationStopped = j;
            var bx = this.originalEvent;
            if (!bx) {
                return
            }
            if (bx.stopPropagation) {
                bx.stopPropagation()
            }
            bx.cancelBubble = true
        }, stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = j;
            this.stopPropagation()
        }, isDefaultPrevented: bm, isPropagationStopped: bm, isImmediatePropagationStopped: bm};
    b.each({mouseenter: "mouseover", mouseleave: "mouseout"}, function(by, bx) {
        b.event.special[by] = {delegateType: bx, bindType: bx, handle: function(bC) {
                var bE = this, bD = bC.relatedTarget, bB = bC.handleObj, bz = bB.selector, bA;
                if (!bD || (bD !== bE && !b.contains(bE, bD))) {
                    bC.type = bB.origType;
                    bA = bB.handler.apply(this, arguments);
                    bC.type = bx
                }
                return bA
            }}
    });
    if (!b.support.submitBubbles) {
        b.event.special.submit = {setup: function() {
                if (b.nodeName(this, "form")) {
                    return false
                }
                b.event.add(this, "click._submit keypress._submit", function(bz) {
                    var by = bz.target, bx = b.nodeName(by, "input") || b.nodeName(by, "button") ? by.form : N;
                    if (bx && !bx._submit_attached) {
                        b.event.add(bx, "submit._submit", function(bA) {
                            if (this.parentNode && !bA.isTrigger) {
                                b.event.simulate("submit", this.parentNode, bA, true)
                            }
                        });
                        bx._submit_attached = true
                    }
                })
            }, teardown: function() {
                if (b.nodeName(this, "form")) {
                    return false
                }
                b.event.remove(this, "._submit")
            }}
    }
    if (!b.support.changeBubbles) {
        b.event.special.change = {setup: function() {
                if (bf.test(this.nodeName)) {
                    if (this.type === "checkbox" || this.type === "radio") {
                        b.event.add(this, "propertychange._change", function(bx) {
                            if (bx.originalEvent.propertyName === "checked") {
                                this._just_changed = true
                            }
                        });
                        b.event.add(this, "click._change", function(bx) {
                            if (this._just_changed && !bx.isTrigger) {
                                this._just_changed = false;
                                b.event.simulate("change", this, bx, true)
                            }
                        })
                    }
                    return false
                }
                b.event.add(this, "beforeactivate._change", function(by) {
                    var bx = by.target;
                    if (bf.test(bx.nodeName) && !bx._change_attached) {
                        b.event.add(bx, "change._change", function(bz) {
                            if (this.parentNode && !bz.isSimulated && !bz.isTrigger) {
                                b.event.simulate("change", this.parentNode, bz, true)
                            }
                        });
                        bx._change_attached = true
                    }
                })
            }, handle: function(by) {
                var bx = by.target;
                if (this !== bx || by.isSimulated || by.isTrigger || (bx.type !== "radio" && bx.type !== "checkbox")) {
                    return by.handleObj.handler.apply(this, arguments)
                }
            }, teardown: function() {
                b.event.remove(this, "._change");
                return bf.test(this.nodeName)
            }}
    }
    if (!b.support.focusinBubbles) {
        b.each({focus: "focusin", blur: "focusout"}, function(bA, bx) {
            var by = 0, bz = function(bB) {
                b.event.simulate(bx, bB.target, b.event.fix(bB), true)
            };
            b.event.special[bx] = {setup: function() {
                    if (by++ === 0) {
                        ax.addEventListener(bA, bz, true)
                    }
                }, teardown: function() {
                    if (--by === 0) {
                        ax.removeEventListener(bA, bz, true)
                    }
                }}
        })
    }
    b.fn.extend({on: function(bz, bx, bC, bB, by) {
            var bD, bA;
            if (typeof bz === "object") {
                if (typeof bx !== "string") {
                    bC = bx;
                    bx = N
                }
                for (bA in bz) {
                    this.on(bA, bx, bC, bz[bA], by)
                }
                return this
            }
            if (bC == null && bB == null) {
                bB = bx;
                bC = bx = N
            } else {
                if (bB == null) {
                    if (typeof bx === "string") {
                        bB = bC;
                        bC = N
                    } else {
                        bB = bC;
                        bC = bx;
                        bx = N
                    }
                }
            }
            if (bB === false) {
                bB = bm
            } else {
                if (!bB) {
                    return this
                }
            }
            if (by === 1) {
                bD = bB;
                bB = function(bE) {
                    b().off(bE);
                    return bD.apply(this, arguments)
                };
                bB.guid = bD.guid || (bD.guid = b.guid++)
            }
            return this.each(function() {
                b.event.add(this, bz, bB, bC, bx)
            })
        }, one: function(by, bx, bA, bz) {
            return this.on.call(this, by, bx, bA, bz, 1)
        }, off: function(bz, bx, bB) {
            if (bz && bz.preventDefault && bz.handleObj) {
                var by = bz.handleObj;
                b(bz.delegateTarget).off(by.namespace ? by.type + "." + by.namespace : by.type, by.selector, by.handler);
                return this
            }
            if (typeof bz === "object") {
                for (var bA in bz) {
                    this.off(bA, bx, bz[bA])
                }
                return this
            }
            if (bx === false || typeof bx === "function") {
                bB = bx;
                bx = N
            }
            if (bB === false) {
                bB = bm
            }
            return this.each(function() {
                b.event.remove(this, bz, bB, bx)
            })
        }, bind: function(bx, bz, by) {
            return this.on(bx, null, bz, by)
        }, unbind: function(bx, by) {
            return this.off(bx, null, by)
        }, live: function(bx, bz, by) {
            b(this.context).on(bx, this.selector, bz, by);
            return this
        }, die: function(bx, by) {
            b(this.context).off(bx, this.selector || "**", by);
            return this
        }, delegate: function(bx, by, bA, bz) {
            return this.on(by, bx, bA, bz)
        }, undelegate: function(bx, by, bz) {
            return arguments.length == 1 ? this.off(bx, "**") : this.off(by, bx, bz)
        }, trigger: function(bx, by) {
            return this.each(function() {
                b.event.trigger(bx, by, this)
            })
        }, triggerHandler: function(bx, by) {
            if (this[0]) {
                return b.event.trigger(bx, by, this[0], true)
            }
        }, toggle: function(bA) {
            var by = arguments, bx = bA.guid || b.guid++, bz = 0, bB = function(bC) {
                var bD = (b._data(this, "lastToggle" + bA.guid) || 0) % bz;
                b._data(this, "lastToggle" + bA.guid, bD + 1);
                bC.preventDefault();
                return by[bD].apply(this, arguments) || false
            };
            bB.guid = bx;
            while (bz < by.length) {
                by[bz++].guid = bx
            }
            return this.click(bB)
        }, hover: function(bx, by) {
            return this.mouseenter(bx).mouseleave(by || bx)
        }});
    b.each(("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu").split(" "), function(by, bx) {
        b.fn[bx] = function(bA, bz) {
            if (bz == null) {
                bz = bA;
                bA = null
            }
            return arguments.length > 0 ? this.on(bx, null, bA, bz) : this.trigger(bx)
        };
        if (b.attrFn) {
            b.attrFn[bx] = true
        }
        if (aQ.test(bx)) {
            b.event.fixHooks[bx] = b.event.keyHooks
        }
        if (bh.test(bx)) {
            b.event.fixHooks[bx] = b.event.mouseHooks
        }
    });
    /*!
     * Sizzle CSS Selector Engine
     *  Copyright 2011, The Dojo Foundation
     *  Released under the MIT, BSD, and GPL Licenses.
     *  More information: http://sizzlejs.com/
     */
    (function() {
        var bJ = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g, bE = "sizcache" + (Math.random() + "").replace(".", ""), bK = 0, bN = Object.prototype.toString, bD = false, bC = true, bM = /\\/g, bQ = /\r\n/g, bS = /\W/;
        [0, 0].sort(function() {
            bC = false;
            return 0
        });
        var bA = function(bY, bT, b1, b2) {
            b1 = b1 || [];
            bT = bT || ax;
            var b4 = bT;
            if (bT.nodeType !== 1 && bT.nodeType !== 9) {
                return[]
            }
            if (!bY || typeof bY !== "string") {
                return b1
            }
            var bV, b6, b9, bU, b5, b8, b7, b0, bX = true, bW = bA.isXML(bT), bZ = [], b3 = bY;
            do {
                bJ.exec("");
                bV = bJ.exec(b3);
                if (bV) {
                    b3 = bV[3];
                    bZ.push(bV[1]);
                    if (bV[2]) {
                        bU = bV[3];
                        break
                    }
                }
            } while (bV);
            if (bZ.length > 1 && bF.exec(bY)) {
                if (bZ.length === 2 && bG.relative[bZ[0]]) {
                    b6 = bO(bZ[0] + bZ[1], bT, b2)
                } else {
                    b6 = bG.relative[bZ[0]] ? [bT] : bA(bZ.shift(), bT);
                    while (bZ.length) {
                        bY = bZ.shift();
                        if (bG.relative[bY]) {
                            bY += bZ.shift()
                        }
                        b6 = bO(bY, b6, b2)
                    }
                }
            } else {
                if (!b2 && bZ.length > 1 && bT.nodeType === 9 && !bW && bG.match.ID.test(bZ[0]) && !bG.match.ID.test(bZ[bZ.length - 1])) {
                    b5 = bA.find(bZ.shift(), bT, bW);
                    bT = b5.expr ? bA.filter(b5.expr, b5.set)[0] : b5.set[0]
                }
                if (bT) {
                    b5 = b2 ? {expr: bZ.pop(), set: bH(b2)} : bA.find(bZ.pop(), bZ.length === 1 && (bZ[0] === "~" || bZ[0] === "+") && bT.parentNode ? bT.parentNode : bT, bW);
                    b6 = b5.expr ? bA.filter(b5.expr, b5.set) : b5.set;
                    if (bZ.length > 0) {
                        b9 = bH(b6)
                    } else {
                        bX = false
                    }
                    while (bZ.length) {
                        b8 = bZ.pop();
                        b7 = b8;
                        if (!bG.relative[b8]) {
                            b8 = ""
                        } else {
                            b7 = bZ.pop()
                        }
                        if (b7 == null) {
                            b7 = bT
                        }
                        bG.relative[b8](b9, b7, bW)
                    }
                } else {
                    b9 = bZ = []
                }
            }
            if (!b9) {
                b9 = b6
            }
            if (!b9) {
                bA.error(b8 || bY)
            }
            if (bN.call(b9) === "[object Array]") {
                if (!bX) {
                    b1.push.apply(b1, b9)
                } else {
                    if (bT && bT.nodeType === 1) {
                        for (b0 = 0; b9[b0] != null; b0++) {
                            if (b9[b0] && (b9[b0] === true || b9[b0].nodeType === 1 && bA.contains(bT, b9[b0]))) {
                                b1.push(b6[b0])
                            }
                        }
                    } else {
                        for (b0 = 0; b9[b0] != null; b0++) {
                            if (b9[b0] && b9[b0].nodeType === 1) {
                                b1.push(b6[b0])
                            }
                        }
                    }
                }
            } else {
                bH(b9, b1)
            }
            if (bU) {
                bA(bU, b4, b1, b2);
                bA.uniqueSort(b1)
            }
            return b1
        };
        bA.uniqueSort = function(bU) {
            if (bL) {
                bD = bC;
                bU.sort(bL);
                if (bD) {
                    for (var bT = 1; bT < bU.length; bT++) {
                        if (bU[bT] === bU[bT - 1]) {
                            bU.splice(bT--, 1)
                        }
                    }
                }
            }
            return bU
        };
        bA.matches = function(bT, bU) {
            return bA(bT, null, null, bU)
        };
        bA.matchesSelector = function(bT, bU) {
            return bA(bU, null, null, [bT]).length > 0
        };
        bA.find = function(b0, bT, b1) {
            var bZ, bV, bX, bW, bY, bU;
            if (!b0) {
                return[]
            }
            for (bV = 0, bX = bG.order.length; bV < bX; bV++) {
                bY = bG.order[bV];
                if ((bW = bG.leftMatch[bY].exec(b0))) {
                    bU = bW[1];
                    bW.splice(1, 1);
                    if (bU.substr(bU.length - 1) !== "\\") {
                        bW[1] = (bW[1] || "").replace(bM, "");
                        bZ = bG.find[bY](bW, bT, b1);
                        if (bZ != null) {
                            b0 = b0.replace(bG.match[bY], "");
                            break
                        }
                    }
                }
            }
            if (!bZ) {
                bZ = typeof bT.getElementsByTagName !== "undefined" ? bT.getElementsByTagName("*") : []
            }
            return{set: bZ, expr: b0}
        };
        bA.filter = function(b4, b3, b7, bX) {
            var bZ, bT, b2, b9, b6, bU, bW, bY, b5, bV = b4, b8 = [], b1 = b3, b0 = b3 && b3[0] && bA.isXML(b3[0]);
            while (b4 && b3.length) {
                for (b2 in bG.filter) {
                    if ((bZ = bG.leftMatch[b2].exec(b4)) != null && bZ[2]) {
                        bU = bG.filter[b2];
                        bW = bZ[1];
                        bT = false;
                        bZ.splice(1, 1);
                        if (bW.substr(bW.length - 1) === "\\") {
                            continue
                        }
                        if (b1 === b8) {
                            b8 = []
                        }
                        if (bG.preFilter[b2]) {
                            bZ = bG.preFilter[b2](bZ, b1, b7, b8, bX, b0);
                            if (!bZ) {
                                bT = b9 = true
                            } else {
                                if (bZ === true) {
                                    continue
                                }
                            }
                        }
                        if (bZ) {
                            for (bY = 0; (b6 = b1[bY]) != null; bY++) {
                                if (b6) {
                                    b9 = bU(b6, bZ, bY, b1);
                                    b5 = bX ^ b9;
                                    if (b7 && b9 != null) {
                                        if (b5) {
                                            bT = true
                                        } else {
                                            b1[bY] = false
                                        }
                                    } else {
                                        if (b5) {
                                            b8.push(b6);
                                            bT = true
                                        }
                                    }
                                }
                            }
                        }
                        if (b9 !== N) {
                            if (!b7) {
                                b1 = b8
                            }
                            b4 = b4.replace(bG.match[b2], "");
                            if (!bT) {
                                return[]
                            }
                            break
                        }
                    }
                }
                if (b4 === bV) {
                    if (bT == null) {
                        bA.error(b4)
                    } else {
                        break
                    }
                }
                bV = b4
            }
            return b1
        };
        bA.error = function(bT) {
            throw new Error("Syntax error, unrecognized expression: " + bT)
        };
        var by = bA.getText = function(bX) {
            var bV, bW, bT = bX.nodeType, bU = "";
            if (bT) {
                if (bT === 1 || bT === 9) {
                    if (typeof bX.textContent === "string") {
                        return bX.textContent
                    } else {
                        if (typeof bX.innerText === "string") {
                            return bX.innerText.replace(bQ, "")
                        } else {
                            for (bX = bX.firstChild; bX; bX = bX.nextSibling) {
                                bU += by(bX)
                            }
                        }
                    }
                } else {
                    if (bT === 3 || bT === 4) {
                        return bX.nodeValue
                    }
                }
            } else {
                for (bV = 0; (bW = bX[bV]); bV++) {
                    if (bW.nodeType !== 8) {
                        bU += by(bW)
                    }
                }
            }
            return bU
        };
        var bG = bA.selectors = {order: ["ID", "NAME", "TAG"], match: {ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/, CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/, NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/, ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/, TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/, CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/, POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/, PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/}, leftMatch: {}, attrMap: {"class": "className", "for": "htmlFor"}, attrHandle: {href: function(bT) {
                    return bT.getAttribute("href")
                }, type: function(bT) {
                    return bT.getAttribute("type")
                }}, relative: {"+": function(bZ, bU) {
                    var bW = typeof bU === "string", bY = bW && !bS.test(bU), b0 = bW && !bY;
                    if (bY) {
                        bU = bU.toLowerCase()
                    }
                    for (var bV = 0, bT = bZ.length, bX; bV < bT; bV++) {
                        if ((bX = bZ[bV])) {
                            while ((bX = bX.previousSibling) && bX.nodeType !== 1) {
                            }
                            bZ[bV] = b0 || bX && bX.nodeName.toLowerCase() === bU ? bX || false : bX === bU
                        }
                    }
                    if (b0) {
                        bA.filter(bU, bZ, true)
                    }
                }, ">": function(bZ, bU) {
                    var bY, bX = typeof bU === "string", bV = 0, bT = bZ.length;
                    if (bX && !bS.test(bU)) {
                        bU = bU.toLowerCase();
                        for (; bV < bT; bV++) {
                            bY = bZ[bV];
                            if (bY) {
                                var bW = bY.parentNode;
                                bZ[bV] = bW.nodeName.toLowerCase() === bU ? bW : false
                            }
                        }
                    } else {
                        for (; bV < bT; bV++) {
                            bY = bZ[bV];
                            if (bY) {
                                bZ[bV] = bX ? bY.parentNode : bY.parentNode === bU
                            }
                        }
                        if (bX) {
                            bA.filter(bU, bZ, true)
                        }
                    }
                }, "": function(bW, bU, bY) {
                    var bX, bV = bK++, bT = bP;
                    if (typeof bU === "string" && !bS.test(bU)) {
                        bU = bU.toLowerCase();
                        bX = bU;
                        bT = bx
                    }
                    bT("parentNode", bU, bV, bW, bX, bY)
                }, "~": function(bW, bU, bY) {
                    var bX, bV = bK++, bT = bP;
                    if (typeof bU === "string" && !bS.test(bU)) {
                        bU = bU.toLowerCase();
                        bX = bU;
                        bT = bx
                    }
                    bT("previousSibling", bU, bV, bW, bX, bY)
                }}, find: {ID: function(bU, bV, bW) {
                    if (typeof bV.getElementById !== "undefined" && !bW) {
                        var bT = bV.getElementById(bU[1]);
                        return bT && bT.parentNode ? [bT] : []
                    }
                }, NAME: function(bV, bY) {
                    if (typeof bY.getElementsByName !== "undefined") {
                        var bU = [], bX = bY.getElementsByName(bV[1]);
                        for (var bW = 0, bT = bX.length; bW < bT; bW++) {
                            if (bX[bW].getAttribute("name") === bV[1]) {
                                bU.push(bX[bW])
                            }
                        }
                        return bU.length === 0 ? null : bU
                    }
                }, TAG: function(bT, bU) {
                    if (typeof bU.getElementsByTagName !== "undefined") {
                        return bU.getElementsByTagName(bT[1])
                    }
                }}, preFilter: {CLASS: function(bW, bU, bV, bT, bZ, b0) {
                    bW = " " + bW[1].replace(bM, "") + " ";
                    if (b0) {
                        return bW
                    }
                    for (var bX = 0, bY; (bY = bU[bX]) != null; bX++) {
                        if (bY) {
                            if (bZ ^ (bY.className && (" " + bY.className + " ").replace(/[\t\n\r]/g, " ").indexOf(bW) >= 0)) {
                                if (!bV) {
                                    bT.push(bY)
                                }
                            } else {
                                if (bV) {
                                    bU[bX] = false
                                }
                            }
                        }
                    }
                    return false
                }, ID: function(bT) {
                    return bT[1].replace(bM, "")
                }, TAG: function(bU, bT) {
                    return bU[1].replace(bM, "").toLowerCase()
                }, CHILD: function(bT) {
                    if (bT[1] === "nth") {
                        if (!bT[2]) {
                            bA.error(bT[0])
                        }
                        bT[2] = bT[2].replace(/^\+|\s*/g, "");
                        var bU = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(bT[2] === "even" && "2n" || bT[2] === "odd" && "2n+1" || !/\D/.test(bT[2]) && "0n+" + bT[2] || bT[2]);
                        bT[2] = (bU[1] + (bU[2] || 1)) - 0;
                        bT[3] = bU[3] - 0
                    } else {
                        if (bT[2]) {
                            bA.error(bT[0])
                        }
                    }
                    bT[0] = bK++;
                    return bT
                }, ATTR: function(bX, bU, bV, bT, bY, bZ) {
                    var bW = bX[1] = bX[1].replace(bM, "");
                    if (!bZ && bG.attrMap[bW]) {
                        bX[1] = bG.attrMap[bW]
                    }
                    bX[4] = (bX[4] || bX[5] || "").replace(bM, "");
                    if (bX[2] === "~=") {
                        bX[4] = " " + bX[4] + " "
                    }
                    return bX
                }, PSEUDO: function(bX, bU, bV, bT, bY) {
                    if (bX[1] === "not") {
                        if ((bJ.exec(bX[3]) || "").length > 1 || /^\w/.test(bX[3])) {
                            bX[3] = bA(bX[3], null, null, bU)
                        } else {
                            var bW = bA.filter(bX[3], bU, bV, true ^ bY);
                            if (!bV) {
                                bT.push.apply(bT, bW)
                            }
                            return false
                        }
                    } else {
                        if (bG.match.POS.test(bX[0]) || bG.match.CHILD.test(bX[0])) {
                            return true
                        }
                    }
                    return bX
                }, POS: function(bT) {
                    bT.unshift(true);
                    return bT
                }}, filters: {enabled: function(bT) {
                    return bT.disabled === false && bT.type !== "hidden"
                }, disabled: function(bT) {
                    return bT.disabled === true
                }, checked: function(bT) {
                    return bT.checked === true
                }, selected: function(bT) {
                    if (bT.parentNode) {
                        bT.parentNode.selectedIndex
                    }
                    return bT.selected === true
                }, parent: function(bT) {
                    return !!bT.firstChild
                }, empty: function(bT) {
                    return !bT.firstChild
                }, has: function(bV, bU, bT) {
                    return !!bA(bT[3], bV).length
                }, header: function(bT) {
                    return(/h\d/i).test(bT.nodeName)
                }, text: function(bV) {
                    var bT = bV.getAttribute("type"), bU = bV.type;
                    return bV.nodeName.toLowerCase() === "input" && "text" === bU && (bT === bU || bT === null)
                }, radio: function(bT) {
                    return bT.nodeName.toLowerCase() === "input" && "radio" === bT.type
                }, checkbox: function(bT) {
                    return bT.nodeName.toLowerCase() === "input" && "checkbox" === bT.type
                }, file: function(bT) {
                    return bT.nodeName.toLowerCase() === "input" && "file" === bT.type
                }, password: function(bT) {
                    return bT.nodeName.toLowerCase() === "input" && "password" === bT.type
                }, submit: function(bU) {
                    var bT = bU.nodeName.toLowerCase();
                    return(bT === "input" || bT === "button") && "submit" === bU.type
                }, image: function(bT) {
                    return bT.nodeName.toLowerCase() === "input" && "image" === bT.type
                }, reset: function(bU) {
                    var bT = bU.nodeName.toLowerCase();
                    return(bT === "input" || bT === "button") && "reset" === bU.type
                }, button: function(bU) {
                    var bT = bU.nodeName.toLowerCase();
                    return bT === "input" && "button" === bU.type || bT === "button"
                }, input: function(bT) {
                    return(/input|select|textarea|button/i).test(bT.nodeName)
                }, focus: function(bT) {
                    return bT === bT.ownerDocument.activeElement
                }}, setFilters: {first: function(bU, bT) {
                    return bT === 0
                }, last: function(bV, bU, bT, bW) {
                    return bU === bW.length - 1
                }, even: function(bU, bT) {
                    return bT % 2 === 0
                }, odd: function(bU, bT) {
                    return bT % 2 === 1
                }, lt: function(bV, bU, bT) {
                    return bU < bT[3] - 0
                }, gt: function(bV, bU, bT) {
                    return bU > bT[3] - 0
                }, nth: function(bV, bU, bT) {
                    return bT[3] - 0 === bU
                }, eq: function(bV, bU, bT) {
                    return bT[3] - 0 === bU
                }}, filter: {PSEUDO: function(bV, b0, bZ, b1) {
                    var bT = b0[1], bU = bG.filters[bT];
                    if (bU) {
                        return bU(bV, bZ, b0, b1)
                    } else {
                        if (bT === "contains") {
                            return(bV.textContent || bV.innerText || by([bV]) || "").indexOf(b0[3]) >= 0
                        } else {
                            if (bT === "not") {
                                var bW = b0[3];
                                for (var bY = 0, bX = bW.length; bY < bX; bY++) {
                                    if (bW[bY] === bV) {
                                        return false
                                    }
                                }
                                return true
                            } else {
                                bA.error(bT)
                            }
                        }
                    }
                }, CHILD: function(bV, bX) {
                    var bW, b3, bZ, b2, bT, bY, b1, b0 = bX[1], bU = bV;
                    switch (b0) {
                        case"only":
                        case"first":
                            while ((bU = bU.previousSibling)) {
                                if (bU.nodeType === 1) {
                                    return false
                                }
                            }
                            if (b0 === "first") {
                                return true
                            }
                            bU = bV;
                        case"last":
                            while ((bU = bU.nextSibling)) {
                                if (bU.nodeType === 1) {
                                    return false
                                }
                            }
                            return true;
                        case"nth":
                            bW = bX[2];
                            b3 = bX[3];
                            if (bW === 1 && b3 === 0) {
                                return true
                            }
                            bZ = bX[0];
                            b2 = bV.parentNode;
                            if (b2 && (b2[bE] !== bZ || !bV.nodeIndex)) {
                                bY = 0;
                                for (bU = b2.firstChild; bU; bU = bU.nextSibling) {
                                    if (bU.nodeType === 1) {
                                        bU.nodeIndex = ++bY
                                    }
                                }
                                b2[bE] = bZ
                            }
                            b1 = bV.nodeIndex - b3;
                            if (bW === 0) {
                                return b1 === 0
                            } else {
                                return(b1 % bW === 0 && b1 / bW >= 0)
                            }
                        }
                }, ID: function(bU, bT) {
                    return bU.nodeType === 1 && bU.getAttribute("id") === bT
                }, TAG: function(bU, bT) {
                    return(bT === "*" && bU.nodeType === 1) || !!bU.nodeName && bU.nodeName.toLowerCase() === bT
                }, CLASS: function(bU, bT) {
                    return(" " + (bU.className || bU.getAttribute("class")) + " ").indexOf(bT) > -1
                }, ATTR: function(bY, bW) {
                    var bV = bW[1], bT = bA.attr ? bA.attr(bY, bV) : bG.attrHandle[bV] ? bG.attrHandle[bV](bY) : bY[bV] != null ? bY[bV] : bY.getAttribute(bV), bZ = bT + "", bX = bW[2], bU = bW[4];
                    return bT == null ? bX === "!=" : !bX && bA.attr ? bT != null : bX === "=" ? bZ === bU : bX === "*=" ? bZ.indexOf(bU) >= 0 : bX === "~=" ? (" " + bZ + " ").indexOf(bU) >= 0 : !bU ? bZ && bT !== false : bX === "!=" ? bZ !== bU : bX === "^=" ? bZ.indexOf(bU) === 0 : bX === "$=" ? bZ.substr(bZ.length - bU.length) === bU : bX === "|=" ? bZ === bU || bZ.substr(0, bU.length + 1) === bU + "-" : false
                }, POS: function(bX, bU, bV, bY) {
                    var bT = bU[2], bW = bG.setFilters[bT];
                    if (bW) {
                        return bW(bX, bV, bU, bY)
                    }
                }}};
        var bF = bG.match.POS, bz = function(bU, bT) {
            return"\\" + (bT - 0 + 1)
        };
        for (var bB in bG.match) {
            bG.match[bB] = new RegExp(bG.match[bB].source + (/(?![^\[]*\])(?![^\(]*\))/.source));
            bG.leftMatch[bB] = new RegExp(/(^(?:.|\r|\n)*?)/.source + bG.match[bB].source.replace(/\\(\d+)/g, bz))
        }
        var bH = function(bU, bT) {
            bU = Array.prototype.slice.call(bU, 0);
            if (bT) {
                bT.push.apply(bT, bU);
                return bT
            }
            return bU
        };
        try {
            Array.prototype.slice.call(ax.documentElement.childNodes, 0)[0].nodeType
        } catch (bR) {
            bH = function(bX, bW) {
                var bV = 0, bU = bW || [];
                if (bN.call(bX) === "[object Array]") {
                    Array.prototype.push.apply(bU, bX)
                } else {
                    if (typeof bX.length === "number") {
                        for (var bT = bX.length; bV < bT; bV++) {
                            bU.push(bX[bV])
                        }
                    } else {
                        for (; bX[bV]; bV++) {
                            bU.push(bX[bV])
                        }
                    }
                }
                return bU
            }
        }
        var bL, bI;
        if (ax.documentElement.compareDocumentPosition) {
            bL = function(bU, bT) {
                if (bU === bT) {
                    bD = true;
                    return 0
                }
                if (!bU.compareDocumentPosition || !bT.compareDocumentPosition) {
                    return bU.compareDocumentPosition ? -1 : 1
                }
                return bU.compareDocumentPosition(bT) & 4 ? -1 : 1
            }
        } else {
            bL = function(b1, b0) {
                if (b1 === b0) {
                    bD = true;
                    return 0
                } else {
                    if (b1.sourceIndex && b0.sourceIndex) {
                        return b1.sourceIndex - b0.sourceIndex
                    }
                }
                var bY, bU, bV = [], bT = [], bX = b1.parentNode, bZ = b0.parentNode, b2 = bX;
                if (bX === bZ) {
                    return bI(b1, b0)
                } else {
                    if (!bX) {
                        return -1
                    } else {
                        if (!bZ) {
                            return 1
                        }
                    }
                }
                while (b2) {
                    bV.unshift(b2);
                    b2 = b2.parentNode
                }
                b2 = bZ;
                while (b2) {
                    bT.unshift(b2);
                    b2 = b2.parentNode
                }
                bY = bV.length;
                bU = bT.length;
                for (var bW = 0; bW < bY && bW < bU; bW++) {
                    if (bV[bW] !== bT[bW]) {
                        return bI(bV[bW], bT[bW])
                    }
                }
                return bW === bY ? bI(b1, bT[bW], -1) : bI(bV[bW], b0, 1)
            };
            bI = function(bU, bT, bV) {
                if (bU === bT) {
                    return bV
                }
                var bW = bU.nextSibling;
                while (bW) {
                    if (bW === bT) {
                        return -1
                    }
                    bW = bW.nextSibling
                }
                return 1
            }
        }
        (function() {
            var bU = ax.createElement("div"), bV = "script" + (new Date()).getTime(), bT = ax.documentElement;
            bU.innerHTML = "<a name='" + bV + "'/>";
            bT.insertBefore(bU, bT.firstChild);
            if (ax.getElementById(bV)) {
                bG.find.ID = function(bX, bY, bZ) {
                    if (typeof bY.getElementById !== "undefined" && !bZ) {
                        var bW = bY.getElementById(bX[1]);
                        return bW ? bW.id === bX[1] || typeof bW.getAttributeNode !== "undefined" && bW.getAttributeNode("id").nodeValue === bX[1] ? [bW] : N : []
                    }
                };
                bG.filter.ID = function(bY, bW) {
                    var bX = typeof bY.getAttributeNode !== "undefined" && bY.getAttributeNode("id");
                    return bY.nodeType === 1 && bX && bX.nodeValue === bW
                }
            }
            bT.removeChild(bU);
            bT = bU = null
        })();
        (function() {
            var bT = ax.createElement("div");
            bT.appendChild(ax.createComment(""));
            if (bT.getElementsByTagName("*").length > 0) {
                bG.find.TAG = function(bU, bY) {
                    var bX = bY.getElementsByTagName(bU[1]);
                    if (bU[1] === "*") {
                        var bW = [];
                        for (var bV = 0; bX[bV]; bV++) {
                            if (bX[bV].nodeType === 1) {
                                bW.push(bX[bV])
                            }
                        }
                        bX = bW
                    }
                    return bX
                }
            }
            bT.innerHTML = "<a href='#'></a>";
            if (bT.firstChild && typeof bT.firstChild.getAttribute !== "undefined" && bT.firstChild.getAttribute("href") !== "#") {
                bG.attrHandle.href = function(bU) {
                    return bU.getAttribute("href", 2)
                }
            }
            bT = null
        })();
        if (ax.querySelectorAll) {
            (function() {
                var bT = bA, bW = ax.createElement("div"), bV = "__sizzle__";
                bW.innerHTML = "<p class='TEST'></p>";
                if (bW.querySelectorAll && bW.querySelectorAll(".TEST").length === 0) {
                    return
                }
                bA = function(b7, bY, b2, b6) {
                    bY = bY || ax;
                    if (!b6 && !bA.isXML(bY)) {
                        var b5 = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b7);
                        if (b5 && (bY.nodeType === 1 || bY.nodeType === 9)) {
                            if (b5[1]) {
                                return bH(bY.getElementsByTagName(b7), b2)
                            } else {
                                if (b5[2] && bG.find.CLASS && bY.getElementsByClassName) {
                                    return bH(bY.getElementsByClassName(b5[2]), b2)
                                }
                            }
                        }
                        if (bY.nodeType === 9) {
                            if (b7 === "body" && bY.body) {
                                return bH([bY.body], b2)
                            } else {
                                if (b5 && b5[3]) {
                                    var b1 = bY.getElementById(b5[3]);
                                    if (b1 && b1.parentNode) {
                                        if (b1.id === b5[3]) {
                                            return bH([b1], b2)
                                        }
                                    } else {
                                        return bH([], b2)
                                    }
                                }
                            }
                            try {
                                return bH(bY.querySelectorAll(b7), b2)
                            } catch (b3) {
                            }
                        } else {
                            if (bY.nodeType === 1 && bY.nodeName.toLowerCase() !== "object") {
                                var bZ = bY, b0 = bY.getAttribute("id"), bX = b0 || bV, b9 = bY.parentNode, b8 = /^\s*[+~]/.test(b7);
                                if (!b0) {
                                    bY.setAttribute("id", bX)
                                } else {
                                    bX = bX.replace(/'/g, "\\$&")
                                }
                                if (b8 && b9) {
                                    bY = bY.parentNode
                                }
                                try {
                                    if (!b8 || b9) {
                                        return bH(bY.querySelectorAll("[id='" + bX + "'] " + b7), b2)
                                    }
                                } catch (b4) {
                                } finally {
                                    if (!b0) {
                                        bZ.removeAttribute("id")
                                    }
                                }
                            }
                        }
                    }
                    return bT(b7, bY, b2, b6)
                };
                for (var bU in bT) {
                    bA[bU] = bT[bU]
                }
                bW = null
            })()
        }
        (function() {
            var bT = ax.documentElement, bV = bT.matchesSelector || bT.mozMatchesSelector || bT.webkitMatchesSelector || bT.msMatchesSelector;
            if (bV) {
                var bX = !bV.call(ax.createElement("div"), "div"), bU = false;
                try {
                    bV.call(ax.documentElement, "[test!='']:sizzle")
                } catch (bW) {
                    bU = true
                }
                bA.matchesSelector = function(bZ, b1) {
                    b1 = b1.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
                    if (!bA.isXML(bZ)) {
                        try {
                            if (bU || !bG.match.PSEUDO.test(b1) && !/!=/.test(b1)) {
                                var bY = bV.call(bZ, b1);
                                if (bY || !bX || bZ.document && bZ.document.nodeType !== 11) {
                                    return bY
                                }
                            }
                        } catch (b0) {
                        }
                    }
                    return bA(b1, null, null, [bZ]).length > 0
                }
            }
        })();
        (function() {
            var bT = ax.createElement("div");
            bT.innerHTML = "<div class='test e'></div><div class='test'></div>";
            if (!bT.getElementsByClassName || bT.getElementsByClassName("e").length === 0) {
                return
            }
            bT.lastChild.className = "e";
            if (bT.getElementsByClassName("e").length === 1) {
                return
            }
            bG.order.splice(1, 0, "CLASS");
            bG.find.CLASS = function(bU, bV, bW) {
                if (typeof bV.getElementsByClassName !== "undefined" && !bW) {
                    return bV.getElementsByClassName(bU[1])
                }
            };
            bT = null
        })();
        function bx(bU, bZ, bY, b2, b0, b1) {
            for (var bW = 0, bV = b2.length; bW < bV; bW++) {
                var bT = b2[bW];
                if (bT) {
                    var bX = false;
                    bT = bT[bU];
                    while (bT) {
                        if (bT[bE] === bY) {
                            bX = b2[bT.sizset];
                            break
                        }
                        if (bT.nodeType === 1 && !b1) {
                            bT[bE] = bY;
                            bT.sizset = bW
                        }
                        if (bT.nodeName.toLowerCase() === bZ) {
                            bX = bT;
                            break
                        }
                        bT = bT[bU]
                    }
                    b2[bW] = bX
                }
            }
        }
        function bP(bU, bZ, bY, b2, b0, b1) {
            for (var bW = 0, bV = b2.length; bW < bV; bW++) {
                var bT = b2[bW];
                if (bT) {
                    var bX = false;
                    bT = bT[bU];
                    while (bT) {
                        if (bT[bE] === bY) {
                            bX = b2[bT.sizset];
                            break
                        }
                        if (bT.nodeType === 1) {
                            if (!b1) {
                                bT[bE] = bY;
                                bT.sizset = bW
                            }
                            if (typeof bZ !== "string") {
                                if (bT === bZ) {
                                    bX = true;
                                    break
                                }
                            } else {
                                if (bA.filter(bZ, [bT]).length > 0) {
                                    bX = bT;
                                    break
                                }
                            }
                        }
                        bT = bT[bU]
                    }
                    b2[bW] = bX
                }
            }
        }
        if (ax.documentElement.contains) {
            bA.contains = function(bU, bT) {
                return bU !== bT && (bU.contains ? bU.contains(bT) : true)
            }
        } else {
            if (ax.documentElement.compareDocumentPosition) {
                bA.contains = function(bU, bT) {
                    return !!(bU.compareDocumentPosition(bT) & 16)
                }
            } else {
                bA.contains = function() {
                    return false
                }
            }
        }
        bA.isXML = function(bT) {
            var bU = (bT ? bT.ownerDocument || bT : 0).documentElement;
            return bU ? bU.nodeName !== "HTML" : false
        };
        var bO = function(bV, bT, bZ) {
            var bY, b0 = [], bX = "", b1 = bT.nodeType ? [bT] : bT;
            while ((bY = bG.match.PSEUDO.exec(bV))) {
                bX += bY[0];
                bV = bV.replace(bG.match.PSEUDO, "")
            }
            bV = bG.relative[bV] ? bV + "*" : bV;
            for (var bW = 0, bU = b1.length; bW < bU; bW++) {
                bA(bV, b1[bW], b0, bZ)
            }
            return bA.filter(bX, b0)
        };
        bA.attr = b.attr;
        bA.selectors.attrMap = {};
        b.find = bA;
        b.expr = bA.selectors;
        b.expr[":"] = b.expr.filters;
        b.unique = bA.uniqueSort;
        b.text = bA.getText;
        b.isXMLDoc = bA.isXML;
        b.contains = bA.contains
    })();
    var ad = /Until$/, at = /^(?:parents|prevUntil|prevAll)/, bb = /,/, br = /^.[^:#\[\.,]*$/, R = Array.prototype.slice, J = b.expr.match.POS, aA = {children: true, contents: true, next: true, prev: true};
    b.fn.extend({find: function(bx) {
            var bz = this, bB, by;
            if (typeof bx !== "string") {
                return b(bx).filter(function() {
                    for (bB = 0, by = bz.length; bB < by; bB++) {
                        if (b.contains(bz[bB], this)) {
                            return true
                        }
                    }
                })
            }
            var bA = this.pushStack("", "find", bx), bD, bE, bC;
            for (bB = 0, by = this.length; bB < by; bB++) {
                bD = bA.length;
                b.find(bx, this[bB], bA);
                if (bB > 0) {
                    for (bE = bD; bE < bA.length; bE++) {
                        for (bC = 0; bC < bD; bC++) {
                            if (bA[bC] === bA[bE]) {
                                bA.splice(bE--, 1);
                                break
                            }
                        }
                    }
                }
            }
            return bA
        }, has: function(by) {
            var bx = b(by);
            return this.filter(function() {
                for (var bA = 0, bz = bx.length; bA < bz; bA++) {
                    if (b.contains(this, bx[bA])) {
                        return true
                    }
                }
            })
        }, not: function(bx) {
            return this.pushStack(aI(this, bx, false), "not", bx)
        }, filter: function(bx) {
            return this.pushStack(aI(this, bx, true), "filter", bx)
        }, is: function(bx) {
            return !!bx && (typeof bx === "string" ? J.test(bx) ? b(bx, this.context).index(this[0]) >= 0 : b.filter(bx, this).length > 0 : this.filter(bx).length > 0)
        }, closest: function(bB, bA) {
            var by = [], bz, bx, bC = this[0];
            if (b.isArray(bB)) {
                var bE = 1;
                while (bC && bC.ownerDocument && bC !== bA) {
                    for (bz = 0; bz < bB.length; bz++) {
                        if (b(bC).is(bB[bz])) {
                            by.push({selector: bB[bz], elem: bC, level: bE})
                        }
                    }
                    bC = bC.parentNode;
                    bE++
                }
                return by
            }
            var bD = J.test(bB) || typeof bB !== "string" ? b(bB, bA || this.context) : 0;
            for (bz = 0, bx = this.length; bz < bx; bz++) {
                bC = this[bz];
                while (bC) {
                    if (bD ? bD.index(bC) > -1 : b.find.matchesSelector(bC, bB)) {
                        by.push(bC);
                        break
                    } else {
                        bC = bC.parentNode;
                        if (!bC || !bC.ownerDocument || bC === bA || bC.nodeType === 11) {
                            break
                        }
                    }
                }
            }
            by = by.length > 1 ? b.unique(by) : by;
            return this.pushStack(by, "closest", bB)
        }, index: function(bx) {
            if (!bx) {
                return(this[0] && this[0].parentNode) ? this.prevAll().length : -1
            }
            if (typeof bx === "string") {
                return b.inArray(this[0], b(bx))
            }
            return b.inArray(bx.jquery ? bx[0] : bx, this)
        }, add: function(bx, by) {
            var bA = typeof bx === "string" ? b(bx, by) : b.makeArray(bx && bx.nodeType ? [bx] : bx), bz = b.merge(this.get(), bA);
            return this.pushStack(E(bA[0]) || E(bz[0]) ? bz : b.unique(bz))
        }, andSelf: function() {
            return this.add(this.prevObject)
        }});
    function E(bx) {
        return !bx || !bx.parentNode || bx.parentNode.nodeType === 11
    }
    b.each({parent: function(by) {
            var bx = by.parentNode;
            return bx && bx.nodeType !== 11 ? bx : null
        }, parents: function(bx) {
            return b.dir(bx, "parentNode")
        }, parentsUntil: function(by, bx, bz) {
            return b.dir(by, "parentNode", bz)
        }, next: function(bx) {
            return b.nth(bx, 2, "nextSibling")
        }, prev: function(bx) {
            return b.nth(bx, 2, "previousSibling")
        }, nextAll: function(bx) {
            return b.dir(bx, "nextSibling")
        }, prevAll: function(bx) {
            return b.dir(bx, "previousSibling")
        }, nextUntil: function(by, bx, bz) {
            return b.dir(by, "nextSibling", bz)
        }, prevUntil: function(by, bx, bz) {
            return b.dir(by, "previousSibling", bz)
        }, siblings: function(bx) {
            return b.sibling(bx.parentNode.firstChild, bx)
        }, children: function(bx) {
            return b.sibling(bx.firstChild)
        }, contents: function(bx) {
            return b.nodeName(bx, "iframe") ? bx.contentDocument || bx.contentWindow.document : b.makeArray(bx.childNodes)
        }}, function(bx, by) {
        b.fn[bx] = function(bB, bz) {
            var bA = b.map(this, by, bB);
            if (!ad.test(bx)) {
                bz = bB
            }
            if (bz && typeof bz === "string") {
                bA = b.filter(bz, bA)
            }
            bA = this.length > 1 && !aA[bx] ? b.unique(bA) : bA;
            if ((this.length > 1 || bb.test(bz)) && at.test(bx)) {
                bA = bA.reverse()
            }
            return this.pushStack(bA, bx, R.call(arguments).join(","))
        }
    });
    b.extend({filter: function(bz, bx, by) {
            if (by) {
                bz = ":not(" + bz + ")"
            }
            return bx.length === 1 ? b.find.matchesSelector(bx[0], bz) ? [bx[0]] : [] : b.find.matches(bz, bx)
        }, dir: function(bz, by, bB) {
            var bx = [], bA = bz[by];
            while (bA && bA.nodeType !== 9 && (bB === N || bA.nodeType !== 1 || !b(bA).is(bB))) {
                if (bA.nodeType === 1) {
                    bx.push(bA)
                }
                bA = bA[by]
            }
            return bx
        }, nth: function(bB, bx, bz, bA) {
            bx = bx || 1;
            var by = 0;
            for (; bB; bB = bB[bz]) {
                if (bB.nodeType === 1 && ++by === bx) {
                    break
                }
            }
            return bB
        }, sibling: function(bz, by) {
            var bx = [];
            for (; bz; bz = bz.nextSibling) {
                if (bz.nodeType === 1 && bz !== by) {
                    bx.push(bz)
                }
            }
            return bx
        }});
    function aI(bA, bz, bx) {
        bz = bz || 0;
        if (b.isFunction(bz)) {
            return b.grep(bA, function(bC, bB) {
                var bD = !!bz.call(bC, bB, bC);
                return bD === bx
            })
        } else {
            if (bz.nodeType) {
                return b.grep(bA, function(bC, bB) {
                    return(bC === bz) === bx
                })
            } else {
                if (typeof bz === "string") {
                    var by = b.grep(bA, function(bB) {
                        return bB.nodeType === 1
                    });
                    if (br.test(bz)) {
                        return b.filter(bz, by, !bx)
                    } else {
                        bz = b.filter(bz, by)
                    }
                }
            }
        }
        return b.grep(bA, function(bC, bB) {
            return(b.inArray(bC, bz) >= 0) === bx
        })
    }
    function a(bx) {
        var bz = aT.split("|"), by = bx.createDocumentFragment();
        if (by.createElement) {
            while (bz.length) {
                by.createElement(bz.pop())
            }
        }
        return by
    }
    var aT = "abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", ai = / jQuery\d+="(?:\d+|null)"/g, au = /^\s+/, T = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig, d = /<([\w:]+)/, y = /<tbody/i, Y = /<|&#?\w+;/, ag = /<(?:script|style)/i, Q = /<(?:script|object|embed|option|style)/i, aj = new RegExp("<(?:" + aT + ")", "i"), p = /checked\s*(?:[^=]|=\s*.checked.)/i, bo = /\/(java|ecma)script/i, aP = /^\s*<!(?:\[CDATA\[|\-\-)/, az = {option: [1, "<select multiple='multiple'>", "</select>"], legend: [1, "<fieldset>", "</fieldset>"], thead: [1, "<table>", "</table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], area: [1, "<map>", "</map>"], _default: [0, "", ""]}, ae = a(ax);
    az.optgroup = az.option;
    az.tbody = az.tfoot = az.colgroup = az.caption = az.thead;
    az.th = az.td;
    if (!b.support.htmlSerialize) {
        az._default = [1, "div<div>", "</div>"]
    }
    b.fn.extend({text: function(bx) {
            if (b.isFunction(bx)) {
                return this.each(function(bz) {
                    var by = b(this);
                    by.text(bx.call(this, bz, by.text()))
                })
            }
            if (typeof bx !== "object" && bx !== N) {
                return this.empty().append((this[0] && this[0].ownerDocument || ax).createTextNode(bx))
            }
            return b.text(this)
        }, wrapAll: function(bx) {
            if (b.isFunction(bx)) {
                return this.each(function(bz) {
                    b(this).wrapAll(bx.call(this, bz))
                })
            }
            if (this[0]) {
                var by = b(bx, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    by.insertBefore(this[0])
                }
                by.map(function() {
                    var bz = this;
                    while (bz.firstChild && bz.firstChild.nodeType === 1) {
                        bz = bz.firstChild
                    }
                    return bz
                }).append(this)
            }
            return this
        }, wrapInner: function(bx) {
            if (b.isFunction(bx)) {
                return this.each(function(by) {
                    b(this).wrapInner(bx.call(this, by))
                })
            }
            return this.each(function() {
                var by = b(this), bz = by.contents();
                if (bz.length) {
                    bz.wrapAll(bx)
                } else {
                    by.append(bx)
                }
            })
        }, wrap: function(bx) {
            var by = b.isFunction(bx);
            return this.each(function(bz) {
                b(this).wrapAll(by ? bx.call(this, bz) : bx)
            })
        }, unwrap: function() {
            return this.parent().each(function() {
                if (!b.nodeName(this, "body")) {
                    b(this).replaceWith(this.childNodes)
                }
            }).end()
        }, append: function() {
            return this.domManip(arguments, true, function(bx) {
                if (this.nodeType === 1) {
                    this.appendChild(bx)
                }
            })
        }, prepend: function() {
            return this.domManip(arguments, true, function(bx) {
                if (this.nodeType === 1) {
                    this.insertBefore(bx, this.firstChild)
                }
            })
        }, before: function() {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false, function(by) {
                    this.parentNode.insertBefore(by, this)
                })
            } else {
                if (arguments.length) {
                    var bx = b.clean(arguments);
                    bx.push.apply(bx, this.toArray());
                    return this.pushStack(bx, "before", arguments)
                }
            }
        }, after: function() {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false, function(by) {
                    this.parentNode.insertBefore(by, this.nextSibling)
                })
            } else {
                if (arguments.length) {
                    var bx = this.pushStack(this, "after", arguments);
                    bx.push.apply(bx, b.clean(arguments));
                    return bx
                }
            }
        }, remove: function(bx, bA) {
            for (var by = 0, bz; (bz = this[by]) != null; by++) {
                if (!bx || b.filter(bx, [bz]).length) {
                    if (!bA && bz.nodeType === 1) {
                        b.cleanData(bz.getElementsByTagName("*"));
                        b.cleanData([bz])
                    }
                    if (bz.parentNode) {
                        bz.parentNode.removeChild(bz)
                    }
                }
            }
            return this
        }, empty: function() {
            for (var bx = 0, by; (by = this[bx]) != null; bx++) {
                if (by.nodeType === 1) {
                    b.cleanData(by.getElementsByTagName("*"))
                }
                while (by.firstChild) {
                    by.removeChild(by.firstChild)
                }
            }
            return this
        }, clone: function(by, bx) {
            by = by == null ? false : by;
            bx = bx == null ? by : bx;
            return this.map(function() {
                return b.clone(this, by, bx)
            })
        }, html: function(bz) {
            if (bz === N) {
                return this[0] && this[0].nodeType === 1 ? this[0].innerHTML.replace(ai, "") : null
            } else {
                if (typeof bz === "string" && !ag.test(bz) && (b.support.leadingWhitespace || !au.test(bz)) && !az[(d.exec(bz) || ["", ""])[1].toLowerCase()]) {
                    bz = bz.replace(T, "<$1></$2>");
                    try {
                        for (var by = 0, bx = this.length; by < bx; by++) {
                            if (this[by].nodeType === 1) {
                                b.cleanData(this[by].getElementsByTagName("*"));
                                this[by].innerHTML = bz
                            }
                        }
                    } catch (bA) {
                        this.empty().append(bz)
                    }
                } else {
                    if (b.isFunction(bz)) {
                        this.each(function(bC) {
                            var bB = b(this);
                            bB.html(bz.call(this, bC, bB.html()))
                        })
                    } else {
                        this.empty().append(bz)
                    }
                }
            }
            return this
        }, replaceWith: function(bx) {
            if (this[0] && this[0].parentNode) {
                if (b.isFunction(bx)) {
                    return this.each(function(bA) {
                        var bz = b(this), by = bz.html();
                        bz.replaceWith(bx.call(this, bA, by))
                    })
                }
                if (typeof bx !== "string") {
                    bx = b(bx).detach()
                }
                return this.each(function() {
                    var bz = this.nextSibling, by = this.parentNode;
                    b(this).remove();
                    if (bz) {
                        b(bz).before(bx)
                    } else {
                        b(by).append(bx)
                    }
                })
            } else {
                return this.length ? this.pushStack(b(b.isFunction(bx) ? bx() : bx), "replaceWith", bx) : this
            }
        }, detach: function(bx) {
            return this.remove(bx, true)
        }, domManip: function(bE, bI, bH) {
            var bA, bB, bD, bG, bF = bE[0], by = [];
            if (!b.support.checkClone && arguments.length === 3 && typeof bF === "string" && p.test(bF)) {
                return this.each(function() {
                    b(this).domManip(bE, bI, bH, true)
                })
            }
            if (b.isFunction(bF)) {
                return this.each(function(bK) {
                    var bJ = b(this);
                    bE[0] = bF.call(this, bK, bI ? bJ.html() : N);
                    bJ.domManip(bE, bI, bH)
                })
            }
            if (this[0]) {
                bG = bF && bF.parentNode;
                if (b.support.parentNode && bG && bG.nodeType === 11 && bG.childNodes.length === this.length) {
                    bA = {fragment: bG}
                } else {
                    bA = b.buildFragment(bE, this, by)
                }
                bD = bA.fragment;
                if (bD.childNodes.length === 1) {
                    bB = bD = bD.firstChild
                } else {
                    bB = bD.firstChild
                }
                if (bB) {
                    bI = bI && b.nodeName(bB, "tr");
                    for (var bz = 0, bx = this.length, bC = bx - 1; bz < bx; bz++) {
                        bH.call(bI ? bc(this[bz], bB) : this[bz], bA.cacheable || (bx > 1 && bz < bC) ? b.clone(bD, true, true) : bD)
                    }
                }
                if (by.length) {
                    b.each(by, bq)
                }
            }
            return this
        }});
    function bc(bx, by) {
        return b.nodeName(bx, "table") ? (bx.getElementsByTagName("tbody")[0] || bx.appendChild(bx.ownerDocument.createElement("tbody"))) : bx
    }
    function v(bE, by) {
        if (by.nodeType !== 1 || !b.hasData(bE)) {
            return
        }
        var bB, bA, bx, bD = b._data(bE), bC = b._data(by, bD), bz = bD.events;
        if (bz) {
            delete bC.handle;
            bC.events = {};
            for (bB in bz) {
                for (bA = 0, bx = bz[bB].length; bA < bx; bA++) {
                    b.event.add(by, bB + (bz[bB][bA].namespace ? "." : "") + bz[bB][bA].namespace, bz[bB][bA], bz[bB][bA].data)
                }
            }
        }
        if (bC.data) {
            bC.data = b.extend({}, bC.data)
        }
    }
    function ak(by, bx) {
        var bz;
        if (bx.nodeType !== 1) {
            return
        }
        if (bx.clearAttributes) {
            bx.clearAttributes()
        }
        if (bx.mergeAttributes) {
            bx.mergeAttributes(by)
        }
        bz = bx.nodeName.toLowerCase();
        if (bz === "object") {
            bx.outerHTML = by.outerHTML
        } else {
            if (bz === "input" && (by.type === "checkbox" || by.type === "radio")) {
                if (by.checked) {
                    bx.defaultChecked = bx.checked = by.checked
                }
                if (bx.value !== by.value) {
                    bx.value = by.value
                }
            } else {
                if (bz === "option") {
                    bx.selected = by.defaultSelected
                } else {
                    if (bz === "input" || bz === "textarea") {
                        bx.defaultValue = by.defaultValue
                    }
                }
            }
        }
        bx.removeAttribute(b.expando)
    }
    b.buildFragment = function(bC, bA, by) {
        var bB, bx, bz, bD, bE = bC[0];
        if (bA && bA[0]) {
            bD = bA[0].ownerDocument || bA[0]
        }
        if (!bD.createDocumentFragment) {
            bD = ax
        }
        if (bC.length === 1 && typeof bE === "string" && bE.length < 512 && bD === ax && bE.charAt(0) === "<" && !Q.test(bE) && (b.support.checkClone || !p.test(bE)) && (b.support.html5Clone || !aj.test(bE))) {
            bx = true;
            bz = b.fragments[bE];
            if (bz && bz !== 1) {
                bB = bz
            }
        }
        if (!bB) {
            bB = bD.createDocumentFragment();
            b.clean(bC, bD, bB, by)
        }
        if (bx) {
            b.fragments[bE] = bz ? bB : 1
        }
        return{fragment: bB, cacheable: bx}
    };
    b.fragments = {};
    b.each({appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith"}, function(bx, by) {
        b.fn[bx] = function(bz) {
            var bC = [], bF = b(bz), bE = this.length === 1 && this[0].parentNode;
            if (bE && bE.nodeType === 11 && bE.childNodes.length === 1 && bF.length === 1) {
                bF[by](this[0]);
                return this
            } else {
                for (var bD = 0, bA = bF.length; bD < bA; bD++) {
                    var bB = (bD > 0 ? this.clone(true) : this).get();
                    b(bF[bD])[by](bB);
                    bC = bC.concat(bB)
                }
                return this.pushStack(bC, bx, bF.selector)
            }
        }
    });
    function bi(bx) {
        if (typeof bx.getElementsByTagName !== "undefined") {
            return bx.getElementsByTagName("*")
        } else {
            if (typeof bx.querySelectorAll !== "undefined") {
                return bx.querySelectorAll("*")
            } else {
                return[]
            }
        }
    }
    function aB(bx) {
        if (bx.type === "checkbox" || bx.type === "radio") {
            bx.defaultChecked = bx.checked
        }
    }
    function G(bx) {
        var by = (bx.nodeName || "").toLowerCase();
        if (by === "input") {
            aB(bx)
        } else {
            if (by !== "script" && typeof bx.getElementsByTagName !== "undefined") {
                b.grep(bx.getElementsByTagName("input"), aB)
            }
        }
    }
    function an(bx) {
        var by = ax.createElement("div");
        ae.appendChild(by);
        by.innerHTML = bx.outerHTML;
        return by.firstChild
    }
    b.extend({clone: function(bB, bD, bz) {
            var bx, by, bA, bC = b.support.html5Clone || !aj.test("<" + bB.nodeName) ? bB.cloneNode(true) : an(bB);
            if ((!b.support.noCloneEvent || !b.support.noCloneChecked) && (bB.nodeType === 1 || bB.nodeType === 11) && !b.isXMLDoc(bB)) {
                ak(bB, bC);
                bx = bi(bB);
                by = bi(bC);
                for (bA = 0; bx[bA]; ++bA) {
                    if (by[bA]) {
                        ak(bx[bA], by[bA])
                    }
                }
            }
            if (bD) {
                v(bB, bC);
                if (bz) {
                    bx = bi(bB);
                    by = bi(bC);
                    for (bA = 0; bx[bA]; ++bA) {
                        v(bx[bA], by[bA])
                    }
                }
            }
            bx = by = null;
            return bC
        }, clean: function(bz, bB, bK, bD) {
            var bI;
            bB = bB || ax;
            if (typeof bB.createElement === "undefined") {
                bB = bB.ownerDocument || bB[0] && bB[0].ownerDocument || ax
            }
            var bL = [], bE;
            for (var bH = 0, bC; (bC = bz[bH]) != null; bH++) {
                if (typeof bC === "number") {
                    bC += ""
                }
                if (!bC) {
                    continue
                }
                if (typeof bC === "string") {
                    if (!Y.test(bC)) {
                        bC = bB.createTextNode(bC)
                    } else {
                        bC = bC.replace(T, "<$1></$2>");
                        var bN = (d.exec(bC) || ["", ""])[1].toLowerCase(), bA = az[bN] || az._default, bG = bA[0], by = bB.createElement("div");
                        if (bB === ax) {
                            ae.appendChild(by)
                        } else {
                            a(bB).appendChild(by)
                        }
                        by.innerHTML = bA[1] + bC + bA[2];
                        while (bG--) {
                            by = by.lastChild
                        }
                        if (!b.support.tbody) {
                            var bx = y.test(bC), bF = bN === "table" && !bx ? by.firstChild && by.firstChild.childNodes : bA[1] === "<table>" && !bx ? by.childNodes : [];
                            for (bE = bF.length - 1; bE >= 0; --bE) {
                                if (b.nodeName(bF[bE], "tbody") && !bF[bE].childNodes.length) {
                                    bF[bE].parentNode.removeChild(bF[bE])
                                }
                            }
                        }
                        if (!b.support.leadingWhitespace && au.test(bC)) {
                            by.insertBefore(bB.createTextNode(au.exec(bC)[0]), by.firstChild)
                        }
                        bC = by.childNodes
                    }
                }
                var bJ;
                if (!b.support.appendChecked) {
                    if (bC[0] && typeof(bJ = bC.length) === "number") {
                        for (bE = 0; bE < bJ; bE++) {
                            G(bC[bE])
                        }
                    } else {
                        G(bC)
                    }
                }
                if (bC.nodeType) {
                    bL.push(bC)
                } else {
                    bL = b.merge(bL, bC)
                }
            }
            if (bK) {
                bI = function(bO) {
                    return !bO.type || bo.test(bO.type)
                };
                for (bH = 0; bL[bH]; bH++) {
                    if (bD && b.nodeName(bL[bH], "script") && (!bL[bH].type || bL[bH].type.toLowerCase() === "text/javascript")) {
                        bD.push(bL[bH].parentNode ? bL[bH].parentNode.removeChild(bL[bH]) : bL[bH])
                    } else {
                        if (bL[bH].nodeType === 1) {
                            var bM = b.grep(bL[bH].getElementsByTagName("script"), bI);
                            bL.splice.apply(bL, [bH + 1, 0].concat(bM))
                        }
                        bK.appendChild(bL[bH])
                    }
                }
            }
            return bL
        }, cleanData: function(by) {
            var bB, bz, bx = b.cache, bE = b.event.special, bD = b.support.deleteExpando;
            for (var bC = 0, bA; (bA = by[bC]) != null; bC++) {
                if (bA.nodeName && b.noData[bA.nodeName.toLowerCase()]) {
                    continue
                }
                bz = bA[b.expando];
                if (bz) {
                    bB = bx[bz];
                    if (bB && bB.events) {
                        for (var bF in bB.events) {
                            if (bE[bF]) {
                                b.event.remove(bA, bF)
                            } else {
                                b.removeEvent(bA, bF, bB.handle)
                            }
                        }
                        if (bB.handle) {
                            bB.handle.elem = null
                        }
                    }
                    if (bD) {
                        delete bA[b.expando]
                    } else {
                        if (bA.removeAttribute) {
                            bA.removeAttribute(b.expando)
                        }
                    }
                    delete bx[bz]
                }
            }
        }});
    function bq(bx, by) {
        if (by.src) {
            b.ajax({url: by.src, async: false, dataType: "script"})
        } else {
            b.globalEval((by.text || by.textContent || by.innerHTML || "").replace(aP, "/*$0*/"))
        }
        if (by.parentNode) {
            by.parentNode.removeChild(by)
        }
    }
    var am = /alpha\([^)]*\)/i, aw = /opacity=([^)]*)/, B = /([A-Z]|^ms)/g, be = /^-?\d+(?:px)?$/i, bp = /^-?\d/, K = /^([\-+])=([\-+.\de]+)/, a9 = {position: "absolute", visibility: "hidden", display: "block"}, ap = ["Left", "Right"], a3 = ["Top", "Bottom"], ab, aK, aZ;
    b.fn.css = function(bx, by) {
        if (arguments.length === 2 && by === N) {
            return this
        }
        return b.access(this, bx, by, true, function(bA, bz, bB) {
            return bB !== N ? b.style(bA, bz, bB) : b.css(bA, bz)
        })
    };
    b.extend({cssHooks: {opacity: {get: function(bz, by) {
                    if (by) {
                        var bx = ab(bz, "opacity", "opacity");
                        return bx === "" ? "1" : bx
                    } else {
                        return bz.style.opacity
                    }
                }}}, cssNumber: {fillOpacity: true, fontWeight: true, lineHeight: true, opacity: true, orphans: true, widows: true, zIndex: true, zoom: true}, cssProps: {"float": b.support.cssFloat ? "cssFloat" : "styleFloat"}, style: function(bz, by, bF, bA) {
            if (!bz || bz.nodeType === 3 || bz.nodeType === 8 || !bz.style) {
                return
            }
            var bD, bE, bB = b.camelCase(by), bx = bz.style, bG = b.cssHooks[bB];
            by = b.cssProps[bB] || bB;
            if (bF !== N) {
                bE = typeof bF;
                if (bE === "string" && (bD = K.exec(bF))) {
                    bF = (+(bD[1] + 1) * +bD[2]) + parseFloat(b.css(bz, by));
                    bE = "number"
                }
                if (bF == null || bE === "number" && isNaN(bF)) {
                    return
                }
                if (bE === "number" && !b.cssNumber[bB]) {
                    bF += "px"
                }
                if (!bG || !("set" in bG) || (bF = bG.set(bz, bF)) !== N) {
                    try {
                        bx[by] = bF
                    } catch (bC) {
                    }
                }
            } else {
                if (bG && "get" in bG && (bD = bG.get(bz, false, bA)) !== N) {
                    return bD
                }
                return bx[by]
            }
        }, css: function(bB, bA, by) {
            var bz, bx;
            bA = b.camelCase(bA);
            bx = b.cssHooks[bA];
            bA = b.cssProps[bA] || bA;
            if (bA === "cssFloat") {
                bA = "float"
            }
            if (bx && "get" in bx && (bz = bx.get(bB, true, by)) !== N) {
                return bz
            } else {
                if (ab) {
                    return ab(bB, bA)
                }
            }
        }, swap: function(bA, bz, bB) {
            var bx = {};
            for (var by in bz) {
                bx[by] = bA.style[by];
                bA.style[by] = bz[by]
            }
            bB.call(bA);
            for (by in bz) {
                bA.style[by] = bx[by]
            }
        }});
    b.curCSS = b.css;
    b.each(["height", "width"], function(by, bx) {
        b.cssHooks[bx] = {get: function(bB, bA, bz) {
                var bC;
                if (bA) {
                    if (bB.offsetWidth !== 0) {
                        return q(bB, bx, bz)
                    } else {
                        b.swap(bB, a9, function() {
                            bC = q(bB, bx, bz)
                        })
                    }
                    return bC
                }
            }, set: function(bz, bA) {
                if (be.test(bA)) {
                    bA = parseFloat(bA);
                    if (bA >= 0) {
                        return bA + "px"
                    }
                } else {
                    return bA
                }
            }}
    });
    if (!b.support.opacity) {
        b.cssHooks.opacity = {get: function(by, bx) {
                return aw.test((bx && by.currentStyle ? by.currentStyle.filter : by.style.filter) || "") ? (parseFloat(RegExp.$1) / 100) + "" : bx ? "1" : ""
            }, set: function(bB, bC) {
                var bA = bB.style, by = bB.currentStyle, bx = b.isNumeric(bC) ? "alpha(opacity=" + bC * 100 + ")" : "", bz = by && by.filter || bA.filter || "";
                bA.zoom = 1;
                if (bC >= 1 && b.trim(bz.replace(am, "")) === "") {
                    bA.removeAttribute("filter");
                    if (by && !by.filter) {
                        return
                    }
                }
                bA.filter = am.test(bz) ? bz.replace(am, bx) : bz + " " + bx
            }}
    }
    b(function() {
        if (!b.support.reliableMarginRight) {
            b.cssHooks.marginRight = {get: function(bz, by) {
                    var bx;
                    b.swap(bz, {display: "inline-block"}, function() {
                        if (by) {
                            bx = ab(bz, "margin-right", "marginRight")
                        } else {
                            bx = bz.style.marginRight
                        }
                    });
                    return bx
                }}
        }
    });
    if (ax.defaultView && ax.defaultView.getComputedStyle) {
        aK = function(bB, bz) {
            var by, bA, bx;
            bz = bz.replace(B, "-$1").toLowerCase();
            if ((bA = bB.ownerDocument.defaultView) && (bx = bA.getComputedStyle(bB, null))) {
                by = bx.getPropertyValue(bz);
                if (by === "" && !b.contains(bB.ownerDocument.documentElement, bB)) {
                    by = b.style(bB, bz)
                }
            }
            return by
        }
    }
    if (ax.documentElement.currentStyle) {
        aZ = function(bC, bz) {
            var bD, bx, bB, by = bC.currentStyle && bC.currentStyle[bz], bA = bC.style;
            if (by === null && bA && (bB = bA[bz])) {
                by = bB
            }
            if (!be.test(by) && bp.test(by)) {
                bD = bA.left;
                bx = bC.runtimeStyle && bC.runtimeStyle.left;
                if (bx) {
                    bC.runtimeStyle.left = bC.currentStyle.left
                }
                bA.left = bz === "fontSize" ? "1em" : (by || 0);
                by = bA.pixelLeft + "px";
                bA.left = bD;
                if (bx) {
                    bC.runtimeStyle.left = bx
                }
            }
            return by === "" ? "auto" : by
        }
    }
    ab = aK || aZ;
    function q(bB, bz, by) {
        var bD = bz === "width" ? bB.offsetWidth : bB.offsetHeight, bC = bz === "width" ? ap : a3, bA = 0, bx = bC.length;
        if (bD > 0) {
            if (by !== "border") {
                for (; bA < bx; bA++) {
                    if (!by) {
                        bD -= parseFloat(b.css(bB, "padding" + bC[bA])) || 0
                    }
                    if (by === "margin") {
                        bD += parseFloat(b.css(bB, by + bC[bA])) || 0
                    } else {
                        bD -= parseFloat(b.css(bB, "border" + bC[bA] + "Width")) || 0
                    }
                }
            }
            return bD + "px"
        }
        bD = ab(bB, bz, bz);
        if (bD < 0 || bD == null) {
            bD = bB.style[bz] || 0
        }
        bD = parseFloat(bD) || 0;
        if (by) {
            for (; bA < bx; bA++) {
                bD += parseFloat(b.css(bB, "padding" + bC[bA])) || 0;
                if (by !== "padding") {
                    bD += parseFloat(b.css(bB, "border" + bC[bA] + "Width")) || 0
                }
                if (by === "margin") {
                    bD += parseFloat(b.css(bB, by + bC[bA])) || 0
                }
            }
        }
        return bD + "px"
    }
    if (b.expr && b.expr.filters) {
        b.expr.filters.hidden = function(bz) {
            var by = bz.offsetWidth, bx = bz.offsetHeight;
            return(by === 0 && bx === 0) || (!b.support.reliableHiddenOffsets && ((bz.style && bz.style.display) || b.css(bz, "display")) === "none")
        };
        b.expr.filters.visible = function(bx) {
            return !b.expr.filters.hidden(bx)
        }
    }
    var l = /%20/g, ar = /\[\]$/, bu = /\r?\n/g, bs = /#.*$/, aF = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, a1 = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i, aO = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/, aS = /^(?:GET|HEAD)$/, c = /^\/\//, O = /\?/, a8 = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, r = /^(?:select|textarea)/i, h = /\s+/, bt = /([?&])_=[^&]*/, M = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/, C = b.fn.load, ac = {}, s = {}, aG, u, aX = ["*/"] + ["*"];
    try {
        aG = bn.href
    } catch (ay) {
        aG = ax.createElement("a");
        aG.href = "";
        aG = aG.href
    }
    u = M.exec(aG.toLowerCase()) || [];
    function f(bx) {
        return function(bB, bD) {
            if (typeof bB !== "string") {
                bD = bB;
                bB = "*"
            }
            if (b.isFunction(bD)) {
                var bA = bB.toLowerCase().split(h), bz = 0, bC = bA.length, by, bE, bF;
                for (; bz < bC; bz++) {
                    by = bA[bz];
                    bF = /^\+/.test(by);
                    if (bF) {
                        by = by.substr(1) || "*"
                    }
                    bE = bx[by] = bx[by] || [];
                    bE[bF ? "unshift" : "push"](bD)
                }
            }
        }
    }
    function aY(by, bH, bC, bG, bE, bA) {
        bE = bE || bH.dataTypes[0];
        bA = bA || {};
        bA[bE] = true;
        var bD = by[bE], bz = 0, bx = bD ? bD.length : 0, bB = (by === ac), bF;
        for (; bz < bx && (bB || !bF); bz++) {
            bF = bD[bz](bH, bC, bG);
            if (typeof bF === "string") {
                if (!bB || bA[bF]) {
                    bF = N
                } else {
                    bH.dataTypes.unshift(bF);
                    bF = aY(by, bH, bC, bG, bF, bA)
                }
            }
        }
        if ((bB || !bF) && !bA["*"]) {
            bF = aY(by, bH, bC, bG, "*", bA)
        }
        return bF
    }
    function ao(bz, bA) {
        var by, bx, bB = b.ajaxSettings.flatOptions || {};
        for (by in bA) {
            if (bA[by] !== N) {
                (bB[by] ? bz : (bx || (bx = {})))[by] = bA[by]
            }
        }
        if (bx) {
            b.extend(true, bz, bx)
        }
    }
    b.fn.extend({load: function(bz, bC, bD) {
            if (typeof bz !== "string" && C) {
                return C.apply(this, arguments)
            } else {
                if (!this.length) {
                    return this
                }
            }
            var bB = bz.indexOf(" ");
            if (bB >= 0) {
                var bx = bz.slice(bB, bz.length);
                bz = bz.slice(0, bB)
            }
            var bA = "GET";
            if (bC) {
                if (b.isFunction(bC)) {
                    bD = bC;
                    bC = N
                } else {
                    if (typeof bC === "object") {
                        bC = b.param(bC, b.ajaxSettings.traditional);
                        bA = "POST"
                    }
                }
            }
            var by = this;
            b.ajax({url: bz, type: bA, dataType: "html", data: bC, complete: function(bF, bE, bG) {
                    bG = bF.responseText;
                    if (bF.isResolved()) {
                        bF.done(function(bH) {
                            bG = bH
                        });
                        by.html(bx ? b("<div>").append(bG.replace(a8, "")).find(bx) : bG)
                    }
                    if (bD) {
                        by.each(bD, [bG, bE, bF])
                    }
                }});
            return this
        }, serialize: function() {
            return b.param(this.serializeArray())
        }, serializeArray: function() {
            return this.map(function() {
                return this.elements ? b.makeArray(this.elements) : this
            }).filter(function() {
                return this.name && !this.disabled && (this.checked || r.test(this.nodeName) || a1.test(this.type))
            }).map(function(bx, by) {
                var bz = b(this).val();
                return bz == null ? null : b.isArray(bz) ? b.map(bz, function(bB, bA) {
                    return{name: by.name, value: bB.replace(bu, "\r\n")}
                }) : {name: by.name, value: bz.replace(bu, "\r\n")}
            }).get()
        }});
    b.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function(bx, by) {
        b.fn[by] = function(bz) {
            return this.on(by, bz)
        }
    });
    b.each(["get", "post"], function(bx, by) {
        b[by] = function(bz, bB, bC, bA) {
            if (b.isFunction(bB)) {
                bA = bA || bC;
                bC = bB;
                bB = N
            }
            return b.ajax({type: by, url: bz, data: bB, success: bC, dataType: bA})
        }
    });
    b.extend({getScript: function(bx, by) {
            return b.get(bx, N, by, "script")
        }, getJSON: function(bx, by, bz) {
            return b.get(bx, by, bz, "json")
        }, ajaxSetup: function(by, bx) {
            if (bx) {
                ao(by, b.ajaxSettings)
            } else {
                bx = by;
                by = b.ajaxSettings
            }
            ao(by, bx);
            return by
        }, ajaxSettings: {url: aG, isLocal: aO.test(u[1]), global: true, type: "GET", contentType: "application/x-www-form-urlencoded", processData: true, async: true, accepts: {xml: "application/xml, text/xml", html: "text/html", text: "text/plain", json: "application/json, text/javascript", "*": aX}, contents: {xml: /xml/, html: /html/, json: /json/}, responseFields: {xml: "responseXML", text: "responseText"}, converters: {"* text": bd.String, "text html": true, "text json": b.parseJSON, "text xml": b.parseXML}, flatOptions: {context: true, url: true}}, ajaxPrefilter: f(ac), ajaxTransport: f(s), ajax: function(bB, bz) {
            if (typeof bB === "object") {
                bz = bB;
                bB = N
            }
            bz = bz || {};
            var bF = b.ajaxSetup({}, bz), bU = bF.context || bF, bI = bU !== bF && (bU.nodeType || bU instanceof b) ? b(bU) : b.event, bT = b.Deferred(), bP = b.Callbacks("once memory"), bD = bF.statusCode || {}, bE, bJ = {}, bQ = {}, bS, bA, bN, bG, bK, bC = 0, by, bM, bL = {readyState: 0, setRequestHeader: function(bW, bX) {
                    if (!bC) {
                        var bV = bW.toLowerCase();
                        bW = bQ[bV] = bQ[bV] || bW;
                        bJ[bW] = bX
                    }
                    return this
                }, getAllResponseHeaders: function() {
                    return bC === 2 ? bS : null
                }, getResponseHeader: function(bW) {
                    var bV;
                    if (bC === 2) {
                        if (!bA) {
                            bA = {};
                            while ((bV = aF.exec(bS))) {
                                bA[bV[1].toLowerCase()] = bV[2]
                            }
                        }
                        bV = bA[bW.toLowerCase()]
                    }
                    return bV === N ? null : bV
                }, overrideMimeType: function(bV) {
                    if (!bC) {
                        bF.mimeType = bV
                    }
                    return this
                }, abort: function(bV) {
                    bV = bV || "abort";
                    if (bN) {
                        bN.abort(bV)
                    }
                    bH(0, bV);
                    return this
                }};
            function bH(b1, bW, b2, bY) {
                if (bC === 2) {
                    return
                }
                bC = 2;
                if (bG) {
                    clearTimeout(bG)
                }
                bN = N;
                bS = bY || "";
                bL.readyState = b1 > 0 ? 4 : 0;
                var bV, b6, b5, bZ = bW, b0 = b2 ? bl(bF, bL, b2) : N, bX, b4;
                if (b1 >= 200 && b1 < 300 || b1 === 304) {
                    if (bF.ifModified) {
                        if ((bX = bL.getResponseHeader("Last-Modified"))) {
                            b.lastModified[bE] = bX
                        }
                        if ((b4 = bL.getResponseHeader("Etag"))) {
                            b.etag[bE] = b4
                        }
                    }
                    if (b1 === 304) {
                        bZ = "notmodified";
                        bV = true
                    } else {
                        try {
                            b6 = I(bF, b0);
                            bZ = "success";
                            bV = true
                        } catch (b3) {
                            bZ = "parsererror";
                            b5 = b3
                        }
                    }
                } else {
                    b5 = bZ;
                    if (!bZ || b1) {
                        bZ = "error";
                        if (b1 < 0) {
                            b1 = 0
                        }
                    }
                }
                bL.status = b1;
                bL.statusText = "" + (bW || bZ);
                if (bV) {
                    bT.resolveWith(bU, [b6, bZ, bL])
                } else {
                    bT.rejectWith(bU, [bL, bZ, b5])
                }
                bL.statusCode(bD);
                bD = N;
                if (by) {
                    bI.trigger("ajax" + (bV ? "Success" : "Error"), [bL, bF, bV ? b6 : b5])
                }
                bP.fireWith(bU, [bL, bZ]);
                if (by) {
                    bI.trigger("ajaxComplete", [bL, bF]);
                    if (!(--b.active)) {
                        b.event.trigger("ajaxStop")
                    }
                }
            }
            bT.promise(bL);
            bL.success = bL.done;
            bL.error = bL.fail;
            bL.complete = bP.add;
            bL.statusCode = function(bW) {
                if (bW) {
                    var bV;
                    if (bC < 2) {
                        for (bV in bW) {
                            bD[bV] = [bD[bV], bW[bV]]
                        }
                    } else {
                        bV = bW[bL.status];
                        bL.then(bV, bV)
                    }
                }
                return this
            };
            bF.url = ((bB || bF.url) + "").replace(bs, "").replace(c, u[1] + "//");
            bF.dataTypes = b.trim(bF.dataType || "*").toLowerCase().split(h);
            if (bF.crossDomain == null) {
                bK = M.exec(bF.url.toLowerCase());
                bF.crossDomain = !!(bK && (bK[1] != u[1] || bK[2] != u[2] || (bK[3] || (bK[1] === "http:" ? 80 : 443)) != (u[3] || (u[1] === "http:" ? 80 : 443))))
            }
            if (bF.data && bF.processData && typeof bF.data !== "string") {
                bF.data = b.param(bF.data, bF.traditional)
            }
            aY(ac, bF, bz, bL);
            if (bC === 2) {
                return false
            }
            by = bF.global;
            bF.type = bF.type.toUpperCase();
            bF.hasContent = !aS.test(bF.type);
            if (by && b.active++ === 0) {
                b.event.trigger("ajaxStart")
            }
            if (!bF.hasContent) {
                if (bF.data) {
                    bF.url += (O.test(bF.url) ? "&" : "?") + bF.data;
                    delete bF.data
                }
                bE = bF.url;
                if (bF.cache === false) {
                    var bx = b.now(), bR = bF.url.replace(bt, "$1_=" + bx);
                    bF.url = bR + ((bR === bF.url) ? (O.test(bF.url) ? "&" : "?") + "_=" + bx : "")
                }
            }
            if (bF.data && bF.hasContent && bF.contentType !== false || bz.contentType) {
                bL.setRequestHeader("Content-Type", bF.contentType)
            }
            if (bF.ifModified) {
                bE = bE || bF.url;
                if (b.lastModified[bE]) {
                    bL.setRequestHeader("If-Modified-Since", b.lastModified[bE])
                }
                if (b.etag[bE]) {
                    bL.setRequestHeader("If-None-Match", b.etag[bE])
                }
            }
//            bL.setRequestHeader("QVUser", "SQLViews\\jog");
            bL.setRequestHeader("Accept", bF.dataTypes[0] && bF.accepts[bF.dataTypes[0]] ? bF.accepts[bF.dataTypes[0]] + (bF.dataTypes[0] !== "*" ? ", " + aX + "; q=0.01" : "") : bF.accepts["*"]);
            for (bM in bF.headers) {
                bL.setRequestHeader(bM, bF.headers[bM])
            }
            if (bF.beforeSend && (bF.beforeSend.call(bU, bL, bF) === false || bC === 2)) {
                bL.abort();
                return false
            }
            for (bM in {success: 1, error: 1, complete: 1}) {
                bL[bM](bF[bM])
            }
            bN = aY(s, bF, bz, bL);
            if (!bN) {
                bH(-1, "No Transport")
            } else {
                bL.readyState = 1;
                if (by) {
                    bI.trigger("ajaxSend", [bL, bF])
                }
                if (bF.async && bF.timeout > 0) {
                    bG = setTimeout(function() {
                        bL.abort("timeout")
                    }, bF.timeout)
                }
                try {
                    bC = 1;
                    bN.send(bJ, bH)
                } catch (bO) {
                    if (bC < 2) {
                        bH(-1, bO)
                    } else {
                        throw bO
                    }
                }
            }
            return bL
        }, param: function(bx, bz) {
            var by = [], bB = function(bC, bD) {
                bD = b.isFunction(bD) ? bD() : bD;
                by[by.length] = encodeURIComponent(bC) + "=" + encodeURIComponent(bD)
            };
            if (bz === N) {
                bz = b.ajaxSettings.traditional
            }
            if (b.isArray(bx) || (bx.jquery && !b.isPlainObject(bx))) {
                b.each(bx, function() {
                    bB(this.name, this.value)
                })
            } else {
                for (var bA in bx) {
                    x(bA, bx[bA], bz, bB)
                }
            }
            return by.join("&").replace(l, "+")
        }});
    function x(bz, bB, by, bA) {
        if (b.isArray(bB)) {
            b.each(bB, function(bD, bC) {
                if (by || ar.test(bz)) {
                    bA(bz, bC)
                } else {
                    x(bz + "[" + (typeof bC === "object" || b.isArray(bC) ? bD : "") + "]", bC, by, bA)
                }
            })
        } else {
            if (!by && bB != null && typeof bB === "object") {
                for (var bx in bB) {
                    x(bz + "[" + bx + "]", bB[bx], by, bA)
                }
            } else {
                bA(bz, bB)
            }
        }
    }
    b.extend({active: 0, lastModified: {}, etag: {}});
    function bl(bG, bF, bC) {
        var by = bG.contents, bE = bG.dataTypes, bz = bG.responseFields, bB, bD, bA, bx;
        for (bD in bz) {
            if (bD in bC) {
                bF[bz[bD]] = bC[bD]
            }
        }
        while (bE[0] === "*") {
            bE.shift();
            if (bB === N) {
                bB = bG.mimeType || bF.getResponseHeader("content-type")
            }
        }
        if (bB) {
            for (bD in by) {
                if (by[bD] && by[bD].test(bB)) {
                    bE.unshift(bD);
                    break
                }
            }
        }
        if (bE[0] in bC) {
            bA = bE[0]
        } else {
            for (bD in bC) {
                if (!bE[0] || bG.converters[bD + " " + bE[0]]) {
                    bA = bD;
                    break
                }
                if (!bx) {
                    bx = bD
                }
            }
            bA = bA || bx
        }
        if (bA) {
            if (bA !== bE[0]) {
                bE.unshift(bA)
            }
            return bC[bA]
        }
    }
    function I(bK, bC) {
        if (bK.dataFilter) {
            bC = bK.dataFilter(bC, bK.dataType)
        }
        var bG = bK.dataTypes, bJ = {}, bD, bH, bz = bG.length, bE, bF = bG[0], bA, bB, bI, by, bx;
        for (bD = 1; bD < bz; bD++) {
            if (bD === 1) {
                for (bH in bK.converters) {
                    if (typeof bH === "string") {
                        bJ[bH.toLowerCase()] = bK.converters[bH]
                    }
                }
            }
            bA = bF;
            bF = bG[bD];
            if (bF === "*") {
                bF = bA
            } else {
                if (bA !== "*" && bA !== bF) {
                    bB = bA + " " + bF;
                    bI = bJ[bB] || bJ["* " + bF];
                    if (!bI) {
                        bx = N;
                        for (by in bJ) {
                            bE = by.split(" ");
                            if (bE[0] === bA || bE[0] === "*") {
                                bx = bJ[bE[1] + " " + bF];
                                if (bx) {
                                    by = bJ[by];
                                    if (by === true) {
                                        bI = bx
                                    } else {
                                        if (bx === true) {
                                            bI = by
                                        }
                                    }
                                    break
                                }
                            }
                        }
                    }
                    if (!(bI || bx)) {
                        b.error("No conversion from " + bB.replace(" ", " to "))
                    }
                    if (bI !== true) {
                        bC = bI ? bI(bC) : bx(by(bC))
                    }
                }
            }
        }
        return bC
    }
    var aE = b.now(), w = /(\=)\?(&|$)|\?\?/i;
    b.ajaxSetup({jsonp: "callback", jsonpCallback: function() {
            return b.expando + "_" + (aE++)
        }});
    b.ajaxPrefilter("json jsonp", function(bG, bD, bF) {
        var bA = bG.contentType === "application/x-www-form-urlencoded" && (typeof bG.data === "string");
        if (bG.dataTypes[0] === "jsonp" || bG.jsonp !== false && (w.test(bG.url) || bA && w.test(bG.data))) {
            var bE, bz = bG.jsonpCallback = b.isFunction(bG.jsonpCallback) ? bG.jsonpCallback() : bG.jsonpCallback, bC = bd[bz], bx = bG.url, bB = bG.data, by = "$1" + bz + "$2";
            if (bG.jsonp !== false) {
                bx = bx.replace(w, by);
                if (bG.url === bx) {
                    if (bA) {
                        bB = bB.replace(w, by)
                    }
                    if (bG.data === bB) {
                        bx += (/\?/.test(bx) ? "&" : "?") + bG.jsonp + "=" + bz
                    }
                }
            }
            bG.url = bx;
            bG.data = bB;
            bd[bz] = function(bH) {
                bE = [bH]
            };
            bF.always(function() {
                bd[bz] = bC;
                if (bE && b.isFunction(bC)) {
                    bd[bz](bE[0])
                }
            });
            bG.converters["script json"] = function() {
                if (!bE) {
                    b.error(bz + " was not called")
                }
                return bE[0]
            };
            bG.dataTypes[0] = "json";
            return"script"
        }
    });
    b.ajaxSetup({accepts: {script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"}, contents: {script: /javascript|ecmascript/}, converters: {"text script": function(bx) {
                b.globalEval(bx);
                return bx
            }}});
    b.ajaxPrefilter("script", function(bx) {
        if (bx.cache === N) {
            bx.cache = false
        }
        if (bx.crossDomain) {
            bx.type = "GET";
            bx.global = false
        }
    });
    b.ajaxTransport("script", function(bz) {
        if (bz.crossDomain) {
            var bx, by = ax.head || ax.getElementsByTagName("head")[0] || ax.documentElement;
            return{send: function(bA, bB) {
                    bx = ax.createElement("script");
                    bx.async = "async";
                    if (bz.scriptCharset) {
                        bx.charset = bz.scriptCharset
                    }
                    bx.src = bz.url;
                    bx.onload = bx.onreadystatechange = function(bD, bC) {
                        if (bC || !bx.readyState || /loaded|complete/.test(bx.readyState)) {
                            bx.onload = bx.onreadystatechange = null;
                            if (by && bx.parentNode) {
                                by.removeChild(bx)
                            }
                            bx = N;
                            if (!bC) {
                                bB(200, "success")
                            }
                        }
                    };
                    by.insertBefore(bx, by.firstChild)
                }, abort: function() {
                    if (bx) {
                        bx.onload(0, 1)
                    }
                }}
        }
    });
    var D = bd.ActiveXObject ? function() {
        for (var bx in P) {
            P[bx](0, 1)
        }
    } : false, A = 0, P;
    function aN() {
        try {
            return new bd.XMLHttpRequest()
        } catch (bx) {
        }
    }
    function al() {
        try {
            return new bd.ActiveXObject("Microsoft.XMLHTTP")
        } catch (bx) {
        }
    }
    b.ajaxSettings.xhr = bd.ActiveXObject ? function() {
        return !this.isLocal && aN() || al()
    } : aN;
    (function(bx) {
        b.extend(b.support, {ajax: !!bx, cors: !!bx && ("withCredentials" in bx)})
    })(b.ajaxSettings.xhr());
    if (b.support.ajax) {
        b.ajaxTransport(function(bx) {
            if (!bx.crossDomain || b.support.cors) {
                var by;
                return{send: function(bE, bz) {
                        var bD = bx.xhr(), bC, bB;
                        if (bx.username) {
                            bD.open(bx.type, bx.url, bx.async, bx.username, bx.password)
                        } else {
                            bD.open(bx.type, bx.url, bx.async)
                        }
                        if (bx.xhrFields) {
                            for (bB in bx.xhrFields) {
                                bD[bB] = bx.xhrFields[bB]
                            }
                        }
                        if (bx.mimeType && bD.overrideMimeType) {
                            bD.overrideMimeType(bx.mimeType)
                        }
                        if (!bx.crossDomain && !bE["X-Requested-With"]) {
                            bE["X-Requested-With"] = "XMLHttpRequest"
                        }
                        try {
                            for (bB in bE) {
                                bD.setRequestHeader(bB, bE[bB])
                            }
                        } catch (bA) {
                        }
                        bD.send((bx.hasContent && bx.data) || null);
                        by = function(bN, bH) {
                            var bI, bG, bF, bL, bK;
                            try {
                                if (by && (bH || bD.readyState === 4)) {
                                    by = N;
                                    if (bC) {
                                        bD.onreadystatechange = b.noop;
                                        if (D) {
                                            delete P[bC]
                                        }
                                    }
                                    if (bH) {
                                        if (bD.readyState !== 4) {
                                            bD.abort()
                                        }
                                    } else {
                                        bI = bD.status;
                                        bF = bD.getAllResponseHeaders();
                                        bL = {};
                                        bK = bD.responseXML;
                                        if (bK && bK.documentElement) {
                                            bL.xml = bK
                                        }
                                        bL.text = bD.responseText;
                                        try {
                                            bG = bD.statusText
                                        } catch (bM) {
                                            bG = ""
                                        }
                                        if (!bI && bx.isLocal && !bx.crossDomain) {
                                            bI = bL.text ? 200 : 404
                                        } else {
                                            if (bI === 1223) {
                                                bI = 204
                                            }
                                        }
                                    }
                                }
                            } catch (bJ) {
                                if (!bH) {
                                    bz(-1, bJ)
                                }
                            }
                            if (bL) {
                                bz(bI, bG, bL, bF)
                            }
                        };
                        if (!bx.async || bD.readyState === 4) {
                            by()
                        } else {
                            bC = ++A;
                            if (D) {
                                if (!P) {
                                    P = {};
                                    b(bd).unload(D)
                                }
                                P[bC] = by
                            }
                            bD.onreadystatechange = by
                        }
                    }, abort: function() {
                        if (by) {
                            by(0, 1)
                        }
                    }}
            }
        })
    }
    var S = {}, ba, n, aD = /^(?:toggle|show|hide)$/, aV = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i, a5, aJ = [["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"], ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"], ["opacity"]], a6;
    b.fn.extend({show: function(bA, bD, bC) {
            var bz, bB;
            if (bA || bA === 0) {
                return this.animate(a2("show", 3), bA, bD, bC)
            } else {
                for (var by = 0, bx = this.length; by < bx; by++) {
                    bz = this[by];
                    if (bz.style) {
                        bB = bz.style.display;
                        if (!b._data(bz, "olddisplay") && bB === "none") {
                            bB = bz.style.display = ""
                        }
                        if (bB === "" && b.css(bz, "display") === "none") {
                            b._data(bz, "olddisplay", z(bz.nodeName))
                        }
                    }
                }
                for (by = 0; by < bx; by++) {
                    bz = this[by];
                    if (bz.style) {
                        bB = bz.style.display;
                        if (bB === "" || bB === "none") {
                            bz.style.display = b._data(bz, "olddisplay") || ""
                        }
                    }
                }
                return this
            }
        }, hide: function(bA, bD, bC) {
            if (bA || bA === 0) {
                return this.animate(a2("hide", 3), bA, bD, bC)
            } else {
                var bz, bB, by = 0, bx = this.length;
                for (; by < bx; by++) {
                    bz = this[by];
                    if (bz.style) {
                        bB = b.css(bz, "display");
                        if (bB !== "none" && !b._data(bz, "olddisplay")) {
                            b._data(bz, "olddisplay", bB)
                        }
                    }
                }
                for (by = 0; by < bx; by++) {
                    if (this[by].style) {
                        this[by].style.display = "none"
                    }
                }
                return this
            }
        }, _toggle: b.fn.toggle, toggle: function(bz, by, bA) {
            var bx = typeof bz === "boolean";
            if (b.isFunction(bz) && b.isFunction(by)) {
                this._toggle.apply(this, arguments)
            } else {
                if (bz == null || bx) {
                    this.each(function() {
                        var bB = bx ? bz : b(this).is(":hidden");
                        b(this)[bB ? "show" : "hide"]()
                    })
                } else {
                    this.animate(a2("toggle", 3), bz, by, bA)
                }
            }
            return this
        }, fadeTo: function(bx, bA, bz, by) {
            return this.filter(":hidden").css("opacity", 0).show().end().animate({opacity: bA}, bx, bz, by)
        }, animate: function(bC, bz, bB, bA) {
            var bx = b.speed(bz, bB, bA);
            if (b.isEmptyObject(bC)) {
                return this.each(bx.complete, [false])
            }
            bC = b.extend({}, bC);
            function by() {
                if (bx.queue === false) {
                    b._mark(this)
                }
                var bH = b.extend({}, bx), bN = this.nodeType === 1, bL = bN && b(this).is(":hidden"), bE, bI, bG, bM, bK, bF, bJ, bO, bD;
                bH.animatedProperties = {};
                for (bG in bC) {
                    bE = b.camelCase(bG);
                    if (bG !== bE) {
                        bC[bE] = bC[bG];
                        delete bC[bG]
                    }
                    bI = bC[bE];
                    if (b.isArray(bI)) {
                        bH.animatedProperties[bE] = bI[1];
                        bI = bC[bE] = bI[0]
                    } else {
                        bH.animatedProperties[bE] = bH.specialEasing && bH.specialEasing[bE] || bH.easing || "swing"
                    }
                    if (bI === "hide" && bL || bI === "show" && !bL) {
                        return bH.complete.call(this)
                    }
                    if (bN && (bE === "height" || bE === "width")) {
                        bH.overflow = [this.style.overflow, this.style.overflowX, this.style.overflowY];
                        if (b.css(this, "display") === "inline" && b.css(this, "float") === "none") {
                            if (!b.support.inlineBlockNeedsLayout || z(this.nodeName) === "inline") {
                                this.style.display = "inline-block"
                            } else {
                                this.style.zoom = 1
                            }
                        }
                    }
                }
                if (bH.overflow != null) {
                    this.style.overflow = "hidden"
                }
                for (bG in bC) {
                    bM = new b.fx(this, bH, bG);
                    bI = bC[bG];
                    if (aD.test(bI)) {
                        bD = b._data(this, "toggle" + bG) || (bI === "toggle" ? bL ? "show" : "hide" : 0);
                        if (bD) {
                            b._data(this, "toggle" + bG, bD === "show" ? "hide" : "show");
                            bM[bD]()
                        } else {
                            bM[bI]()
                        }
                    } else {
                        bK = aV.exec(bI);
                        bF = bM.cur();
                        if (bK) {
                            bJ = parseFloat(bK[2]);
                            bO = bK[3] || (b.cssNumber[bG] ? "" : "px");
                            if (bO !== "px") {
                                b.style(this, bG, (bJ || 1) + bO);
                                bF = ((bJ || 1) / bM.cur()) * bF;
                                b.style(this, bG, bF + bO)
                            }
                            if (bK[1]) {
                                bJ = ((bK[1] === "-=" ? -1 : 1) * bJ) + bF
                            }
                            bM.custom(bF, bJ, bO)
                        } else {
                            bM.custom(bF, bI, "")
                        }
                    }
                }
                return true
            }
            return bx.queue === false ? this.each(by) : this.queue(bx.queue, by)
        }, stop: function(bz, by, bx) {
            if (typeof bz !== "string") {
                bx = by;
                by = bz;
                bz = N
            }
            if (by && bz !== false) {
                this.queue(bz || "fx", [])
            }
            return this.each(function() {
                var bA, bB = false, bD = b.timers, bC = b._data(this);
                if (!bx) {
                    b._unmark(true, this)
                }
                function bE(bH, bI, bG) {
                    var bF = bI[bG];
                    b.removeData(bH, bG, true);
                    bF.stop(bx)
                }
                if (bz == null) {
                    for (bA in bC) {
                        if (bC[bA] && bC[bA].stop && bA.indexOf(".run") === bA.length - 4) {
                            bE(this, bC, bA)
                        }
                    }
                } else {
                    if (bC[bA = bz + ".run"] && bC[bA].stop) {
                        bE(this, bC, bA)
                    }
                }
                for (bA = bD.length; bA--; ) {
                    if (bD[bA].elem === this && (bz == null || bD[bA].queue === bz)) {
                        if (bx) {
                            bD[bA](true)
                        } else {
                            bD[bA].saveState()
                        }
                        bB = true;
                        bD.splice(bA, 1)
                    }
                }
                if (!(bx && bB)) {
                    b.dequeue(this, bz)
                }
            })
        }});
    function bj() {
        setTimeout(av, 0);
        return(a6 = b.now())
    }
    function av() {
        a6 = N
    }
    function a2(by, bx) {
        var bz = {};
        b.each(aJ.concat.apply([], aJ.slice(0, bx)), function() {
            bz[this] = by
        });
        return bz
    }
    b.each({slideDown: a2("show", 1), slideUp: a2("hide", 1), slideToggle: a2("toggle", 1), fadeIn: {opacity: "show"}, fadeOut: {opacity: "hide"}, fadeToggle: {opacity: "toggle"}}, function(bx, by) {
        b.fn[bx] = function(bz, bB, bA) {
            return this.animate(by, bz, bB, bA)
        }
    });
    b.extend({speed: function(bz, bA, by) {
            var bx = bz && typeof bz === "object" ? b.extend({}, bz) : {complete: by || !by && bA || b.isFunction(bz) && bz, duration: bz, easing: by && bA || bA && !b.isFunction(bA) && bA};
            bx.duration = b.fx.off ? 0 : typeof bx.duration === "number" ? bx.duration : bx.duration in b.fx.speeds ? b.fx.speeds[bx.duration] : b.fx.speeds._default;
            if (bx.queue == null || bx.queue === true) {
                bx.queue = "fx"
            }
            bx.old = bx.complete;
            bx.complete = function(bB) {
                if (b.isFunction(bx.old)) {
                    bx.old.call(this)
                }
                if (bx.queue) {
                    b.dequeue(this, bx.queue)
                } else {
                    if (bB !== false) {
                        b._unmark(this)
                    }
                }
            };
            return bx
        }, easing: {linear: function(bz, bA, bx, by) {
                return bx + by * bz
            }, swing: function(bz, bA, bx, by) {
                return((-Math.cos(bz * Math.PI) / 2) + 0.5) * by + bx
            }}, timers: [], fx: function(by, bx, bz) {
            this.options = bx;
            this.elem = by;
            this.prop = bz;
            bx.orig = bx.orig || {}
        }});
    b.fx.prototype = {update: function() {
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this)
            }
            (b.fx.step[this.prop] || b.fx.step._default)(this)
        }, cur: function() {
            if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) {
                return this.elem[this.prop]
            }
            var bx, by = b.css(this.elem, this.prop);
            return isNaN(bx = parseFloat(by)) ? !by || by === "auto" ? 0 : by : bx
        }, custom: function(bC, bB, bA) {
            var bx = this, bz = b.fx;
            this.startTime = a6 || bj();
            this.end = bB;
            this.now = this.start = bC;
            this.pos = this.state = 0;
            this.unit = bA || this.unit || (b.cssNumber[this.prop] ? "" : "px");
            function by(bD) {
                return bx.step(bD)
            }
            by.queue = this.options.queue;
            by.elem = this.elem;
            by.saveState = function() {
                if (bx.options.hide && b._data(bx.elem, "fxshow" + bx.prop) === N) {
                    b._data(bx.elem, "fxshow" + bx.prop, bx.start)
                }
            };
            if (by() && b.timers.push(by) && !a5) {
                a5 = setInterval(bz.tick, bz.interval)
            }
        }, show: function() {
            var bx = b._data(this.elem, "fxshow" + this.prop);
            this.options.orig[this.prop] = bx || b.style(this.elem, this.prop);
            this.options.show = true;
            if (bx !== N) {
                this.custom(this.cur(), bx)
            } else {
                this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur())
            }
            b(this.elem).show()
        }, hide: function() {
            this.options.orig[this.prop] = b._data(this.elem, "fxshow" + this.prop) || b.style(this.elem, this.prop);
            this.options.hide = true;
            this.custom(this.cur(), 0)
        }, step: function(bB) {
            var bD, bE, by, bA = a6 || bj(), bx = true, bC = this.elem, bz = this.options;
            if (bB || bA >= bz.duration + this.startTime) {
                this.now = this.end;
                this.pos = this.state = 1;
                this.update();
                bz.animatedProperties[this.prop] = true;
                for (bD in bz.animatedProperties) {
                    if (bz.animatedProperties[bD] !== true) {
                        bx = false
                    }
                }
                if (bx) {
                    if (bz.overflow != null && !b.support.shrinkWrapBlocks) {
                        b.each(["", "X", "Y"], function(bF, bG) {
                            bC.style["overflow" + bG] = bz.overflow[bF]
                        })
                    }
                    if (bz.hide) {
                        b(bC).hide()
                    }
                    if (bz.hide || bz.show) {
                        for (bD in bz.animatedProperties) {
                            b.style(bC, bD, bz.orig[bD]);
                            b.removeData(bC, "fxshow" + bD, true);
                            b.removeData(bC, "toggle" + bD, true)
                        }
                    }
                    by = bz.complete;
                    if (by) {
                        bz.complete = false;
                        by.call(bC)
                    }
                }
                return false
            } else {
                if (bz.duration == Infinity) {
                    this.now = bA
                } else {
                    bE = bA - this.startTime;
                    this.state = bE / bz.duration;
                    this.pos = b.easing[bz.animatedProperties[this.prop]](this.state, bE, 0, 1, bz.duration);
                    this.now = this.start + ((this.end - this.start) * this.pos)
                }
                this.update()
            }
            return true
        }};
    b.extend(b.fx, {tick: function() {
            var bz, by = b.timers, bx = 0;
            for (; bx < by.length; bx++) {
                bz = by[bx];
                if (!bz() && by[bx] === bz) {
                    by.splice(bx--, 1)
                }
            }
            if (!by.length) {
                b.fx.stop()
            }
        }, interval: 13, stop: function() {
            clearInterval(a5);
            a5 = null
        }, speeds: {slow: 600, fast: 200, _default: 400}, step: {opacity: function(bx) {
                b.style(bx.elem, "opacity", bx.now)
            }, _default: function(bx) {
                if (bx.elem.style && bx.elem.style[bx.prop] != null) {
                    bx.elem.style[bx.prop] = bx.now + bx.unit
                } else {
                    bx.elem[bx.prop] = bx.now
                }
            }}});
    b.each(["width", "height"], function(bx, by) {
        b.fx.step[by] = function(bz) {
            b.style(bz.elem, by, Math.max(0, bz.now) + bz.unit)
        }
    });
    if (b.expr && b.expr.filters) {
        b.expr.filters.animated = function(bx) {
            return b.grep(b.timers, function(by) {
                return bx === by.elem
            }).length
        }
    }
    function z(bA) {
        if (!S[bA]) {
            var bx = ax.body, by = b("<" + bA + ">").appendTo(bx), bz = by.css("display");
            by.remove();
            if (bz === "none" || bz === "") {
                if (!ba) {
                    ba = ax.createElement("iframe");
                    ba.frameBorder = ba.width = ba.height = 0
                }
                bx.appendChild(ba);
                if (!n || !ba.createElement) {
                    n = (ba.contentWindow || ba.contentDocument).document;
                    n.write((ax.compatMode === "CSS1Compat" ? "<!doctype html>" : "") + "<html><body>");
                    n.close()
                }
                by = n.createElement(bA);
                n.body.appendChild(by);
                bz = b.css(by, "display");
                bx.removeChild(ba)
            }
            S[bA] = bz
        }
        return S[bA]
    }
    var X = /^t(?:able|d|h)$/i, af = /^(?:body|html)$/i;
    if ("getBoundingClientRect" in ax.documentElement) {
        b.fn.offset = function(bK) {
            var bA = this[0], bD;
            if (bK) {
                return this.each(function(bL) {
                    b.offset.setOffset(this, bK, bL)
                })
            }
            if (!bA || !bA.ownerDocument) {
                return null
            }
            if (bA === bA.ownerDocument.body) {
                return b.offset.bodyOffset(bA)
            }
            try {
                bD = bA.getBoundingClientRect()
            } catch (bH) {
            }
            var bJ = bA.ownerDocument, by = bJ.documentElement;
            if (!bD || !b.contains(by, bA)) {
                return bD ? {top: bD.top, left: bD.left} : {top: 0, left: 0}
            }
            var bE = bJ.body, bF = aM(bJ), bC = by.clientTop || bE.clientTop || 0, bG = by.clientLeft || bE.clientLeft || 0, bx = bF.pageYOffset || b.support.boxModel && by.scrollTop || bE.scrollTop, bB = bF.pageXOffset || b.support.boxModel && by.scrollLeft || bE.scrollLeft, bI = bD.top + bx - bC, bz = bD.left + bB - bG;
            return{top: bI, left: bz}
        }
    } else {
        b.fn.offset = function(bI) {
            var bC = this[0];
            if (bI) {
                return this.each(function(bJ) {
                    b.offset.setOffset(this, bI, bJ)
                })
            }
            if (!bC || !bC.ownerDocument) {
                return null
            }
            if (bC === bC.ownerDocument.body) {
                return b.offset.bodyOffset(bC)
            }
            var bF, bz = bC.offsetParent, by = bC, bH = bC.ownerDocument, bA = bH.documentElement, bD = bH.body, bE = bH.defaultView, bx = bE ? bE.getComputedStyle(bC, null) : bC.currentStyle, bG = bC.offsetTop, bB = bC.offsetLeft;
            while ((bC = bC.parentNode) && bC !== bD && bC !== bA) {
                if (b.support.fixedPosition && bx.position === "fixed") {
                    break
                }
                bF = bE ? bE.getComputedStyle(bC, null) : bC.currentStyle;
                bG -= bC.scrollTop;
                bB -= bC.scrollLeft;
                if (bC === bz) {
                    bG += bC.offsetTop;
                    bB += bC.offsetLeft;
                    if (b.support.doesNotAddBorder && !(b.support.doesAddBorderForTableAndCells && X.test(bC.nodeName))) {
                        bG += parseFloat(bF.borderTopWidth) || 0;
                        bB += parseFloat(bF.borderLeftWidth) || 0
                    }
                    by = bz;
                    bz = bC.offsetParent
                }
                if (b.support.subtractsBorderForOverflowNotVisible && bF.overflow !== "visible") {
                    bG += parseFloat(bF.borderTopWidth) || 0;
                    bB += parseFloat(bF.borderLeftWidth) || 0
                }
                bx = bF
            }
            if (bx.position === "relative" || bx.position === "static") {
                bG += bD.offsetTop;
                bB += bD.offsetLeft
            }
            if (b.support.fixedPosition && bx.position === "fixed") {
                bG += Math.max(bA.scrollTop, bD.scrollTop);
                bB += Math.max(bA.scrollLeft, bD.scrollLeft)
            }
            return{top: bG, left: bB}
        }
    }
    b.offset = {bodyOffset: function(bx) {
            var bz = bx.offsetTop, by = bx.offsetLeft;
            if (b.support.doesNotIncludeMarginInBodyOffset) {
                bz += parseFloat(b.css(bx, "marginTop")) || 0;
                by += parseFloat(b.css(bx, "marginLeft")) || 0
            }
            return{top: bz, left: by}
        }, setOffset: function(bA, bJ, bD) {
            var bE = b.css(bA, "position");
            if (bE === "static") {
                bA.style.position = "relative"
            }
            var bC = b(bA), by = bC.offset(), bx = b.css(bA, "top"), bH = b.css(bA, "left"), bI = (bE === "absolute" || bE === "fixed") && b.inArray("auto", [bx, bH]) > -1, bG = {}, bF = {}, bz, bB;
            if (bI) {
                bF = bC.position();
                bz = bF.top;
                bB = bF.left
            } else {
                bz = parseFloat(bx) || 0;
                bB = parseFloat(bH) || 0
            }
            if (b.isFunction(bJ)) {
                bJ = bJ.call(bA, bD, by)
            }
            if (bJ.top != null) {
                bG.top = (bJ.top - by.top) + bz
            }
            if (bJ.left != null) {
                bG.left = (bJ.left - by.left) + bB
            }
            if ("using" in bJ) {
                bJ.using.call(bA, bG)
            } else {
                bC.css(bG)
            }
        }};
    b.fn.extend({position: function() {
            if (!this[0]) {
                return null
            }
            var bz = this[0], by = this.offsetParent(), bA = this.offset(), bx = af.test(by[0].nodeName) ? {top: 0, left: 0} : by.offset();
            bA.top -= parseFloat(b.css(bz, "marginTop")) || 0;
            bA.left -= parseFloat(b.css(bz, "marginLeft")) || 0;
            bx.top += parseFloat(b.css(by[0], "borderTopWidth")) || 0;
            bx.left += parseFloat(b.css(by[0], "borderLeftWidth")) || 0;
            return{top: bA.top - bx.top, left: bA.left - bx.left}
        }, offsetParent: function() {
            return this.map(function() {
                var bx = this.offsetParent || ax.body;
                while (bx && (!af.test(bx.nodeName) && b.css(bx, "position") === "static")) {
                    bx = bx.offsetParent
                }
                return bx
            })
        }});
    b.each(["Left", "Top"], function(by, bx) {
        var bz = "scroll" + bx;
        b.fn[bz] = function(bC) {
            var bA, bB;
            if (bC === N) {
                bA = this[0];
                if (!bA) {
                    return null
                }
                bB = aM(bA);
                return bB ? ("pageXOffset" in bB) ? bB[by ? "pageYOffset" : "pageXOffset"] : b.support.boxModel && bB.document.documentElement[bz] || bB.document.body[bz] : bA[bz]
            }
            return this.each(function() {
                bB = aM(this);
                if (bB) {
                    bB.scrollTo(!by ? bC : b(bB).scrollLeft(), by ? bC : b(bB).scrollTop())
                } else {
                    this[bz] = bC
                }
            })
        }
    });
    function aM(bx) {
        return b.isWindow(bx) ? bx : bx.nodeType === 9 ? bx.defaultView || bx.parentWindow : false
    }
    b.each(["Height", "Width"], function(by, bx) {
        var bz = bx.toLowerCase();
        b.fn["inner" + bx] = function() {
            var bA = this[0];
            return bA ? bA.style ? parseFloat(b.css(bA, bz, "padding")) : this[bz]() : null
        };
        b.fn["outer" + bx] = function(bB) {
            var bA = this[0];
            return bA ? bA.style ? parseFloat(b.css(bA, bz, bB ? "margin" : "border")) : this[bz]() : null
        };
        b.fn[bz] = function(bC) {
            var bD = this[0];
            if (!bD) {
                return bC == null ? null : this
            }
            if (b.isFunction(bC)) {
                return this.each(function(bH) {
                    var bG = b(this);
                    bG[bz](bC.call(this, bH, bG[bz]()))
                })
            }
            if (b.isWindow(bD)) {
                var bE = bD.document.documentElement["client" + bx], bA = bD.document.body;
                return bD.document.compatMode === "CSS1Compat" && bE || bA && bA["client" + bx] || bE
            } else {
                if (bD.nodeType === 9) {
                    return Math.max(bD.documentElement["client" + bx], bD.body["scroll" + bx], bD.documentElement["scroll" + bx], bD.body["offset" + bx], bD.documentElement["offset" + bx])
                } else {
                    if (bC === N) {
                        var bF = b.css(bD, bz), bB = parseFloat(bF);
                        return b.isNumeric(bB) ? bB : bF
                    } else {
                        return this.css(bz, typeof bC === "string" ? bC : bC + "px")
                    }
                }
            }
        }
    });
    bd.jQuery = bd.$ = b;
    if (typeof define === "function" && define.amd && define.amd.jQuery) {
        define("jquery", [], function() {
            return b
        })
    }
})(window);
(function(a) {
    a.fn.extend({getPath: function(b) {
            b = b || false;
            function c(f) {
                var d = f.tagName + ":eq(" + a(f).index() + ")", g = a(f).parent()[0];
                if (g && g.tagName !== undefined && (!b || g.tagName !== "BODY")) {
                    d = [c(g), d].join(" ")
                }
                return d
            }
            return this.length > 0 ? c(this[0]) : ""
        }})
})(jQuery);
/*! Build 11.20.12018.0 */
Qva = {Debug: {DisableFileCache: true, AllowMouseEventsIfTouch: false, SimulateTouchDevice: false, UseConsolelog: false}, IS_WORKBENCH: false, IS_WEBPARTS: false};
if (!Object.keys) {
    Object.keys = Object.keys || function(c) {
        var a = [];
        for (var b in c) {
            if (c.hasOwnProperty(b)) {
                a.push(b)
            }
        }
        return a
    }
}
Qva.agent = navigator.userAgent.toLowerCase();
IS_IPAD = Qva.agent.indexOf("ipad") !== -1;
IS_IPHONE = Qva.agent.indexOf("iphone") !== -1;
IS_CHROME = Qva.agent.indexOf("chrome") != -1 && Qva.agent.indexOf("webkit") != -1;
IS_SAFARI = !IS_CHROME && (Qva.agent.indexOf("safari") != -1 || Qva.agent.indexOf("konqueror") != -1);
IS_WEBKIT = IS_CHROME || IS_SAFARI || Qva.agent.indexOf("webkit") != -1;
IS_OPERA = Qva.agent.indexOf("opera") != -1;
IS_GECKO = !IS_WEBKIT && Qva.agent.indexOf("gecko") != -1;
if (IS_GECKO) {
    GECKO_VERSION = parseFloat(Qva.agent.substr(Qva.agent.search("firefox") + 8, 3))
}
IS_MAC = Qva.agent.indexOf("macintosh") != -1;
IS_IE = Qva.agent.indexOf("msie") != -1;
IS_IE10_OR_ABOVE = false;
IS_IE10_IE7MODE = false;
IE_DOCMODE = document.documentMode;
if (IS_IE) {
    IE_VERSION = parseFloat(Qva.agent.substr(Qva.agent.search("msie") + 4, 4));
    IS_IE64BIT = Qva.agent.indexOf("x64") != -1;
    if (typeof IE_DOCMODE == "undefined") {
        IE_DOCMODE = IE_VERSION
    }
    IS_IE6_OR_IE7 = (IE_VERSION < 8 && IE_DOCMODE < 8);
    IS_IE8_OR_BELOW = (IE_VERSION < 9 && IE_DOCMODE < 9);
    IS_IE10_OR_ABOVE = (IE_VERSION > 9 && IE_DOCMODE > 9);
    if (Qva.agent.indexOf("trident/6") > -1 && IE_VERSION == 7) {
        IS_IE10_IE7MODE = true
    } else {
        IS_IE10_IE7MODE = false
    }
} else {
    IS_IE6_OR_IE7 = false;
    IS_IE8_OR_BELOW = false
}
IS_ANDROID = Qva.agent.indexOf("android") !== -1;
IS_PLAYBOOK = Qva.agent.indexOf("playbook") !== -1;
IS_MOBILE = Qva.agent.indexOf("mobile") != -1;
IS_TOUCHENABLED = "ontouchstart" in window || Qva.Debug.SimulateTouchDevice;
delete (Qva.agent);
if (!IS_IE) {
    HTMLElement.prototype.__defineGetter__("innerText", function() {
        return this.textContent
    });
    HTMLElement.prototype.__defineSetter__("innerText", function(a) {
        this.textContent = a
    });
    Event.prototype.__defineGetter__("srcElement", function() {
        return(this.target.nodeType == Node.ELEMENT_NODE) ? this.target : this.target.parentNode
    });
    Event.prototype.__defineGetter__("toElement", function() {
        return(this.type == "mouseout") ? this.relatedTarget : (this.type == "mouseover") ? this.srcElement : null
    })
}
if (typeof XMLDocument === "undefined" && typeof Document !== "undefined") {
    XMLDocument = Document
}
function clone(b) {
    var d = {};
    for (var a in b) {
        d[a] = b[a]
    }
    return d
}
function purge(f) {
    var b = f.attributes, d = 0, a = 0, c = "";
    if (b) {
        for (d = b.length - 1; d >= 0; d--) {
            c = b[d].name;
            if (typeof f[c] === "function") {
                f[c] = null
            }
        }
    }
    if (f.childNodes) {
        for (d = 0, a = f.childNodes.length; d < a; ++d) {
            purge(f.childNodes[d])
        }
    }
}
Qva.binders = {};
Qva.GetBinder = function(d, b) {
    var a = Qva.binders[d || ""];
    if (!a && b) {
        a = new Qva.PageBinding(d);
        a.View = b;
        if (Qva.Modal && !Qva.Modal.instance) {
            new Qva.Modal()
        }
        var c = Qva.GetBinder();
        if (c) {
            a.Autoview = c.Autoview;
            a.Remote = c.Remote;
            a.JSON = c.JSON
        }
    }
    return a
};
Qva.Start = function() {
    Qva.DPI = 96;
    debugVal = Qva.ExtractProperty("Debug", "false");
    if (debugVal.toLowerCase() === "true") {
        for (propName in Qva.Debug) {
            if (Qva.Debug.hasOwnProperty(propName)) {
                debugVal = Qva.ExtractProperty(propName, "", "false");
                if (debugVal !== "") {
                    if (debugVal.toLowerCase() === "true" || debugVal.toLowerCase() === "false") {
                        Qva.Debug[propName] = debugVal === "true"
                    } else {
                        Qva.Debug[propName] = debugVal
                    }
                    alert(propName + ": " + Qva.Debug[propName])
                }
            }
        }
    }
    Qva.IsElementSupportingKeyDownAndUp = function(g) {
        if (g == null || typeof g == "undefined") {
            return false
        }
        return $.grep(g.AvqMgr.Managers, function(h) {
            return(typeof h.IsSupportingKeyUpAndDown != "undefined")
        }).length > 0
    };
    Qva.IsBrowserScrollbarsVisible = function() {
        var h = $(document).height();
        var g = $(window).height() + $(window).scrollTop();
        if (h != g) {
            return true
        }
        return false
    };
    function b() {
        if (Qva.Scanner && Qva.Scanner.instance) {
            Qva.Scanner.instance.Start()
        }
        for (var h in Qva.binders) {
            Qva.binders[h].Start()
        }
        $(document).bind("keydown", function(j) {
            if (j.keyCode !== 40 && j.keyCode !== 38) {
                return true
            }
            if (Qva.IsBrowserScrollbarsVisible() === true) {
                if (Qva.ActiveObjects && Qva.ActiveObjects.length > 0) {
                    if (Qva.IsElementSupportingKeyDownAndUp(document.getElementById(Qva.ActiveObjects[0])) === true) {
                        j.preventDefault();
                        return false
                    }
                }
            }
            return true
        });
        if (document.addEventListener) {
            document.addEventListener("keyup", function(j) {
                Qva.OnKeyUp(j)
            }, false);
            document.addEventListener("keypress", function(j) {
                Qva.OnKeyPress(j)
            }, false);
            try {
                if (window.parent && window.parent != window) {
                    window.parent.addEventListener("keyup", function(j) {
                        Qva.OnKeyUp(j)
                    }, false);
                    window.parent.addEventListener("keypress", function(j) {
                        Qva.OnKeyPress(j)
                    }, false)
                }
            } catch (g) {
            }
        } else {
            document.attachEvent("onkeyup", function(j) {
                Qva.OnKeyUp(j)
            });
            document.attachEvent("onkeypress", function(j) {
                Qva.OnKeyPress(j)
            })
        }
        if (IS_TOUCHENABLED) {
            document.ontouchend = function(j) {
                Qva.OnDocumentClick(j)
            }
        } else {
            document.onclick = function(j) {
                Qva.OnDocumentClick(j)
            };
            if (!(Qva.IS_WORKBENCH || Qva.IS_WEBPARTS)) {
                window.onscroll = Qva.ResizeBody
            }
        }
    }
    var c = Qva.ExtractProperty("userid", null, true);
    var d = Qva.ExtractProperty("password", null, true);
    if (c === "" || d === "") {
        Qva.RemainingRetries = parseInt(Qva.ExtractProperty("retry", "3"));
        if (isNaN(Qva.RemainingRetries)) {
            Qva.RemainingRetries = 3
        }
        var f = true;
        var a = {LabelClick: false, Refresh: function() {
                if (!f) {
                    return
                }
                f = false;
                b()
            }};
        Qva.Modal.instance.Show(a, Qva.Remote + (Qva.Remote.indexOf("?") >= 0 ? "&" : "?") + "public=only&name=login.htm&userid=" + Qva.EncodeComponent(c))
    } else {
        b()
    }
    if (typeof(Qva.dropDialog) !== "undefined") {
        Qva.dropDialog.create(true)
    }
    if (IS_IE8_OR_BELOW) {
        Qva.ReplacePngUrlsInStyleSheetsWithGif()
    }
    if (Qva.QvAjaxZfcPath.toLowerCase().indexOf("proxy.aspx") > 0) {
        setTimeout(Qva.AddProxyToUrlsInStyleSheets, 40)
    }
    if (Qva.BodyOnLoadFunctionNames.length > 0) {
        window.setTimeout(Qva.ExecuteBodyOnLoadFunctionNames, 40)
    }
};
Qva.OnDocumentClick = function(c) {
    if (IS_GECKO) {
        if (c.button == 2) {
            return
        }
    }
    Qva.HideContextMenu();
    Qva.ClosePopupInput();
    Qva.CloseMessagePopup();
    if (!Qva.LabelClick) {
        return
    }
    if (!Qva.DocumentClick) {
        return
    }
    if (document.activeElement && document.activeElement.onchange) {
        try {
            document.activeElement.onchange();
            document.activeElement.blur()
        } catch (b) {
        }
    }
    for (var d in Qva.binders) {
        var a = Qva.binders[d];
        if (!a.Enabled) {
            continue
        }
        a.Set("Document", "click", "", true)
    }
};
Qva.PopupInput = null;
Qva.ContextMenu = null;
Qva.ContextMenuMgr = null;
Qva.ContextDropDown = null;
Qva.ContextDialog = null;
Qva.ActiveObjects = null;
Qva.ActiveObjectsCloak = false;
Qva.SearchableObject = null;
Qva.StandardActions = null;
Qva.ActiveElement = null;
Qva.LabelClick = true;
Qva.QvAjaxZfcPath = "/QvAjaxZfc/";
Qva.Remote = "/QvAjaxZfc/QvsViewClient.aspx";
Qva.BodyOnLoadFunctionNames = [];
Qva.Proxy = null;
Qva.CSS = [];
Qva.DocumentClick = true;
try {
    if (window.parent && window.parent != window && window.parent.Qva) {
        Qva.Remote = window.parent.Qva.Remote;
        Qva.QvAjaxZfcPath = window.parent.Qva.QvAjaxZfcPath
    }
} catch (e) {
}
Qva.ElementAttributes = new Array();
Qva.DocStamps = new Array();
Qva.ElementCache = new Array();
Qva.MobileCache = new Array();
Qva.Detached = new Array();
Qva.traditional = false;
Qva.UseTraditional = function(a) {
    var b = "";
    if (Qva.traditional || !a) {
        return true
    }
    if (!$(a).attr("objType")) {
        if (a.className.indexOf("_LB") > -1) {
            b = "Listbox"
        }
    } else {
        b = $(a).attr("objType")
    }
    switch (b) {
        case"Listbox":
            return false;
        default:
            return true
        }
};
Qva.ElementAttributesHandler = function(h, g, b, d, f, c) {
    var a = Qva.ElementAttributes[h];
    if (!a) {
        if (d) {
            a = [g, {docstamp: d}]
        } else {
            a = [g, {docstamp: "000000"}]
        }
        if (!f) {
            f = g[b]
        }
    } else {
        if (!a[1][b] && !f) {
            f = g[b]
        }
        if (a[1]["docstamp"] == "000000" && d) {
            a[1]["docstamp"] = d
        }
    }
    if (f && (!a[1][b] || c)) {
        a[1][b] = f;
        Qva.ElementAttributes[h] = a;
        if (!c) {
            Qva.ElementInitialPositioner()
        }
    }
    return a[1][b]
};
Qva.ElementInitialPositioner = function() {
    for (var f in Qva.ElementAttributes) {
        if (typeof(Qva.ElementAttributes[f][1]) == "undefined") {
            continue
        }
        if (Qva.ElementAttributes[f][1]["docstamp"] == "000000") {
            var h, k, b, l, c, j, a, d, g, m;
            g = Qva.ElementAttributes[f][0];
            if (!g.rect) {
                h = $(g).css("left");
                k = $(g).css("top");
                c = $(g).css("width");
                b = parseInt(Qva.ElementAttributes[f][1]["left"]);
                l = parseInt(Qva.ElementAttributes[f][1]["top"]);
                a = parseInt(Qva.ElementAttributes[f][1]["initwidth"]);
                if (h != (b + "px") && h != b && !isNaN(b)) {
                    $(g).css("left", b)
                }
                if (k != (l + "px") && k != l && !isNaN(l)) {
                    $(g).css("top", l)
                }
                if (c != (a + "px") && c != a && !isNaN(a)) {
                    $(g).css("width", a)
                }
            }
        }
    }
};
Qva.ElementCacheHandler = function(b, h, a, l, j) {
    var k = Qva.ElementCache, c = [], d = false, g = 0, f = "";
    if (h) {
        if ((k.length > 0 && k[0][2] != a) || b) {
            Qva.ElementCache = []
        }
        d = Qva.CheckElementCache(l);
        if (!d) {
            if (b) {
                f = "complete"
            }
            Qva.ElementCache.push([l, h, a, j, f])
        }
    }
    return Qva.ElementCache
};
Qva.CheckElementCache = function(d) {
    var a = Qva.ElementCache, c = false, b = 0;
    while (b < a.length && !c) {
        if (a[b][0] == d) {
            c = true
        }
        b++
    }
    return c
};
Qva.ElementAttributesSync = function() {
    for (var a in Qva.ElementAttributes) {
        if (typeof(Qva.ElementAttributes[a][1]) == "undefined") {
            continue
        }
        if (!("indexOf" in Array.prototype)) {
            if ($.find(Qva.ElementAttributes[a][1]["docstamp"], Qva.DocStamps) == -1) {
                delete (Qva.ElementAttributes[a])
            }
        } else {
            if (Qva.DocStamps.indexOf(Qva.ElementAttributes[a][1]["docstamp"]) == -1) {
                delete (Qva.ElementAttributes[a])
            }
        }
    }
};
Qva.GetStamp = function(a) {
    var c = false, b = 40;
    if (!a) {
        return null
    } else {
        while ((!a.PageBinder || !a.PageBinder.Stamp) && b > 0) {
            a = a.PageBinder;
            b--
        }
        if (a.PageBinder.Stamp) {
            c = a.PageBinder.Stamp
        }
        return c
    }
};
Qva.StampHandler = function(d, b, a) {
    if (!b || typeof b != "number") {
        b = 300
    }
    if (typeof a == "boolean" && a) {
        Qva.DocStamps = []
    }
    var f = false;
    for (var c = 0; c < b; c++) {
        if (Qva.DocStamps[c] == d) {
            f = true
        }
    }
    if (!f) {
        if (Qva.DocStamps.length < b) {
            Qva.DocStamps.push(d)
        } else {
            Qva.DocStamps.splice(0, 1);
            Qva.DocStamps.push(d)
        }
        Qva.ElementAttributesSync()
    }
};
Qva.GetChildByClassName = function(f, c) {
    var b = $(f).find("*"), a = b.length, d = false, g = "";
    while (!d && a > 0) {
        if (b[a]) {
            if (b[a] && b[a].className == c) {
                d = true;
                g = b[a]
            }
        }
        a--
    }
    return g
};
Qva.SetMaxWidths = function(b) {
    var a = Qva.GetViewportWidth();
    if (!b) {
        if ($("#QvAjaxToolbar")) {
            $("#QvAjaxToolbar").css("width", a + "px")
        }
        if ($("#Tabrow")) {
            $("#Tabrow").css("width", a + "px")
        }
    } else {
        $(b).css("width", a + "px")
    }
};
Qva.PageBinding = function(d) {
    this.ID = d || "";
    this.binderid = this.ID;
    if (Qva.binders[this.ID]) {
        alert("Need unique binderid");
        return
    }
    Qva.binders[this.ID] = this;
    this.Translations = {};
    this.ColorDepth = 0;
    this.OnUpdateBegin = null;
    this.IsUpdating = false;
    this.HasPendingLoad = false;
    this.ScrollLeftToRemember = 0;
    this.ScrollTopToRemember = 0;
    this.IsPartialLoad = false;
    this.CurrentLoadIsPartial = false;
    this.Enabled = false;
    this.First = true;
    this.Managers = new Array();
    this.Members = {};
    this.UsePost = true;
    this.JSON = false;
    this.Body = "";
    this.InitialSets = "";
    this.Mark = "";
    this.Stamp = "";
    this.Slot = "";
    this.RecursiveReadyLevel = 0;
    this.ShowMessage = Qva.DefaultShowMessage;
    this.OnSessionLost = Qva.DefaultOnSessionLost;
    this.OnUpdateComplete = Qva.NoAction;
    this.OnCreateContextMenu = Qva.DefaultOnCreateContextMenu;
    this.AllowComAgent = true;
    this.InlineStyle = true;
    this.TableLimit = 5000;
    this.Ident = null;
    this.GlobalSearchObject = "";
    this.PendingSearchName = "";
    this.PendingSearchKeyName = "";
    this.DelaySet = false;
    this.DefaultScope = "Document";
    this.CustomIcons = {};
    this.BookmarksMgr = new Qva.Mgr.bookmarks(this, ".Bookmarks");
    this.SelectionStyleMgr = new Qva.Mgr.selectionsstyle(this, ".SelectionStyle");
    this.AggregationMgr = new Qva.Mgr.Documentdata(this, ".PropertyData.Aggregation");
    this.FunctionMgr = new Qva.Mgr.Documentdata(this, ".PropertyData.Function");
    this.VariableMgr = new Qva.Mgr.Documentdata(this, ".PropertyData.Variable");
    this.FieldMgr = new Qva.Mgr.Documentdata(this, ".PropertyData.Field");
    this.CurrentSelectionMgr = new Qva.Mgr.CurrentSelection(this);
    this.TranslationsMgr = new Qva.Mgr.translations(this, ".StandardActions");
    this.BookmarksSubscribers = [];
    this.UpdateBookMarks = function() {
        for (var f = 0; f < this.BookmarksSubscribers.length; f++) {
            this.BookmarksSubscribers[f].Paint(this.BookmarksMgr)
        }
    };
    this.VisibilitySubscriberList = {};
    this.SubscribeToVisibility = function(f, g) {
        this.VisibilitySubscriberList[f] = g
    };
    this.SignalVisibility = function(f, g) {
        if (this.VisibilitySubscriberList[f]) {
            this.VisibilitySubscriberList[f](g)
        }
    };
    this.ReportsMgr = new Qva.Mgr.reports(this, ".Reports");
    this.ReportsSubscribers = [];
    this.UpdateReports = function() {
        for (var f = 0; f < this.ReportsSubscribers.length; f++) {
            this.ReportsSubscribers[f].Paint(this.ReportsMgr)
        }
    };
    this.AsyncPostPaintMgrQueue = [];
    this.AsyncPostPaintMgrQueuePrio = [];
    this.postPaintTimeout = null;
    this.ToolWindowZLevel = {SetZLevel: function(f, h) {
            var g = this.dialogs[f];
            if (this.dialogs[f]) {
                if (h <= 0) {
                    return
                }
                this.dialogs[f].style.zIndex += h * this.Step;
                this.TopDialog = Math.max(this.dialogs[f].style.zIndex, this.TopDialog)
            } else {
                this.TopDialog += this.Step;
                g = window.document.getElementById(f);
                g.style.zIndex += this.TopDialog;
                this.dialogs[f] = g
            }
        }, SetObjectCount: function(g, f) {
            var h = 0;
            if (this.TopObject != null) {
                h = g - this.TopObject
            }
            this.TopObject = g;
            if (this.TopDialog == null) {
                this.TopDialog = (g + f) * this.Step
            }
            return h
        }, Remove: function(f) {
            this.dialogs[f] = null
        }, PromoteDialog: function(f) {
            var h = this.dialogs[f];
            var g = h.style.zIndex;
            if (this.TopDialog == g) {
                return
            }
            this.TopDialog += this.Step;
            h.style.zIndex = this.TopDialog
        }, dialogs: {}, TopObject: null, TopDialog: null, RemoveTopDialog: function() {
            this.TopDialog = null
        }, Step: 10};
    try {
        var a = window.document.implementation;
        if (a && a.createDocument && (!IS_IE || IE_VERSION >= 9)) {
            var c = a.createDocument("", "", null);
            if (c.readyState == null) {
                c.readyState = 1;
                c.addEventListener("load", function() {
                    c.readyState = 4;
                    if (typeof c.onreadystatechange == "function") {
                        c.onreadystatechange()
                    }
                }, false)
            }
            this.Doc = c;
            this.LeftButton = 0
        } else {
            if (window.ActiveXObject) {
                this.Doc = new ActiveXObject("Microsoft.XMLDOM");
                this.LeftButton = IE_DOCMODE >= 9 ? 0 : 1
            }
        }
    } catch (b) {
    }
    if (this.Doc == null) {
        throw new Error("Your browser does not support XmlDocument objects")
    }
};
Qva.PageBinding.prototype.CallOnceOnUpdateComplete = function(c) {
    var b = this.GetDocumentMgr();
    var a = b.OnUpdateComplete;
    b.OnUpdateComplete = function() {
        b.OnUpdateComplete = a;
        b.OnUpdateComplete();
        c()
    }
};
Qva.PageBinding.prototype.Start = function() {
    if (Qva.Mgr.search) {
        var g = document.createElement("div");
        g.style.display = "none";
        new Qva.Mgr.search(this, g, "Document.Search");
        document.body.insertBefore(g, document.body.firstChild)
    }
    this.delay_Send = true;
    this.IsRemote = true;
    this.IsHosted = false;
    try {
        if (this.View == null && parent.qva != null) {
            this.View = parent.qva.View
        }
    } catch (h) {
    }
    if (this.JSON) {
        this.Session = Qva.ExtractProperty("session", this.Session)
    }
    this.Ident = Qva.ExtractProperty("ident", this.Ident);
    this.Userid = Qva.ExtractProperty("userid", this.Userid);
    this.Xuserid = Qva.ExtractProperty("xuserid", this.Xuserid);
    this.Password = Qva.ExtractProperty("password", this.Password);
    this.Xpassword = Qva.ExtractProperty("xpassword", this.Xpassword);
    this.Bookmark = Qva.ExtractProperty("bookmark", this.Bookmark);
    this.AlternateUser = Qva.ExtractProperty("user", this.AlternateUser);
    this.View = Qva.ExtractProperty("application", this.View);
    var c = parseInt(Qva.ExtractProperty("color_depth", ""));
    if (!isNaN(c) && 0 < c && c <= 32) {
        this.ColorDepth = c
    }
    this.InitialSelections = Qva.ExtractPropertyArray("select", this.InitialSelections);
    this.InitialSearch = Qva.ExtractPropertyArray("search", this.InitialSearch);
    this.Sheet = Qva.ExtractProperty("sheet", this.Sheet);
    var d = Qva.Remote;
    try {
        if (!this.Remote) {
            this.Remote = (parent.qva && parent.qva.Remote) || d
        }
    } catch (f) {
        this.Remote = d
    }
    this.Host = Qva.ExtractProperty("host", this.Host);
    if (Qva.Benchmark) {
        this.Benchmark = new Qva.Benchmark()
    }
    this.Url = this.Remote;
    this.Url += (this.Url.indexOf("?") == -1) ? "?mark=" : "&mark=";
    if (window.ActiveXObject && (this.Unicorn || window.location.protocol == "file:")) {
        this.TryAltAgent()
    }
    var b = "" + window.window.navigator.userAgent;
    var j = parseInt(b.substr(b.indexOf("MSIE") + 5, 3));
    this.AutoViewAppend(null, this.DefaultScope, "ie6" + (b.indexOf("MSIE") != -1 && j < 7));
    this.Ticket = Qva.ExtractPropertyForDocument("ticket", this.View, this.Ticket);
    this.Invite = Qva.ExtractProperty("invite", this.Invite, true);
    this.Slot = Qva.ExtractProperty("slot", this.Slot, true);
    var l = Qva.ExtractProperty("anonymous", this.Ticket, true) != null;
    var a = Qva.ExtractProperty("fetch", this.FetchOffline, true);
    if (a != null) {
        this.OfflineRecorder = {OfflineBookmarks: a != "" ? a.split(",") : [], CurrentBookmarkIndex: -1, CurrentSheetIndex: 0, InitialSheetIndex: null, ContainerTabs: [], CurrentTabIndex: 0, DocumentBinder: this, SetSheets: function(n, m) {
                this.Sheets = n;
                this.SheetsBaseName = m
            }, SetInitialSheet: function(m) {
                if (this.InitialSheetIndex == null) {
                    this.InitialSheetIndex = m
                }
            }, AddContainer: function(m) {
                for (var n = 0; n < this.ContainerTabs.length; n++) {
                    if (this.ContainerTabs[n].Object.Name == m.Name) {
                        return
                    }
                }
                for (var n = 0; n < m.NavigatorItems.length; n++) {
                    if (m.NavigatorItems[n].itemId == m.NavigatorElement.SelectedVal) {
                        continue
                    }
                    this.ContainerTabs.push({Object: m, itemId: m.NavigatorItems[n].itemId})
                }
            }, Step: function() {
                if (this.InitialSheetIndex == null) {
                    this.InitialSheetIndex = this.LastSheetIndex
                }
                if (this.CurrentSheetIndex == this.InitialSheetIndex) {
                    this.CurrentSheetIndex++
                }
                if (this.CurrentTabIndex < this.ContainerTabs.length) {
                    var m = this.ContainerTabs[this.CurrentTabIndex++];
                    m.Object.NavigatorChange(m.itemId);
                    return
                }
                this.ContainerTabs = [];
                this.CurrentTabIndex = 0;
                if (this.CurrentSheetIndex < this.Sheets.length) {
                    var n = {};
                    n.action = "";
                    this.DocumentBinder.Set(this.SheetsBaseName + "." + this.Sheets[this.CurrentSheetIndex].name, n);
                    this.LastSheetIndex = this.CurrentSheetIndex;
                    this.CurrentSheetIndex++
                } else {
                    this.CurrentBookmarkIndex++;
                    if (this.CurrentBookmarkIndex < this.OfflineBookmarks.length) {
                        this.CurrentSheetIndex = 0;
                        this.InitialSheetIndex = null;
                        var n = {};
                        n.value = this.OfflineBookmarks[this.CurrentBookmarkIndex];
                        this.DocumentBinder.Set("Document.Bookmarks", n)
                    } else {
                        var n = {};
                        n.done = "";
                        this.DocumentBinder.Set(this.DocumentBinder.View, n);
                        this.DocumentBinder.OfflineRecorder = null
                    }
                }
            }}
    }
    if (!l && this.Anonymous) {
        l = true
    }
    if (!l && this.AuthenticateUrl) {
        var k = this;
        this.LoadAuthenticate(function(m, n) {
            if (m) {
                k.LoadBegin()
            } else {
                k.LoadBegin()
            }
        })
    } else {
        this.LoadBegin()
    }
};
Qva.PageBinding.prototype.LoadAuthenticate = function(f) {
    var c;
    if (window.XMLHttpRequest) {
        c = new XMLHttpRequest()
        c.withCredentials = true;
    } else {
        c = new ActiveXObject("MSXML2.XMLHTTP")
    }
    c.onreadystatechange = function() {
        if (c.readyState == 4) {
            if (c.status == 200) {
                f(true)
            } else {
                f(false, "Failed to authenticate")
            }
        }
    };
    var a = Qva.FixUrl(this.AuthenticateUrl, "keep", "");
    a = Qva.AddProxyIfAny(a);
    c.open("GET", a, true);
    if ((IS_IPAD || IS_IPHONE) && window.sessionStorage) {
        var b = window.sessionStorage.getItem("qvAuthorization");
        if (b) {
            c.setRequestHeader("Authorization", b)
        }
    }
    c.setRequestHeader("QVUser", "jog")
//    c.setRequestHeader("CJT", "test")
    try {
        c.send(null)
    } catch (d) {
        f(false, "Error sending")
    }
};
Qva.PageBinding.prototype.QueuePostPaintMessage = function(b, d) {
    if (d) {
        for (var a = 0; a < this.AsyncPostPaintMgrQueuePrio.length; ++a) {
            if (this.AsyncPostPaintMgrQueuePrio[a] == b) {
                return
            }
        }
        this.AsyncPostPaintMgrQueuePrio.push(b)
    } else {
        for (var a = 0; a < this.AsyncPostPaintMgrQueue.length; ++a) {
            if (this.AsyncPostPaintMgrQueue[a] == b) {
                return
            }
        }
        this.AsyncPostPaintMgrQueue.push(b)
    }
    var c = this;
    if (!this.postPaintTimeout) {
        this.postPaintTimeout = window.setTimeout(function() {
            c.avqAsyncPostPaint()
        }, 0)
    }
};
Qva.PageBinding.prototype.MayBeUpdateComplete = function() {
    if (!this.StillUpdating) {
        this.OnUpdateComplete(true);
        if (window.$) {
            if ($.browser.msie) {
                $(".QvFrame").not(".ToolWindow").attr("unselectable", "on")
            }
            if ($.browser.msie) {
                $(".QvFrame").not(".ToolWindow").on("selectstart", false)
            }
        }
        if (this.OfflineRecorder) {
            this.OfflineRecorder.Step()
        }
        this.OnUpdateCompleteTriggered = false;
        if (typeof(window.Object) == "undefined") {
            return
        }
        var c = Object.keys(Qva.ElementAttributes)[Object.keys(Qva.ElementAttributes).length - 1];
        if (typeof(c) == "undefined") {
            return
        }
        if (!Qva.traditional && Qva.ElementAttributes[c] && !Qva.UseTraditional(Qva.ElementAttributes[c][0])) {
            var b = Qva.ElementAttributes[c][0];
            var a = Qva.GetMgr(b);
            if (a.SetObjectHeight) {
                a.SetObjectHeight(0, c)
            }
        }
    } else {
        var d = this;
        window.setTimeout(function() {
            d.MayBeUpdateComplete()
        }, 0)
    }
};
Qva.PageBinding.prototype.avqAsyncPostPaint = function() {
    var b = this;
    function c() {
        b.postPainting = false;
        if (b.sendAfterPostPaint) {
            b.sendAfterPostPaint = false;
            b.delay_Send = setTimeout(function() {
                b.Send()
            }, 10)
        }
    }
    this.postPainting = true;
    this.postPaintTimeout = null;
    if (this.AsyncPostPaintMgrQueuePrio.length > 0) {
        var a = this.AsyncPostPaintMgrQueuePrio;
        this.AsyncPostPaintMgrQueuePrio = [];
        for (var d = 0; d < a.length; ++d) {
            a[d].PostPaint()
        }
        if (this.AsyncPostPaintMgrQueuePrio.length > 0) {
            var f = this;
            this.postPaintTimeout = window.setTimeout(function() {
                f.avqAsyncPostPaint()
            }, 0);
            return
        }
    }
    if (this.AsyncPostPaintMgrQueue.length == 0) {
        c();
        return
    }
    var a = this.AsyncPostPaintMgrQueue;
    this.AsyncPostPaintMgrQueue = [];
    for (var d = 0; d < a.length; ++d) {
        a[d].PostPaint()
    }
    if (!this.HasInvalidObjects && this.AsyncPostPaintMgrQueue.length == 0 && !this.OnUpdateCompleteTriggered) {
        this.OnUpdateCompleteTriggered = true;
        var f = this;
        window.setTimeout(function() {
            f.MayBeUpdateComplete()
        }, 0)
    }
    c()
};
Qva.MgrGetName = function(a) {
    while (a) {
        if (a.AvqMgr != null) {
            return a.AvqMgr.Name
        }
        a = a.parentNode
    }
    return""
};
Qva.GetMgr = function(a) {
    while (a) {
        if (a.AvqMgr != null) {
            return a.AvqMgr
        }
        a = a.parentNode
    }
    return""
};
function ctrlKeyPressed(a) {
    return a.ctrlKey || a.metaKey || a.keyCode == 224 || a.keyCode == 91
}
Qva.OnKeyPress = function(d) {
    if (!d) {
        d = window.event
    }
    if (IS_MAC && Qva.ContextMenu != null && Qva.ContextMenu.style.display == "") {
        return
    }
    Qva.HideContextMenu(Qva.ActiveObjectsCloak);
    if (Qva.PopupInput != null) {
        return
    }
    if (!Qva.LabelClick) {
        return
    }
    var c = d.target;
    if (!c) {
        c = d.srcElement
    }
    if (c.tagName == "INPUT" && c.type == "text") {
        return
    }
    if (c.tagName == "TEXTAREA") {
        return
    }
    if (c.tagName == "SELECT") {
        return
    }
    if (Qva.SearchableObject) {
        var b = document.getElementById(Qva.SearchableObject);
        if (b && b.AvqMgr && b.AvqMgr.Searchable) {
            var a = b.AvqMgr.PageBinder;
            var f = String.fromCharCode(d.charCode || d.keyCode);
            if (/[\x00-\x1F]/.test(f) || d.altKey || d.ctrlKey || d.metaKey) {
                return
            }
            Qva.InitSearch = (Qva.InitSearch || "") + f;
            a.Set(Qva.SearchableObject + ".SEARCH", "action", "", true)
        }
    }
};
Qva.OnKeyUp = function(f) {
    if (IS_MAC && Qva.ContextMenu != null && Qva.ContextMenu.style.display == "") {
        return
    }
    Qva.HideContextMenu(Qva.ActiveObjectsCloak);
    if (Qva.PopupInput != null) {
        return
    }
    if (!Qva.LabelClick) {
        return
    }
    if (!f) {
        f = window.event
    }
    var d = f.target;
    if (!d) {
        d = f.srcElement
    }
    if (f.keyCode == 13 && d.tagName == "INPUT" && d.onchange) {
        d.onchange()
    }
    if (d.tagName == "INPUT" && d.type == "text") {
        return
    }
    if (d.tagName == "TEXTAREA") {
        return
    }
    if (d.tagName == "SELECT") {
        return
    }
    if (!Qva.ActiveObjectsCloak && Qva.ActiveObjects && Qva.ActiveObjects.length == 1) {
        var c = document.getElementById(Qva.ActiveObjects[0]);
        if (c && c.AvqMgr) {
            if (c.AvqMgr.HandleKeyUp(f)) {
                return
            }
        }
    }
    if (Qva.SearchableObject) {
        var c = document.getElementById(Qva.SearchableObject);
        if (c && c.AvqMgr && c.AvqMgr.Searchable) {
            if (f.keyCode >= 32 && !ctrlKeyPressed(f)) {
                var b = f.keyCode;
                if (b >= 33 && b <= 40) {
                    if (b != 37 && b != 39) {
                        var a;
                        switch (b) {
                            case 33:
                                a = "pgup";
                                break;
                            case 34:
                                a = "pgdn";
                                break;
                            case 35:
                                a = "end";
                                break;
                            case 36:
                                a = "home";
                                break;
                            case 38:
                                a = "up";
                                break;
                            case 40:
                                a = "down";
                                break
                        }
                        c.AvqMgr.PageBinder.Set(Qva.SearchableObject, "key", a, true)
                    }
                }
            }
        }
    }
};
Qva.SetContextMenu = function(a, b) {
    a.oncontextmenu = b;
    if (IS_GECKO && IS_MAC) {
        a.onmousedown = function(c) {
            if (c.button == 2 && !ctrlKeyPressed(c)) {
                return b.call(this, c)
            }
        }
    }
};
Qva.Search = function(d, c, b) {
    if (d.SearchName != "") {
        var a = d.PageBinder || Qva.GetBinder(d.binderid);
        if (a.GetEnabled()) {
            a.Set(d.SearchName, "search", c.value, true)
        } else {
            a.PendingSearchName = d.SearchName;
            a.PendingSearchValue = c.value
        }
    }
};
Qva.OpenPopupInput = function(d, c) {
    Qva.ClosePopupInput();
    var b = d;
    if (!c) {
        b = d.parentNode.parentNode
    }
    Qva.PopupInput = document.createElement("input");
    if (IS_IE) {
        Qva.PopupInput.style.fontFamily = b.currentStyle.fontFamily;
        Qva.PopupInput.style.fontSize = b.currentStyle.fontSize
    } else {
        var a = document.defaultView.getComputedStyle(b, "");
        Qva.PopupInput.style.fontFamily = a.getPropertyValue("font-family");
        Qva.PopupInput.style.fontSize = a.getPropertyValue("font-size")
    }
    Qva.PopupInput.style.top = b.offsetTop + "px";
    Qva.PopupInput.style.left = b.offsetLeft + "px";
    Qva.PopupInput.style.width = b.clientWidth + "px";
    Qva.PopupInput.style.height = b.clientHeight + "px";
    Qva.PopupInput.style.zIndex = 666;
    Qva.PopupInput.style.position = "absolute";
    Qva.PopupInput.style.border = "none";
    Qva.PopupInput.style.padding = "0px 0px 0px 0px";
    if (c) {
        Qva.PopupInput.value = d.value;
        Qva.PopupInput.inputname = d.inputname
    } else {
        Qva.PopupInput.value = b.innerText
    }
    Qva.PopupInput.onmousedown = Qva.CancelAction;
    Qva.PopupInput.onmouseup = Qva.CancelAction;
    if (!IS_TOUCHENABLED) {
        Qva.PopupInput.onclick = Qva.CancelAction
    }
    Qva.PopupInput.onkeydown = AvqAction_Input_KeyDown;
    Qva.PopupInput.binderid = d.binderid;
    Qva.PopupInput.val = d.pos;
    Qva.PopupInput.ObjectId = d.ObjectId;
    b.offsetParent.appendChild(Qva.PopupInput);
    Qva.PopupInput.focus();
    if (!IS_TOUCHENABLED) {
        Qva.SetCursor(Qva.PopupInput, true)
    }
};
Qva.ClosePopupInput = function() {
    if (Qva.PopupInput == null) {
        return
    }
    Qva.PopupInput.parentNode.removeChild(Qva.PopupInput);
    Qva.PopupInput = null
};
Qva.AddRule = function(b, a, c) {
    try {
        if (b.addRule) {
            b.addRule(a, c)
        } else {
            b.insertRule(a + " { " + c + " }", b.cssRules.length)
        }
    } catch (d) {
    }
};
Qva.BlurActiveElement = function() {
    try {
        if (document.activeElement.tagName != "BODY") {
            document.activeElement.blur()
        }
    } catch (a) {
    }
};
Qva.PageBinding.prototype.Refresh = function() {
    this.Body += " ";
    if (!this.Enabled) {
        return
    }
    this.LoadBegin()
};
Qva.PageBinding.prototype.LoadBegin = function() {
    Qva.CloseMessagePopup();
    if (this.OnUpdateBegin != null) {
        this.OnUpdateBegin()
    }
    this.IsUpdating = true;
    this.ScrollLeftToRemember = null;
    this.ScrollTopToRemember = null;
    Qva.ActiveElement = null;
    try {
        this.ScrollLeftToRemember = Qva.GetScrollLeft();
        this.ScrollTopToRemember = Qva.GetScrollTop();
        document.body.style.cursor = "wait"
    } catch (c) {
    }
    if (!this.IsPartialLoad) {
        Qva.ClosePopupInput()
    }
    this.Enabled = false;
    if (!this.First) {
        for (var a = 0; a < this.Managers.length; ++a) {
            var b = this.Managers[a];
            if (this.IsRemote && b.Lock) {
                b.Lock()
            }
            b.Touched = false
        }
    }
    if (this.Benchmark != null) {
        this.Benchmark.Load.Start()
    }
    if (this.View == null && this.Kind == null) {
        this.Ready()
    } else {
        if (this.AutoviewDictionary != null) {
            this.SetAutoviewAddCommands()
        }
        this.Load()
    }
};
Qva.PageBinding.prototype.Load = function(b) {
    this.HasPendingLoad = false;
    this.CurrentLoadIsPartial = this.IsPartialLoad;
    this.IsPartialLoad = false;
    if (this.First && this.Bookmark != null) {
        this.Set("bookmark-apply", "docaction", this.Bookmark, false)
    }
    var f = function(v, u, o) {
        for (var m = 0; m < u.length; m++) {
            var q = u[m].split(",");
            var n = q[0].split(".");
            var r = true;
            if (n.length == 2) {
                if (n[n.length - 2] != v.View && n[n.length - 2] != v.ID) {
                    r = false
                }
            } else {
                if (n.length == 0) {
                    r = false
                }
            }
            if (r) {
                if (n[n.length - 1].indexOf("\\") == -1) {
                    var l = v.DefaultScope + ".Document\\" + n[n.length - 1]
                } else {
                    var l = v.DefaultScope + "." + n[n.length - 1]
                }
                var s = "";
                for (var p = 1; p < q.length; p++) {
                    if (p == 1) {
                        s = q[p]
                    } else {
                        s += " " + q[p]
                    }
                }
                v.Search(l, s, false, false)
            }
        }
    };
    if (this.First) {
        if (this.InitialSelections != null) {
            f(this, this.InitialSelections, true)
        }
        if (this.InitialSearch != null) {
            f(this, this.InitialSearch, false)
        }
        if (this.Sheet != null) {
            var h = this.Sheet;
            if (h.indexOf("\\") == -1) {
                h = "Document\\" + h
            }
            this.Set("Document.TabRow." + h, "action", "", false)
        }
    }
    if (this.PendingSearchName != "") {
        this.Set(this.PendingSearchName, "search", this.PendingSearchValue, false);
        this.PendingSearchName = "";
        this.PendingSearchValue = ""
    }
    if (this.PendingSearchKeyName != "") {
        this.Set(this.PendingSearchKeyName, "closesearch", this.PendingSearchKey, false);
        this.PendingSearchKeyName = ""
    }
    if (this.delay_Send) {
        if (this.delay_Send !== true) {
            clearTimeout(this.delay_Send)
        }
        this.Send(b)
    }
    if (navigator.userAgent.indexOf("Firefox") !== -1) {
        var d = document.getElementsByTagName("div"), a = d.length, g = 0;
        for (; g < a; g++) {
            var j = d[g], c = j.getAttribute("class");
            if (c !== null && typeof c !== "undefined" && c.indexOf("QvFrame") !== -1) {
                var k = j.style.boxShadow || "";
                if (k && k.indexOf("0px 0px 0px") !== -1) {
                    j.style.boxShadow = "none"
                }
            }
        }
    }
};
Qva.PageBinding.prototype.GetUpdates = function(c) {
    for (var a = 0; a < this.Managers.length; ++a) {
        var b = this.Managers[a];
        if (b.GetUpdates) {
            b.GetUpdates(c)
        }
    }
    if (c.length == 0 && this.Poll) {
        c.push({})
    }
    this.Poll = false
};
Qva.PageBinding.prototype.Send = function(j) {
    this.delay_Send = null;
    if (Qva.Modal && Qva.Modal.instance.IsOpen() && this.LabelClick) {
        this.delay_Send = true;
        return
    }
    if (this.postPainting) {
        this.sendAfterPostPaint = true;
        return
    }
    var b = this.Body;
    this.Body = "";
    if (!this.HasAutoviewAddCommands()) {
        b += this.InitialSets;
        this.InitialSets = ""
    }
    if (b.length == 0) {
        var m = [];
        this.GetUpdates(m);
        this.StillUpdating = m.length > 0;
        if (m.length == 0 && j) {
            if (this.IdlePollInterval) {
                var s = this;
                this.delay_Send = setTimeout(function() {
                    s.Send()
                }, this.IdlePollInterval)
            } else {
                this.delay_Send = true
            }
            this.StillUpdating = false;
            return
        }
        for (var l = 0; l < m.length; ++l) {
            b += "<poll ";
            for (var g in m[l]) {
                b += g + '="' + Qva.XmlEncode(m[l][g]) + '" '
            }
            b += "/>"
        }
        if (b.length == 0) {
            b = "<poll />"
        }
    }
    var h = '<update mark="' + this.Mark + '" stamp="' + this.Stamp + '"';
    if (window.navigator && window.navigator.cookieEnabled) {
        h += ' cookie="true"'
    } else {
        h += ' cookie="false"'
    }
    if (this.DefaultScope != null) {
        h += ' scope="' + this.DefaultScope + '"'
    }
    if (this.JSON && this.Session != null) {
        h += ' session="' + this.Session + '"'
    }
    if (this.View != null) {
        h += ' view="' + Qva.XmlEncode(this.View) + '"'
    }
    if (this.Autoview != null && this.Autoview != "") {
        h += ' autoview="' + Qva.XmlEncode(this.Autoview) + '"'
    }
    h += ' ident="' + Qva.XmlEncode(this.Ident) + '"';
    if (this.Userid != null) {
        h += ' userid="' + this.Userid + '"'
    }
    if (this.Xuserid != null) {
        h += ' xuserid="' + this.Xuserid + '"'
    }
    if (this.Password != null) {
        h += ' password="' + this.Password + '"'
    }
    if (this.Xpassword != null) {
        h += ' xpassword="' + this.Xpassword + '"'
    }
    if (this.Kind != null) {
        h += ' kind="' + this.Kind + '"'
    }
    if (this.Bookmark) {
        h += ' start="document"'
    }
    h += ">";
    h += b;
    h += "</update>";
    if (this.Trace != null && this.Trace.Request != null) {
        this.Trace.Request.innerText = h
    }
    var q = this;
    if (this.Agent == null) {
        var a = this.Url + this.Mark;
        if (this.Host != null) {
            a += "&host=" + Qva.EncodeComponent(this.Host)
        }
        if (this.Ticket != null) {
            a += "&ticket=" + Qva.EncodeComponent(this.Ticket)
        }
        if (this.Invite != null) {
            a += "&invite=" + Qva.EncodeComponent(this.Invite)
        }
        if (this.View != null) {
            a += "&view=" + Qva.EncodeComponent(this.View)
        }
        if (this.Userid != null) {
            a += "&userid=" + Qva.EncodeComponent(this.Userid)
        }
        if (this.Xuserid != null) {
            a += "&xuserid=" + Qva.EncodeComponent(this.Xuserid)
        }
        if (this.Password != null) {
            a += "&password=" + Qva.EncodeComponent(this.Password)
        }
        if (this.Xpassword != null) {
            a += "&xpassword=" + Qva.EncodeComponent(this.Xpassword)
        }
        if (this.Slot != null) {
            a += "&slot=" + Qva.EncodeComponent(this.Slot)
        }
        if (!this.Platform) {
            var r = navigator.userAgent;
            var f = "browser.";
            if (IS_PLAYBOOK) {
                f += "playbook"
            } else {
                if (IS_ANDROID) {
                    f += "android"
                } else {
                    if (IS_CHROME) {
                        f += "chrome"
                    } else {
                        if (IS_GECKO) {
                            f += "gecko " + GECKO_VERSION
                        } else {
                            if (IS_SAFARI) {
                                f += "safari"
                            } else {
                                if (IS_OPERA) {
                                    f += "opera"
                                } else {
                                    if (IS_IE) {
                                        f += r.substr(r.indexOf("MSIE"), 8)
                                    } else {
                                        f += "unknown"
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (IS_MOBILE) {
                f += ".mobile"
            }
            this.Platform = f
        }
        a += "&platform=" + Qva.EncodeComponent(this.Platform);
        a += "&dpi=" + Qva.DPI;
        if (this.ColorDepth > 0) {
            a += "&color_depth=" + this.ColorDepth
        }
        if (this.AlternateUser != null) {
            a += "&user=" + this.AlternateUser
        }
        if (this.JSON) {
            if (this.Session != null) {
                a += "&session=" + Qva.EncodeComponent(this.Session)
            }
            a += "&json=" + Qva.EncodeComponent(this.ID);
            a += "&cmd=" + Qva.EncodeComponent(h);
            var d = document.createElement("script");
            d.setAttribute("type", "text/javascript");
            d.setAttribute("src", a);
            var p = document.getElementsByTagName("head").item(0);
            if (this.ScriptTag) {
                p.replaceChild(d, this.ScriptTag)
            } else {
                p.appendChild(d)
            }
            this.ScriptTag = d
        } else {
            if (this.UsePost) {
                var c;
                if (window.XMLHttpRequest) {
                    c = new XMLHttpRequest()
                    c.withCredentials = true;
                } else {
                    c = new ActiveXObject("MSXML2.XMLHTTP")
                }
                c.onreadystatechange = function() {
                    if (c.readyState == 4 && (c.status == 200 || c.status == 0)) {
                        if (c.responseXML) {
                            q.Doc = c.responseXML
                        } else {
                            if (c.responseText) {
                                Assert(false);
                                q.loadXML(c.responseText)
                            }
                        }
                        q.Ready()
                    }
                    if (c.readyState == 4) {
                        delete c.onreadystatechange;
                        c = null
                    }
                };
                a = Qva.AddProxyIfAny(a);
                a = Qva.XrfSecure(a);
                c.open("POST", a, true);
                c.setRequestHeader("QVUser", "jog")
                try {
                    c.send(h)
                } catch (o) {
                    if (this.CommunicationError) {
                        this.CommunicationError(o)
                    } else {
                        alert("Communication error: " + o.message)
                    }
                    this.Enabled = true
                }
            } else {
                a += "&cmd=" + Qva.EncodeComponent(h);
                this.Doc.onreadystatechange = function() {
                    if (q.Doc.readyState == 4) {
                        q.Ready()
                    }
                };
                if (!this.Doc.load(a)) {
                    alert("Communication error (get)");
                    this.Enabled = true
                }
            }
        }
    } else {
        var k;
        try {
            k = this.UseExecute ? this.Agent.Execute(h) : this.Agent.XmlUpdate(h)
        } catch (o) {
            k = '<result><message text="Server not responding" /></result>'
        }
        if (!this.Doc.loadXML(k)) {
            alert(k);
            k = '<result><message text="Unexpected error loading" /></result>';
            this.Doc.loadXML(k)
        }
        window.setTimeout(function() {
            q.Ready()
        }, 0)
    }
};
Qva.PageBinding.prototype.SendClose = function() {
    var a = this.Url + this.Mark;
    a += "&close=true";
    if (this.Host != null) {
        a += "&host=" + Qva.EncodeComponent(this.Host)
    }
    if (this.Ticket != null) {
        a += "&ticket=" + Qva.EncodeComponent(this.Ticket)
    }
    if (this.Invite != null) {
        a += "&invite=" + Qva.EncodeComponent(this.Invite)
    }
    if (this.View != null) {
        a += "&view=" + Qva.EncodeComponent(this.View)
    }
    if (this.Slot != null) {
        a += "&slot=" + Qva.EncodeComponent(this.Slot)
    }
    var b;
    if (window.XMLHttpRequest) {
        b = new XMLHttpRequest()
    } else {
        b = new ActiveXObject("MSXML2.XMLHTTP")
    }
    a = Qva.AddProxyIfAny(a);
    a = Qva.XrfSecure(a);
    b.open("POST", a, true);
    try {
        b.send()
    } catch (c) {
        alert("Communication error (post): " + c.message)
    }
};
Qva.PageBinding.prototype.AddManager = function(a) {
    a.PageBinder = this;
    a.Touched = false;
    if (a.SelectedClassName == null) {
        a.SelectedClassName = "QvSelected";
        a.DeselectedClassName = "QvDeselected";
        a.EnabledClassName = "QvOptional";
        a.DisabledClassName = "QvExcluded";
        a.LockedClassName = "QvLocked";
        a.SelectedExcludedClassName = "QvSelectedExcluded";
        a.LockedExcludedClassName = "QvLockedExcluded";
        a.AlternativeClassName = "QvAlternative";
        a.ModeIfNotEnabled = "n"
    }
    this.Managers[this.Managers.length] = a;
    this.Append(a, a.Name, a.Attr)
};
Qva.PageBinding.prototype.Append = function(j, c, h, b) {
    if (c == null || c.substr(0, 1) == ".") {
        Assert(false)
    }
    if (c == null || c == "") {
        return
    }
    var g = this.Members[c];
    if (g == null) {
        g = new Array();
        this.Members[c] = g
    }
    for (var f = 0; f < g.length; f++) {
        if (g[f] == j) {
            break
        }
    }
    if (f == g.length) {
        g[g.length] = j
    }
    if (this.Autoview != null && !b) {
        var a = c.split("@");
        var d = a[0];
        var k = a.length > 1 ? a[1] : h
    }
};
Qva.PageBinding.prototype.HasAutoviewAddCommands = function() {
    if (this.AutoviewDictionary == null) {
        return false
    }
    for (var a in this.AutoviewDictionary) {
        var b = this.AutoviewDictionary[a];
        if (b.dirty) {
            return true
        }
    }
    return false
};
Qva.PageBinding.prototype.AutoViewAppend = function(d, b, a) {
    if (a == null) {
        a = "text"
    }
    if (this.AutoviewDictionary == null) {
        this.AutoviewDictionary = {}
    }
    var c = this.AutoviewDictionary[b];
    if (c == null) {
        c = {};
        c.dirty = true;
        c.attrs = "mode";
        this.AutoviewDictionary[b] = c
    }
    if (c.attrs.indexOf(a) == -1) {
        c.dirty = true;
        c.attrs += ";" + a
    }
};
Qva.PageBinding.prototype.SetAutoviewAddCommands = function() {
    for (var a in this.AutoviewDictionary) {
        var b = this.AutoviewDictionary[a];
        if (!b.dirty) {
            continue
        }
        b.dirty = false;
        this.Set(a, "add", b.attrs, false);
        if (this.First && this.Body.length > 900 && !this.UsePost) {
            return
        }
    }
};
Qva.PageBinding.prototype.loadXML = function(a) {
    if (this.Doc && typeof this.Doc.loadXML !== "undefined") {
        return this.Doc.loadXML(a)
    } else {
        if (typeof DOMParser !== "undefined") {
            this.Doc = new DOMParser().parseFromString(a, "text/xml");
            return this.Doc != null
        }
    }
    return false
};
function HtmlifyARGB(a) {
    if (a && a.length == 9) {
        if (a.substr(1, 2) == "00") {
            return"Transparent"
        }
        a = "#" + a.substr(3)
    }
    return a
}
function IsValidIEARGB(a) {
    if (a && a.length == 9) {
        if (a.substr(1, 2) == "00" || a.substr(1, 2) == "ff") {
            return true
        }
        return false
    }
    return true
}
Qva.ApplyColorDataToElement = function(g, k, n, l) {
    if (typeof(g.nodeType) !== "undefined") {
        var h = g.getAttribute("color"), f = g.getAttribute("bkgcolor"), a = g.getAttribute("FillDirection"), d = g.getAttribute("FillPattern"), c = g.getAttribute("PrimaryColor"), o = g.getAttribute("SecondaryColor"), j = g.getAttribute("ColorMode"), b = false
    } else {
        var h = g.color, f = g.bkgcolor, a = g.FillDirection, d = g.FillPattern, c = g.PrimaryColor, o = g.SecondaryColor, j = g.ColorMode, b = false
    }
    if (typeof j != "undefined") {
        if (IS_IE && IE_DOCMODE <= 8) {
            if ((IsValidIEARGB(c) && j === "0") || l) {
                k.style.backgroundColor = HtmlifyARGB(c);
                b = true
            }
        } else {
            if (j == "0" || j == "1") {
                k.style.backgroundImage = "";
                k.style.backgroundColor = Qva.Hex2RGBA(c);
                b = true
            } else {
                if (j == "2" && n) {
                    b = Qva.ApplyGradientToElement(a, d, c, o, k, l)
                }
            }
            if (!n) {
                k.style.backgroundColor = Qva.Hex2RGBA(c)
            }
        }
    } else {
        if (f) {
            k.style.backgroundImage = "";
            if (IS_IE && IE_DOCMODE <= 8) {
                k.style.backgroundColor = HtmlifyARGB(f)
            } else {
                k.style.backgroundColor = Qva.Hex2RGBA(f)
            }
        }
    }
    if (h) {
        if (IS_IE) {
            k.style.color = HtmlifyARGB(h)
        } else {
            try {
                k.style.color = Qva.Hex2RGBA(h)
            } catch (m) {
                k.style.color = HtmlifyARGB(h)
            }
        }
    }
    return b
};
function hexToRGB(a) {
    a[4] || (a = a.replace(/./g, "$&$&").slice(1));
    return["0x" + a[1] + a[2] | 0, "0x" + a[3] + a[4] | 0, "0x" + a[5] + a[6] | 0]
}
function DarkColor(j) {
    var f = hexToRGB(j);
    var a = f[0] / 255;
    var m = f[1] / 255;
    var p = f[2] / 255;
    var q = Math.min(a, Math.min(m, p));
    var s = Math.max(a, Math.max(m, p));
    var c = 0;
    var n = 0;
    if (q == s) {
        var k = q
    } else {
        var o = (a == q) ? m - p : ((p == q) ? a - m : p - a);
        var l = (a == q) ? 3 : ((p == q) ? 1 : 5);
        c = 60 * (l - o / (s - q));
        n = (s - q) / s;
        k = s
    }
    return n < 0.2
}
function SetSearchableAndActives(f, c) {
    if (f) {
        Qva.SearchableObject = f
    }
    Qva.ActiveObjectsCloak = false;
    if (c) {
        if (Qva.ActiveObjects) {
            for (var g = 0; g < Qva.ActiveObjects.length; ++g) {
                var a = window.document.getElementById(Qva.ActiveObjects[g]);
                if (a && a.AvqMgr.IsActive) {
                    if (c.indexOf && c.indexOf(Qva.ActiveObjects[g]) != -1) {
                        continue
                    }
                    a.AvqMgr.SetActiveStyle(false)
                }
            }
        }
        Qva.ActiveObjects = [];
        for (var b = 0; b < c.length; ++b) {
            var d = window.document.getElementById(c[b]);
            if (d) {
                if (!d.AvqMgr.IsActive) {
                    d.AvqMgr.SetActiveStyle(d.AvqMgr, true)
                }
                Qva.ActiveObjects.push(c[b])
            }
        }
    }
}
Qva.ReplaceOpenDoc = function(a) {
    var c = window.location.protocol + "//" + window.location.host + window.location.pathname;
    var b = /\[opendoc\]/g;
    return a.replace(b, c)
};
Qva.PageBinding.prototype.Ready = function() {
    if (this.First) {
        $("#InitialLoader").hide();
        $("#QvAjaxToolbar-right").show()
    }
    if (this.RecursiveReadyLevel > 0) {
        return
    }
    try {
        document.body.style.cursor = "auto"
    } catch (G) {
        Assert(false)
    }
    this.Enabled = true;
    var b = null;
    for (; ; ) {
        if (this.Doc == null) {
            Assert(false);
            return
        }
        var v = this.Doc.documentElement;
        if (this.View != null || this.Kind != null) {
            if (v == null) {
                var o = "";
                var C = this.Doc.parseError;
                if (C != null) {
                    o += "Line: " + C.line + "\r\n\r\nChar: " + C.filepos + "\r\n\r\nReason: " + C.reason + "\r\n\r\n"
                }
                o += "Failed to load:\r\n\r\nURL: " + this.Doc.url;
                Assert(false, o);
                return
            }
            var A = Qva.GetDialogNode(v);
            if (A) {
                switch (A.getAttribute("type")) {
                    case"Close":
                        Qva.HideMessage();
                        break;
                    case"Wait":
                        this.WaitMessage(A.getAttribute("title"), A.getAttribute("text"));
                        this.Poll = true;
                        return;
                    case"Updating":
                        if (!this.First) {
                            Qva.ModalMessage("", A.getAttribute("text"), true);
                            this.CallOnceOnUpdateComplete(function() {
                                setTimeout(Qva.HideMessage, 1000)
                            })
                        }
                        break;
                    default:
                        Assert(false);
                        break
                    }
            }
            switch (Qva.GetMessageCode(v) || Qva.GetMessage(v)) {
                case"19":
                case"Failed to open document, You don't have access to this document.":
                    Qva.NavigateToLoginPageIfAny();
                    break;
                case"15":
                case"Failed to open document, you don't have access to the server.":
                    if (isNaN(Qva.RemainingRetries)) {
                        Qva.RemainingRetries = 3
                    }
                    if (Qva.RemainingRetries <= 0) {
                        break
                    }
                    Qva.Modal.instance.Show(this, Qva.Remote + (Qva.Remote.indexOf("?") >= 0 ? "&" : "?") + "public=only&name=login.htm&userid=" + Qva.EncodeComponent(this.Userid));
                    return;
                case"1":
                case"Server error":
                    alert("Unexpected exception occurred!");
                    return
            }
            var F = v.getElementsByTagName("command");
            if (F.length >= 1) {
                for (var u = 0; u < F.length; u++) {
                    var J = F[u];
                    if (J.getAttribute("close") == "true") {
                        CloseSession();
                        return
                    }
                }
            }
            if (!this.IsHosted) {
                if (v.getAttribute("unicorn") == "3") {
                    Qva.Unicorn = true
                }
                var c = v.getAttribute("session");
                if (c === "ignore") {
                } else {
                    if (this.Session == null) {
                        this.Session = c
                    } else {
                        if (this.Session != c) {
                            var l = Qva.GetMessage(v);
                            if (l == null) {
                                l = "Session timed out"
                            }
                            this.OnSessionLost(l);
                            return
                        }
                    }
                }
                this.IdlePollInterval = parseInt(v.getAttribute("idlepollinterval"))
            }
            var p = v.getElementsByTagName("object");
            var B = null;
            var H = null;
            if (p.length >= 1) {
                if (p[0].getAttribute("activeobject") != null) {
                    B = p[0].getAttribute("activeobject").split(" ");
                    H = p[0].getAttribute("searchableobject")
                }
                if (this.ShowDocumentTitle && p[0].getAttribute("title")) {
                    window.document.title = p[0].getAttribute("title")
                }
            }
            SetSearchableAndActives(H, B);
            var E = v.getElementsByTagName("open");
            if (E.length >= 1) {
                for (var d = 0; d < E.length; d++) {
                    var q = E[d];
                    var f = q.getAttribute("url");
                    if (f) {
                        var m = q.getAttribute("redirect") == "true";
                        try {
                            if (f.substr(0, 2) == "$/") {
                                var x = f.substr(2);
                                f = this.Remote;
                                f += (f.indexOf("?") >= 0) ? "&public=only" : "?public=only";
                                f += "&size=long";
                                if (this.Host != null) {
                                    f += "&host=" + Qva.EncodeComponent(this.Host)
                                }
                                f += "&name=Temp/" + Qva.EncodeComponent(x)
                            }
                            if (f.substr(0, 10) == "?document=" && this.Host != null && f.indexOf("&host=") < 0) {
                                f += "&host=" + Qva.EncodeComponent(this.Host)
                            }
                            if (f) {
                                if (m) {
                                    window.location = f
                                } else {
                                    if (f.substr(0, 7) == "mailto:") {
                                        f = Qva.ReplaceOpenDoc(f)
                                    }
                                    b = window.open(f);
                                    Qva.ShowOpenUrlMsg(q.getAttribute("title"), f, this.Translations)
                                }
                            }
                        } catch (G) {
                            this.ShowMessage("Can't open '" + f + "' due to error: " + G.message)
                        }
                        q.setAttribute("url", "")
                    }
                }
            }
            var n = v.getAttribute("ident");
            if (n != null) {
                this.Ident = n
            }
            var h = v.getAttribute("kind");
            if (h != null) {
                this.Kind = h
            }
            var k = v.getAttribute("mark");
            var s = v.getAttribute("stamp");
            if (k != null && s != null) {
                this.Mark = k;
                this.Stamp = s;
                Qva.StampHandler(this.Stamp)
            }
            var a = this.CurrentLoadIsPartial;
            this.CurrentLoadIsPartial = false;
            if (this.Benchmark != null) {
                this.Benchmark.Load.Stop()
            }
            if (this.Benchmark != null) {
                this.Benchmark.Paint.Start()
            }
            this.PaintTree(v, "", a);
            if (this.Benchmark != null) {
                this.Benchmark.Paint.Stop()
            }
            var r = this.First && (this.HasAutoviewAddCommands() || this.InitialSets != "");
            if (this.PendingSearchName != "" || this.PendingSearchKeyName != "" || r || this.HasPendingLoad) {
                this.Enabled = false;
                if (r) {
                    this.SetAutoviewAddCommands()
                }
                if (this.Benchmark != null) {
                    this.Benchmark.Load.Start()
                }
                this.Load();
                return
            }
            this.IsUpdating = false;
            break
        }
    }
    var D = false;
    for (var z = 0; z < this.Managers.length; ++z) {
        if (this.Managers[z].Mode == "invalid") {
            D = true;
            break
        }
    }
    this.HasInvalidObjects = D;
    if (!this.HasInvalidObjects && this.AsyncPostPaintMgrQueue.length == 0 && !this.First && this.Body == "" && !this.OnUpdateCompleteTriggered) {
        this.OnUpdateCompleteTriggered = true;
        var w = this;
        window.setTimeout(function() {
            w.MayBeUpdateComplete()
        }, 0)
    }
    this.PaintDone(true, v);
    if ((this.View != null || this.Kind != null) && !this.OfflineRecorder) {
        var g = Qva.GetErrorMessage(v);
        if (g != null) {
            if (g.indexOf("Error Message: Object expected") != -1 || g.indexOf("Error Message: Failed to connect") != -1) {
                Qva.ErrorMessage("Could not connect to server!")
            } else {
                Qva.ErrorMessage(g)
            }
        } else {
            var g = Qva.GetMessage(v);
            if (g != null) {
                this.ShowMessage(g)
            }
        }
        if (this.Trace != null && this.Trace.Response != null) {
            this.Trace.Response.innerText = this.Doc.xml
        }
    }
    if (this.First && this.DeveloperMode) {
        var I = this.OnceAfterLoad();
        if (I != null) {
            this.ShowMessage(I)
        }
    }
    if (this.IsHosted && this.first) {
        window.focus()
    }
    if (this.IsRemote) {
        try {
            if (document.selection && document.selection.type != "None") {
                var j = document.selection.createRange();
                if (j != null) {
                    j.select()
                }
            }
        } catch (G) {
            Assert(false)
        }
    }
    this.First = false;
    if (b != null) {
        b.focus()
    }
    if (!IS_IPAD) {
        Qva.SetMaxWidths()
    }
};
var old_Ready = Qva.PageBinding.prototype.Ready;
Qva.PageBinding.prototype.Ready = function() {
    old_Ready.apply(this, arguments);
    if (this.Body.length > 0 || this.HasAutoviewAddCommands()) {
        this.count_Send = 0;
        this.Send(true)
    } else {
        this.count_Send = (this.count_Send || 0) + 1;
        var a = this;
        this.delay_Send = setTimeout(function() {
            a.Send(true)
        }, this.count_Send < 5 ? 10 : 100)
    }
    this.RestoreScrollPosition()
};
Qva.PageBinding.prototype.RestoreScrollPosition = function() {
    try {
        if (this.ScrollLeftToRemember != null) {
            if (Qva.ActiveElement && document.activeElement != Qva.ActiveElement) {
                Qva.ActiveElement.focus()
            }
            var b = this.ScrollTopToRemember - Qva.GetScrollTop();
            var a = this.ScrollLeftToRemember - Qva.GetScrollLeft();
            if (b == 0 && a == 0) {
                return
            }
            if (!IS_TOUCHENABLED) {
                setTimeout(function() {
                    try {
                        window.scrollBy(a, b)
                    } catch (d) {
                    }
                }, 10)
            }
            this.ScrollLeftToRemember = null;
            this.ScrollTopToRemember = null;
            Qva.ActiveElement = null
        }
    } catch (c) {
    }
};
Qva.OpenUrlMsg = null;
Qva.ShowOpenUrlMsg = function(f, c, b) {
    var a = Qva.XmlEncode(b.OpenUrlInfo || "The requested content has been opened in another window.") + "<br /><br />" + Qva.XmlEncode(b.OpenUrlIfNot || "If you know that this is not the case,") + ' <a href="' + c + '" target="_blank">' + Qva.XmlEncode(b.OpenUrlPressHere || "press here") + "</a>";
    var d = {text: (b.OK || "OK"), action: Qva.HideMessage};
    Qva.ModalMessage(f, a, false, d);
    setTimeout(Qva.HideMessage, 10000)
};
Qva.CloseUrlMsgDiv = function() {
    if (!Qva.OpenUrlMsg) {
        Assert(false)
    } else {
        Qva.OpenUrlMsg.style.display = "none"
    }
};
Qva.PageBinding.prototype.OnceAfterLoad = function() {
    var g = [];
    var d = 0;
    for (var a = 0; a < this.Managers.length; ++a) {
        var b = this.Managers[a];
        if (b.Name == "" || b.Name == "#edit#" || b.Touched) {
            if (d != a) {
                this.Managers[d] = this.Managers[a]
            }
            ++d
        } else {
            if (b.Name != "") {
                try {
                    b.Element.style.display = "none"
                } catch (c) {
                    Assert(false)
                }
                g[g.length] = "Not found: " + b.Name
            }
        }
    }
    this.Managers.length = d;
    if (g.length == 0) {
        return null
    }
    var f = "Errors:\n" + g.join("\n");
    return f
};
Qva.PageBinding.prototype.PaintTree = function(n, h, k) {
    for (var b = n.firstChild; b != null; b = b.nextSibling) {
        if (b.nodeName != "value" && b.nodeName != "action" && b.nodeName != "group" && b.nodeName != "list") {
            continue
        }
        var a = h + b.getAttribute("name");
        var j = this.Members[a];
        if (j != null) {
            var g = "d";
            switch (b.getAttribute("mode")) {
                case"not-applicable":
                    g = "n";
                    break;
                case"hidden":
                    g = "h";
                    break;
                case"enabled":
                    g = "e";
                    break
            }
            var c = j.length;
            for (var m = 0; m < c; ++m) {
                var o = j[m];
                var f = g;
                if (g != "n" && o.HideIf && o.HideIf(b.getAttribute("value"), b.getAttribute("text"))) {
                    f = "n"
                }
                o.Paint(f, b, a, k)
            }
        }
    }
    for (var l = n.firstChild; l != null; l = l.nextSibling) {
        if (l.nodeName != "value" && l.nodeName != "object" && l.nodeName != "group" && l.nodeName != "list") {
            continue
        }
        var d = h + l.getAttribute("name") + ".";
        this.PaintTree(l, d, k)
    }
};
Qva.PageBinding.prototype.PaintDone = function(d, a) {
    if (this.Benchmark != null) {
        this.Benchmark.Unlock.Start()
    }
    for (var b = 0; b < this.Managers.length; ++b) {
        var c = this.Managers[b];
        if (this.IsRemote && !c.Touched && c.Unlock) {
            c.Unlock()
        }
    }
    if (this.Benchmark != null) {
        this.Benchmark.Unlock.Stop()
    }
    if (this.Benchmark != null) {
        this.Benchmark.Display()
    }
};
Qva.PageBinding.prototype._Send = function(h, d, c, a) {
    d = Qva.MgrMakeName(d, this.DefaultScope);
    this.Body += "<" + h + ' name="' + d + '" ';
    var f = false;
    if (a) {
        for (var j in a) {
            if (typeof(a[j]) === "object" && a[j].length > 0) {
                f = true;
                continue
            }
            this.Body += j + '="' + Qva.XmlEncode(a[j]) + '" '
        }
    }
    if (h === "set" && this.isSmallDevices && d === "Document.DS") {
        this.Body += 'scrollbar="true" '
    }
    if (f) {
        this.Body += ">";
        for (var j in a) {
            if (typeof(a[j]) === "object" && a[j].length > 0) {
                for (var g = 0; g < a[j].length; g++) {
                    this.Body += "<element " + j + '="' + Qva.XmlEncode(a[j][g]) + '" />'
                }
            }
        }
        this.Body += "</" + h + ">"
    } else {
        this.Body += "/>"
    }
    if (c) {
        if (this.LoadBegin_Timeout) {
            clearTimeout(this.LoadBegin_Timeout)
        }
        if (this.DelaySet) {
            var b = this;
            this.LoadBegin_Timeout = setTimeout(function() {
                b.LoadBegin()
            }, 200)
        } else {
            this.LoadBegin()
        }
    }
};
Qva.PageBinding.prototype.Set = function(b, c, d, a) {
    if (IS_IPAD && c == "click" && !d && typeof(c) == "string") {
        return
    }
    if (this.GlobalSearchObject != "") {
        if (this.GlobalSearchObject != b.substr(0, this.GlobalSearchObject.length) && (Qva.ContextMenuMgr == null || b != Qva.ContextMenuMgr.Name)) {
            this.Set(this.GlobalSearchObject, "closesearch", "abort", true);
            this.GlobalSearchObject = ""
        }
    }
    if (typeof(c) == "object") {
        this._Send("set", b, d !== false, c)
    } else {
        var f = {};
        f[c] = d;
        this._Send("set", b, a, f)
    }
};
Qva.PageBinding.prototype.SetInitial = function(a, b, c) {
    this.InitialSets += '<set name="' + a + '" ' + b + '="' + Qva.XmlEncode(c) + '"/>'
};
Qva.SelectChild = function(b, d, a) {
    for (var c = b.firstChild; c; c = c.nextSibling) {
        switch (c.nodeName) {
            case"object":
                if (c.getAttribute("name") != d[a]) {
                    break
                }
                return(a == 0) ? c : null;
            case"group":
            case"list":
                if (c.getAttribute("name") != d[a]) {
                    break
                }
                return c;
            case"value":
            case"action":
                if (c.getAttribute("name") != d[a]) {
                    break
                }
                return(a == d.length - 1) ? c : null
            }
    }
    return null
};
Qva.PageBinding.prototype.Select = function(d) {
    if (d == null) {
        return null
    }
    d = Qva.MgrMakeName(d, this.DefaultScope);
    var c = d.split(".");
    var b = this.Doc.documentElement;
    for (var a = 0; b != null && a < c.length; ++a) {
        b = Qva.SelectChild(b, c, a)
    }
    return b
};
Qva.SelectNode = function(b, f) {
    if (b == null || f == null) {
        return null
    }
    var d = f.split(".");
    var c = b;
    for (var a = 0; c != null && a < d.length; ++a) {
        c = this.SelectChild(c, d, a)
    }
    return c
};
Qva.PageBinding.prototype.SetClick = function(c, d, g) {
    if (!this.Enabled) {
        return
    }
    if (document.activeElement && document.activeElement.onchange) {
        try {
            document.activeElement.onchange();
            document.activeElement.blur()
        } catch (h) {
        }
    }
    Qva.MgrWithMouseDown = null;
    var f = "click";
    var m = "";
    if (g) {
        if (g.index) {
            m = g.index
        } else {
            var k = 0;
            var j = 0;
            if (!c) {
                k = window.event.offsetX;
                j = window.event.offsetY
            } else {
                var l = Qva.GetOffsets(c);
                k = l.offsetX;
                j = l.offsetY
            }
            m += "" + k + ":" + j;
            var n = Qva.GetObjectBinder(g);
            var a = n.GetImageSize(g);
            m += ":" + a.width + ":" + a.height
        }
    } else {
        if (!c) {
            c = window.event
        }
        if (c.shiftKey || ctrlKeyPressed(c)) {
            f = "ctrl-click";
            c.cancelBubble = true
        }
    }
    var b = IE_DOCMODE < 9 ? 0 : 1;
    if (f == "ctrl-click" && c.button == b) {
        return
    }
    this.Set(d, f, m, true)
};
Qva.PageBinding.prototype.SetNewSheet = function() {
    var a = this.Select(".ActiveSheet");
    if (a) {
        var b = a.getAttribute("text");
        if (b) {
            this.NavigateToSheet(b)
        }
    }
};
Qva.PageBinding.prototype.NavigateToSheet = function(d) {
    var b = window.location.search;
    var a = d + ".htm";
    var c = "" + window.location.pathname;
    if (c.length < a.length || c.substr(c.length - a.length) != a) {
        if (b.length > 0) {
            a += b
        }
        if (this.JSON) {
            a = Qva.FixUrl(a, "session", this.Session)
        }
        a = Qva.FixUrl(a, "userid");
        a = Qva.FixUrl(a, "password");
        window.location = a
    }
};
Qva.GetContainingModal = function() {
    return window.parent.Qva.Modal.instance
};
Qva.CloseModal = function() {
    if (window.parent.Qva && window.parent.Qva.Modal) {
        var a = window.parent.Qva.Modal.instance;
        if (a != null) {
            a.Close()
        }
    }
};
Qva.SetModalTitle = function(b) {
    if (window.parent.Qva.Modal) {
        var a = window.parent.Qva.Modal.instance;
        if (a != null) {
            a.SetTitle(b)
        }
    }
};
Qva.MessagePopup = null;
Qva.ShowMessagePopup = function(b, h) {
    if (!Qva.MessagePopup) {
        Qva.MessagePopup = document.createElement("div");
        Qva.MessagePopup.className = "QvMessagePopup";
        document.body.appendChild(Qva.MessagePopup)
    } else {
        Qva.CloseMessagePopup()
    }
    Qva.MessagePopup.style.display = "";
    var f = document.createElement("img");
    f.style.cssText = "float:right;";
    f.src = h.BuildBinaryUrl(null, null, "CX");
    Qva.MessagePopup.appendChild(f);
    var k = document.createElement("br");
    Qva.MessagePopup.appendChild(k);
    var j = document.createElement("table");
    var l = j.insertRow(-1);
    var d = l.insertCell(-1);
    d.style.verticalAlign = "top";
    var f = document.createElement("img");
    f.src = h.BuildBinaryUrl(null, null, "web:helpicon");
    d.appendChild(f);
    var d = l.insertCell(-1);
    d.innerHTML = b.replace(/</g, "&lt;").replace(/\n/g, "<br>");
    Qva.MessagePopup.appendChild(j);
    var a = Math.min(Qva.GetViewportWidth() - 100, j.offsetWidth + 60);
    var g = parseInt((Qva.GetViewportHeight() - Qva.MessagePopup.offsetHeight) / 2);
    var c = parseInt((Qva.GetViewportWidth() - a) / 2);
    Qva.MessagePopup.style.width = a + "px";
    Qva.MessagePopup.style.top = g + "px";
    Qva.MessagePopup.style.left = c + "px"
};
Qva.CloseMessagePopup = function() {
    if (Qva.MessagePopup) {
        Qva.MessagePopup.innerHTML = "";
        Qva.MessagePopup.style.display = "none";
        Qva.MessagePopup.style.width = "";
        Qva.MessagePopup.style.top = "";
        Qva.MessagePopup.style.left = ""
    }
};
Qva.PageBinding.prototype.ContextClientAction = function(g, f) {
    if (g && g.stopPropagation) {
        g.stopPropagation()
    } else {
        if (!g) {
            g = window.event
        }
        g.cancelBubble = true
    }
    if (f.clientaction == "modal" && Qva.Modal.instance != null) {
        var c = f.param.split(":");
        Qva.Modal.instance.Show(this, Qva.Remote + (Qva.Remote.indexOf("?") >= 0 ? "&" : "?") + "public=only&name=" + c[0] + ".htm&target=" + Qva.EncodeComponent(f.Name || f.AvqMgr.Name) + Qva.XrfSecure(""), parseInt(c[1]), parseInt(c[2]))
    } else {
        if (f.clientaction == "inputfield") {
            Qva.OpenPopupInput(f)
        } else {
            if (f.clientaction == "confirm") {
                var h = f.param.split(":");
                var b = (f.Name || f.AvqMgr.Name) + "." + h[0];
                var j = h.slice(1).join(":");
                if (window.confirm(j)) {
                    this.Set(b, "action", "", true)
                }
            } else {
                if (f.clientaction == "url") {
                    window.open(f.param)
                } else {
                    if (f.clientaction == "bundledurl") {
                        var a = this.BuildBinaryUrl(null, "", f.param);
                        window.open(a)
                    } else {
                        if (f.clientaction == "popup") {
                            Qva.ShowMessagePopup(f.param, this)
                        } else {
                            if (f.clientaction == "xed") {
                                QvaExpressionEditor.Insert(f.param, QvaExpressionEditor.Element);
                                Qva.HideContextMenu(true);
                                return false
                            } else {
                                if (f.clientaction == "menu") {
                                    var d = g.target;
                                    if (!d) {
                                        d = g.srcElement
                                    }
                                    this.OnContextMenu(g, d.ObjectId);
                                    return
                                } else {
                                    alert("Not supported clientside action: " + f.clientaction)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    Qva.HideContextMenu();
    return false
};
Qva.PageBinding.prototype.OnContextMenu = function(f, c, a) {
    if (!f) {
        f = window.event
    }
    if (f.shiftKey && ctrlKeyPressed(f)) {
        return
    }
    Qva.HideContextMenu();
    var b;
    var d = f.target;
    if (!d) {
        d = f.srcElement
    }
    var h = d;
    while (h.parentNode && !h.position) {
        h = h.parentNode
    }
    if (h.position != null) {
        a = h.position;
        b = h.ObjectId || a
    } else {
        if (c) {
            b = c;
            if (d.tagName == "IMG" && d.isgraph) {
                var g = Qva.GetPageCoords(d);
                a = (f.clientX - g.x) + ":" + (f.clientY - g.y)
            } else {
                if (d.index) {
                    a = d.index
                } else {
                    a = a || ""
                }
            }
        } else {
            if (Qva.LabelClick) {
                b = this.DefaultScope + ".StandardActions"
            } else {
                return
            }
        }
    }
    return this.OnCreateContextMenu(this, f, b, a)
};
Qva.IsContextOpen = function() {
    if (Qva.ContextMenu != null && Qva.ContextMenu.style.display != "none") {
        return true
    }
    if (Qva.ContextDialog != null && Qva.ContextDialog.style.display != "none") {
        return true
    }
    if (Qva.ContextDropDown != null && Qva.ContextDropDown.style.display != "none") {
        return true
    }
    return false
};
Qva.HideContextDialog = function() {
    if (Qva.ContextDialogMgr != null) {
        Qva.ContextDialogMgr.Close(true);
        Qva.ContextDialogMgr.PageBinder.RemoveFromManagers(Qva.ContextDialogMgr);
        Qva.ContextDialogMgr = null
    }
    if (Qva.ContextDialogBtn != null) {
        if (Qva.ContextDialogBtn.style) {
            Qva.ContextDialogBtn.style.backgroundColor = ""
        }
        Qva.ContextDialogBtn = null
    }
    if (Qva.ContextDialog != null) {
        Qva.ContextDialog.style.display = "none";
        Qva.ContextDialog = null
    }
};
Qva.CloseContextDialog = function() {
    if (Qva.ContextDialogMgr != null) {
        Qva.ContextDialogMgr.Close(false)
    }
    Qva.HideContextDialog()
};
Qva.AbortContextDialog = function() {
    if (Qva.ContextDialogMgr != null) {
        Qva.ContextDialogMgr.Abort()
    }
    Qva.HideContextDialog()
};
Qva.HideContextMenu = function(a) {
    if (Qva.ContextMenu != null) {
        if (Qva.ContextMenuMgr.SubMenuRow && Qva.ContextMenuMgr.SubMenuRow.SubMenu) {
            document.body.removeChild(Qva.ContextMenuMgr.SubMenuRow.SubMenu);
            Qva.ContextMenuMgr.SubMenuRow.SubMenu = null
        }
        while (Qva.ContextMenu.firstChild.rows.length > 0) {
            Qva.ContextMenu.firstChild.deleteRow(Qva.ContextMenu.firstChild.rows.length - 1)
        }
        Qva.ContextMenu.style.display = "none"
    }
    if (Qva.ContextDropDown != null) {
        Qva.ContextDropDown.style.display = "none"
    }
    if (!a) {
        Qva.HideContextDialog();
        if (typeof(Qva.contextDialog) !== "undefined") {
            Qva.dropDialog.hide()
        }
    }
};
Qva.PageBinding.prototype.TryAltAgent = function() {
    try {
        if (external && typeof(external.AvqView) == "string") {
            var c = this;
            if (!this.IsModal) {
                external.AvqInitServer(this.View, function() {
                    if (c.Enabled) {
                        c.LoadBegin()
                    }
                })
            }
            if (this.HostedTitle == null) {
                external.AvqTitle(document.title)
            } else {
                if (this.HostedTitle != "") {
                    external.AvqTitle(this.HostedTitle)
                }
            }
            this.IsRemote = false;
            this.IsHosted = true;
            this.View = external.AvqView;
            this.Agent = external
        } else {
            if (this.AllowComAgent) {
                try {
                    var a = /[\?\&]admin=/.exec(this.Remote);
                    this.Agent = new ActiveXObject("QvsRemote.Client");
                    this.UseExecute = true;
                    if (a == null) {
                        this.Agent.Connect("localhost", true)
                    } else {
                        this.Agent.AdminConnect("localhost")
                    }
                    this.IsRemote = false
                } catch (b) {
                }
            }
        }
    } catch (b) {
        Assert(false)
    }
};
Qva.PageBinding.prototype.BuildBinaryUrl = function(f, d, c, a) {
    if (c != null && d == null && this.CustomIcons[c]) {
        return this.CustomIcons[c]
    }
    var b = this.Url;
    b = b.replace("mark=", "datamode=binary");
    if (c != null) {
        b += "&name=" + Qva.EncodeComponent(c)
    }
    if (this.Host != null) {
        b += "&host=" + Qva.EncodeComponent(this.Host)
    }
    if (this.Slot != null) {
        b += "&slot=" + Qva.EncodeComponent(this.Slot)
    }
    if (d != null) {
        b += "&stamp=" + Qva.EncodeComponent(d);
        if (this.Ticket != null) {
            b += "&ticket=" + Qva.EncodeComponent(this.Ticket)
        }
        if (this.Invite != null) {
            b += "&invite=" + Qva.EncodeComponent(this.Invite)
        }
        if (this.View != null) {
            b += "&view=" + Qva.EncodeComponent(this.View)
        }
        if (this.Kind != null) {
            b += "&kind=" + Qva.EncodeComponent(this.Kind)
        }
        if (this.Userid != null) {
            b += "&userid=" + Qva.EncodeComponent(this.Userid)
        }
        if (this.Xuserid != null) {
            b += "&xuserid=" + Qva.EncodeComponent(this.Xuserid)
        }
        if (this.Password != null) {
            b += "&password=" + Qva.EncodeComponent(this.Password)
        }
        if (this.Xpassword != null) {
            b += "&xpassword=" + Qva.EncodeComponent(this.Xpassword)
        }
    } else {
        b += "&public=only"
    }
    if (this.Session != null && this.JSON) {
        b += "&session=" + Qva.EncodeComponent(this.Session)
    }
    if (a) {
        b += "&color=" + Qva.EncodeComponent(a)
    }
    b = Qva.AddProxyIfAny(b);
    b = Qva.XrfSecure(b);
    return b
};
Qva.PageBinding.prototype.RemoveFromManagers = function(c) {
    var b = -1;
    for (var a = 0; a < this.Managers.length; ++a) {
        if (this.Managers[a] == c) {
            b = a;
            if (this.Managers[b].Element != null) {
                if (this.Managers[b].Element.AvqMgr != null) {
                    if (this.Managers[b].Element.AvqMgr.Detach != null) {
                        this.Managers[b].Element.AvqMgr.Detach()
                    }
                    this.Managers[b].Element.AvqMgr = null
                }
                this.Managers[b].Element = null
            }
            this.Managers.splice(b, 1);
            break
        }
    }
    if (b == -1) {
        Assert(false)
    }
};
Qva.PageBinding.prototype.RemoveFromMembers = function(d) {
    var b = d.Name;
    if (b == null) {
        Assert(false)
    }
    if (b == null || b == "") {
        return
    }
    var a = this.Members[b];
    if (a == null) {
        Assert(false);
        return
    }
    var f = new Array();
    for (var c = 0; c < a.length; c++) {
        if (a[c] != d) {
            f[f.length] = a[c]
        }
    }
    if (a.length == f.length) {
        Assert(false)
    }
    if (f.length == 0) {
        delete this.Members[b]
    } else {
        this.Members[b] = f
    }
};
function AvqAction_Input_KeyDown(b) {
    if (!b) {
        b = window.event
    }
    var a = b.keyCode;
    switch (a) {
        case 13:
            if (this.inputname) {
                Qva.GetBinder(this.binderid).Set(this.inputname, "text", this.value, true)
            } else {
                Qva.GetBinder(this.binderid).Set(this.ObjectId, "inputvalue", this.val + ":" + this.value, true)
            }
        case 27:
            break
        }
}
Qva.NoAction = function(a) {
    if (!a) {
        a = window.event
    }
    if (!a) {
        return
    }
    if (a.preventDefault) {
        a.preventDefault()
    } else {
        a.returnValue = false
    }
};
Qva.CancelAction = function(a) {
    if (!a) {
        a = window.event
    }
    a.cancelBubble = true;
    this.pressed = true
};
Qva.DefaultShowMessage = function(a) {
    alert(a)
};
Qva.DefaultOnSessionLost = function(a) {
    this.RetryMessage(this.Translations.ConnectionLost || "Lost connection to server.", this.Translations.Reconnecting || "Reconnecting...", this.Translations.UserCanceled || "Action canceled by user")
};
Qva.PageBinding.prototype.GetMenu = function(b, a) {
    this._Send("menu", b, true, {position: (a || "")})
};
Qva.PageBinding.prototype.Search = function(c, d, a, b) {
    this._Send("search", c, b, {text: d, toggle: (a ? "true" : "false")})
};
Qva.PageBinding.prototype.Hover = function(a, b) {
    this.SimpleCall("hover", a, null, {pos: b})
};
Qva.ShowContextDialog = function(c, g, j) {
    var a = Qva.ContextDialogBtn;
    Qva.HideContextDialog();
    if (Qva.ContextDialog == null) {
        Qva.ContextDialog = document.createElement("div");
        Qva.ContextDialog.style.position = "absolute";
        Qva.ContextDialog.style.zIndex = 666;
        Qva.ContextDialog.className = "contextdialog";
        Qva.ContextDialog.onclick = Qva.CancelBubble;
        document.body.appendChild(Qva.ContextDialog)
    }
    Qva.ContextDialog.innerHTML = g;
    var k = Qva.GetBinder(c.binderid);
    var f = c.Name.split(".");
    var b = f[0] + "." + f[1] + "." + f[2];
    Qva.ContextDialogMgr = new Qva.Mgr.toolwindowbody(k, Qva.ContextDialog, b);
    Qva.ContextDialogMgr.Scan(c.Name);
    Qva.ContextDialogBtn = c;
    if (Qva.ContextDialogBtn.SetActiveUIState) {
        Qva.ContextDialogBtn.SetActiveUIState()
    }
    var h = Qva.GetPageCoords(Qva.ContextDialogBtn);
    Qva.ContextDialog.style.left = h.x + 24 + "px";
    Qva.ContextDialog.style.top = h.y - 2 + "px";
    Qva.ContextDialog.style.display = "";
    try {
        Qva.ContextDialog.focus()
    } catch (d) {
    }
    if (typeof(j) == "string") {
        Qva.ContextDialogMgr.SetSingleMode(c.Name, j)
    } else {
        k.LoadBegin()
    }
};
Qva.XmlEncode = function(a) {
    var b = "" + a;
    b = b.replace(/&/g, "&amp;");
    b = b.replace(/</g, "&lt;");
    b = b.replace(/>/g, "&gt;");
    b = b.replace(/"/g, "&quot;");
    return b
};
Qva.GetDialogNode = function(b) {
    var a = b.getElementsByTagName("dialog");
    return(a.length >= 1) ? a[0] : null
};
Qva.GetMessage = function(a) {
    var b = a.getElementsByTagName("message");
    if (b.length >= 1) {
        var c = b[0].getAttribute("text");
        if (c && c != "") {
            return c
        }
    }
    return null
};
Qva.GetMessageCode = function(a) {
    var b = a.getElementsByTagName("message");
    if (b.length >= 1) {
        var c = b[0].getAttribute("code");
        if (c && c != "") {
            return c
        }
    }
    return null
};
Qva.GetErrorMessage = function(b) {
    var a = b.getElementsByTagName("Error");
    if (a.length >= 1) {
        var c = b.getElementsByTagName("message");
        if (c.length >= 1) {
            var d = c[0].getAttribute("text");
            if (d && d != "") {
                return d
            }
        }
    }
    return null
};
Qva.GetDocHeight = function() {
    return Math.max(Math.max(document.body.scrollHeight, document.documentElement.scrollHeight), Math.max(document.body.offsetHeight, document.documentElement.offsetHeight), Math.max(document.body.clientHeight, document.documentElement.clientHeight))
};
Qva.GetViewportHeight = function() {
    if (window.innerHeight != window.undefined) {
        return window.innerHeight
    }
    if (document.compatMode == "CSS1Compat") {
        return document.documentElement.clientHeight
    }
    if (document.body) {
        return document.body.clientHeight
    }
};
Qva.GetViewportWidth = function() {
    if (window.innerWidth != window.undefined) {
        return window.innerWidth
    }
    if (document.compatMode == "CSS1Compat") {
        return document.documentElement.clientWidth
    }
    if (document.body) {
        return document.body.clientWidth
    }
};
Qva.GetScrollTop = function() {
    if (typeof GetCachedElement == "function") {
        var a = GetCachedElement("s4-workspace");
        if (a) {
            if (a.scrollTop) {
                return a.scrollTop
            }
        }
    }
    if (self.pageYOffset) {
        return self.pageYOffset
    }
    if (document.documentElement && document.documentElement.scrollTop) {
        return document.documentElement.scrollTop
    }
    return document.body.scrollTop
};
Qva.GetScrollLeft = function() {
    if (typeof GetCachedElement == "function") {
        var a = GetCachedElement("s4-workspace");
        if (a) {
            if (a.scrollLeft) {
                return a.scrollLeft
            }
        }
    }
    if (self.pageXOffset) {
        return self.pageXOffset
    }
    if (document.documentElement && document.documentElement.scrollLeft) {
        return document.documentElement.scrollLeft
    }
    return document.body.scrollLeft
};
Qva.MgrSplit = function(c, a, d) {
    if (a == null) {
        return false
    }
    var b = a.split("@");
    switch (b.length) {
        case 1:
            c.Attr = "text";
            break;
        case 2:
            c.Attr = b[1];
            break;
        case 3:
            c.Attr = (b[1] != "") ? b[1] : "text";
            c.Dec = parseInt(b[2]);
            break;
        default:
            return false
    }
    c.Name = Qva.MgrMakeName(b[0], d);
    return true
};
Qva.MgrMakeName = function(b, d) {
    if (b == null) {
        Assert(false)
    }
    if (b.substr(0, 1) == ".") {
        if (d == null) {
            Assert(false)
        }
        if (b.length == 1) {
            return d
        }
        return d + b
    } else {
        if (b.substr(0, 1) == "~") {
            if (d == null) {
                Assert(false)
            }
            b = b.substr(1);
            var c = b.split(".");
            var a = d.indexOf(c[0]);
            if (a != -1) {
                b = d.substring(0, a) + b
            }
        }
    }
    return b
};
Qva.MgrGetDisplayFromMode = function(a, b) {
    if (a.Element.disabled && a.ModeIfNotEnabled == "h") {
        return"none"
    } else {
        if (b == "d" || b == "e" || a.ModeIfNotEnabled == "d") {
            return""
        } else {
            return"none"
        }
    }
};
Qva.Trunc = function(a, h) {
    var b = a.indexOf(".");
    if (b < 0) {
        return a
    }
    var d = a.length - b - 1;
    if (d <= h) {
        return a
    }
    var g = parseFloat(a);
    if (isNaN(g)) {
        return a
    }
    var c = Math.pow(10, h);
    g = Math.round(g * c) / c;
    return g.toString()
};
Qva.LockDisabled = function() {
    if (this.Locked === undefined) {
        this.Locked = this.Element.disabled
    }
    this.Element.disabled = true
};
Qva.UnlockDisabled = function() {
    this.Element.disabled = this.Locked
};
Qva.LockReadOnly = function() {
    if (this.Locked === undefined) {
        this.Locked = this.Element.readOnly
    }
    this.Element.readOnly = true
};
Qva.UnlockReadOnly = function() {
    this.Element.readOnly = this.Locked
};
Qva.FixUrl = function(a, d, c) {
    var b = new RegExp("[?&]" + d + "=[^&]*", "i");
    a = a.replace(b, "");
    if (c != null) {
        a += "&" + d + "=" + Qva.EncodeComponent(c)
    }
    if (a.indexOf("?") == -1) {
        a = a.replace(/&/, "?")
    }
    return a
};
Qva.ExtractProperty = function(c, a, h, b) {
    if (h) {
        var d = new RegExp("[?&]" + c + "=([^&]*)", "i")
    } else {
        var d = new RegExp("[?&]" + c + "=([^&]+)", "i")
    }
    var f = d.exec(b || window.location);
    try {
        if (f == null) {
            f = d.exec(top.location)
        }
    } catch (g) {
    }
    return f != null ? Qva.DecodeComponent(f[1]) : a
};
Qva.ExtractPropertyArray = function(a, g, d, b) {
    if (d) {
        var k = new RegExp("[?&]" + a + "=([^&]*)", "gi")
    } else {
        var k = new RegExp("[?&]" + a + "=([^&]+)", "gi")
    }
    var c = [];
    var j = "";
    try {
        if (k.test(b)) {
            j = b
        } else {
            if (k.test(window.location)) {
                j = window.location
            } else {
                if (k.test(top.location)) {
                    j = top.location
                }
            }
        }
    } catch (h) {
    }
    if (j != "") {
        k.lastIndex = 0;
        do {
            var f = k.exec(j);
            if (f != null) {
                c.push(Qva.DecodeComponent(f[1]))
            }
        } while (f != null)
    }
    if (c.length > 0) {
        return c
    } else {
        return g
    }
};
Qva.ExtractPropertyForDocument = function(a, k, d, c, b) {
    var j = null;
    var f = null;
    var h = Qva.ExtractPropertyArray(a, d, c, b);
    if (h) {
        for (var l = 0; l < h.length; l++) {
            var g = h[l].split(":");
            if (g.length == 2) {
                if (g[0].toLowerCase() == k.toLowerCase()) {
                    j = g[1]
                }
            } else {
                f = h[l]
            }
        }
    }
    if (j == null && f != null) {
        return f
    } else {
        return j
    }
};
Qva.GetAbsolutePageCoords = function(f, c) {
    var g = {x: 0, y: 0};
    while (f) {
        g.x += f.offsetLeft;
        g.y += f.offsetTop;
        if (c) {
            if (typeof WebKitCSSMatrix !== "undefined") {
                var b = window.getComputedStyle(f).webkitTransform;
                if (b != "none") {
                    var a = new WebKitCSSMatrix(b);
                    g.x += a.e;
                    g.y += a.f
                }
            } else {
                var d = Qva.GetTranslation($(f));
                if (d) {
                    g.x += d.x;
                    g.y += d.y
                }
            }
        }
        f = f.offsetParent
    }
    return g
};
Qva.GetPageCoords = function(a) {
    var b = {x: 0, y: 0};
    while (a) {
        b.x += a.offsetLeft;
        if (a.tagName == "DIV") {
            b.x -= a.scrollLeft
        }
        b.y += a.offsetTop;
        if (a.tagName == "DIV") {
            b.y -= a.scrollTop
        }
        a = a.offsetParent
    }
    b.x -= Qva.GetScrollLeft();
    b.y -= Qva.GetScrollTop();
    return b
};
Qva.GetOffsets = function(d, f) {
    if (!f) {
        f = d.target || d.srcElement
    }
    if (typeof f.offsetLeft == "undefined") {
        f = f.parentNode
    }
    var a = Qva.GetAbsolutePageCoords(f);
    var b = {x: Qva.GetScrollLeft() + d.clientX, y: Qva.GetScrollTop() + d.clientY};
    var c = {offsetX: b.x - a.x, offsetY: b.y - a.y};
    return c
};
Qva.SetCursor = function(c, a) {
    var b = 0;
    if (c.value.length > 0) {
        b = c.value.charAt(0) == "*" ? c.value.length - 1 : c.value.length
    }
    if (window.document.selection) {
        var d = window.document.selection.createRange();
        d.moveStart("character", -c.value.length);
        d.moveEnd("character", -c.value.length);
        if (a) {
            d.moveStart("character", 0);
            d.moveEnd("character", c.value.length)
        } else {
            d.moveStart("character", b)
        }
        d.select()
    } else {
        if (c.selectionStart) {
            if (a) {
                c.selectionStart = 0;
                c.selectionEnd = c.value.length
            } else {
                c.selectionStart = Math.max(1, b);
                c.selectionEnd = Math.max(1, b)
            }
        }
    }
};
Qva.CancelBubble = function(a) {
    if (!a || !a.stopPropagation) {
        window.event.cancelBubble = true
    } else {
        a.stopPropagation()
    }
};
function getClientWidth(c) {
    if (IS_GECKO || IS_OPERA || IS_WEBKIT) {
        var f = c.offsetWidth;
        var b = document.defaultView.getComputedStyle(c, "");
        var d = parseInt(b.getPropertyValue("padding-left") || "0") + parseInt(b.getPropertyValue("padding-right") || "0");
        var a = parseInt(b.getPropertyValue("border-left-width") || "0") + parseInt(b.getPropertyValue("border-right-width") || "0");
        f -= d;
        f -= a;
        return f
    } else {
        return c.clientWidth
    }
}
function getClientHeight(d) {
    if (IS_IE) {
        return d.clientHeight
    } else {
        var c = d.offsetHeight;
        var b = document.defaultView.getComputedStyle(d, "");
        var f = parseInt(b.getPropertyValue("padding-top")) + parseInt(b.getPropertyValue("padding-bottom"));
        var a = parseInt(b.getPropertyValue("border-top-width")) + parseInt(b.getPropertyValue("border-bottom-width"));
        if (IS_MOBILE) {
            if (!Qva.MobileCache[d]) {
                c -= f;
                c -= a;
                Qva.MobileCache[d] = [];
                Qva.MobileCache[d]["pad"] = f;
                Qva.MobileCache[d]["bor"] = a
            }
        }
        return c
    }
}
Qva.ExpressionDialog = function(b, c) {
    if (b.disabled) {
        return
    }
    var a = Qva.GetBinder(b.binderid);
    if (!a.Enabled) {
        return
    }
    if (a.IsHosted) {
        var c = external.AvqExpressionDialog(b.Value, b.ExpressionType == "always");
        if (c != b.Value) {
            a.Set(b.Name, "value", c, true)
        }
    } else {
        if (Qva.ContextDialogBtn == b) {
            Qva.HideContextDialog()
        } else {
            a.LoadHtml("Expression.Qvpp", function(d) {
                Qva.ShowContextDialog(b, d, c)
            })
        }
    }
};
Qva.Hover = null;
Qva.PageBinding.prototype.GetHoverDiv = function() {
    if (!Qva.Hover) {
        Qva.Hover = document.createElement("div");
        Qva.Hover.className = "QvHover";
        Qva.Hover.style.display = "none";
        document.body.appendChild(Qva.Hover);
        new Qva.Mgr.hover(this, Qva.Hover, this.DefaultScope + ".Hover")
    }
    return Qva.Hover
};
Qva.PageBinding.prototype.LoadHtml = function(b, f) {
    var c;
    if (window.XMLHttpRequest) {
        c = new XMLHttpRequest()
    } else {
        c = new ActiveXObject("MSXML2.XMLHTTP")
    }
    c.onreadystatechange = function() {
        if (c.readyState == 4) {
            if (c.status == 200) {
                f(c.responseText)
            } else {
                if (c.status == 0 && c.responseText) {
                    f(c.responseText)
                } else {
                    f("No such page")
                }
            }
        }
    };
    var a = this.Url;
    if (b != null) {
        a += "&name=" + Qva.EncodeComponent(b)
    }
    if (this.Host != null) {
        a += "&host=" + Qva.EncodeComponent(this.Host)
    }
    a += "&public=only";
    a = Qva.AddProxyIfAny(a);
    a = Qva.XrfSecure(a);
    c.open("GET", a, true);
    try {
        c.send(null)
    } catch (d) {
        f("Error sending")
    }
};
Qva.PageBinding.prototype.GetEnabled = function() {
    return this.Enabled
};
Qva.PageBinding.prototype.GetDocumentMgr = function() {
    return this
};
Qva.PageBinding.prototype.GetMaxClientWidth = function(a) {
    return getClientWidth(a)
};
Qva.GetObjectBinder = function(b) {
    var a = b;
    while (a && !a.AvqMgr) {
        a = a.parentNode;
        if (!a) {
            continue
        }
        if (a.AvqMgr) {
            return a.AvqMgr
        }
    }
    return Qva.GetBinder(b.binderid)
};
Qva._Create_ModalMessage = function() {
    var a = Qva.ModalMessage.msgmask = document.createElement("div");
    a.style.zIndex = 300;
    a.className = "popupMask";
    a.style.display = "none";
    a.onclick = Qva.CancelBubble;
    var b = Qva.ModalMessage.msgdiv = document.createElement("div");
    b.style.zIndex = 301;
    b.className = "ModalDialog";
    b.style.display = "none";
    b.onclick = Qva.CancelBubble;
    b.innerHTML = '<div class="ModalDialog_Header">                             <img src="/qlikview/images/logo_main.png">               <span></span>                                        </div>                                                   <div class="ModalDialog_Body">                               <div class="ModalDialog_Text"></div>                     <img src="/QvAJAXZfc/mobile/img/loader-object.gif" />    <button class="ModalDialog_Button"></div>            </div>                                                   ';
    $(b).find(":button").button();
    document.body.appendChild(a);
    document.body.appendChild(b)
};
Qva.ModalMessage = function(h, a, g, c) {
    if (!Qva.ModalMessage.msgdiv) {
        Qva._Create_ModalMessage()
    }
    var b = $(Qva.ModalMessage.msgdiv);
    b.find(".ModalDialog_Header span").text(h);
    b.find(".ModalDialog_Text").html(a);
    var f = b.children(".ModalDialog_Body");
    f.find("img")[g ? "show" : "hide"]();
    var d = f.find(".ModalDialog_Button");
    d[c ? "show" : "hide"]();
    if (c) {
        d.text(c.text);
        d[0].onclick = c.action
    } else {
        d[0].onclick = null
    }
    Qva.ModalMessage.msgmask.style.display = "block";
    Qva.ModalMessage.msgdiv.style.display = ""
};
Qva.HideMessage = function() {
    if (!Qva.ModalMessage.msgdiv) {
        return
    }
    Qva.ModalMessage.msgmask.style.display = "none";
    Qva.ModalMessage.msgdiv.style.display = "none"
};
Qva.PageBinding.prototype.WaitMessage = function(f, d, c) {
    var a = this;
    var b = {text: (this.Translations.Cancel || "Cancel"), action: function() {
            Qva.ModalMessage(f, Qva.XmlEncode(a.Translations.Canceling || "Canceling, please wait..."), true, false);
            a._Send("abort", "", true)
        }};
    Qva.ModalMessage(f, Qva.XmlEncode(d), true, b)
};
Qva.PageBinding.prototype.RetryMessage = function(g, f, b) {
    if (Qva.CanceledByUser) {
        return
    }
    function d() {
        var j = window.location + "";
        var k = j.lastIndexOf("#");
        if (k != -1) {
            j = j.substr(0, k)
        }
        window.location = Qva.FixUrl(j, "session")
    }
    var h = setTimeout(d, 5000);
    var a = {text: this.Translations.Reconnect || "Reconnect", action: d};
    var c = {text: (this.Translations.Cancel || "Cancel"), action: function() {
            clearTimeout(h);
            Qva.CanceledByUser = true;
            Qva.ModalMessage(g, Qva.XmlEncode(b), false, a)
        }};
    Qva.ModalMessage(g, Qva.XmlEncode(f), true, c)
};
Qva.ErrorMessage = function(c) {
    var b = document.createElement("DIV");
    b.className = "HTMLMessage";
    var a = document.createElement("DIV");
    a.style.width = "100%";
    a.style.height = "100%";
    a.innerHTML = c;
    a.style.overflow = "auto";
    b.appendChild(a);
    document.body.appendChild(b)
};
Qva.addEvent = function(a, c, b) {
    a["on" + c] = b
};
Qva.removeEvent = function(a, c, b) {
    a["on" + c] = null
};
Qva.cancelSelectEvent_md = function(a) {
    if (!Qva.MouseDown) {
        return
    }
    a = a || window.event;
    var b = a.target || a.srcElement;
    if (Qva.DragDrop.curDrag || (b.nodeName != "INPUT" && b.nodeName != "SELECT")) {
        Qva.cancelSelectEvent = true
    }
    if (Qva.cancelSelectEvent && a.preventDefault) {
        a.preventDefault()
    }
};
Qva.cancelSelectEvent_mm = function(a) {
    if (Qva.cancelSelectEvent) {
        return false
    }
};
Qva.GetToolbarElement = function() {
    return document.getElementById("QvAjaxToolbar")
};
Qva.ResizeBody = function() {
    var h = $(document), g = Math.min(document.documentElement.clientHeight + $(window).scrollTop(), h.height()), b = Math.min(document.documentElement.clientWidth + $(window).scrollLeft(), h.width()), f = $(document.getElementById("MainContainer")), c = $(Qva.GetToolbarElement()), a = $(document.getElementById("Tabrow")), d = document.body.scrollWidth;
    if (c[0] && a[0]) {
        f.css("height", Math.max(0, Number(g - c.outerHeight(true) - a.outerHeight(true) - 1)));
        if (IS_TOUCHENABLED) {
            c.css("width", d);
            a.css("width", d)
        } else {
            c.css("width", b);
            a.css("width", b)
        }
    }
    if (IS_TOUCHENABLED) {
        $(document.documentElement).width(d).height(document.body.scrollHeight)
    } else {
        $("body").css("width", b).css("height", g)
    }
    if (Qva.GetBinder() && Qva.GetBinder().BackgroundMgr) {
        Qva.GetBinder().BackgroundMgr.SetBackgroundPosition()
    }
};
Qva.LoadScript = function(b, d, c) {
    if (c == undefined) {
        c = document
    }
    var a = c.createElement("script");
    a.type = "text/javascript";
    a.src = b;
    if (a.readyState) {
        a.onreadystatechange = function() {
            if (a.readyState == "loaded" || a.readyState == "complete") {
                a.onreadystatechange = null;
                if (d && typeof(d) === "function") {
                    d()
                }
            }
        }
    } else {
        a.onload = function() {
            if (d && typeof(d) === "function") {
                d()
            }
        }
    }
    c.getElementsByTagName("head")[0].appendChild(a)
};
Qva.LoadScriptArray = function(d, b, f) {
    var c = d;
    var a = function() {
        if (c.length > 0) {
            var g = c.shift();
            Qva.LoadScript(Qva.AddProxyIfAny(g), a, f)
        } else {
            if (b && typeof(b) === "function") {
                b()
            }
        }
    };
    Qva.LoadScript(Qva.AddProxyIfAny(c.shift()), a, f)
};
Qva.LoadCSS = function(a, b) {
    Qva.AddLink("stylesheet", "text/css", a, b)
};
Qva.AddLink = function(a, c, b, h, g, f) {
    if (h == undefined) {
        h = document
    }
    var d = h.createElement("link");
    if (a) {
        d.setAttribute("rel", a)
    }
    if (g) {
        d.setAttribute("media", g)
    }
    if (f) {
        d.setAttribute("sizes", f)
    }
    if (c) {
        d.setAttribute("type", c)
    }
    if (b) {
        d.setAttribute("href", b)
    }
    h.getElementsByTagName("head")[0].appendChild(d)
};
Qva.GetDebugFiles = function(a) {
    var c = Qva.Debug.DisableFileCache ? (Qva.QvAjaxZfcPath.indexOf("?") >= 0 ? "&" : "?") + "n=" + Math.floor(Math.random() * 100001) : "";
    Qva.LoadCSS(Qva.QvAjaxZfcPath + "htc/modal/modal.css" + c);
    Qva.LoadCSS(Qva.QvAjaxZfcPath + "htc/jquery-ui-1.8.11.custom.css" + c);
    Qva.LoadCSS(Qva.QvAjaxZfcPath + "htc/calendartheme.css" + c);
    Qva.LoadCSS(Qva.QvAjaxZfcPath + "htc/property-icons.css" + c);
    Qva.LoadCSS(Qva.QvAjaxZfcPath + "htc/generic-property-grid/screen.css" + c);
    Qva.LoadCSS(Qva.QvAjaxZfcPath + "htc/tabcontent.css" + c);
    Qva.LoadCSS(Qva.QvAjaxZfcPath + "htc/qlikviewguiprototyping_v2.0.css" + c);
    Qva.LoadCSS(Qva.QvAjaxZfcPath + "htc/avq.css" + c);
    Qva.LoadCSS(Qva.QvAjaxZfcPath + "htc/QvAjaxToolbar.css" + c);
    Qva.LoadCSS(Qva.QvAjaxZfcPath + "htc/QvAjaxMenu.css" + c);
    var b = [Qva.QvAjaxZfcPath + "htc/jquery-1.7.js" + c, Qva.QvAjaxZfcPath + "htc/jquery-ui-1.8.6.custom.js" + c, Qva.QvAjaxZfcPath + "htc/jquery.getPath.js" + c, Qva.QvAjaxZfcPath + "htc/QvScroll.js" + c, Qva.QvAjaxZfcPath + "htc/QvJQueryExtension.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxAreaSelect.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxMenu.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxToolbar.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxGraphMgr.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxBaseMgr.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxObjectMgr.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxCollaboration.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxDragDrop.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxGraphics.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxModal.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxScan.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxSlider.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxGrid.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxListbox.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxTabRow.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxToolWindow.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxTouch.js" + c, Qva.QvAjaxZfcPath + "htc/QvAjaxSearch.js" + c, Qva.QvAjaxZfcPath + "htc/Calendar/QvAjaxCalendar.js" + c, Qva.QvAjaxZfcPath + "htc/Calendar/calendar.js" + c, Qva.QvAjaxZfcPath + "htc/Calendar/lang/calendar-en.js" + c, Qva.QvAjaxZfcPath + "htc/qlikviewguiprototyping_v2.0.js" + c, Qva.QvAjaxZfcPath + "htc/ios-orientationchange-fix.js" + c];
    Qva.LoadScriptArray(b, a)
};
Qva.AddExtension = function(b, c, a) {
    if (a) {
        Qva.Mgr[b].prototype.Debug = true
    }
    Qva.Mgr[b].prototype.PostPaint = function() {
        if (typeof(this.QvaPublic.Paint) === "undefined") {
            this.QvaPublic.Paint = c
        }
        try {
            this.QvaPublic.Paint()
        } catch (d) {
            if (a) {
                Assert(false, "An error occured in the postpaint-function in the extension object: \n" + d.description)
            } else {
                Qva.Mgr[b].prototype.PostPaint = null
            }
        }
    }
};
Qva.AddExtensionBase = function(b, a) {
    if (!Qva.Mgr[b]) {
        Qva.Mgr[b] = function(c, f, d, g) {
            if (!Qva.MgrSplit(this, d, g)) {
                return
            }
            this.Element = f;
            this.Touched = false;
            f.ObjectId = c.Element.id;
            f.binderid = c.binderid;
            c.AddManager(this)
        }
    }
    new Qva.Mgr[b](a, a.ContentElement, a.Name)
};
Qva.ExtensionCreator = {};
Qva.WaitingForRequest = function() {
};
Qva.LoadWhenReady = function(a) {
    if (a.IsUpdating) {
        window.setTimeout(function() {
            Qva.LoadWhenReady(a)
        }, 10)
    } else {
        window.setTimeout(function() {
            a.LoadBegin()
        }, 10)
    }
};
Qva.CheckForRequestedScript = function(b, a) {
    if (Qva.ExtensionCreator[b] == Qva.WaitingForRequest) {
        window.setTimeout(function() {
            Qva.CheckForRequestedScript(b, a)
        }, 10)
    }
};
Qva.RequestScript = function(g, f, d) {
    var c = document.getElementsByTagName("head")[0];
    var a = document.createElement("script");
    a.id = g;
    var b = Qva.Remote + (Qva.Remote.indexOf("?") >= 0 ? "&" : "?") + "public=only";
    if (d) {
        b += "&type=" + d
    }
    b += "&name=Extensions/" + g + "/script.js";
    b = Qva.XrfSecure(b);
    a.src = b;
    a.type = "text/javascript";
    c.appendChild(a);
    window.setTimeout(function() {
        Qva.CheckForRequestedScript(g, f)
    }, 10)
};
Qva.getFrameObjForElement = function(a) {
    while (typeof(a.AvqMgr) === "undefined" && a.parentNode !== null) {
        a = a.parentNode
    }
    return typeof(a.AvqMgr) !== "undefined" ? a.AvqMgr : null
};
Qva.PageBinding.prototype.GetQvObject = function(d, a, c) {
    if (!this.isSmallDevices) {
        if (d.indexOf("Document\\") == -1 && d.indexOf("Server\\") == -1) {
            d = "Document\\" + d
        }
    }
    if (d.indexOf("Document.") == -1) {
        d = "Document." + d
    }
    var b = new Qva.Mgr.QvObject(this, d, null);
    if (!c) {
        c = this
    }
    b.PostPaint = function() {
        if (this.QvaPublic.Data.IsDataFetched()) {
            if (!this.QvaPublic.callbackFn) {
                this.QvaPublic.callbackFn = a
            }
            this.QvaPublic.callbackFn(c)
        }
    };
    this.Send(false);
    return b
};
Qva.PageBinding.prototype.Action = function(a) {
    if (!this.Enabled) {
        return
    }
    var b = {};
    if (this.Position != null) {
        b.position = this.Position
    }
    b.action = "";
    b.clientsizeWH = Qva.GetViewportWidth() + ":" + Qva.GetViewportHeight();
    this.Set("Document.StandardActions." + a, b)
};
Qva.PageBinding.prototype.Clear = function() {
    this.Action("CLEARSTATE")
};
Qva.PageBinding.prototype.Back = function() {
    this.Action("BCK")
};
Qva.PageBinding.prototype.Forward = function() {
    this.Action("FWD")
};
Qva.PageBinding.prototype.Undo = function() {
    this.Action("UNDO")
};
Qva.PageBinding.prototype.Redo = function() {
    this.Action("REDO")
};
Qva.PageBinding.prototype.LockSelections = function() {
    this.Action("LS")
};
Qva.PageBinding.prototype.UnlockSelections = function() {
    this.Action("US")
};
Qva.PageBinding.prototype.CloseSession = function() {
    this.Enabled = false;
    this.Ready = function() {
    };
    this.OnContextMenu = function() {
    };
    this.SendClose()
};
Qva.PageBinding.prototype.GetAggregations = function() {
    return this.AggregationMgr.Items
};
Qva.PageBinding.prototype.GetFunctions = function() {
    return this.FunctionMgr.Items
};
Qva.PageBinding.prototype.GetFields = function() {
    return this.FieldMgr.Items
};
Qva.PageBinding.prototype.GetVariables = function() {
    return this.VariableMgr.Items
};
Qva.Public = {Data: function(a) {
        this.CellStyles = new Array();
        this.CellBorderStyles = new Array();
        this.HeaderRows = new Array();
        this.Rows = new Array();
        this.Super = a;
        this.NewOffset = new Object({x: 0, y: 0});
        this.PageOffset = new Object({x: 0, y: 0});
        this.PageSize = new Object({x: 0, y: 0});
        this.TotalSize = new Object({x: 0, y: 0});
        this.IsDataFetched = function() {
            if (this.Super.ObjectMgr.Mode === "invalid" || this.PageSize.x === 0 || this.TotalSize.x === 0 || this.TotalSize.y === 0) {
                return true
            }
            var k = this.NewOffset;
            var h = this.PageSize.y * Math.floor(k.y / this.PageSize.y);
            var c = this.PageSize.x * Math.floor(k.x / this.PageSize.x);
            var f = h + this.PageSize.y;
            var b = c + this.PageSize.x;
            var g = (this.Page === undefined) ? this.PageSize.y : this.Page._size;
            var j = (this.Page === undefined) ? this.PageSize.x : this.Page._size;
            var d = {};
            if (this.Rows[k.y] === undefined && k.y <= this.TotalSize.y) {
                d.y = h;
                d.x = c
            } else {
                if (this.Rows[k.y + g - 1] === undefined && k.y + g <= this.TotalSize.y) {
                    d.y = f;
                    d.x = c
                } else {
                    if (this.Rows[k.y][k.x] === undefined && k.x <= this.TotalSize.x) {
                        d.x = c;
                        d.y = h
                    } else {
                        if (this.Rows[k.y][k.x + j - 1] === undefined && k.x + j <= this.TotalSize.x) {
                            d.x = b;
                            d.y = h
                        } else {
                            if (k.y + g <= this.TotalSize.y) {
                                if (this.Rows[k.y + g - 1][k.x + j - 1] === undefined && k.x + j <= this.TotalSize.x) {
                                    d.y = f;
                                    d.x = b
                                }
                            }
                        }
                    }
                }
            }
            if (d.x !== undefined) {
                if (d.y == f) {
                    for (; !this.Rows[d.y - 1] && d.y > h; --d.y) {
                    }
                }
                if (d.x == b) {
                    for (; !this.Rows[d.x - 1] && d.x > c; --d.x) {
                    }
                }
                this.Super.ObjectMgr.PartialLoad(this.Super.Name, d);
                return false
            } else {
                return true
            }
        }
    }, Layout: function(a) {
        this.ObjectId = "";
        this.Super = a;
        this.SetProperty = function(b, d, c) {
            this.Super.DocumentMgr.Set(this.Super.Name, {property: b, value: d}, c)
        }
    }, Wrapper: function(a) {
        this.Element = a.Element;
        if (typeof(a.PageBinder) !== "undefined" && typeof(a.PageBinder.GetMaxClientHeight) !== "undefined") {
            this.GetHeight = a.PageBinder.GetMaxClientHeight
        } else {
            this.GetHeight = function() {
                return 0
            }
        }
        if (typeof(a.PageBinder) !== "undefined" && typeof(a.PageBinder.GetMaxClientWidth) !== "undefined") {
            this.GetWidth = a.PageBinder.GetMaxClientWidth
        } else {
            this.GetWidth = function() {
                return 0
            }
        }
        this.PageBinder = a;
        this.DocumentMgr = typeof(a.PageBinder.PageBinder) !== "undefined" ? a.PageBinder.PageBinder : a.PageBinder;
        this.ObjectMgr = typeof(a.PageBinder.PageBinder) !== "undefined" ? a.PageBinder : a;
        this.Name = this.ObjectMgr.Name;
        this.Type = this.ObjectMgr.Type;
        this.Data = new Qva.Public.Data(this);
        this.Layout = new Qva.Public.Layout(this);
        this.GetQvObject = function(d, b) {
            var c = this.DocumentMgr.GetQvObject(d, b, this);
            if (c.IsInvalid()) {
                this.DocumentMgr.Load(true)
            }
            return c
        };
        this.IsInvalid = function() {
            var b = true;
            if (typeof(this.ObjectMgr.IsInvalid) !== "undefined") {
                b = this.ObjectMgr.IsInvalid()
            }
            return b
        };
        this.SetOnUpdateComplete = function(b) {
            this.callbackFn = b
        };
        this.QvaPublic = this
    }, __namespace: true};
Qva.Public.Wrapper.__class = true;
Qva.Help = {Show: function(c) {
        var b = "Toolbar";
        if (this.Context && this.Context.Topic) {
            var d = window.document.getElementById(this.Context.Name);
            if (d && d.AvqMgr) {
                b = this.Context.Topic
            }
        }
        var a = c.replace("{topic}", b);
        window.open(a, "MCWebHelp")
    }};
Qva.Hex2RGBA = function(b) {
    if (b.length === 7) {
        return b
    }
    Assert(b.length === 9);
    var a = b.substr(3).match(/(.{2})/g), c = (parseInt(b.substr(1, 2), 16) / 255).toFixed(2);
    a[0] = parseInt(a[0], 16);
    a[1] = parseInt(a[1], 16);
    a[2] = parseInt(a[2], 16);
    return"rgba(" + a.join(", ") + ", " + c + ")"
};
Qva.Hex2CSSExpression = function(a) {
    var c = null;
    if (a && a.indexOf("#") === 0) {
        try {
            if (!IS_IE || IE_DOCMODE >= 9) {
                c = Qva.Hex2RGBA(a)
            }
        } catch (b) {
            Assert(false);
            c = null
        }
    }
    return c
};
Qva.ApplyGradientToElement = function(a, d, f, l, h, g) {
    a = parseInt(a);
    d = parseInt(d);
    var k = Qva.Hex2RGBA(f), c = Qva.Hex2RGBA(l), b = false;
    try {
        h.style.backgroundColor = "";
        if (a === 0) {
            switch (d) {
                case 3:
                    if (IS_WEBKIT) {
                        h.style.backgroundImage = "-webkit-gradient(linear, center top, center bottom, from(" + c + "), color-stop(0.5, " + k + "), to(" + c + "))";
                        b = true
                    } else {
                        if (IS_GECKO) {
                            h.style.backgroundImage = "-moz-linear-gradient(top, " + c + "," + k + " 50%, " + c + ")";
                            b = true
                        } else {
                            if (IS_IE10_OR_ABOVE) {
                                h.style.background = "linear-gradient(to top," + c + "," + k + " 50%, " + c + ")";
                                b = true
                            }
                        }
                    }
                    break;
                case 2:
                    if (IS_WEBKIT) {
                        h.style.backgroundImage = "-webkit-gradient(linear, center top, center bottom, from(" + k + "), color-stop(0.5, " + c + "), to(" + k + "))";
                        b = true
                    } else {
                        if (IS_GECKO) {
                            h.style.backgroundImage = "-moz-linear-gradient(top, " + k + "," + c + " 50%, " + k + ")";
                            b = true
                        } else {
                            if (IS_IE10_OR_ABOVE) {
                                h.style.background = "linear-gradient(to top," + k + "," + c + " 50%, " + k + ")";
                                b = true
                            }
                        }
                    }
                    break;
                case 1:
                    if (IS_WEBKIT) {
                        h.style.backgroundImage = "-webkit-gradient(linear, center bottom, center top, from(" + k + "), to(" + c + "))";
                        b = true
                    } else {
                        if (IS_GECKO) {
                            h.style.backgroundImage = "-moz-linear-gradient(to top, " + k + "," + c + ")";
                            b = true
                        } else {
                            if (IS_IE) {
                                if (IS_IE10_OR_ABOVE) {
                                    h.style.background = "linear-gradient(to top," + k + ", " + c + ")"
                                } else {
                                    h.style.filter = "progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr=" + l + ", EndColorStr=" + f + ");"
                                }
                                b = true
                            }
                        }
                    }
                    break;
                case 0:
                default:
                    if (IS_WEBKIT) {
                        h.style.backgroundImage = "-webkit-gradient(linear, center top, center bottom, from(" + k + "), to(" + c + "))";
                        b = true
                    } else {
                        if (IS_GECKO) {
                            h.style.backgroundImage = "-moz-linear-gradient(top, " + k + "," + c + ")";
                            b = true
                        } else {
                            if (IS_IE) {
                                if (IS_IE10_OR_ABOVE) {
                                    h.style.background = "linear-gradient(to bottom," + k + ", " + c + ")"
                                } else {
                                    h.style.filter = "progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr=" + f + ", EndColorStr=" + l + ");"
                                }
                                b = true
                            }
                        }
                    }
                    break
                }
        } else {
            if (a === 1) {
                switch (d) {
                    case 3:
                        if (IS_WEBKIT) {
                            h.style.backgroundImage = "-webkit-gradient(linear, left center, right center, from(" + c + "), color-stop(0.5," + k + "),   to(" + c + "))";
                            b = true
                        } else {
                            if (IS_GECKO) {
                                h.style.backgroundImage = "-moz-linear-gradient(left, " + c + ", " + k + " 50%, " + c + ")";
                                b = true
                            } else {
                                if (IS_IE10_OR_ABOVE) {
                                    h.style.background = "linear-gradient(to left, " + c + ", " + k + " 50%, " + c + ")";
                                    b = true
                                }
                            }
                        }
                        break;
                    case 2:
                        if (IS_WEBKIT) {
                            h.style.backgroundImage = "-webkit-gradient(linear, left center, right center, from(" + k + "), color-stop(0.5," + c + "),   to(" + k + "))";
                            b = true
                        } else {
                            if (IS_GECKO) {
                                h.style.backgroundImage = "-moz-linear-gradient(left, " + k + ", " + c + " 50%, " + k + ")";
                                b = true
                            } else {
                                if (IS_IE10_OR_ABOVE) {
                                    h.style.background = "linear-gradient(to left, " + k + ", " + c + " 50%, " + k + ")";
                                    b = true
                                }
                            }
                        }
                        break;
                    case 1:
                        if (IS_WEBKIT) {
                            h.style.backgroundImage = "-webkit-gradient(linear, right center, left center, from(" + k + "), to(" + c + "))";
                            b = true
                        } else {
                            if (IS_GECKO) {
                                h.style.backgroundImage = "-moz-linear-gradient(right, " + k + ", " + c + ")";
                                b = true
                            } else {
                                if (IS_IE) {
                                    if (IS_IE10_OR_ABOVE) {
                                        h.style.background = "linear-gradient(to right," + c + ", " + k + ")"
                                    } else {
                                        h.style.filter = "progid:DXImageTransform.Microsoft.Gradient(GradientType=1, StartColorStr=" + l + ", EndColorStr=" + f + ");"
                                    }
                                    b = true
                                }
                            }
                        }
                        break;
                    case 0:
                    default:
                        if (IS_WEBKIT) {
                            h.style.backgroundImage = "-webkit-gradient(linear, left center, right center, from(" + k + "), to(" + c + "))";
                            b = true
                        } else {
                            if (IS_GECKO) {
                                h.style.backgroundImage = "-moz-linear-gradient(left, " + k + ", " + c + ")";
                                b = true
                            } else {
                                if (IS_IE) {
                                    if (IS_IE10_OR_ABOVE) {
                                        h.style.background = "linear-gradient(to left," + c + ", " + k + ")"
                                    } else {
                                        h.style.filter = "progid:DXImageTransform.Microsoft.Gradient(GradientType=1, StartColorStr=" + f + ", EndColorStr=" + l + ");"
                                    }
                                    b = true
                                }
                            }
                        }
                        break
                    }
            } else {
                if (a === 2 && IS_IE10_OR_ABOVE) {
                    switch (d) {
                        case 1:
                            h.style.background = "linear-gradient(to right top," + k + ", " + c + ")";
                            b = true;
                            break;
                        case 2:
                            h.style.background = "linear-gradient(to right top, " + k + ", " + c + " 50%, " + k + ")";
                            b = true;
                            break;
                        case 3:
                            h.style.background = "linear-gradient(to right top, " + c + ", " + k + " 50%, " + c + ")";
                            b = true;
                            break;
                        case 0:
                        default:
                            h.style.background = "linear-gradient(to right top," + c + ", " + k + ")";
                            b = true
                        }
                } else {
                    if (a === 3 && IS_IE10_OR_ABOVE) {
                        switch (d) {
                            case 1:
                                h.style.background = "linear-gradient(to left top," + c + ", " + k + ")";
                                b = true;
                                break;
                            case 2:
                                h.style.background = "linear-gradient(to left top, " + k + ", " + c + " 50%, " + k + ")";
                                b = true;
                                break;
                            case 3:
                                h.style.background = "linear-gradient(to left top, " + c + ", " + k + " 50%, " + c + ")";
                                b = true;
                                break;
                            case 0:
                            default:
                                h.style.background = "linear-gradient(to left top," + k + ", " + c + ")";
                                b = true
                            }
                    }
                }
            }
        }
    } catch (j) {
        Assert(false);
        b = false
    }
    if (!b && g) {
        b = Qva.ApplyGradientToElement("0", "0", f, l, h, false)
    }
    return b
};
Qva.JsToXml = function(f, b) {
    switch (typeof f) {
        case"object":
            var a = "";
            if (f.length == undefined) {
                for (var d in f) {
                    if (d == "Super") {
                        continue
                    }
                    var g = f[d];
                    if (typeof g == "function") {
                        continue
                    }
                    if (b) {
                        a += " "
                    }
                    a += "<" + d + ">" + Qva.JsToXml(g, b) + "</" + d + ">"
                }
            } else {
                for (var c = 0; c < f.length; ++c) {
                    if (b) {
                        a += " "
                    }
                    a += "<e>" + Qva.JsToXml(f[c], b) + "</e>"
                }
            }
            return a;
        default:
            return Qva.XmlEncode("" + f)
        }
};
Qva.JsEncode = function(a) {
    var b = "" + a;
    b = b.replace(/\\/g, "\\\\");
    b = b.replace(/'/g, "\\'");
    return b
};
Qva.JsToText = function(f, b) {
    switch (typeof f) {
        case"object":
            if (f.length == undefined) {
                var a = "{";
                for (var d in f) {
                    if (d == "Super") {
                        continue
                    }
                    var g = f[d];
                    if (typeof g == "function") {
                        continue
                    }
                    if (a.length > 1) {
                        a += ","
                    }
                    if (b) {
                        a += "\n"
                    }
                    a += d + ":" + Qva.JsToText(g, b)
                }
                return a + "}"
            } else {
                var a = "[";
                for (var c = 0; c < f.length; ++c) {
                    if (a.length > 1) {
                        a += ","
                    }
                    if (b) {
                        a += "\n"
                    }
                    a += Qva.JsToText(f[c], b)
                }
                return a + "]"
            }
        default:
            return Qva.JsEncode("" + f)
        }
};
function Assert(a) {
}
Qva.AddProxyIfAny = function(a) {
    if (!this.Proxy) {
        return a
    }
    var c = this.Proxy + "?u=";
    if (a.indexOf(c) == 0) {
        a = a.substring(c.length);
        a = Qva.DecodeComponent(a)
    }
    var b = Qva.EncodeComponent(a);
    return c + b
};
Qva.AddProxyToUrlsInStyleSheets = function() {
    var g = false;
    if (Qva.AddProxyToUrlsInStyleSheetsTries == undefined) {
        Qva.AddProxyToUrlsInStyleSheetsTries = 0
    } else {
        Qva.AddProxyToUrlsInStyleSheetsTries += 1
    }
    try {
        for (var j = 0; j < document.styleSheets.length; j++) {
            var b = document.styleSheets[j].href;
            if (b == null) {
                continue
            }
            if (b.indexOf(Qva.QvAjaxZfcPath) == -1) {
                continue
            }
            if (b.toLowerCase().indexOf("default.css") > -1) {
                g = true
            }
            var n;
            try {
                n = document.styleSheets[j].rules ? document.styleSheets[j].rules : document.styleSheets[j].cssRules
            } catch (k) {
                if (Qva.AddProxyToUrlsInStyleSheetsTries < 100) {
                    setTimeout(Qva.AddProxyToUrlsInStyleSheets, 40);
                    return
                } else {
                    continue
                }
            }
            if (!n) {
                continue
            }
            for (var l = 0; l < n.length; l++) {
                var f;
                try {
                    f = n[l].style.cssText ? n[l].style.cssText : n[l].cssText
                } catch (k) {
                    continue
                }
                if (!f) {
                    continue
                }
                var h = 0;
                while (f.indexOf("url(", h) != -1) {
                    var c = f.indexOf("url(");
                    h = f.indexOf(")", c);
                    var a = f.substring(c + 4, h);
                    a = a.replace(new RegExp("(\"|')", "g"), "");
                    var m = b.lastIndexOf("%2f") + 3 > b.lastIndexOf("/") + 1 ? b.lastIndexOf("%2f") + 3 : b.lastIndexOf("/") + 1;
                    var p = b.substring(0, m);
                    var d = p.substring(0, p.indexOf("?"));
                    if (d != "") {
                        d = d.substring(0, d.lastIndexOf("/") + 1)
                    }
                    if (d != "") {
                        a = a.replace(d, "")
                    }
                    a = p + a;
                    var o = a;
                    o = '"' + o + '"';
                    f = f.substring(0, c + 4) + o + f.substring(h);
                    if (n[l].style.cssText) {
                        n[l].style.cssText = f
                    } else {
                        n[l].cssText = f
                    }
                }
            }
        }
    } catch (k) {
        return
    }
    if (!g) {
        setTimeout(Qva.AddProxyToUrlsInStyleSheets, 40)
    }
};
Qva.ConsoleLog = {SeverityTypes: {None: 0, Normal: 1, Verbose: 2}, Severity: 0, LogExists: typeof(console) !== "undefined" && console.log, Log: function(c, a) {
        if (typeof(a) === "undefined") {
            a = Qva.ConsoleLog.Severity
        }
        if (a <= Qva.ConsoleLog.Severity) {
            if (Qva.ConsoleLog.LogExists) {
                console.log(c)
            } else {
                if (!this.Console) {
                    var b = window.document.getElementById("DebugConsole");
                    if (b) {
                        this.Console = $(b);
                        this.Console.css("display", "")
                    }
                }
                if (this.Console) {
                    this.Console[0].innerText += c + "\n"
                }
            }
        }
    }, LogAllObjectProperties: function(a) {
        for (props in a) {
            this.Log(props + ": " + a[props])
        }
    }};
Qva.PageBinding.prototype.SimpleCall = function(c, b, d, a) {
    tempMgr = function(g, j, h, k, f) {
        this.Paint = function(o, n, l) {
            var m = {};
            Qva.ObjectifyXML(m, n);
            if (this.Callback && typeof(this.Callback) === "function") {
                this.Callback(m);
                this.Remove()
            }
        };
        this.Remove = function() {
            var l = Qva.GetBinder(this.binderid);
            l.RemoveFromManagers(this);
            l.RemoveFromMembers(this)
        };
        if (!Qva.MgrSplit(this, "." + j, "Document")) {
            return
        }
        this.binderid = g.binderid;
        this.Callback = k;
        g.AddManager(this);
        this.Data = [];
        Qva.GetBinder(this.binderid)._Send(j, h, true, f)
    };
    new tempMgr(this, c, b, d, a)
};
Qva.MakeRequest = function(a, f, c) {
    var b;
    if (window.XMLHttpRequest) {
        b = new XMLHttpRequest()
        b.withCredentials = true;
    } else {
        b = new ActiveXObject("MSXML2.XMLHTTP")
    }
    b.onreadystatechange = function() {
        if (b.readyState == 4) {
            if (b.status == 200) {
                f(true, b.responseXML)
            } else {
                f(false, b.responseText)
            }
        }
    };
    a = Qva.AddProxyIfAny(a);
    a = Qva.XrfSecure(a);
    if (c) {
        b.open("POST", a, true)
    } else {
        b.open("GET", a, true)
    }
    c.setRequestHeader("QVUser", "jog")
    try {
        b.send(c)
    } catch (d) {
        f(false, "Error sending")
    }
};
Qva.ExecuteBodyOnLoadFunctionNames = function() {
    for (var c in Qva.binders) {
        if (!Qva.binders[c].Enabled) {
            window.setTimeout(Qva.ExecuteBodyOnLoadFunctionNames, 40);
            return
        }
    }
    for (var a = 0; a < Qva.BodyOnLoadFunctionNames.length; a++) {
        if (typeof Qva.BodyOnLoadFunctionNames[a] === "string") {
            var b = window[Qva.BodyOnLoadFunctionNames[a]];
            if (typeof b == "function") {
                b()
            }
        } else {
            if (typeof Qva.BodyOnLoadFunctionNames[a] === "function") {
                Qva.BodyOnLoadFunctionNames[a]()
            }
        }
    }
    Qva.BodyOnLoadFunctionNames = []
};
Qva.Init = function(g) {
    if (typeof(g.View) == "undefined") {
        alert("Configuration property 'View' is missing");
        return
    }
    if (Qva.Docs) {
        for (var d = 0; d < Qva.Docs.length; d++) {
            if (g.View == Qva.Docs[d]["View"]) {
                return
            }
        }
    }
    var j = ["QvAjaxZfcPath", "BodyOnLoadFunctionNames", "CSS", "Remote"];
    var l = ["Platform", "View", "Host", "CustomIcons", "AuthenticateUrl", "Ticket", "InitialSelections", "InlineStyle", "InitialSearch", "Bookmark", "Userid", "Xuserid", "Password", "Xpassword", "AlternateUser", "Anonymous", "isSmallDevices"];
    _isValid = function(n, m) {
        for (d = 0; d < n.length; d++) {
            if (n[d] == m) {
                return true
            }
        }
        return false
    };
    if (!this.Initialized) {
        var c = document.getElementsByTagName("script");
        for (var d = 0; d < c.length; d++) {
            var a = c[d].src;
            var k = a.toLowerCase().lastIndexOf("QvAjax.js".toLowerCase());
            if (k > -1) {
                var b = Qva.ExtractProperty("u", null, true, a);
                if (b != null) {
                    Qva.Proxy = a.substr(0, a.indexOf("u=") - 1);
                    a = Qva.DecodeComponent(b);
                    k = a.toLowerCase().lastIndexOf("QvAjax.js".toLowerCase())
                }
                Qva.QvAjaxZfcPath = a.substr(0, k - 4);
//                Qva.Remote = "http://67.220.100.42/QvAjaxZfc/QvsViewClient.aspx";
                Qva.Remote = Qva.QvAjaxZfcPath + "QvsViewClient.aspx";
                Qva.Proxy = "http://67.220.100.42";
                break
            }
        }
        Qva.Docs = new Array();
        Qva.DocumentClick = false
    }
    var h = {};
    for (var f in g) {
        if (_isValid(j, f)) {
            if ((f == "BodyOnLoadFunctionNames" || f == "CSS")) {
                if (typeof(g[f]) == "object") {
                    Qva[f] = Qva[f].concat(g[f])
                } else {
                    Qva[f].push(g[f])
                }
            } else {
                Qva[f] = g[f]
            }
        } else {
            if (_isValid(l, f)) {
                h[f] = g[f]
            } else {
                alert("Unsupported configuration property: " + f)
            }
        }
    }
    if (h.View != "<select document>") {
        Qva.Docs.push(h)
    }
    if (!this.Initialized) {
        Qva.AddLink("shortcut icon", "image/x-icon", Qva.QvAjaxZfcPath + "htc/Images/favicon.ico");
        if (!g.isSmallDevices) {
            Qva.LoadCSS(Qva.QvAjaxZfcPath + "htc/default.css")
        }
        for (var d = 0; d < Qva.CSS.length; d++) {
            Qva.LoadCSS(Qva.CSS[d])
        }
        if (typeof(Qva.Mgr) === "undefined") {
            Qva.GetDebugFiles(Qva.Init2)
        } else {
            $(document).ready(Qva.Init2)
        }
    }
    this.Initialized = true
};
Qva.Init2 = function() {
    for (var d = 0; d < Qva.Docs.length; d++) {
        var f = Qva.Docs[d]["View"];
        var c = new Qva.PageBinding(f);
        var a = $("#main")[0];
        c.Autoview = window.document.uniqueID;
        c.AuthenticateUrl = Qva.QvAjaxZfcPath + "Authenticate.aspx";
        c.Host = "Local";
        for (var b in Qva.Docs[d]) {
            c[b] = Qva.Docs[d][b]
        }
        if (!a) {
            a = document.createElement("div");
            a.setAttribute("id", "mainContainer_" + f);
            document.body.appendChild(a)
        }
        c.CollaborationObject = new Qva.Collaboration(c, a);
        c._Send("add", "Document.Objectlist", false)
    }
    new Qva.Modal();
    new Qva.Scanner();
    Qva.Start()
};
Qva.InitWebParts = function(a) {
    Qva.IS_WEBPARTS = true;
    a.Platform = "WEBPARTS";
    Qva.Init(a)
};
Qv = {};
Qv.InitWorkBench = function(a) {
    Qva.IS_WORKBENCH = true;
    a.Platform = "WORKBENCH";
    Qva.Init(a)
};
Qv.GetDocument = function(a) {
    return new Qv.Document(a)
};
Qv.GetCurrentDocument = function() {
    return new Qv.Document()
};
Qv.GetAllDocuments = function(a) {
    newCallback = function(b, h) {
        if (!b) {
            alert("Error")
        } else {
            var d = [];
            var g = h.getElementsByTagName("document");
            for (var c = 0; c < g.length; ++c) {
                var f = {};
                ObjectifyXmlAttributes(f, g[c]);
                d[d.length] = f
            }
            d.sort(function(k, j) {
                return(k.title.toUpperCase() > j.title.toUpperCase()) ? 1 : ((j.title.toUpperCase() > k.title.toUpperCase()) ? -1 : 0)
            });
            a(d)
        }
    };
    Qva.MakeRequest(Qva.QvAjaxZfcPath + "DocList.aspx", newCallback)
};
Qv.GetDocObjects = function(c, d, f) {
    newCallback = function(h, m) {
        if (!h) {
            alert("Error")
        } else {
            var k = [];
            var g = m.getElementsByTagName("object");
            for (var j = 0; j < g.length; j++) {
                var l = {};
                ObjectifyXmlAttributes(l, g[j]);
                if (l.id) {
                    k[k.length] = l
                }
            }
            f(k)
        }
    };
    var a = "?mark=&host=" + Qva.EncodeComponent(c) + "&view=" + Qva.EncodeComponent(d);
    var b = '<update mark="" stamp="" scope="Document" view="' + d + '" ident="null">';
    b += '<info name="Document.SheetObjects" />';
    b += "</update>";
    Qva.MakeRequest(Qva.Remote + a, newCallback, b)
};
Qv.LoadExtensionScripts = function(d, b) {
    for (var c = 0; c < d.length; c++) {
        var a = d[c].toLowerCase();
        if (a.indexOf("extensions") === 0) {
            d[c] = Qva.Remote + (Qva.Remote.indexOf("?") >= 0 ? "&" : "?") + "public=only&name=" + d[c]
        }
    }
    return Qva.LoadScriptArray(d, b)
};
Qv.AddExtension = function(b, c, a) {
    return Qva.AddExtension(b, c, a)
};
Qv.Document = function(a) {
    if (a == undefined) {
        this.binder = Qva.GetBinder(Qva.Docs && Qva.Docs[0]["View"] || "")
    } else {
        this.binder = Qva.GetBinder(a)
    }
    if (this.binder == undefined) {
        alert("Document '" + a + "' must first be initialized by the function 'Qv.InitWorkBench' before it can be used")
    }
};
Qv.Document.prototype.Back = function() {
    return this.binder.Back()
};
Qv.Document.prototype.Clear = function() {
    return this.binder.Clear()
};
Qv.Document.prototype.CloseSession = function() {
    return this.binder.CloseSession()
};
Qv.Document.prototype.Forward = function() {
    return this.binder.Forward()
};
Qv.Document.prototype.LockSelections = function() {
    return this.binder.LockSelections()
};
Qv.Document.prototype.Redo = function() {
    return this.binder.Redo()
};
Qv.Document.prototype.Undo = function() {
    return this.binder.Undo()
};
Qv.Document.prototype.UnlockSelections = function() {
    return this.binder.UnlockSelections()
};
Qv.Document.prototype.GetAllObjects = function(a) {
    this.binder.SimpleCall("info", "Document.SheetObjects", function(b) {
        a.call(this, b.object)
    })
};
Qv.Document.prototype.GetAllSheetsAndObjects = function(a) {
    this.binder.SimpleCall("info", "Document.SheetsAndObjects", function(b) {
        a.call(this, b.sheet)
    })
};
Qv.Document.prototype.SetVariable = function(a, b) {
    this.binder.Set("Document.Variable\\" + a, "value", b, true)
};
Qv.Document.prototype.GetAllVariables = function(a) {
    this.binder.SimpleCall("info", "Document.Variables", function(b) {
        a.call(this, b.variable)
    })
};
Qv.Document.prototype.Bookmarks = function() {
    return this.binder.BookmarksMgr
};
Qv.Document.prototype.SetOnUpdateComplete = function(a) {
    this.binder.OnUpdateComplete = a
};
Qv.Document.Object = function(b, a) {
    this._doc = b;
    this._object = this._doc.binder.GetQvObject(a, function() {
    }, this);
    this.QvaPublic = this._object.QvaPublic
};
Qv.Document.Object.prototype.SetOnUpdateComplete = function(a) {
    this._object.QvaPublic.callbackFn = a
};
Qv.Document.prototype.GetObject = function(a, b) {
    b = typeof b === "function" ? b : function() {
    };
    var c = this.binder.GetQvObject(a, b);
    return c.QvaPublic
};
Qv.Document.prototype.SetTabrowPaint = function(a) {
    this.binder.PaintTabrow = a
};
Qv.Document.prototype.SetToolbarPaint = function(a) {
    this.binder.PaintToolbar = a
};
Qv.Document.prototype.SetBackgroundPaint = function(a) {
    this.binder.PaintBackground = a
};
Qv.Document.prototype.AddBookmarkPaint = function(a) {
    this.binder.BookmarksSubscribers.push(a);
    a.Paint(this.binder.BookmarksMgr)
};
Qv.Document.prototype.GetCurrentSelections = function(a) {
    var d = {onChange: function() {
        }, fields: [], enabled: true};
    var f = {name: undefined, state: "selected", onDataLoaded: function() {
        }};
    if (a.fields) {
        for (var b = 0; b < a.fields.length; ++b) {
            d.fields.push(f)
        }
    }
    var c = $.extend(true, {}, d, a);
    this.binder.CurrentSelectionMgr.GetData(c)
};
Qv.Document.prototype.GetField = function(a) {
    if (!a.name || !a.onDataLoaded) {
        return
    }
    var b = this.binder.GetField(a, true);
    b.GetData(true, a.offset)
};
Qva.GetMatrix = function(c) {
    var f, d, b = ["transform", "-webkit-transform", "-moz-transform", "-ms-transform", "-o-transform"], a = b.length;
    for (d = 0; d < a; ++d) {
        f = c.css(b[d]);
        if (f) {
            return f
        }
    }
};
Qva.GetTranslation = function(b) {
    var c = /matrix\(1, 0, 0, 1, (-?\d+)(?:px)?, (-?\d+)(?:px)?\)/, a = Qva.GetMatrix(b), d = a && a.match(c);
    return d && {x: +d[1], y: +d[2]}
};
Qva.XrfSecure = function(c) {
    var a, b;
    if (c.indexOf("xrfkey") < 0 && c.indexOf(Qva.QvAjaxZfcPath) != -1) {
        b = Qva.readCookie("xrfkey");
        if (b) {
            a = b
        } else {
            a = Qva.getRandomString(16);
            document.cookie = "xrfkey=" + a + ";path=/"
        }
        c = Qva.FixUrl(c, "xrfkey", a)
    }
    return c
};
Qva.getRandomString = function(c) {
    var a = "", d, b;
    for (d = 0; d < c; d++) {
        b = Math.floor(Math.random() * 62);
        if (b < 10) {
            a += b
        } else {
            if (b > 9 && b < 36) {
                a += String.fromCharCode(b + 55)
            } else {
                a += String.fromCharCode(b + 61)
            }
        }
    }
    return a
};
Qva.readCookie = function(b) {
    var d, g, f = b + "=", a = document.cookie.split(";");
    for (d = 0; d < a.length; d++) {
        g = a[d];
        while (g.charAt(0) === " ") {
            g = g.substring(1, g.length)
        }
        if (g.indexOf(f) === 0) {
            return g.substring(f.length, g.length)
        }
    }
    return null
};
Qva.ReplacePngUrlsInStyleSheetsWithGif = function() {
    var b = false;
    try {
        for (var c = 0; c < document.styleSheets.length; c++) {
            var a = document.styleSheets[c].href;
            if (a == null) {
                continue
            }
            if (a.toLowerCase().indexOf("qmccommon") > -1) {
                return
            }
            if (a.indexOf(Qva.QvAjaxZfcPath) == -1) {
                continue
            }
            if (a.toLowerCase().indexOf("default.css") > -1) {
                b = true
            }
            document.styleSheets[c].cssText = document.styleSheets[c].cssText.replace(/property_sprite.png/g, "property_sprite.gif")
        }
    } catch (d) {
        return
    }
    if (!b) {
        setTimeout(Qva.ReplacePngUrlsInStyleSheetsWithGif, 40)
    }
};
Qva.GetzIndex = function(a) {
    var b = 666;
    for (; a != null && (a.style == undefined || a.style.zIndex == ""); a = a.parentNode) {
    }
    if (a && a.style && a.style.zIndex) {
        b = a.style.zIndex + 10
    }
    return b
};
Qva.ConvertToBr = function(f) {
    if (f && typeof f == "string") {
        f = Qva.XmlEncode(f);
        var b = "<br />";
        f = f.replace(/\r?\n|\r|\&#xA;|\&#xD;/g, b);
        var d = f.split(b);
        if (d.length > 0) {
            var c = "";
            for (var a = 0; a < d.length; a++) {
                if (d[a].match(/\S/)) {
                    c += d[a]
                }
                if (a < d.length - 1) {
                    c += b
                }
            }
            return c
        }
    }
    return f
};
Qva.RemoveHtml = function(a) {
    $(a).find("*").each(function() {
        $(this).unbind()
    });
    $(a).html("").remove()
};
Qva.NavigateToLoginPageIfAny = function() {
    var a = Qva.QvAjaxZfcPath + "GetLoginpageUrl.aspx";
    var b;
    if (window.XMLHttpRequest) {
        b = new XMLHttpRequest()
    } else {
        b = new ActiveXObject("MSXML2.XMLHTTP")
    }
    b.onreadystatechange = function() {
        if (b.readyState == 4) {
            var d = (200 <= b.status && b.status < 300) || b.status == 1223;
            if (d) {
                if (b.responseText.toLowerCase().indexOf("qlikview/formlogin.htm") > -1) {
                    window.location = b.responseText + "?opendocqs=" + Qva.EncodeComponent(window.location.search)
                }
            }
        }
    };
    b.open("Get", a, true);
    try {
        b.send(null)
    } catch (c) {
    }
};
Qva.SetEllipsisOnMultiLineElement = function(a) {
    $(a).find(".multiline").each(function() {
        var d = $(this);
        var c = d.parent();
        while (c && !c[0].style.height) {
            c = c.parent()
        }
        if (c) {
            var b = parseInt(c[0].style.height);
            var f = d.text();
            while (f.length > 0 && d.height() > b + 1) {
                f = f.substr(0, f.length / 2);
                d.html(f.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\r?\n/g, "<br/>") + "...")
            }
        }
    })
};
Qva.EncodeComponent = function(a) {
    return encodeURIComponent(a)
};
Qva.DecodeComponent = function(a) {
    return decodeURIComponent(a)
};
/*!
 * jQuery UI 1.8.6
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI
 */
(function(d, b) {
    function a(c) {
        return !d(c).parents().andSelf().filter(function() {
            return d.curCSS(this, "visibility") === "hidden" || d.expr.filters.hidden(this)
        }).length
    }
    d.ui = d.ui || {};
    if (!d.ui.version) {
        d.extend(d.ui, {version: "1.8.6", keyCode: {ALT: 18, BACKSPACE: 8, CAPS_LOCK: 20, COMMA: 188, COMMAND: 91, COMMAND_LEFT: 91, COMMAND_RIGHT: 93, CONTROL: 17, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, INSERT: 45, LEFT: 37, MENU: 93, NUMPAD_ADD: 107, NUMPAD_DECIMAL: 110, NUMPAD_DIVIDE: 111, NUMPAD_ENTER: 108, NUMPAD_MULTIPLY: 106, NUMPAD_SUBTRACT: 109, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SHIFT: 16, SPACE: 32, TAB: 9, UP: 38, WINDOWS: 91}});
        d.fn.extend({_focus: d.fn.focus, focus: function(f, c) {
                return typeof f === "number" ? this.each(function() {
                    var g = this;
                    setTimeout(function() {
                        d(g).focus();
                        c && c.call(g)
                    }, f)
                }) : this._focus.apply(this, arguments)
            }, scrollParent: function() {
                var c;
                c = d.browser.msie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position")) ? this.parents().filter(function() {
                    return/(relative|absolute|fixed)/.test(d.curCSS(this, "position", 1)) && /(auto|scroll)/.test(d.curCSS(this, "overflow", 1) + d.curCSS(this, "overflow-y", 1) + d.curCSS(this, "overflow-x", 1))
                }).eq(0) : this.parents().filter(function() {
                    return/(auto|scroll)/.test(d.curCSS(this, "overflow", 1) + d.curCSS(this, "overflow-y", 1) + d.curCSS(this, "overflow-x", 1))
                }).eq(0);
                return/fixed/.test(this.css("position")) || !c.length ? d(document) : c
            }, zIndex: function(f) {
                if (f !== b) {
                    return this.css("zIndex", f)
                }
                if (this.length) {
                    f = d(this[0]);
                    for (var c; f.length && f[0] !== document; ) {
                        c = f.css("position");
                        if (c === "absolute" || c === "relative" || c === "fixed") {
                            c = parseInt(f.css("zIndex"), 10);
                            if (!isNaN(c) && c !== 0) {
                                return c
                            }
                        }
                        f = f.parent()
                    }
                }
                return 0
            }, disableSelection: function() {
                return this.bind((d.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function(c) {
                    c.preventDefault()
                })
            }, enableSelection: function() {
                return this.unbind(".ui-disableSelection")
            }});
        d.each(["Width", "Height"], function(f, c) {
            function l(p, o, n, h) {
                d.each(k, function() {
                    o -= parseFloat(d.curCSS(p, "padding" + this, true)) || 0;
                    if (n) {
                        o -= parseFloat(d.curCSS(p, "border" + this + "Width", true)) || 0
                    }
                    if (h) {
                        o -= parseFloat(d.curCSS(p, "margin" + this, true)) || 0
                    }
                });
                return o
            }
            var k = c === "Width" ? ["Left", "Right"] : ["Top", "Bottom"], j = c.toLowerCase(), g = {innerWidth: d.fn.innerWidth, innerHeight: d.fn.innerHeight, outerWidth: d.fn.outerWidth, outerHeight: d.fn.outerHeight};
            d.fn["inner" + c] = function(h) {
                if (h === b) {
                    return g["inner" + c].call(this)
                }
                return this.each(function() {
                    d(this).css(j, l(this, h) + "px")
                })
            };
            d.fn["outer" + c] = function(m, h) {
                if (typeof m !== "number") {
                    return g["outer" + c].call(this, m)
                }
                return this.each(function() {
                    d(this).css(j, l(this, m, true, h) + "px")
                })
            }
        });
        d.extend(d.expr[":"], {data: function(f, c, g) {
                return !!d.data(f, g[3])
            }, focusable: function(f) {
                var c = f.nodeName.toLowerCase(), g = d.attr(f, "tabindex");
                if ("area" === c) {
                    c = f.parentNode;
                    g = c.name;
                    if (!f.href || !g || c.nodeName.toLowerCase() !== "map") {
                        return false
                    }
                    f = d("img[usemap=#" + g + "]")[0];
                    return !!f && a(f)
                }
                return(/input|select|textarea|button|object/.test(c) ? !f.disabled : "a" == c ? f.href || !isNaN(g) : !isNaN(g)) && a(f)
            }, tabbable: function(f) {
                var c = d.attr(f, "tabindex");
                return(isNaN(c) || c >= 0) && d(f).is(":focusable")
            }});
        d(function() {
            var f = document.body, c = f.appendChild(c = document.createElement("div"));
            d.extend(c.style, {minHeight: "100px", height: "auto", padding: 0, borderWidth: 0});
            d.support.minHeight = c.offsetHeight === 100;
            d.support.selectstart = "onselectstart" in c;
            f.removeChild(c).style.display = "none"
        });
        d.extend(d.ui, {plugin: {add: function(f, c, h) {
                    f = d.ui[f].prototype;
                    for (var g in h) {
                        f.plugins[g] = f.plugins[g] || [];
                        f.plugins[g].push([c, h[g]])
                    }
                }, call: function(f, c, h) {
                    if ((c = f.plugins[c]) && f.element[0].parentNode) {
                        for (var g = 0; g < c.length; g++) {
                            f.options[c[g][0]] && c[g][1].apply(f.element, h)
                        }
                    }
                }}, contains: function(f, c) {
                return document.compareDocumentPosition ? f.compareDocumentPosition(c) & 16 : f !== c && f.contains(c)
            }, hasScroll: function(f, c) {
                if (d(f).css("overflow") === "hidden") {
                    return false
                }
                c = c && c === "left" ? "scrollLeft" : "scrollTop";
                var g = false;
                if (f[c] > 0) {
                    return true
                }
                f[c] = 1;
                g = f[c] > 0;
                f[c] = 0;
                return g
            }, isOverAxis: function(f, c, g) {
                return f > c && f < c + g
            }, isOver: function(f, c, l, k, j, g) {
                return d.ui.isOverAxis(f, l, j) && d.ui.isOverAxis(c, k, g)
            }})
    }
})(jQuery);
/*!
 * jQuery UI Widget 1.8.6
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */
(function(a, f) {
    if (a.cleanData) {
        var d = a.cleanData;
        a.cleanData = function(b) {
            for (var h = 0, g; (g = b[h]) != null; h++) {
                a(g).triggerHandler("remove")
            }
            d(b)
        }
    } else {
        var c = a.fn.remove;
        a.fn.remove = function(b, g) {
            return this.each(function() {
                if (!g) {
                    if (!b || a.filter(b, [this]).length) {
                        a("*", this).add([this]).each(function() {
                            a(this).triggerHandler("remove")
                        })
                    }
                }
                return c.call(a(this), b, g)
            })
        }
    }
    a.widget = function(b, k, j) {
        var h = b.split(".")[0], g;
        b = b.split(".")[1];
        g = h + "-" + b;
        if (!j) {
            j = k;
            k = a.Widget
        }
        a.expr[":"][g] = function(l) {
            return !!a.data(l, b)
        };
        a[h] = a[h] || {};
        a[h][b] = function(l, m) {
            arguments.length && this._createWidget(l, m)
        };
        k = new k;
        k.options = a.extend(true, {}, k.options);
        a[h][b].prototype = a.extend(true, k, {namespace: h, widgetName: b, widgetEventPrefix: a[h][b].prototype.widgetEventPrefix || b, widgetBaseClass: g}, j);
        a.widget.bridge(b, a[h][b])
    };
    a.widget.bridge = function(b, g) {
        a.fn[b] = function(m) {
            var l = typeof m === "string", k = Array.prototype.slice.call(arguments, 1), j = this;
            m = !l && k.length ? a.extend.apply(null, [true, m].concat(k)) : m;
            if (l && m.charAt(0) === "_") {
                return j
            }
            l ? this.each(function() {
                var n = a.data(this, b), h = n && a.isFunction(n[m]) ? n[m].apply(n, k) : n;
                if (h !== n && h !== f) {
                    j = h;
                    return false
                }
            }) : this.each(function() {
                var h = a.data(this, b);
                h ? h.option(m || {})._init() : a.data(this, b, new g(m, this))
            });
            return j
        }
    };
    a.Widget = function(b, g) {
        arguments.length && this._createWidget(b, g)
    };
    a.Widget.prototype = {widgetName: "widget", widgetEventPrefix: "", options: {disabled: false}, _createWidget: function(b, h) {
            a.data(h, this.widgetName, this);
            this.element = a(h);
            this.options = a.extend(true, {}, this.options, this._getCreateOptions(), b);
            var g = this;
            this.element.bind("remove." + this.widgetName, function() {
                g.destroy()
            });
            this._create();
            this._trigger("create");
            this._init()
        }, _getCreateOptions: function() {
            return a.metadata && a.metadata.get(this.element[0])[this.widgetName]
        }, _create: function() {
        }, _init: function() {
        }, destroy: function() {
            this.element.unbind("." + this.widgetName).removeData(this.widgetName);
            this.widget().unbind("." + this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass + "-disabled ui-state-disabled")
        }, widget: function() {
            return this.element
        }, option: function(b, h) {
            var g = b;
            if (arguments.length === 0) {
                return a.extend({}, this.options)
            }
            if (typeof b === "string") {
                if (h === f) {
                    return this.options[b]
                }
                g = {};
                g[b] = h
            }
            this._setOptions(g);
            return this
        }, _setOptions: function(b) {
            var g = this;
            a.each(b, function(j, h) {
                g._setOption(j, h)
            });
            return this
        }, _setOption: function(b, g) {
            this.options[b] = g;
            if (b === "disabled") {
                this.widget()[g ? "addClass" : "removeClass"](this.widgetBaseClass + "-disabled ui-state-disabled").attr("aria-disabled", g)
            }
            return this
        }, enable: function() {
            return this._setOption("disabled", false)
        }, disable: function() {
            return this._setOption("disabled", true)
        }, _trigger: function(b, k, j) {
            var h = this.options[b];
            k = a.Event(k);
            k.type = (b === this.widgetEventPrefix ? b : this.widgetEventPrefix + b).toLowerCase();
            j = j || {};
            if (k.originalEvent) {
                b = a.event.props.length;
                for (var g; b; ) {
                    g = a.event.props[--b];
                    k[g] = k.originalEvent[g]
                }
            }
            this.element.trigger(k, j);
            return !(a.isFunction(h) && h.call(this.element[0], k, j) === false || k.isDefaultPrevented())
        }}
})(jQuery);
/*!
 * jQuery UI Mouse 1.8.6
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Mouse
 *
 * Depends:
 *	jquery.ui.widget.js
 */
(function(a) {
    a.widget("ui.mouse", {options: {cancel: ":input,option", distance: 1, delay: 0}, _mouseInit: function() {
            var b = this;
            this.element.bind("mousedown." + this.widgetName, function(c) {
                return b._mouseDown(c)
            }).bind("click." + this.widgetName, function(c) {
                if (b._preventClickEvent) {
                    b._preventClickEvent = false;
                    c.stopImmediatePropagation();
                    return false
                }
            });
            this.started = false
        }, _mouseDestroy: function() {
            this.element.unbind("." + this.widgetName)
        }, _mouseDown: function(d) {
            d.originalEvent = d.originalEvent || {};
            if (!d.originalEvent.mouseHandled) {
                this._mouseStarted && this._mouseUp(d);
                this._mouseDownEvent = d;
                var c = this, h = d.which == 1, g = typeof this.options.cancel == "string" ? a(d.target).parents().add(d.target).filter(this.options.cancel).length : false;
                if (!h || g || !this._mouseCapture(d)) {
                    return true
                }
                this.mouseDelayMet = !this.options.delay;
                if (!this.mouseDelayMet) {
                    this._mouseDelayTimer = setTimeout(function() {
                        c.mouseDelayMet = true
                    }, this.options.delay)
                }
                if (this._mouseDistanceMet(d) && this._mouseDelayMet(d)) {
                    this._mouseStarted = this._mouseStart(d) !== false;
                    if (!this._mouseStarted) {
                        d.preventDefault();
                        return true
                    }
                }
                this._mouseMoveDelegate = function(b) {
                    return c._mouseMove(b)
                };
                this._mouseUpDelegate = function(b) {
                    return c._mouseUp(b)
                };
                a(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
                d.preventDefault();
                return d.originalEvent.mouseHandled = true
            }
        }, _mouseMove: function(b) {
            if (a.browser.msie && !(document.documentMode >= 9) && !b.button) {
                return this._mouseUp(b)
            }
            if (this._mouseStarted) {
                this._mouseDrag(b);
                return b.preventDefault()
            }
            if (this._mouseDistanceMet(b) && this._mouseDelayMet(b)) {
                (this._mouseStarted = this._mouseStart(this._mouseDownEvent, b) !== false) ? this._mouseDrag(b) : this._mouseUp(b)
            }
            return !this._mouseStarted
        }, _mouseUp: function(b) {
            a(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                this._preventClickEvent = b.target == this._mouseDownEvent.target;
                this._mouseStop(b)
            }
            return false
        }, _mouseDistanceMet: function(b) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - b.pageX), Math.abs(this._mouseDownEvent.pageY - b.pageY)) >= this.options.distance
        }, _mouseDelayMet: function() {
            return this.mouseDelayMet
        }, _mouseStart: function() {
        }, _mouseDrag: function() {
        }, _mouseStop: function() {
        }, _mouseCapture: function() {
            return true
        }})
})(jQuery);
(function(g) {
    g.ui = g.ui || {};
    var f = /left|center|right/, d = /top|center|bottom/, b = g.fn.position, a = g.fn.offset;
    g.fn.position = function(c) {
        if (!c || !c.of) {
            return b.apply(this, arguments)
        }
        c = g.extend({}, c);
        var l = g(c.of), r = l[0], p = (c.collision || "flip").split(" "), q = c.offset ? c.offset.split(" ") : [0, 0], o, m, n;
        if (r.nodeType === 9) {
            o = l.width();
            m = l.height();
            n = {top: 0, left: 0}
        } else {
            if (r.setTimeout) {
                o = l.width();
                m = l.height();
                n = {top: l.scrollTop(), left: l.scrollLeft()}
            } else {
                if (r.preventDefault) {
                    c.at = "left top";
                    o = m = 0;
                    n = {top: c.of.pageY, left: c.of.pageX}
                } else {
                    o = l.outerWidth();
                    m = l.outerHeight();
                    n = l.offset()
                }
            }
        }
        g.each(["my", "at"], function() {
            var h = (c[this] || "").split(" ");
            if (h.length === 1) {
                h = f.test(h[0]) ? h.concat(["center"]) : d.test(h[0]) ? ["center"].concat(h) : ["center", "center"]
            }
            h[0] = f.test(h[0]) ? h[0] : "center";
            h[1] = d.test(h[1]) ? h[1] : "center";
            c[this] = h
        });
        if (p.length === 1) {
            p[1] = p[0]
        }
        q[0] = parseInt(q[0], 10) || 0;
        if (q.length === 1) {
            q[1] = q[0]
        }
        q[1] = parseInt(q[1], 10) || 0;
        if (c.at[0] === "right") {
            n.left += o
        } else {
            if (c.at[0] === "center") {
                n.left += o / 2
            }
        }
        if (c.at[1] === "bottom") {
            n.top += m
        } else {
            if (c.at[1] === "center") {
                n.top += m / 2
            }
        }
        n.left += q[0];
        n.top += q[1];
        return this.each(function() {
            var y = g(this), u = y.outerWidth(), s = y.outerHeight(), k = parseInt(g.curCSS(this, "marginLeft", true)) || 0, j = parseInt(g.curCSS(this, "marginTop", true)) || 0, A = u + k + parseInt(g.curCSS(this, "marginRight", true)) || 0, z = s + j + parseInt(g.curCSS(this, "marginBottom", true)) || 0, x = g.extend({}, n), h;
            if (c.my[0] === "right") {
                x.left -= u
            } else {
                if (c.my[0] === "center") {
                    x.left -= u / 2
                }
            }
            if (c.my[1] === "bottom") {
                x.top -= s
            } else {
                if (c.my[1] === "center") {
                    x.top -= s / 2
                }
            }
            x.left = parseInt(x.left);
            x.top = parseInt(x.top);
            h = {left: x.left - k, top: x.top - j};
            g.each(["left", "top"], function(w, v) {
                g.ui.position[p[w]] && g.ui.position[p[w]][v](x, {targetWidth: o, targetHeight: m, elemWidth: u, elemHeight: s, collisionPosition: h, collisionWidth: A, collisionHeight: z, offset: q, my: c.my, at: c.at})
            });
            g.fn.bgiframe && y.bgiframe();
            y.offset(g.extend(x, {using: c.using}))
        })
    };
    g.ui.position = {fit: {left: function(c, h) {
                var j = g(window);
                j = h.collisionPosition.left + h.collisionWidth - j.width() - j.scrollLeft();
                c.left = j > 0 ? c.left - j : Math.max(c.left - h.collisionPosition.left, c.left)
            }, top: function(c, h) {
                var j = g(window);
                j = h.collisionPosition.top + h.collisionHeight - j.height() - j.scrollTop();
                c.top = j > 0 ? c.top - j : Math.max(c.top - h.collisionPosition.top, c.top)
            }}, flip: {left: function(c, j) {
                if (j.at[0] !== "center") {
                    var n = g(window);
                    n = j.collisionPosition.left + j.collisionWidth - n.width() - n.scrollLeft();
                    var l = j.my[0] === "left" ? -j.elemWidth : j.my[0] === "right" ? j.elemWidth : 0, m = j.at[0] === "left" ? j.targetWidth : -j.targetWidth, k = -2 * j.offset[0];
                    c.left += j.collisionPosition.left < 0 ? l + m + k : n > 0 ? l + m + k : 0
                }
            }, top: function(c, j) {
                if (j.at[1] !== "center") {
                    var n = g(window);
                    n = j.collisionPosition.top + j.collisionHeight - n.height() - n.scrollTop();
                    var l = j.my[1] === "top" ? -j.elemHeight : j.my[1] === "bottom" ? j.elemHeight : 0, m = j.at[1] === "top" ? j.targetHeight : -j.targetHeight, k = -2 * j.offset[1];
                    c.top += j.collisionPosition.top < 0 ? l + m + k : n > 0 ? l + m + k : 0
                }
            }}};
    if (!g.offset.setOffset) {
        g.offset.setOffset = function(c, j) {
            if (/static/.test(g.curCSS(c, "position"))) {
                c.style.position = "relative"
            }
            var n = g(c), l = n.offset(), m = parseInt(g.curCSS(c, "top", true), 10) || 0, k = parseInt(g.curCSS(c, "left", true), 10) || 0;
            l = {top: j.top - l.top + m, left: j.left - l.left + k};
            "using" in j ? j.using.call(c, l) : n.css(l)
        };
        g.fn.offset = function(c) {
            var h = this[0];
            if (!h || !h.ownerDocument) {
                return null
            }
            if (c) {
                return this.each(function() {
                    g.offset.setOffset(this, c)
                })
            }
            return a.call(this)
        }
    }
})(jQuery);
(function(a) {
    a.widget("ui.draggable", a.ui.mouse, {widgetEventPrefix: "drag", options: {addClasses: true, appendTo: "parent", axis: false, connectToSortable: false, containment: false, cursor: "auto", cursorAt: false, grid: false, handle: false, helper: "original", iframeFix: false, opacity: false, refreshPositions: false, revert: false, revertDuration: 500, scope: "default", scroll: true, scrollSensitivity: 20, scrollSpeed: 20, snap: false, snapMode: "both", snapTolerance: 20, stack: false, zIndex: false}, _create: function() {
            if (this.options.helper == "original" && !/^(?:r|a|f)/.test(this.element.css("position"))) {
                this.element[0].style.position = "relative"
            }
            this.options.addClasses && this.element.addClass("ui-draggable");
            this.options.disabled && this.element.addClass("ui-draggable-disabled");
            this._mouseInit()
        }, destroy: function() {
            if (this.element.data("draggable")) {
                this.element.removeData("draggable").unbind(".draggable").removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
                this._mouseDestroy();
                return this
            }
        }, _mouseCapture: function(d) {
            var c = this.options;
            if (this.helper || c.disabled || a(d.target).is(".ui-resizable-handle")) {
                return false
            }
            this.handle = this._getHandle(d);
            if (!this.handle) {
                return false
            }
            return true
        }, _mouseStart: function(d) {
            var c = this.options;
            this.helper = this._createHelper(d);
            this._cacheHelperProportions();
            if (a.ui.ddmanager) {
                a.ui.ddmanager.current = this
            }
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.positionAbs = this.element.offset();
            this.offset = {top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left};
            a.extend(this.offset, {click: {left: d.pageX - this.offset.left, top: d.pageY - this.offset.top}, parent: this._getParentOffset(), relative: this._getRelativeOffset()});
            this.originalPosition = this.position = this._generatePosition(d);
            this.originalPageX = d.pageX;
            this.originalPageY = d.pageY;
            c.cursorAt && this._adjustOffsetFromHelper(c.cursorAt);
            c.containment && this._setContainment();
            if (this._trigger("start", d) === false) {
                this._clear();
                return false
            }
            this._cacheHelperProportions();
            a.ui.ddmanager && !c.dropBehaviour && a.ui.ddmanager.prepareOffsets(this, d);
            this.helper.addClass("ui-draggable-dragging");
            this._mouseDrag(d, true);
            return true
        }, _mouseDrag: function(d, c) {
            this.position = this._generatePosition(d);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!c) {
                c = this._uiHash();
                if (this._trigger("drag", d, c) === false) {
                    this._mouseUp({});
                    return false
                }
                this.position = c.position
            }
            if (!this.options.axis || this.options.axis != "y") {
                this.helper[0].style.left = this.position.left + "px"
            }
            if (!this.options.axis || this.options.axis != "x") {
                this.helper[0].style.top = this.position.top + "px"
            }
            a.ui.ddmanager && a.ui.ddmanager.drag(this, d);
            return false
        }, _mouseStop: function(f) {
            var d = false;
            if (a.ui.ddmanager && !this.options.dropBehaviour) {
                d = a.ui.ddmanager.drop(this, f)
            }
            if (this.dropped) {
                d = this.dropped;
                this.dropped = false
            }
            if (!this.element[0] || !this.element[0].parentNode) {
                return false
            }
            if (this.options.revert == "invalid" && !d || this.options.revert == "valid" && d || this.options.revert === true || a.isFunction(this.options.revert) && this.options.revert.call(this.element, d)) {
                var g = this;
                a(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                    g._trigger("stop", f) !== false && g._clear()
                })
            } else {
                this._trigger("stop", f) !== false && this._clear()
            }
            return false
        }, cancel: function() {
            this.helper.is(".ui-draggable-dragging") ? this._mouseUp({}) : this._clear();
            return this
        }, _getHandle: function(d) {
            var c = !this.options.handle || !a(this.options.handle, this.element).length ? true : false;
            a(this.options.handle, this.element).find("*").andSelf().each(function() {
                if (this == d.target) {
                    c = true
                }
            });
            return c
        }, _createHelper: function(d) {
            var c = this.options;
            d = a.isFunction(c.helper) ? a(c.helper.apply(this.element[0], [d])) : c.helper == "clone" ? this.element.clone() : this.element;
            d.parents("body").length || d.appendTo(c.appendTo == "parent" ? this.element[0].parentNode : c.appendTo);
            d[0] != this.element[0] && !/(fixed|absolute)/.test(d.css("position")) && d.css("position", "absolute");
            return d
        }, _adjustOffsetFromHelper: function(b) {
            if (typeof b == "string") {
                b = b.split(" ")
            }
            if (a.isArray(b)) {
                b = {left: +b[0], top: +b[1] || 0}
            }
            if ("left" in b) {
                this.offset.click.left = b.left + this.margins.left
            }
            if ("right" in b) {
                this.offset.click.left = this.helperProportions.width - b.right + this.margins.left
            }
            if ("top" in b) {
                this.offset.click.top = b.top + this.margins.top
            }
            if ("bottom" in b) {
                this.offset.click.top = this.helperProportions.height - b.bottom + this.margins.top
            }
        }, _getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var b = this.offsetParent.offset();
            if (this.cssPosition == "absolute" && this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                b.left += this.scrollParent.scrollLeft();
                b.top += this.scrollParent.scrollTop()
            }
            if (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && a.browser.msie) {
                b = {top: 0, left: 0}
            }
            return{top: b.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: b.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)}
        }, _getRelativeOffset: function() {
            if (this.cssPosition == "relative") {
                var b = this.element.position();
                return{top: b.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: b.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()}
            } else {
                return{top: 0, left: 0}
            }
        }, _cacheMargins: function() {
            this.margins = {left: parseInt(this.element.css("marginLeft"), 10) || 0, top: parseInt(this.element.css("marginTop"), 10) || 0}
        }, _cacheHelperProportions: function() {
            this.helperProportions = {width: this.helper.outerWidth(), height: this.helper.outerHeight()}
        }, _setContainment: function() {
            var f = this.options;
            if (f.containment == "parent") {
                f.containment = this.helper[0].parentNode
            }
            if (f.containment == "document" || f.containment == "window") {
                this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, a(f.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (a(f.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]
            }
            if (!/^(document|window|parent)$/.test(f.containment) && f.containment.constructor != Array) {
                var d = a(f.containment)[0];
                if (d) {
                    f = a(f.containment).offset();
                    var g = a(d).css("overflow") != "hidden";
                    this.containment = [f.left + (parseInt(a(d).css("borderLeftWidth"), 10) || 0) + (parseInt(a(d).css("paddingLeft"), 10) || 0) - this.margins.left, f.top + (parseInt(a(d).css("borderTopWidth"), 10) || 0) + (parseInt(a(d).css("paddingTop"), 10) || 0) - this.margins.top, f.left + (g ? Math.max(d.scrollWidth, d.offsetWidth) : d.offsetWidth) - (parseInt(a(d).css("borderLeftWidth"), 10) || 0) - (parseInt(a(d).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, f.top + (g ? Math.max(d.scrollHeight, d.offsetHeight) : d.offsetHeight) - (parseInt(a(d).css("borderTopWidth"), 10) || 0) - (parseInt(a(d).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
                }
            } else {
                if (f.containment.constructor == Array) {
                    this.containment = f.containment
                }
            }
        }, _convertPositionTo: function(g, d) {
            if (!d) {
                d = this.position
            }
            g = g == "absolute" ? 1 : -1;
            var j = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, h = /(html|body)/i.test(j[0].tagName);
            return{top: d.top + this.offset.relative.top * g + this.offset.parent.top * g - (a.browser.safari && a.browser.version < 526 && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : h ? 0 : j.scrollTop()) * g), left: d.left + this.offset.relative.left * g + this.offset.parent.left * g - (a.browser.safari && a.browser.version < 526 && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : h ? 0 : j.scrollLeft()) * g)}
        }, _generatePosition: function(h) {
            var d = this.options, m = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, k = /(html|body)/i.test(m[0].tagName), l = h.pageX, j = h.pageY;
            if (this.originalPosition) {
                if (this.containment) {
                    if (h.pageX - this.offset.click.left < this.containment[0]) {
                        l = this.containment[0] + this.offset.click.left
                    }
                    if (h.pageY - this.offset.click.top < this.containment[1]) {
                        j = this.containment[1] + this.offset.click.top
                    }
                    if (h.pageX - this.offset.click.left > this.containment[2]) {
                        l = this.containment[2] + this.offset.click.left
                    }
                    if (h.pageY - this.offset.click.top > this.containment[3]) {
                        j = this.containment[3] + this.offset.click.top
                    }
                }
                if (d.grid) {
                    j = this.originalPageY + Math.round((j - this.originalPageY) / d.grid[1]) * d.grid[1];
                    j = this.containment ? !(j - this.offset.click.top < this.containment[1] || j - this.offset.click.top > this.containment[3]) ? j : !(j - this.offset.click.top < this.containment[1]) ? j - d.grid[1] : j + d.grid[1] : j;
                    l = this.originalPageX + Math.round((l - this.originalPageX) / d.grid[0]) * d.grid[0];
                    l = this.containment ? !(l - this.offset.click.left < this.containment[0] || l - this.offset.click.left > this.containment[2]) ? l : !(l - this.offset.click.left < this.containment[0]) ? l - d.grid[0] : l + d.grid[0] : l
                }
            }
            return{top: j - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (a.browser.safari && a.browser.version < 526 && this.cssPosition == "fixed" ? 0 : this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : k ? 0 : m.scrollTop()), left: l - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (a.browser.safari && a.browser.version < 526 && this.cssPosition == "fixed" ? 0 : this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : k ? 0 : m.scrollLeft())}
        }, _clear: function() {
            this.helper.removeClass("ui-draggable-dragging");
            this.helper[0] != this.element[0] && !this.cancelHelperRemoval && this.helper.remove();
            this.helper = null;
            this.cancelHelperRemoval = false
        }, _trigger: function(f, d, g) {
            g = g || this._uiHash();
            a.ui.plugin.call(this, f, [d, g]);
            if (f == "drag") {
                this.positionAbs = this._convertPositionTo("absolute")
            }
            return a.Widget.prototype._trigger.call(this, f, d, g)
        }, plugins: {}, _uiHash: function() {
            return{helper: this.helper, position: this.position, originalPosition: this.originalPosition, offset: this.positionAbs}
        }});
    a.extend(a.ui.draggable, {version: "1.8.6"});
    a.ui.plugin.add("draggable", "connectToSortable", {start: function(g, d) {
            var k = a(this).data("draggable"), h = k.options, j = a.extend({}, d, {item: k.element});
            k.sortables = [];
            a(h.connectToSortable).each(function() {
                var b = a.data(this, "sortable");
                if (b && !b.options.disabled) {
                    k.sortables.push({instance: b, shouldRevert: b.options.revert});
                    b._refreshItems();
                    b._trigger("activate", g, j)
                }
            })
        }, stop: function(g, d) {
            var j = a(this).data("draggable"), h = a.extend({}, d, {item: j.element});
            a.each(j.sortables, function() {
                if (this.instance.isOver) {
                    this.instance.isOver = 0;
                    j.cancelHelperRemoval = true;
                    this.instance.cancelHelperRemoval = false;
                    if (this.shouldRevert) {
                        this.instance.options.revert = true
                    }
                    this.instance._mouseStop(g);
                    this.instance.options.helper = this.instance.options._helper;
                    j.options.helper == "original" && this.instance.currentItem.css({top: "auto", left: "auto"})
                } else {
                    this.instance.cancelHelperRemoval = false;
                    this.instance._trigger("deactivate", g, h)
                }
            })
        }, drag: function(g, d) {
            var j = a(this).data("draggable"), h = this;
            a.each(j.sortables, function() {
                this.instance.positionAbs = j.positionAbs;
                this.instance.helperProportions = j.helperProportions;
                this.instance.offset.click = j.offset.click;
                if (this.instance._intersectsWith(this.instance.containerCache)) {
                    if (!this.instance.isOver) {
                        this.instance.isOver = 1;
                        this.instance.currentItem = a(h).clone().appendTo(this.instance.element).data("sortable-item", true);
                        this.instance.options._helper = this.instance.options.helper;
                        this.instance.options.helper = function() {
                            return d.helper[0]
                        };
                        g.target = this.instance.currentItem[0];
                        this.instance._mouseCapture(g, true);
                        this.instance._mouseStart(g, true, true);
                        this.instance.offset.click.top = j.offset.click.top;
                        this.instance.offset.click.left = j.offset.click.left;
                        this.instance.offset.parent.left -= j.offset.parent.left - this.instance.offset.parent.left;
                        this.instance.offset.parent.top -= j.offset.parent.top - this.instance.offset.parent.top;
                        j._trigger("toSortable", g);
                        j.dropped = this.instance.element;
                        j.currentItem = j.element;
                        this.instance.fromOutside = j
                    }
                    this.instance.currentItem && this.instance._mouseDrag(g)
                } else {
                    if (this.instance.isOver) {
                        this.instance.isOver = 0;
                        this.instance.cancelHelperRemoval = true;
                        this.instance.options.revert = false;
                        this.instance._trigger("out", g, this.instance._uiHash(this.instance));
                        this.instance._mouseStop(g, true);
                        this.instance.options.helper = this.instance.options._helper;
                        this.instance.currentItem.remove();
                        this.instance.placeholder && this.instance.placeholder.remove();
                        j._trigger("fromSortable", g);
                        j.dropped = false
                    }
                }
            })
        }});
    a.ui.plugin.add("draggable", "cursor", {start: function() {
            var d = a("body"), c = a(this).data("draggable").options;
            if (d.css("cursor")) {
                c._cursor = d.css("cursor")
            }
            d.css("cursor", c.cursor)
        }, stop: function() {
            var b = a(this).data("draggable").options;
            b._cursor && a("body").css("cursor", b._cursor)
        }});
    a.ui.plugin.add("draggable", "iframeFix", {start: function() {
            var b = a(this).data("draggable").options;
            a(b.iframeFix === true ? "iframe" : b.iframeFix).each(function() {
                a('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({width: this.offsetWidth + "px", height: this.offsetHeight + "px", position: "absolute", opacity: "0.001", zIndex: 1000}).css(a(this).offset()).appendTo("body")
            })
        }, stop: function() {
            a("div.ui-draggable-iframeFix").each(function() {
                this.parentNode.removeChild(this)
            })
        }});
    a.ui.plugin.add("draggable", "opacity", {start: function(d, c) {
            d = a(c.helper);
            c = a(this).data("draggable").options;
            if (d.css("opacity")) {
                c._opacity = d.css("opacity")
            }
            d.css("opacity", c.opacity)
        }, stop: function(d, c) {
            d = a(this).data("draggable").options;
            d._opacity && a(c.helper).css("opacity", d._opacity)
        }});
    a.ui.plugin.add("draggable", "scroll", {start: function() {
            var b = a(this).data("draggable");
            if (b.scrollParent[0] != document && b.scrollParent[0].tagName != "HTML") {
                b.overflowOffset = b.scrollParent.offset()
            }
        }, drag: function(g) {
            var d = a(this).data("draggable"), j = d.options, h = false;
            if (d.scrollParent[0] != document && d.scrollParent[0].tagName != "HTML") {
                if (!j.axis || j.axis != "x") {
                    if (d.overflowOffset.top + d.scrollParent[0].offsetHeight - g.pageY < j.scrollSensitivity) {
                        d.scrollParent[0].scrollTop = h = d.scrollParent[0].scrollTop + j.scrollSpeed
                    } else {
                        if (g.pageY - d.overflowOffset.top < j.scrollSensitivity) {
                            d.scrollParent[0].scrollTop = h = d.scrollParent[0].scrollTop - j.scrollSpeed
                        }
                    }
                }
                if (!j.axis || j.axis != "y") {
                    if (d.overflowOffset.left + d.scrollParent[0].offsetWidth - g.pageX < j.scrollSensitivity) {
                        d.scrollParent[0].scrollLeft = h = d.scrollParent[0].scrollLeft + j.scrollSpeed
                    } else {
                        if (g.pageX - d.overflowOffset.left < j.scrollSensitivity) {
                            d.scrollParent[0].scrollLeft = h = d.scrollParent[0].scrollLeft - j.scrollSpeed
                        }
                    }
                }
            } else {
                if (!j.axis || j.axis != "x") {
                    if (g.pageY - a(document).scrollTop() < j.scrollSensitivity) {
                        h = a(document).scrollTop(a(document).scrollTop() - j.scrollSpeed)
                    } else {
                        if (a(window).height() - (g.pageY - a(document).scrollTop()) < j.scrollSensitivity) {
                            h = a(document).scrollTop(a(document).scrollTop() + j.scrollSpeed)
                        }
                    }
                }
                if (!j.axis || j.axis != "y") {
                    if (g.pageX - a(document).scrollLeft() < j.scrollSensitivity) {
                        h = a(document).scrollLeft(a(document).scrollLeft() - j.scrollSpeed)
                    } else {
                        if (a(window).width() - (g.pageX - a(document).scrollLeft()) < j.scrollSensitivity) {
                            h = a(document).scrollLeft(a(document).scrollLeft() + j.scrollSpeed)
                        }
                    }
                }
            }
            h !== false && a.ui.ddmanager && !j.dropBehaviour && a.ui.ddmanager.prepareOffsets(d, g)
        }});
    a.ui.plugin.add("draggable", "snap", {start: function() {
            var d = a(this).data("draggable"), c = d.options;
            d.snapElements = [];
            a(c.snap.constructor != String ? c.snap.items || ":data(draggable)" : c.snap).each(function() {
                var g = a(this), b = g.offset();
                this != d.element[0] && d.snapElements.push({item: this, width: g.outerWidth(), height: g.outerHeight(), top: b.top, left: b.left})
            })
        }, drag: function(L, K) {
            for (var J = a(this).data("draggable"), H = J.options, I = H.snapTolerance, G = K.offset.left, z = G + J.helperProportions.width, A = K.offset.top, y = A + J.helperProportions.height, F = J.snapElements.length - 1; F >= 0; F--) {
                var E = J.snapElements[F].left, C = E + J.snapElements[F].width, D = J.snapElements[F].top, B = D + J.snapElements[F].height;
                if (E - I < G && G < C + I && D - I < A && A < B + I || E - I < G && G < C + I && D - I < y && y < B + I || E - I < z && z < C + I && D - I < A && A < B + I || E - I < z && z < C + I && D - I < y && y < B + I) {
                    if (H.snapMode != "inner") {
                        var x = Math.abs(D - y) <= I, w = Math.abs(B - A) <= I, v = Math.abs(E - z) <= I, u = Math.abs(C - G) <= I;
                        if (x) {
                            K.position.top = J._convertPositionTo("relative", {top: D - J.helperProportions.height, left: 0}).top - J.margins.top
                        }
                        if (w) {
                            K.position.top = J._convertPositionTo("relative", {top: B, left: 0}).top - J.margins.top
                        }
                        if (v) {
                            K.position.left = J._convertPositionTo("relative", {top: 0, left: E - J.helperProportions.width}).left - J.margins.left
                        }
                        if (u) {
                            K.position.left = J._convertPositionTo("relative", {top: 0, left: C}).left - J.margins.left
                        }
                    }
                    var d = x || w || v || u;
                    if (H.snapMode != "outer") {
                        x = Math.abs(D - A) <= I;
                        w = Math.abs(B - y) <= I;
                        v = Math.abs(E - G) <= I;
                        u = Math.abs(C - z) <= I;
                        if (x) {
                            K.position.top = J._convertPositionTo("relative", {top: D, left: 0}).top - J.margins.top
                        }
                        if (w) {
                            K.position.top = J._convertPositionTo("relative", {top: B - J.helperProportions.height, left: 0}).top - J.margins.top
                        }
                        if (v) {
                            K.position.left = J._convertPositionTo("relative", {top: 0, left: E}).left - J.margins.left
                        }
                        if (u) {
                            K.position.left = J._convertPositionTo("relative", {top: 0, left: C - J.helperProportions.width}).left - J.margins.left
                        }
                    }
                    if (!J.snapElements[F].snapping && (x || w || v || u || d)) {
                        J.options.snap.snap && J.options.snap.snap.call(J.element, L, a.extend(J._uiHash(), {snapItem: J.snapElements[F].item}))
                    }
                    J.snapElements[F].snapping = x || w || v || u || d
                } else {
                    J.snapElements[F].snapping && J.options.snap.release && J.options.snap.release.call(J.element, L, a.extend(J._uiHash(), {snapItem: J.snapElements[F].item}));
                    J.snapElements[F].snapping = false
                }
            }
        }});
    a.ui.plugin.add("draggable", "stack", {start: function() {
            var d = a(this).data("draggable").options;
            d = a.makeArray(a(d.stack)).sort(function(g, b) {
                return(parseInt(a(g).css("zIndex"), 10) || 0) - (parseInt(a(b).css("zIndex"), 10) || 0)
            });
            if (d.length) {
                var c = parseInt(d[0].style.zIndex) || 0;
                a(d).each(function(b) {
                    this.style.zIndex = c + b
                });
                this[0].style.zIndex = c + d.length
            }
        }});
    a.ui.plugin.add("draggable", "zIndex", {start: function(d, c) {
            d = a(c.helper);
            c = a(this).data("draggable").options;
            if (d.css("zIndex")) {
                c._zIndex = d.css("zIndex")
            }
            d.css("zIndex", c.zIndex)
        }, stop: function(d, c) {
            d = a(this).data("draggable").options;
            d._zIndex && a(c.helper).css("zIndex", d._zIndex)
        }})
})(jQuery);
(function(a) {
    a.widget("ui.droppable", {widgetEventPrefix: "drop", options: {accept: "*", activeClass: false, addClasses: true, greedy: false, hoverClass: false, scope: "default", tolerance: "intersect"}, _create: function() {
            var d = this.options, c = d.accept;
            this.isover = 0;
            this.isout = 1;
            this.accept = a.isFunction(c) ? c : function(b) {
                return b.is(c)
            };
            this.proportions = {width: this.element[0].offsetWidth, height: this.element[0].offsetHeight};
            a.ui.ddmanager.droppables[d.scope] = a.ui.ddmanager.droppables[d.scope] || [];
            a.ui.ddmanager.droppables[d.scope].push(this);
            d.addClasses && this.element.addClass("ui-droppable")
        }, destroy: function() {
            for (var d = a.ui.ddmanager.droppables[this.options.scope], c = 0; c < d.length; c++) {
                d[c] == this && d.splice(c, 1)
            }
            this.element.removeClass("ui-droppable ui-droppable-disabled").removeData("droppable").unbind(".droppable");
            return this
        }, _setOption: function(d, c) {
            if (d == "accept") {
                this.accept = a.isFunction(c) ? c : function(b) {
                    return b.is(c)
                }
            }
            a.Widget.prototype._setOption.apply(this, arguments)
        }, _activate: function(d) {
            var c = a.ui.ddmanager.current;
            this.options.activeClass && this.element.addClass(this.options.activeClass);
            c && this._trigger("activate", d, this.ui(c))
        }, _deactivate: function(d) {
            var c = a.ui.ddmanager.current;
            this.options.activeClass && this.element.removeClass(this.options.activeClass);
            c && this._trigger("deactivate", d, this.ui(c))
        }, _over: function(d) {
            var c = a.ui.ddmanager.current;
            if (!(!c || (c.currentItem || c.element)[0] == this.element[0])) {
                if (this.accept.call(this.element[0], c.currentItem || c.element)) {
                    this.options.hoverClass && this.element.addClass(this.options.hoverClass);
                    this._trigger("over", d, this.ui(c))
                }
            }
        }, _out: function(d) {
            var c = a.ui.ddmanager.current;
            if (!(!c || (c.currentItem || c.element)[0] == this.element[0])) {
                if (this.accept.call(this.element[0], c.currentItem || c.element)) {
                    this.options.hoverClass && this.element.removeClass(this.options.hoverClass);
                    this._trigger("out", d, this.ui(c))
                }
            }
        }, _drop: function(f, d) {
            var h = d || a.ui.ddmanager.current;
            if (!h || (h.currentItem || h.element)[0] == this.element[0]) {
                return false
            }
            var g = false;
            this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function() {
                var b = a.data(this, "droppable");
                if (b.options.greedy && !b.options.disabled && b.options.scope == h.options.scope && b.accept.call(b.element[0], h.currentItem || h.element) && a.ui.intersect(h, a.extend(b, {offset: b.element.offset()}), b.options.tolerance)) {
                    g = true;
                    return false
                }
            });
            if (g) {
                return false
            }
            if (this.accept.call(this.element[0], h.currentItem || h.element)) {
                this.options.activeClass && this.element.removeClass(this.options.activeClass);
                this.options.hoverClass && this.element.removeClass(this.options.hoverClass);
                this._trigger("drop", f, this.ui(h));
                return this.element
            }
            return false
        }, ui: function(b) {
            return{draggable: b.currentItem || b.element, helper: b.helper, position: b.position, offset: b.positionAbs}
        }});
    a.extend(a.ui.droppable, {version: "1.8.6"});
    a.ui.intersect = function(w, v, u) {
        if (!v.offset) {
            return false
        }
        var s = (w.positionAbs || w.position.absolute).left, q = s + w.helperProportions.width, r = (w.positionAbs || w.position.absolute).top, p = r + w.helperProportions.height, o = v.offset.left, m = o + v.proportions.width, n = v.offset.top, d = n + v.proportions.height;
        switch (u) {
            case"fit":
                return o <= s && q <= m && n <= r && p <= d;
            case"intersect":
                return o < s + w.helperProportions.width / 2 && q - w.helperProportions.width / 2 < m && n < r + w.helperProportions.height / 2 && p - w.helperProportions.height / 2 < d;
            case"pointer":
                return a.ui.isOver((w.positionAbs || w.position.absolute).top + (w.clickOffset || w.offset.click).top, (w.positionAbs || w.position.absolute).left + (w.clickOffset || w.offset.click).left, n, o, v.proportions.height, v.proportions.width);
            case"touch":
                return(r >= n && r <= d || p >= n && p <= d || r < n && p > d) && (s >= o && s <= m || q >= o && q <= m || s < o && q > m);
            default:
                return false
            }
    };
    a.ui.ddmanager = {current: null, droppables: {"default": []}, prepareOffsets: function(j, d) {
            var o = a.ui.ddmanager.droppables[j.options.scope] || [], n = d ? d.type : null, l = (j.currentItem || j.element).find(":data(droppable)").andSelf(), m = 0;
            j:for (; m < o.length; m++) {
                if (!(o[m].options.disabled || j && !o[m].accept.call(o[m].element[0], j.currentItem || j.element))) {
                    for (var k = 0; k < l.length; k++) {
                        if (l[k] == o[m].element[0]) {
                            o[m].proportions.height = 0;
                            continue j
                        }
                    }
                    o[m].visible = o[m].element.css("display") != "none";
                    if (o[m].visible) {
                        o[m].offset = o[m].element.offset();
                        o[m].proportions = {width: o[m].element[0].offsetWidth, height: o[m].element[0].offsetHeight};
                        n == "mousedown" && o[m]._activate.call(o[m], d)
                    }
                }
            }
        }, drop: function(f, d) {
            var g = false;
            a.each(a.ui.ddmanager.droppables[f.options.scope] || [], function() {
                if (this.options) {
                    if (!this.options.disabled && this.visible && a.ui.intersect(f, this, this.options.tolerance)) {
                        g = g || this._drop.call(this, d)
                    }
                    if (!this.options.disabled && this.visible && this.accept.call(this.element[0], f.currentItem || f.element)) {
                        this.isout = 1;
                        this.isover = 0;
                        this._deactivate.call(this, d)
                    }
                }
            });
            return g
        }, drag: function(d, c) {
            d.options.refreshPositions && a.ui.ddmanager.prepareOffsets(d, c);
            a.each(a.ui.ddmanager.droppables[d.options.scope] || [], function() {
                if (!(this.options.disabled || this.greedyChild || !this.visible)) {
                    var h = a.ui.intersect(d, this, this.options.tolerance);
                    if (h = !h && this.isover == 1 ? "isout" : h && this.isover == 0 ? "isover" : null) {
                        var f;
                        if (this.options.greedy) {
                            var b = this.element.parents(":data(droppable):eq(0)");
                            if (b.length) {
                                f = a.data(b[0], "droppable");
                                f.greedyChild = h == "isover" ? 1 : 0
                            }
                        }
                        if (f && h == "isover") {
                            f.isover = 0;
                            f.isout = 1;
                            f._out.call(f, c)
                        }
                        this[h] = 1;
                        this[h == "isout" ? "isover" : "isout"] = 0;
                        this[h == "isover" ? "_over" : "_out"].call(this, c);
                        if (f && h == "isout") {
                            f.isout = 0;
                            f.isover = 1;
                            f._over.call(f, c)
                        }
                    }
                }
            })
        }}
})(jQuery);
(function(c) {
    c.widget("ui.resizable", c.ui.mouse, {widgetEventPrefix: "resize", options: {alsoResize: false, animate: false, animateDuration: "slow", animateEasing: "swing", aspectRatio: false, autoHide: false, containment: false, ghost: false, grid: false, handles: "e,s,se", helper: false, maxHeight: null, maxWidth: null, minHeight: 10, minWidth: 10, zIndex: 1000}, _create: function() {
            var h = this, j = this.options;
            this.element.addClass("ui-resizable");
            c.extend(this, {_aspectRatio: !!j.aspectRatio, aspectRatio: j.aspectRatio, originalElement: this.element, _proportionallyResizeElements: [], _helper: j.helper || j.ghost || j.animate ? j.helper || "ui-resizable-helper" : null});
            if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {
                /relative/.test(this.element.css("position")) && c.browser.opera && this.element.css({position: "relative", top: "auto", left: "auto"});
                this.element.wrap(c('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({position: this.element.css("position"), width: this.element.outerWidth(), height: this.element.outerHeight(), top: this.element.css("top"), left: this.element.css("left")}));
                this.element = this.element.parent().data("resizable", this.element.data("resizable"));
                this.elementIsWrapper = true;
                this.element.css({marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom")});
                this.originalElement.css({marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});
                this.originalResizeStyle = this.originalElement.css("resize");
                this.originalElement.css("resize", "none");
                this._proportionallyResizeElements.push(this.originalElement.css({position: "static", zoom: 1, display: "block"}));
                this.originalElement.css({margin: this.originalElement.css("margin")});
                this._proportionallyResize()
            }
            this.handles = j.handles || (!c(".ui-resizable-handle", this.element).length ? "e,s,se" : {n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw"});
            if (this.handles.constructor == String) {
                if (this.handles == "all") {
                    this.handles = "n,e,s,w,se,sw,ne,nw"
                }
                var n = this.handles.split(",");
                this.handles = {};
                for (var m = 0; m < n.length; m++) {
                    var l = c.trim(n[m]), k = c('<div class="ui-resizable-handle ' + ("ui-resizable-" + l) + '"></div>');
                    /sw|se|ne|nw/.test(l) && k.css({zIndex: ++j.zIndex});
                    "se" == l && k.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
                    this.handles[l] = ".ui-resizable-" + l;
                    this.element.append(k)
                }
            }
            this._renderAxis = function(o) {
                o = o || this.element;
                for (var g in this.handles) {
                    if (this.handles[g].constructor == String) {
                        this.handles[g] = c(this.handles[g], this.element).show()
                    }
                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
                        var f = c(this.handles[g], this.element), d = 0;
                        d = /sw|ne|nw|se|n|s/.test(g) ? f.outerHeight() : f.outerWidth();
                        f = ["padding", /ne|nw|n/.test(g) ? "Top" : /se|sw|s/.test(g) ? "Bottom" : /^e$/.test(g) ? "Right" : "Left"].join("");
                        o.css(f, d);
                        this._proportionallyResize()
                    }
                    c(this.handles[g])
                }
            };
            this._renderAxis(this.element);
            this._handles = c(".ui-resizable-handle", this.element).disableSelection();
            this._handles.mouseover(function() {
                if (!h.resizing) {
                    if (this.className) {
                        var d = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)
                    }
                    h.axis = d && d[1] ? d[1] : "se"
                }
            });
            if (j.autoHide) {
                this._handles.hide();
                c(this.element).addClass("ui-resizable-autohide").hover(function() {
                    c(this).removeClass("ui-resizable-autohide");
                    h._handles.show()
                }, function() {
                    if (!h.resizing) {
                        c(this).addClass("ui-resizable-autohide");
                        h._handles.hide()
                    }
                })
            }
            this._mouseInit()
        }, destroy: function() {
            this._mouseDestroy();
            var d = function(g) {
                c(g).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").unbind(".resizable").find(".ui-resizable-handle").remove()
            };
            if (this.elementIsWrapper) {
                d(this.element);
                var f = this.element;
                f.after(this.originalElement.css({position: f.css("position"), width: f.outerWidth(), height: f.outerHeight(), top: f.css("top"), left: f.css("left")})).remove()
            }
            this.originalElement.css("resize", this.originalResizeStyle);
            d(this.originalElement);
            return this
        }, _mouseCapture: function(d) {
            var f = false;
            for (var g in this.handles) {
                if (c(this.handles[g])[0] == d.target) {
                    f = true
                }
            }
            return !this.options.disabled && f
        }, _mouseStart: function(g) {
            var h = this.options, l = this.element.position(), k = this.element;
            this.resizing = true;
            this.documentScroll = {top: c(document).scrollTop(), left: c(document).scrollLeft()};
            if (k.is(".ui-draggable") || /absolute/.test(k.css("position"))) {
                k.css({position: "absolute", top: l.top, left: l.left})
            }
            c.browser.opera && /relative/.test(k.css("position")) && k.css({position: "relative", top: "auto", left: "auto"});
            this._renderProxy();
            l = a(this.helper.css("left"));
            var j = a(this.helper.css("top"));
            if (h.containment) {
                l += c(h.containment).scrollLeft() || 0;
                j += c(h.containment).scrollTop() || 0
            }
            this.offset = this.helper.offset();
            this.position = {left: l, top: j};
            this.size = this._helper ? {width: k.outerWidth(), height: k.outerHeight()} : {width: k.width(), height: k.height()};
            this.originalSize = this._helper ? {width: k.outerWidth(), height: k.outerHeight()} : {width: k.width(), height: k.height()};
            this.originalPosition = {left: l, top: j};
            this.sizeDiff = {width: k.outerWidth() - k.width(), height: k.outerHeight() - k.height()};
            this.originalMousePosition = {left: g.pageX, top: g.pageY};
            this.aspectRatio = typeof h.aspectRatio == "number" ? h.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
            h = c(".ui-resizable-" + this.axis).css("cursor");
            c("body").css("cursor", h == "auto" ? this.axis + "-resize" : h);
            k.addClass("ui-resizable-resizing");
            this._propagate("start", g);
            return true
        }, _mouseDrag: function(f) {
            var g = this.helper, j = this.originalMousePosition, h = this._change[this.axis];
            if (!h) {
                return false
            }
            j = h.apply(this, [f, f.pageX - j.left || 0, f.pageY - j.top || 0]);
            if (this._aspectRatio || f.shiftKey) {
                j = this._updateRatio(j, f)
            }
            j = this._respectSize(j, f);
            this._propagate("resize", f);
            g.css({top: this.position.top + "px", left: this.position.left + "px", width: this.size.width + "px", height: this.size.height + "px"});
            !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize();
            this._updateCache(j);
            this._trigger("resize", f, this.ui());
            return false
        }, _mouseStop: function(h) {
            this.resizing = false;
            var j = this.options, n = this;
            if (this._helper) {
                var m = this._proportionallyResizeElements, l = m.length && /textarea/i.test(m[0].nodeName);
                m = l && c.ui.hasScroll(m[0], "left") ? 0 : n.sizeDiff.height;
                l = {width: n.size.width - (l ? 0 : n.sizeDiff.width), height: n.size.height - m};
                m = parseInt(n.element.css("left"), 10) + (n.position.left - n.originalPosition.left) || null;
                var k = parseInt(n.element.css("top"), 10) + (n.position.top - n.originalPosition.top) || null;
                j.animate || this.element.css(c.extend(l, {top: k, left: m}));
                n.helper.height(n.size.height);
                n.helper.width(n.size.width);
                this._helper && !j.animate && this._proportionallyResize()
            }
            c("body").css("cursor", "auto");
            this.element.removeClass("ui-resizable-resizing");
            this._propagate("stop", h);
            this._helper && this.helper.remove();
            return false
        }, _updateCache: function(d) {
            this.offset = this.helper.offset();
            if (b(d.left)) {
                this.position.left = d.left
            }
            if (b(d.top)) {
                this.position.top = d.top
            }
            if (b(d.height)) {
                this.size.height = d.height
            }
            if (b(d.width)) {
                this.size.width = d.width
            }
        }, _updateRatio: function(f) {
            var g = this.position, j = this.size, h = this.axis;
            if (f.height) {
                f.width = j.height * this.aspectRatio
            } else {
                if (f.width) {
                    f.height = j.width / this.aspectRatio
                }
            }
            if (h == "sw") {
                f.left = g.left + (j.width - f.width);
                f.top = null
            }
            if (h == "nw") {
                f.top = g.top + (j.height - f.height);
                f.left = g.left + (j.width - f.width)
            }
            return f
        }, _respectSize: function(u) {
            var v = this.options, s = this.axis, r = b(u.width) && v.maxWidth && v.maxWidth < u.width, q = b(u.height) && v.maxHeight && v.maxHeight < u.height, p = b(u.width) && v.minWidth && v.minWidth > u.width, o = b(u.height) && v.minHeight && v.minHeight > u.height;
            if (p) {
                u.width = v.minWidth
            }
            if (o) {
                u.height = v.minHeight
            }
            if (r) {
                u.width = v.maxWidth
            }
            if (q) {
                u.height = v.maxHeight
            }
            var n = this.originalPosition.left + this.originalSize.width, m = this.position.top + this.size.height, l = /sw|nw|w/.test(s);
            s = /nw|ne|n/.test(s);
            if (p && l) {
                u.left = n - v.minWidth
            }
            if (r && l) {
                u.left = n - v.maxWidth
            }
            if (o && s) {
                u.top = m - v.minHeight
            }
            if (q && s) {
                u.top = m - v.maxHeight
            }
            if ((v = !u.width && !u.height) && !u.left && u.top) {
                u.top = null
            } else {
                if (v && !u.top && u.left) {
                    u.left = null
                }
            }
            return u
        }, _proportionallyResize: function() {
            if (this._proportionallyResizeElements.length) {
                for (var g = this.helper || this.element, h = 0; h < this._proportionallyResizeElements.length; h++) {
                    var l = this._proportionallyResizeElements[h];
                    if (!this.borderDif) {
                        var k = [l.css("borderTopWidth"), l.css("borderRightWidth"), l.css("borderBottomWidth"), l.css("borderLeftWidth")], j = [l.css("paddingTop"), l.css("paddingRight"), l.css("paddingBottom"), l.css("paddingLeft")];
                        this.borderDif = c.map(k, function(f, d) {
                            f = parseInt(f, 10) || 0;
                            d = parseInt(j[d], 10) || 0;
                            return f + d
                        })
                    }
                    c.browser.msie && (c(g).is(":hidden") || c(g).parents(":hidden").length) || l.css({height: g.height() - this.borderDif[0] - this.borderDif[2] || 0, width: g.width() - this.borderDif[1] - this.borderDif[3] || 0})
                }
            }
        }, _renderProxy: function() {
            var d = this.options;
            this.elementOffset = this.element.offset();
            if (this._helper) {
                this.helper = this.helper || c('<div style="overflow:hidden;"></div>');
                var f = c.browser.msie && c.browser.version < 7, g = f ? 1 : 0;
                f = f ? 2 : -1;
                this.helper.addClass(this._helper).css({width: this.element.outerWidth() + f, height: this.element.outerHeight() + f, position: "absolute", left: this.elementOffset.left - g + "px", top: this.elementOffset.top - g + "px", zIndex: ++d.zIndex});
                this.helper.appendTo("body").disableSelection()
            } else {
                this.helper = this.element
            }
        }, _change: {e: function(d, f) {
                return{width: this.originalSize.width + f}
            }, w: function(d, f) {
                return{left: this.originalPosition.left + f, width: this.originalSize.width - f}
            }, n: function(d, f, g) {
                return{top: this.originalPosition.top + g, height: this.originalSize.height - g}
            }, s: function(d, f, g) {
                return{height: this.originalSize.height + g}
            }, se: function(d, f, g) {
                return c.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [d, f, g]))
            }, sw: function(d, f, g) {
                return c.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [d, f, g]))
            }, ne: function(d, f, g) {
                return c.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [d, f, g]))
            }, nw: function(d, f, g) {
                return c.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [d, f, g]))
            }}, _propagate: function(d, f) {
            c.ui.plugin.call(this, d, [f, this.ui()]);
            d != "resize" && this._trigger(d, f, this.ui())
        }, plugins: {}, ui: function() {
            return{originalElement: this.originalElement, element: this.element, helper: this.helper, position: this.position, size: this.size, originalSize: this.originalSize, originalPosition: this.originalPosition}
        }});
    c.extend(c.ui.resizable, {version: "1.8.6"});
    c.ui.plugin.add("resizable", "alsoResize", {start: function() {
            var d = c(this).data("resizable").options, f = function(g) {
                c(g).each(function() {
                    var h = c(this);
                    h.data("resizable-alsoresize", {width: parseInt(h.width(), 10), height: parseInt(h.height(), 10), left: parseInt(h.css("left"), 10), top: parseInt(h.css("top"), 10), position: h.css("position")})
                })
            };
            if (typeof d.alsoResize == "object" && !d.alsoResize.parentNode) {
                if (d.alsoResize.length) {
                    d.alsoResize = d.alsoResize[0];
                    f(d.alsoResize)
                } else {
                    c.each(d.alsoResize, function(g) {
                        f(g)
                    })
                }
            } else {
                f(d.alsoResize)
            }
        }, resize: function(j, k) {
            var p = c(this).data("resizable");
            j = p.options;
            var o = p.originalSize, n = p.originalPosition, m = {height: p.size.height - o.height || 0, width: p.size.width - o.width || 0, top: p.position.top - n.top || 0, left: p.position.left - n.left || 0}, l = function(f, d) {
                c(f).each(function() {
                    var g = c(this), s = c(this).data("resizable-alsoresize"), u = {}, h = d && d.length ? d : g.parents(k.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];
                    c.each(h, function(r, q) {
                        if ((r = (s[q] || 0) + (m[q] || 0)) && r >= 0) {
                            u[q] = r || null
                        }
                    });
                    if (c.browser.opera && /relative/.test(g.css("position"))) {
                        p._revertToRelativePosition = true;
                        g.css({position: "absolute", top: "auto", left: "auto"})
                    }
                    g.css(u)
                })
            };
            typeof j.alsoResize == "object" && !j.alsoResize.nodeType ? c.each(j.alsoResize, function(f, d) {
                l(f, d)
            }) : l(j.alsoResize)
        }, stop: function() {
            var d = c(this).data("resizable"), f = d.options, g = function(h) {
                c(h).each(function() {
                    var j = c(this);
                    j.css({position: j.data("resizable-alsoresize").position})
                })
            };
            if (d._revertToRelativePosition) {
                d._revertToRelativePosition = false;
                typeof f.alsoResize == "object" && !f.alsoResize.nodeType ? c.each(f.alsoResize, function(h) {
                    g(h)
                }) : g(f.alsoResize)
            }
            c(this).removeData("resizable-alsoresize")
        }});
    c.ui.plugin.add("resizable", "animate", {stop: function(j) {
            var k = c(this).data("resizable"), p = k.options, o = k._proportionallyResizeElements, n = o.length && /textarea/i.test(o[0].nodeName), m = n && c.ui.hasScroll(o[0], "left") ? 0 : k.sizeDiff.height;
            n = {width: k.size.width - (n ? 0 : k.sizeDiff.width), height: k.size.height - m};
            m = parseInt(k.element.css("left"), 10) + (k.position.left - k.originalPosition.left) || null;
            var l = parseInt(k.element.css("top"), 10) + (k.position.top - k.originalPosition.top) || null;
            k.element.animate(c.extend(n, l && m ? {top: l, left: m} : {}), {duration: p.animateDuration, easing: p.animateEasing, step: function() {
                    var d = {width: parseInt(k.element.css("width"), 10), height: parseInt(k.element.css("height"), 10), top: parseInt(k.element.css("top"), 10), left: parseInt(k.element.css("left"), 10)};
                    o && o.length && c(o[0]).css({width: d.width, height: d.height});
                    k._updateCache(d);
                    k._propagate("resize", j)
                }})
        }});
    c.ui.plugin.add("resizable", "containment", {start: function() {
            var j = c(this).data("resizable"), k = j.element, p = j.options.containment;
            if (k = p instanceof c ? p.get(0) : /parent/.test(p) ? k.parent().get(0) : p) {
                j.containerElement = c(k);
                if (/document/.test(p) || p == document) {
                    j.containerOffset = {left: 0, top: 0};
                    j.containerPosition = {left: 0, top: 0};
                    j.parentData = {element: c(document), left: 0, top: 0, width: c(document).width(), height: c(document).height() || document.body.parentNode.scrollHeight}
                } else {
                    var o = c(k), n = [];
                    c(["Top", "Right", "Left", "Bottom"]).each(function(f, d) {
                        n[f] = a(o.css("padding" + d))
                    });
                    j.containerOffset = o.offset();
                    j.containerPosition = o.position();
                    j.containerSize = {height: o.innerHeight() - n[3], width: o.innerWidth() - n[1]};
                    p = j.containerOffset;
                    var m = j.containerSize.height, l = j.containerSize.width;
                    l = c.ui.hasScroll(k, "left") ? k.scrollWidth : l;
                    m = c.ui.hasScroll(k) ? k.scrollHeight : m;
                    j.parentData = {element: k, left: p.left, top: p.top, width: l, height: m}
                }
            }
        }, resize: function(j) {
            var k = c(this).data("resizable"), p = k.options, o = k.containerOffset, n = k.position;
            j = k._aspectRatio || j.shiftKey;
            var m = {top: 0, left: 0}, l = k.containerElement;
            if (l[0] != document && /static/.test(l.css("position"))) {
                m = o
            }
            if (n.left < (k._helper ? o.left : 0)) {
                k.size.width += k._helper ? k.position.left - o.left : k.position.left - m.left;
                if (j) {
                    k.size.height = k.size.width / p.aspectRatio
                }
                k.position.left = p.helper ? o.left : 0
            }
            if (n.top < (k._helper ? o.top : 0)) {
                k.size.height += k._helper ? k.position.top - o.top : k.position.top;
                if (j) {
                    k.size.width = k.size.height * p.aspectRatio
                }
                k.position.top = k._helper ? o.top : 0
            }
            k.offset.left = k.parentData.left + k.position.left;
            k.offset.top = k.parentData.top + k.position.top;
            p = Math.abs((k._helper ? k.offset.left - m.left : k.offset.left - m.left) + k.sizeDiff.width);
            o = Math.abs((k._helper ? k.offset.top - m.top : k.offset.top - o.top) + k.sizeDiff.height);
            n = k.containerElement.get(0) == k.element.parent().get(0);
            m = /relative|absolute/.test(k.containerElement.css("position"));
            if (n && m) {
                p -= k.parentData.left
            }
            if (p + k.size.width >= k.parentData.width) {
                k.size.width = k.parentData.width - p;
                if (j) {
                    k.size.height = k.size.width / k.aspectRatio
                }
            }
            if (o + k.size.height >= k.parentData.height) {
                k.size.height = k.parentData.height - o;
                if (j) {
                    k.size.width = k.size.height * k.aspectRatio
                }
            }
        }, stop: function() {
            var j = c(this).data("resizable"), k = j.options, q = j.containerOffset, p = j.containerPosition, o = j.containerElement, n = c(j.helper), m = n.offset(), l = n.outerWidth() - j.sizeDiff.width;
            n = n.outerHeight() - j.sizeDiff.height;
            j._helper && !k.animate && /relative/.test(o.css("position")) && c(this).css({left: m.left - p.left - q.left, width: l, height: n});
            j._helper && !k.animate && /static/.test(o.css("position")) && c(this).css({left: m.left - p.left - q.left, width: l, height: n})
        }});
    c.ui.plugin.add("resizable", "ghost", {start: function() {
            var d = c(this).data("resizable"), f = d.options, g = d.size;
            d.ghost = d.originalElement.clone();
            d.ghost.css({opacity: 0.25, display: "block", position: "relative", height: g.height, width: g.width, margin: 0, left: 0, top: 0}).addClass("ui-resizable-ghost").addClass(typeof f.ghost == "string" ? f.ghost : "");
            d.ghost.appendTo(d.helper)
        }, resize: function() {
            var d = c(this).data("resizable");
            d.ghost && d.ghost.css({position: "relative", height: d.size.height, width: d.size.width})
        }, stop: function() {
            var d = c(this).data("resizable");
            d.ghost && d.helper && d.helper.get(0).removeChild(d.ghost.get(0))
        }});
    c.ui.plugin.add("resizable", "grid", {resize: function() {
            var j = c(this).data("resizable"), k = j.options, p = j.size, o = j.originalSize, n = j.originalPosition, m = j.axis;
            k.grid = typeof k.grid == "number" ? [k.grid, k.grid] : k.grid;
            var l = Math.round((p.width - o.width) / (k.grid[0] || 1)) * (k.grid[0] || 1);
            k = Math.round((p.height - o.height) / (k.grid[1] || 1)) * (k.grid[1] || 1);
            if (/^(se|s|e)$/.test(m)) {
                j.size.width = o.width + l;
                j.size.height = o.height + k
            } else {
                if (/^(ne)$/.test(m)) {
                    j.size.width = o.width + l;
                    j.size.height = o.height + k;
                    j.position.top = n.top - k
                } else {
                    if (/^(sw)$/.test(m)) {
                        j.size.width = o.width + l;
                        j.size.height = o.height + k
                    } else {
                        j.size.width = o.width + l;
                        j.size.height = o.height + k;
                        j.position.top = n.top - k
                    }
                    j.position.left = n.left - l
                }
            }
        }});
    var a = function(d) {
        return parseInt(d, 10) || 0
    }, b = function(d) {
        return !isNaN(parseInt(d, 10))
    }
})(jQuery);
(function(a) {
    a.widget("ui.selectable", a.ui.mouse, {options: {appendTo: "body", autoRefresh: true, distance: 0, filter: "*", tolerance: "touch"}, _create: function() {
            var d = this;
            this.element.addClass("ui-selectable");
            this.dragged = false;
            var b;
            this.refresh = function() {
                b = a(d.options.filter, d.element[0]);
                b.each(function() {
                    var f = a(this), c = f.offset();
                    a.data(this, "selectable-item", {element: this, $element: f, left: c.left, top: c.top, right: c.left + f.outerWidth(), bottom: c.top + f.outerHeight(), startselected: false, selected: f.hasClass("ui-selected"), selecting: f.hasClass("ui-selecting"), unselecting: f.hasClass("ui-unselecting")})
                })
            };
            this.refresh();
            this.selectees = b.addClass("ui-selectee");
            this._mouseInit();
            this.helper = a("<div class='ui-selectable-helper'></div>")
        }, destroy: function() {
            this.selectees.removeClass("ui-selectee").removeData("selectable-item");
            this.element.removeClass("ui-selectable ui-selectable-disabled").removeData("selectable").unbind(".selectable");
            this._mouseDestroy();
            return this
        }, _mouseStart: function(h) {
            var b = this;
            this.opos = [h.pageX, h.pageY];
            if (!this.options.disabled) {
                var g = this.options;
                this.selectees = a(g.filter, this.element[0]);
                this._trigger("start", h);
                a(g.appendTo).append(this.helper);
                this.helper.css({left: h.clientX, top: h.clientY, width: 0, height: 0});
                g.autoRefresh && this.refresh();
                this.selectees.filter(".ui-selected").each(function() {
                    var c = a.data(this, "selectable-item");
                    c.startselected = true;
                    if (!h.metaKey) {
                        c.$element.removeClass("ui-selected");
                        c.selected = false;
                        c.$element.addClass("ui-unselecting");
                        c.unselecting = true;
                        b._trigger("unselecting", h, {unselecting: c.element})
                    }
                });
                a(h.target).parents().andSelf().each(function() {
                    var c = a.data(this, "selectable-item");
                    if (c) {
                        var d = !h.metaKey || !c.$element.hasClass("ui-selected");
                        c.$element.removeClass(d ? "ui-unselecting" : "ui-selected").addClass(d ? "ui-selecting" : "ui-unselecting");
                        c.unselecting = !d;
                        c.selecting = d;
                        (c.selected = d) ? b._trigger("selecting", h, {selecting: c.element}) : b._trigger("unselecting", h, {unselecting: c.element});
                        return false
                    }
                })
            }
        }, _mouseDrag: function(r) {
            var p = this;
            this.dragged = true;
            if (!this.options.disabled) {
                var q = this.options, k = this.opos[0], o = this.opos[1], n = r.pageX, m = r.pageY;
                if (k > n) {
                    var l = n;
                    n = k;
                    k = l
                }
                if (o > m) {
                    l = m;
                    m = o;
                    o = l
                }
                this.helper.css({left: k, top: o, width: n - k, height: m - o});
                this.selectees.each(function() {
                    var b = a.data(this, "selectable-item");
                    if (!(!b || b.element == p.element[0])) {
                        var c = false;
                        if (q.tolerance == "touch") {
                            c = !(b.left > n || b.right < k || b.top > m || b.bottom < o)
                        } else {
                            if (q.tolerance == "fit") {
                                c = b.left > k && b.right < n && b.top > o && b.bottom < m
                            }
                        }
                        if (c) {
                            if (b.selected) {
                                b.$element.removeClass("ui-selected");
                                b.selected = false
                            }
                            if (b.unselecting) {
                                b.$element.removeClass("ui-unselecting");
                                b.unselecting = false
                            }
                            if (!b.selecting) {
                                b.$element.addClass("ui-selecting");
                                b.selecting = true;
                                p._trigger("selecting", r, {selecting: b.element})
                            }
                        } else {
                            if (b.selecting) {
                                if (r.metaKey && b.startselected) {
                                    b.$element.removeClass("ui-selecting");
                                    b.selecting = false;
                                    b.$element.addClass("ui-selected");
                                    b.selected = true
                                } else {
                                    b.$element.removeClass("ui-selecting");
                                    b.selecting = false;
                                    if (b.startselected) {
                                        b.$element.addClass("ui-unselecting");
                                        b.unselecting = true
                                    }
                                    p._trigger("unselecting", r, {unselecting: b.element})
                                }
                            }
                            if (b.selected) {
                                if (!r.metaKey && !b.startselected) {
                                    b.$element.removeClass("ui-selected");
                                    b.selected = false;
                                    b.$element.addClass("ui-unselecting");
                                    b.unselecting = true;
                                    p._trigger("unselecting", r, {unselecting: b.element})
                                }
                            }
                        }
                    }
                });
                return false
            }
        }, _mouseStop: function(d) {
            var b = this;
            this.dragged = false;
            a(".ui-unselecting", this.element[0]).each(function() {
                var c = a.data(this, "selectable-item");
                c.$element.removeClass("ui-unselecting");
                c.unselecting = false;
                c.startselected = false;
                b._trigger("unselected", d, {unselected: c.element})
            });
            a(".ui-selecting", this.element[0]).each(function() {
                var c = a.data(this, "selectable-item");
                c.$element.removeClass("ui-selecting").addClass("ui-selected");
                c.selecting = false;
                c.selected = true;
                c.startselected = true;
                b._trigger("selected", d, {selected: c.element})
            });
            this._trigger("stop", d);
            this.helper.remove();
            return false
        }});
    a.extend(a.ui.selectable, {version: "1.8.6"})
})(jQuery);
(function(a) {
    a.widget("ui.sortable", a.ui.mouse, {widgetEventPrefix: "sort", options: {appendTo: "parent", axis: false, connectWith: false, containment: false, cursor: "auto", cursorAt: false, dropOnEmpty: true, forcePlaceholderSize: false, forceHelperSize: false, grid: false, handle: false, helper: "original", items: "> *", opacity: false, placeholder: false, revert: false, scroll: true, scrollSensitivity: 20, scrollSpeed: 20, scope: "default", tolerance: "intersect", zIndex: 1000}, _create: function() {
            this.containerCache = {};
            this.element.addClass("ui-sortable");
            this.refresh();
            this.floating = this.items.length ? /left|right/.test(this.items[0].item.css("float")) : false;
            this.offset = this.element.offset();
            this._mouseInit()
        }, destroy: function() {
            this.element.removeClass("ui-sortable ui-sortable-disabled").removeData("sortable").unbind(".sortable");
            this._mouseDestroy();
            for (var b = this.items.length - 1; b >= 0; b--) {
                this.items[b].item.removeData("sortable-item")
            }
            return this
        }, _setOption: function(d, c) {
            if (d === "disabled") {
                this.options[d] = c;
                this.widget()[c ? "addClass" : "removeClass"]("ui-sortable-disabled")
            } else {
                a.Widget.prototype._setOption.apply(this, arguments)
            }
        }, _mouseCapture: function(g, d) {
            if (this.reverting) {
                return false
            }
            if (this.options.disabled || this.options.type == "static") {
                return false
            }
            this._refreshItems(g);
            var k = null, j = this;
            a(g.target).parents().each(function() {
                if (a.data(this, "sortable-item") == j) {
                    k = a(this);
                    return false
                }
            });
            if (a.data(g.target, "sortable-item") == j) {
                k = a(g.target)
            }
            if (!k) {
                return false
            }
            if (this.options.handle && !d) {
                var h = false;
                a(this.options.handle, k).find("*").andSelf().each(function() {
                    if (this == g.target) {
                        h = true
                    }
                });
                if (!h) {
                    return false
                }
            }
            this.currentItem = k;
            this._removeCurrentsFromItems();
            return true
        }, _mouseStart: function(f, d, h) {
            d = this.options;
            var g = this;
            this.currentContainer = this;
            this.refreshPositions();
            this.helper = this._createHelper(f);
            this._cacheHelperProportions();
            this._cacheMargins();
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.currentItem.offset();
            this.offset = {top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left};
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");
            a.extend(this.offset, {click: {left: f.pageX - this.offset.left, top: f.pageY - this.offset.top}, parent: this._getParentOffset(), relative: this._getRelativeOffset()});
            this.originalPosition = this._generatePosition(f);
            this.originalPageX = f.pageX;
            this.originalPageY = f.pageY;
            d.cursorAt && this._adjustOffsetFromHelper(d.cursorAt);
            this.domPosition = {prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0]};
            this.helper[0] != this.currentItem[0] && this.currentItem.hide();
            this._createPlaceholder();
            d.containment && this._setContainment();
            if (d.cursor) {
                if (a("body").css("cursor")) {
                    this._storedCursor = a("body").css("cursor")
                }
                a("body").css("cursor", d.cursor)
            }
            if (d.opacity) {
                if (this.helper.css("opacity")) {
                    this._storedOpacity = this.helper.css("opacity")
                }
                this.helper.css("opacity", d.opacity)
            }
            if (d.zIndex) {
                if (this.helper.css("zIndex")) {
                    this._storedZIndex = this.helper.css("zIndex")
                }
                this.helper.css("zIndex", d.zIndex)
            }
            if (this.scrollParent[0] != document && this.scrollParent[0].tagName != "HTML") {
                this.overflowOffset = this.scrollParent.offset()
            }
            this._trigger("start", f, this._uiHash());
            this._preserveHelperProportions || this._cacheHelperProportions();
            if (!h) {
                for (h = this.containers.length - 1; h >= 0; h--) {
                    this.containers[h]._trigger("activate", f, g._uiHash(this))
                }
            }
            if (a.ui.ddmanager) {
                a.ui.ddmanager.current = this
            }
            a.ui.ddmanager && !d.dropBehaviour && a.ui.ddmanager.prepareOffsets(this, f);
            this.dragging = true;
            this.helper.addClass("ui-sortable-helper");
            this._mouseDrag(f);
            return true
        }, _mouseDrag: function(g) {
            this.position = this._generatePosition(g);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.lastPositionAbs) {
                this.lastPositionAbs = this.positionAbs
            }
            if (this.options.scroll) {
                var d = this.options, k = false;
                if (this.scrollParent[0] != document && this.scrollParent[0].tagName != "HTML") {
                    if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - g.pageY < d.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = k = this.scrollParent[0].scrollTop + d.scrollSpeed
                    } else {
                        if (g.pageY - this.overflowOffset.top < d.scrollSensitivity) {
                            this.scrollParent[0].scrollTop = k = this.scrollParent[0].scrollTop - d.scrollSpeed
                        }
                    }
                    if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - g.pageX < d.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = k = this.scrollParent[0].scrollLeft + d.scrollSpeed
                    } else {
                        if (g.pageX - this.overflowOffset.left < d.scrollSensitivity) {
                            this.scrollParent[0].scrollLeft = k = this.scrollParent[0].scrollLeft - d.scrollSpeed
                        }
                    }
                } else {
                    if (g.pageY - a(document).scrollTop() < d.scrollSensitivity) {
                        k = a(document).scrollTop(a(document).scrollTop() - d.scrollSpeed)
                    } else {
                        if (a(window).height() - (g.pageY - a(document).scrollTop()) < d.scrollSensitivity) {
                            k = a(document).scrollTop(a(document).scrollTop() + d.scrollSpeed)
                        }
                    }
                    if (g.pageX - a(document).scrollLeft() < d.scrollSensitivity) {
                        k = a(document).scrollLeft(a(document).scrollLeft() - d.scrollSpeed)
                    } else {
                        if (a(window).width() - (g.pageX - a(document).scrollLeft()) < d.scrollSensitivity) {
                            k = a(document).scrollLeft(a(document).scrollLeft() + d.scrollSpeed)
                        }
                    }
                }
                k !== false && a.ui.ddmanager && !d.dropBehaviour && a.ui.ddmanager.prepareOffsets(this, g)
            }
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.options.axis || this.options.axis != "y") {
                this.helper[0].style.left = this.position.left + "px"
            }
            if (!this.options.axis || this.options.axis != "x") {
                this.helper[0].style.top = this.position.top + "px"
            }
            for (d = this.items.length - 1; d >= 0; d--) {
                k = this.items[d];
                var j = k.item[0], h = this._intersectsWithPointer(k);
                if (h) {
                    if (j != this.currentItem[0] && this.placeholder[h == 1 ? "next" : "prev"]()[0] != j && !a.ui.contains(this.placeholder[0], j) && (this.options.type == "semi-dynamic" ? !a.ui.contains(this.element[0], j) : true)) {
                        this.direction = h == 1 ? "down" : "up";
                        if (this.options.tolerance == "pointer" || this._intersectsWithSides(k)) {
                            this._rearrange(g, k)
                        } else {
                            break
                        }
                        this._trigger("change", g, this._uiHash());
                        break
                    }
                }
            }
            this._contactContainers(g);
            a.ui.ddmanager && a.ui.ddmanager.drag(this, g);
            this._trigger("sort", g, this._uiHash());
            this.lastPositionAbs = this.positionAbs;
            return false
        }, _mouseStop: function(f, d) {
            if (f) {
                a.ui.ddmanager && !this.options.dropBehaviour && a.ui.ddmanager.drop(this, f);
                if (this.options.revert) {
                    var g = this;
                    d = g.placeholder.offset();
                    g.reverting = true;
                    a(this.helper).animate({left: d.left - this.offset.parent.left - g.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft), top: d.top - this.offset.parent.top - g.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)}, parseInt(this.options.revert, 10) || 500, function() {
                        g._clear(f)
                    })
                } else {
                    this._clear(f, d)
                }
                return false
            }
        }, cancel: function() {
            var d = this;
            if (this.dragging) {
                this._mouseUp();
                this.options.helper == "original" ? this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") : this.currentItem.show();
                for (var c = this.containers.length - 1; c >= 0; c--) {
                    this.containers[c]._trigger("deactivate", null, d._uiHash(this));
                    if (this.containers[c].containerCache.over) {
                        this.containers[c]._trigger("out", null, d._uiHash(this));
                        this.containers[c].containerCache.over = 0
                    }
                }
            }
            this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            this.options.helper != "original" && this.helper && this.helper[0].parentNode && this.helper.remove();
            a.extend(this, {helper: null, dragging: false, reverting: false, _noFinalSort: null});
            this.domPosition.prev ? a(this.domPosition.prev).after(this.currentItem) : a(this.domPosition.parent).prepend(this.currentItem);
            return this
        }, serialize: function(f) {
            var d = this._getItemsAsjQuery(f && f.connected), g = [];
            f = f || {};
            a(d).each(function() {
                var b = (a(f.item || this).attr(f.attribute || "id") || "").match(f.expression || /(.+)[-=_](.+)/);
                if (b) {
                    g.push((f.key || b[1] + "[]") + "=" + (f.key && f.expression ? b[1] : b[2]))
                }
            });
            !g.length && f.key && g.push(f.key + "=");
            return g.join("&")
        }, toArray: function(f) {
            var d = this._getItemsAsjQuery(f && f.connected), g = [];
            f = f || {};
            d.each(function() {
                g.push(a(f.item || this).attr(f.attribute || "id") || "")
            });
            return g
        }, _intersectsWith: function(w) {
            var v = this.positionAbs.left, u = v + this.helperProportions.width, s = this.positionAbs.top, r = s + this.helperProportions.height, q = w.left, p = q + w.width, o = w.top, m = o + w.height, n = this.offset.click.top, d = this.offset.click.left;
            n = s + n > o && s + n < m && v + d > q && v + d < p;
            return this.options.tolerance == "pointer" || this.options.forcePointerForContainers || this.options.tolerance != "pointer" && this.helperProportions[this.floating ? "width" : "height"] > w[this.floating ? "width" : "height"] ? n : q < v + this.helperProportions.width / 2 && u - this.helperProportions.width / 2 < p && o < s + this.helperProportions.height / 2 && r - this.helperProportions.height / 2 < m
        }, _intersectsWithPointer: function(f) {
            var d = a.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, f.top, f.height);
            f = a.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, f.left, f.width);
            d = d && f;
            f = this._getDragVerticalDirection();
            var g = this._getDragHorizontalDirection();
            if (!d) {
                return false
            }
            return this.floating ? g && g == "right" || f == "down" ? 2 : 1 : f && (f == "down" ? 2 : 1)
        }, _intersectsWithSides: function(f) {
            var d = a.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, f.top + f.height / 2, f.height);
            f = a.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, f.left + f.width / 2, f.width);
            var h = this._getDragVerticalDirection(), g = this._getDragHorizontalDirection();
            return this.floating && g ? g == "right" && f || g == "left" && !f : h && (h == "down" && d || h == "up" && !d)
        }, _getDragVerticalDirection: function() {
            var b = this.positionAbs.top - this.lastPositionAbs.top;
            return b != 0 && (b > 0 ? "down" : "up")
        }, _getDragHorizontalDirection: function() {
            var b = this.positionAbs.left - this.lastPositionAbs.left;
            return b != 0 && (b > 0 ? "right" : "left")
        }, refresh: function(b) {
            this._refreshItems(b);
            this.refreshPositions();
            return this
        }, _connectWith: function() {
            var b = this.options;
            return b.connectWith.constructor == String ? [b.connectWith] : b.connectWith
        }, _getItemsAsjQuery: function(j) {
            var d = [], o = [], n = this._connectWith();
            if (n && j) {
                for (j = n.length - 1; j >= 0; j--) {
                    for (var m = a(n[j]), l = m.length - 1; l >= 0; l--) {
                        var k = a.data(m[l], "sortable");
                        if (k && k != this && !k.options.disabled) {
                            o.push([a.isFunction(k.options.items) ? k.options.items.call(k.element) : a(k.options.items, k.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), k])
                        }
                    }
                }
            }
            o.push([a.isFunction(this.options.items) ? this.options.items.call(this.element, null, {options: this.options, item: this.currentItem}) : a(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);
            for (j = o.length - 1; j >= 0; j--) {
                o[j][0].each(function() {
                    d.push(this)
                })
            }
            return a(d)
        }, _removeCurrentsFromItems: function() {
            for (var f = this.currentItem.find(":data(sortable-item)"), d = 0; d < this.items.length; d++) {
                for (var g = 0; g < f.length; g++) {
                    f[g] == this.items[d].item[0] && this.items.splice(d, 1)
                }
            }
        }, _refreshItems: function(j) {
            this.items = [];
            this.containers = [this];
            var d = this.items, p = [[a.isFunction(this.options.items) ? this.options.items.call(this.element[0], j, {item: this.currentItem}) : a(this.options.items, this.element), this]], o = this._connectWith();
            if (o) {
                for (var n = o.length - 1; n >= 0; n--) {
                    for (var m = a(o[n]), l = m.length - 1; l >= 0; l--) {
                        var k = a.data(m[l], "sortable");
                        if (k && k != this && !k.options.disabled) {
                            p.push([a.isFunction(k.options.items) ? k.options.items.call(k.element[0], j, {item: this.currentItem}) : a(k.options.items, k.element), k]);
                            this.containers.push(k)
                        }
                    }
                }
            }
            for (n = p.length - 1; n >= 0; n--) {
                j = p[n][1];
                o = p[n][0];
                l = 0;
                for (m = o.length; l < m; l++) {
                    k = a(o[l]);
                    k.data("sortable-item", j);
                    d.push({item: k, instance: j, width: 0, height: 0, left: 0, top: 0})
                }
            }
        }, refreshPositions: function(f) {
            if (this.offsetParent && this.helper) {
                this.offset.parent = this._getParentOffset()
            }
            for (var d = this.items.length - 1; d >= 0; d--) {
                var h = this.items[d], g = this.options.toleranceElement ? a(this.options.toleranceElement, h.item) : h.item;
                if (!f) {
                    h.width = g.outerWidth();
                    h.height = g.outerHeight()
                }
                g = g.offset();
                h.left = g.left;
                h.top = g.top
            }
            if (this.options.custom && this.options.custom.refreshContainers) {
                this.options.custom.refreshContainers.call(this)
            } else {
                for (d = this.containers.length - 1; d >= 0; d--) {
                    g = this.containers[d].element.offset();
                    this.containers[d].containerCache.left = g.left;
                    this.containers[d].containerCache.top = g.top;
                    this.containers[d].containerCache.width = this.containers[d].element.outerWidth();
                    this.containers[d].containerCache.height = this.containers[d].element.outerHeight()
                }
            }
            return this
        }, _createPlaceholder: function(f) {
            var d = f || this, h = d.options;
            if (!h.placeholder || h.placeholder.constructor == String) {
                var g = h.placeholder;
                h.placeholder = {element: function() {
                        var b = a(document.createElement(d.currentItem[0].nodeName)).addClass(g || d.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];
                        if (!g) {
                            b.style.visibility = "hidden"
                        }
                        return b
                    }, update: function(c, b) {
                        if (!(g && !h.forcePlaceholderSize)) {
                            b.height() || b.height(d.currentItem.innerHeight() - parseInt(d.currentItem.css("paddingTop") || 0, 10) - parseInt(d.currentItem.css("paddingBottom") || 0, 10));
                            b.width() || b.width(d.currentItem.innerWidth() - parseInt(d.currentItem.css("paddingLeft") || 0, 10) - parseInt(d.currentItem.css("paddingRight") || 0, 10))
                        }
                    }}
            }
            d.placeholder = a(h.placeholder.element.call(d.element, d.currentItem));
            d.currentItem.after(d.placeholder);
            h.placeholder.update(d, d.placeholder)
        }, _contactContainers: function(j) {
            for (var d = null, o = null, n = this.containers.length - 1; n >= 0; n--) {
                if (!a.ui.contains(this.currentItem[0], this.containers[n].element[0])) {
                    if (this._intersectsWith(this.containers[n].containerCache)) {
                        if (!(d && a.ui.contains(this.containers[n].element[0], d.element[0]))) {
                            d = this.containers[n];
                            o = n
                        }
                    } else {
                        if (this.containers[n].containerCache.over) {
                            this.containers[n]._trigger("out", j, this._uiHash(this));
                            this.containers[n].containerCache.over = 0
                        }
                    }
                }
            }
            if (d) {
                if (this.containers.length === 1) {
                    this.containers[o]._trigger("over", j, this._uiHash(this));
                    this.containers[o].containerCache.over = 1
                } else {
                    if (this.currentContainer != this.containers[o]) {
                        d = 10000;
                        n = null;
                        for (var m = this.positionAbs[this.containers[o].floating ? "left" : "top"], l = this.items.length - 1; l >= 0; l--) {
                            if (a.ui.contains(this.containers[o].element[0], this.items[l].item[0])) {
                                var k = this.items[l][this.containers[o].floating ? "left" : "top"];
                                if (Math.abs(k - m) < d) {
                                    d = Math.abs(k - m);
                                    n = this.items[l]
                                }
                            }
                        }
                        if (n || this.options.dropOnEmpty) {
                            this.currentContainer = this.containers[o];
                            n ? this._rearrange(j, n, null, true) : this._rearrange(j, null, this.containers[o].element, true);
                            this._trigger("change", j, this._uiHash());
                            this.containers[o]._trigger("change", j, this._uiHash(this));
                            this.options.placeholder.update(this.currentContainer, this.placeholder);
                            this.containers[o]._trigger("over", j, this._uiHash(this));
                            this.containers[o].containerCache.over = 1
                        }
                    }
                }
            }
        }, _createHelper: function(d) {
            var c = this.options;
            d = a.isFunction(c.helper) ? a(c.helper.apply(this.element[0], [d, this.currentItem])) : c.helper == "clone" ? this.currentItem.clone() : this.currentItem;
            d.parents("body").length || a(c.appendTo != "parent" ? c.appendTo : this.currentItem[0].parentNode)[0].appendChild(d[0]);
            if (d[0] == this.currentItem[0]) {
                this._storedCSS = {width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left")}
            }
            if (d[0].style.width == "" || c.forceHelperSize) {
                d.width(this.currentItem.width())
            }
            if (d[0].style.height == "" || c.forceHelperSize) {
                d.height(this.currentItem.height())
            }
            return d
        }, _adjustOffsetFromHelper: function(b) {
            if (typeof b == "string") {
                b = b.split(" ")
            }
            if (a.isArray(b)) {
                b = {left: +b[0], top: +b[1] || 0}
            }
            if ("left" in b) {
                this.offset.click.left = b.left + this.margins.left
            }
            if ("right" in b) {
                this.offset.click.left = this.helperProportions.width - b.right + this.margins.left
            }
            if ("top" in b) {
                this.offset.click.top = b.top + this.margins.top
            }
            if ("bottom" in b) {
                this.offset.click.top = this.helperProportions.height - b.bottom + this.margins.top
            }
        }, _getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var b = this.offsetParent.offset();
            if (this.cssPosition == "absolute" && this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                b.left += this.scrollParent.scrollLeft();
                b.top += this.scrollParent.scrollTop()
            }
            if (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && a.browser.msie) {
                b = {top: 0, left: 0}
            }
            return{top: b.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: b.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)}
        }, _getRelativeOffset: function() {
            if (this.cssPosition == "relative") {
                var b = this.currentItem.position();
                return{top: b.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: b.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()}
            } else {
                return{top: 0, left: 0}
            }
        }, _cacheMargins: function() {
            this.margins = {left: parseInt(this.currentItem.css("marginLeft"), 10) || 0, top: parseInt(this.currentItem.css("marginTop"), 10) || 0}
        }, _cacheHelperProportions: function() {
            this.helperProportions = {width: this.helper.outerWidth(), height: this.helper.outerHeight()}
        }, _setContainment: function() {
            var f = this.options;
            if (f.containment == "parent") {
                f.containment = this.helper[0].parentNode
            }
            if (f.containment == "document" || f.containment == "window") {
                this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, a(f.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (a(f.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]
            }
            if (!/^(document|window|parent)$/.test(f.containment)) {
                var d = a(f.containment)[0];
                f = a(f.containment).offset();
                var g = a(d).css("overflow") != "hidden";
                this.containment = [f.left + (parseInt(a(d).css("borderLeftWidth"), 10) || 0) + (parseInt(a(d).css("paddingLeft"), 10) || 0) - this.margins.left, f.top + (parseInt(a(d).css("borderTopWidth"), 10) || 0) + (parseInt(a(d).css("paddingTop"), 10) || 0) - this.margins.top, f.left + (g ? Math.max(d.scrollWidth, d.offsetWidth) : d.offsetWidth) - (parseInt(a(d).css("borderLeftWidth"), 10) || 0) - (parseInt(a(d).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, f.top + (g ? Math.max(d.scrollHeight, d.offsetHeight) : d.offsetHeight) - (parseInt(a(d).css("borderTopWidth"), 10) || 0) - (parseInt(a(d).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
            }
        }, _convertPositionTo: function(f, d) {
            if (!d) {
                d = this.position
            }
            f = f == "absolute" ? 1 : -1;
            var h = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, g = /(html|body)/i.test(h[0].tagName);
            return{top: d.top + this.offset.relative.top * f + this.offset.parent.top * f - (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : g ? 0 : h.scrollTop()) * f), left: d.left + this.offset.relative.left * f + this.offset.parent.left * f - (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : g ? 0 : h.scrollLeft()) * f)}
        }, _generatePosition: function(h) {
            var d = this.options, m = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, l = /(html|body)/i.test(m[0].tagName);
            if (this.cssPosition == "relative" && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0])) {
                this.offset.relative = this._getRelativeOffset()
            }
            var k = h.pageX, j = h.pageY;
            if (this.originalPosition) {
                if (this.containment) {
                    if (h.pageX - this.offset.click.left < this.containment[0]) {
                        k = this.containment[0] + this.offset.click.left
                    }
                    if (h.pageY - this.offset.click.top < this.containment[1]) {
                        j = this.containment[1] + this.offset.click.top
                    }
                    if (h.pageX - this.offset.click.left > this.containment[2]) {
                        k = this.containment[2] + this.offset.click.left
                    }
                    if (h.pageY - this.offset.click.top > this.containment[3]) {
                        j = this.containment[3] + this.offset.click.top
                    }
                }
                if (d.grid) {
                    j = this.originalPageY + Math.round((j - this.originalPageY) / d.grid[1]) * d.grid[1];
                    j = this.containment ? !(j - this.offset.click.top < this.containment[1] || j - this.offset.click.top > this.containment[3]) ? j : !(j - this.offset.click.top < this.containment[1]) ? j - d.grid[1] : j + d.grid[1] : j;
                    k = this.originalPageX + Math.round((k - this.originalPageX) / d.grid[0]) * d.grid[0];
                    k = this.containment ? !(k - this.offset.click.left < this.containment[0] || k - this.offset.click.left > this.containment[2]) ? k : !(k - this.offset.click.left < this.containment[0]) ? k - d.grid[0] : k + d.grid[0] : k
                }
            }
            return{top: j - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (a.browser.safari && this.cssPosition == "fixed" ? 0 : this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : l ? 0 : m.scrollTop()), left: k - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (a.browser.safari && this.cssPosition == "fixed" ? 0 : this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : l ? 0 : m.scrollLeft())}
        }, _rearrange: function(h, d, m, l) {
            m ? m[0].appendChild(this.placeholder[0]) : d.item[0].parentNode.insertBefore(this.placeholder[0], this.direction == "down" ? d.item[0] : d.item[0].nextSibling);
            this.counter = this.counter ? ++this.counter : 1;
            var k = this, j = this.counter;
            window.setTimeout(function() {
                j == k.counter && k.refreshPositions(!l)
            }, 0)
        }, _clear: function(f, d) {
            this.reverting = false;
            var h = [];
            !this._noFinalSort && this.currentItem[0].parentNode && this.placeholder.before(this.currentItem);
            this._noFinalSort = null;
            if (this.helper[0] == this.currentItem[0]) {
                for (var g in this._storedCSS) {
                    if (this._storedCSS[g] == "auto" || this._storedCSS[g] == "static") {
                        this._storedCSS[g] = ""
                    }
                }
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
            } else {
                this.currentItem.show()
            }
            this.fromOutside && !d && h.push(function(b) {
                this._trigger("receive", b, this._uiHash(this.fromOutside))
            });
            if ((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !d) {
                h.push(function(b) {
                    this._trigger("update", b, this._uiHash())
                })
            }
            if (!a.ui.contains(this.element[0], this.currentItem[0])) {
                d || h.push(function(b) {
                    this._trigger("remove", b, this._uiHash())
                });
                for (g = this.containers.length - 1; g >= 0; g--) {
                    if (a.ui.contains(this.containers[g].element[0], this.currentItem[0]) && !d) {
                        h.push(function(b) {
                            return function(c) {
                                b._trigger("receive", c, this._uiHash(this))
                            }
                        }.call(this, this.containers[g]));
                        h.push(function(b) {
                            return function(c) {
                                b._trigger("update", c, this._uiHash(this))
                            }
                        }.call(this, this.containers[g]))
                    }
                }
            }
            for (g = this.containers.length - 1; g >= 0; g--) {
                d || h.push(function(b) {
                    return function(c) {
                        b._trigger("deactivate", c, this._uiHash(this))
                    }
                }.call(this, this.containers[g]));
                if (this.containers[g].containerCache.over) {
                    h.push(function(b) {
                        return function(c) {
                            b._trigger("out", c, this._uiHash(this))
                        }
                    }.call(this, this.containers[g]));
                    this.containers[g].containerCache.over = 0
                }
            }
            this._storedCursor && a("body").css("cursor", this._storedCursor);
            this._storedOpacity && this.helper.css("opacity", this._storedOpacity);
            if (this._storedZIndex) {
                this.helper.css("zIndex", this._storedZIndex == "auto" ? "" : this._storedZIndex)
            }
            this.dragging = false;
            if (this.cancelHelperRemoval) {
                if (!d) {
                    this._trigger("beforeStop", f, this._uiHash());
                    for (g = 0; g < h.length; g++) {
                        h[g].call(this, f)
                    }
                    this._trigger("stop", f, this._uiHash())
                }
                return false
            }
            d || this._trigger("beforeStop", f, this._uiHash());
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            this.helper[0] != this.currentItem[0] && this.helper.remove();
            this.helper = null;
            if (!d) {
                for (g = 0; g < h.length; g++) {
                    h[g].call(this, f)
                }
                this._trigger("stop", f, this._uiHash())
            }
            this.fromOutside = false;
            return true
        }, _trigger: function() {
            a.Widget.prototype._trigger.apply(this, arguments) === false && this.cancel()
        }, _uiHash: function(d) {
            var c = d || this;
            return{helper: c.helper, placeholder: c.placeholder || a([]), position: c.position, originalPosition: c.originalPosition, offset: c.positionAbs, item: c.currentItem, sender: d ? d.element : null}
        }});
    a.extend(a.ui.sortable, {version: "1.8.6"})
})(jQuery);
(function(a) {
    a.widget("ui.accordion", {options: {active: 0, animated: "slide", autoHeight: true, clearStyle: false, collapsible: false, event: "click", fillSpace: false, header: "> li > :first-child,> :not(li):even", icons: {header: "ui-icon-triangle-1-e", headerSelected: "ui-icon-triangle-1-s"}, navigation: false, navigationFilter: function() {
                return this.href.toLowerCase() === location.href.toLowerCase()
            }}, _create: function() {
            var g = this, c = g.options;
            g.running = 0;
            g.element.addClass("ui-accordion ui-widget ui-helper-reset").children("li").addClass("ui-accordion-li-fix");
            g.headers = g.element.find(c.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all").bind("mouseenter.accordion", function() {
                c.disabled || a(this).addClass("ui-state-hover")
            }).bind("mouseleave.accordion", function() {
                c.disabled || a(this).removeClass("ui-state-hover")
            }).bind("focus.accordion", function() {
                c.disabled || a(this).addClass("ui-state-focus")
            }).bind("blur.accordion", function() {
                c.disabled || a(this).removeClass("ui-state-focus")
            });
            g.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom");
            if (c.navigation) {
                var j = g.element.find("a").filter(c.navigationFilter).eq(0);
                if (j.length) {
                    var h = j.closest(".ui-accordion-header");
                    g.active = h.length ? h : j.closest(".ui-accordion-content").prev()
                }
            }
            g.active = g._findActive(g.active || c.active).addClass("ui-state-default ui-state-active").toggleClass("ui-corner-all").toggleClass("ui-corner-top");
            g.active.next().addClass("ui-accordion-content-active");
            g._createIcons();
            g.resize();
            g.element.attr("role", "tablist");
            g.headers.attr("role", "tab").bind("keydown.accordion", function(b) {
                return g._keydown(b)
            }).next().attr("role", "tabpanel");
            g.headers.not(g.active || "").attr({"aria-expanded": "false", tabIndex: -1}).next().hide();
            g.active.length ? g.active.attr({"aria-expanded": "true", tabIndex: 0}) : g.headers.eq(0).attr("tabIndex", 0);
            a.browser.safari || g.headers.find("a").attr("tabIndex", -1);
            c.event && g.headers.bind(c.event.split(" ").join(".accordion ") + ".accordion", function(b) {
                g._clickHandler.call(g, b, this);
                b.preventDefault()
            })
        }, _createIcons: function() {
            var b = this.options;
            if (b.icons) {
                a("<span></span>").addClass("ui-icon " + b.icons.header).prependTo(this.headers);
                this.active.children(".ui-icon").toggleClass(b.icons.header).toggleClass(b.icons.headerSelected);
                this.element.addClass("ui-accordion-icons")
            }
        }, _destroyIcons: function() {
            this.headers.children(".ui-icon").remove();
            this.element.removeClass("ui-accordion-icons")
        }, destroy: function() {
            var d = this.options;
            this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role");
            this.headers.unbind(".accordion").removeClass("ui-accordion-header ui-accordion-disabled ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("tabIndex");
            this.headers.find("a").removeAttr("tabIndex");
            this._destroyIcons();
            var c = this.headers.next().css("display", "").removeAttr("role").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-accordion-disabled ui-state-disabled");
            if (d.autoHeight || d.fillHeight) {
                c.css("height", "")
            }
            return a.Widget.prototype.destroy.call(this)
        }, _setOption: function(d, c) {
            a.Widget.prototype._setOption.apply(this, arguments);
            d == "active" && this.activate(c);
            if (d == "icons") {
                this._destroyIcons();
                c && this._createIcons()
            }
            if (d == "disabled") {
                this.headers.add(this.headers.next())[c ? "addClass" : "removeClass"]("ui-accordion-disabled ui-state-disabled")
            }
        }, _keydown: function(h) {
            if (!(this.options.disabled || h.altKey || h.ctrlKey)) {
                var c = a.ui.keyCode, l = this.headers.length, k = this.headers.index(h.target), j = false;
                switch (h.keyCode) {
                    case c.RIGHT:
                    case c.DOWN:
                        j = this.headers[(k + 1) % l];
                        break;
                    case c.LEFT:
                    case c.UP:
                        j = this.headers[(k - 1 + l) % l];
                        break;
                    case c.SPACE:
                    case c.ENTER:
                        this._clickHandler({target: h.target}, h.target);
                        h.preventDefault()
                }
                if (j) {
                    a(h.target).attr("tabIndex", -1);
                    a(j).attr("tabIndex", 0);
                    j.focus();
                    return false
                }
                return true
            }
        }, resize: function() {
            var f = this.options, c;
            if (f.fillSpace) {
                if (a.browser.msie) {
                    var g = this.element.parent().css("overflow");
                    this.element.parent().css("overflow", "hidden")
                }
                c = this.element.parent().height();
                a.browser.msie && this.element.parent().css("overflow", g);
                this.headers.each(function() {
                    c -= a(this).outerHeight(true)
                });
                this.headers.next().each(function() {
                    a(this).height(Math.max(0, c - a(this).innerHeight() + a(this).height()))
                }).css("overflow", "auto")
            } else {
                if (f.autoHeight) {
                    c = 0;
                    this.headers.next().each(function() {
                        c = Math.max(c, a(this).height("").height())
                    }).height(c)
                }
            }
            return this
        }, activate: function(b) {
            this.options.active = b;
            b = this._findActive(b)[0];
            this._clickHandler({target: b}, b);
            return this
        }, _findActive: function(b) {
            return b ? typeof b === "number" ? this.headers.filter(":eq(" + b + ")") : this.headers.not(this.headers.not(b)) : b === false ? a([]) : this.headers.filter(":eq(0)")
        }, _clickHandler: function(j, c) {
            var n = this.options;
            if (!n.disabled) {
                if (j.target) {
                    j = a(j.currentTarget || c);
                    c = j[0] === this.active[0];
                    n.active = n.collapsible && c ? false : this.headers.index(j);
                    if (!(this.running || !n.collapsible && c)) {
                        this.active.removeClass("ui-state-active ui-corner-top").addClass("ui-state-default ui-corner-all").children(".ui-icon").removeClass(n.icons.headerSelected).addClass(n.icons.header);
                        if (!c) {
                            j.removeClass("ui-state-default ui-corner-all").addClass("ui-state-active ui-corner-top").children(".ui-icon").removeClass(n.icons.header).addClass(n.icons.headerSelected);
                            j.next().addClass("ui-accordion-content-active")
                        }
                        k = j.next();
                        m = this.active.next();
                        l = {options: n, newHeader: c && n.collapsible ? a([]) : j, oldHeader: this.active, newContent: c && n.collapsible ? a([]) : k, oldContent: m};
                        n = this.headers.index(this.active[0]) > this.headers.index(j[0]);
                        this.active = c ? a([]) : j;
                        this._toggle(k, m, l, c, n)
                    }
                } else {
                    if (n.collapsible) {
                        this.active.removeClass("ui-state-active ui-corner-top").addClass("ui-state-default ui-corner-all").children(".ui-icon").removeClass(n.icons.headerSelected).addClass(n.icons.header);
                        this.active.next().addClass("ui-accordion-content-active");
                        var m = this.active.next(), l = {options: n, newHeader: a([]), oldHeader: n.active, newContent: a([]), oldContent: m}, k = this.active = a([]);
                        this._toggle(k, m, l)
                    }
                }
            }
        }, _toggle: function(u, s, r, p, o) {
            var n = this, q = n.options;
            n.toShow = u;
            n.toHide = s;
            n.data = r;
            var l = function() {
                if (n) {
                    return n._completed.apply(n, arguments)
                }
            };
            n._trigger("changestart", null, n.data);
            n.running = s.size() === 0 ? u.size() : s.size();
            if (q.animated) {
                r = {};
                r = q.collapsible && p ? {toShow: a([]), toHide: s, complete: l, down: o, autoHeight: q.autoHeight || q.fillSpace} : {toShow: u, toHide: s, complete: l, down: o, autoHeight: q.autoHeight || q.fillSpace};
                if (!q.proxied) {
                    q.proxied = q.animated
                }
                if (!q.proxiedDuration) {
                    q.proxiedDuration = q.duration
                }
                q.animated = a.isFunction(q.proxied) ? q.proxied(r) : q.proxied;
                q.duration = a.isFunction(q.proxiedDuration) ? q.proxiedDuration(r) : q.proxiedDuration;
                p = a.ui.accordion.animations;
                var m = q.duration, c = q.animated;
                if (c && !p[c] && !a.easing[c]) {
                    c = "slide"
                }
                p[c] || (p[c] = function(b) {
                    this.slide(b, {easing: c, duration: m || 700})
                });
                p[c](r)
            } else {
                if (q.collapsible && p) {
                    u.toggle()
                } else {
                    s.hide();
                    u.show()
                }
                l(true)
            }
            s.prev().attr({"aria-expanded": "false", tabIndex: -1}).blur();
            u.prev().attr({"aria-expanded": "true", tabIndex: 0}).focus()
        }, _completed: function(b) {
            this.running = b ? 0 : --this.running;
            if (!this.running) {
                this.options.clearStyle && this.toShow.add(this.toHide).css({height: "", overflow: ""});
                this.toHide.removeClass("ui-accordion-content-active");
                this._trigger("change", null, this.data)
            }
        }});
    a.extend(a.ui.accordion, {version: "1.8.6", animations: {slide: function(j, c) {
                j = a.extend({easing: "swing", duration: 300}, j, c);
                if (j.toHide.size()) {
                    if (j.toShow.size()) {
                        var o = j.toShow.css("overflow"), m = 0, l = {}, k = {}, n;
                        c = j.toShow;
                        n = c[0].style.width;
                        c.width(parseInt(c.parent().width(), 10) - parseInt(c.css("paddingLeft"), 10) - parseInt(c.css("paddingRight"), 10) - (parseInt(c.css("borderLeftWidth"), 10) || 0) - (parseInt(c.css("borderRightWidth"), 10) || 0));
                        a.each(["height", "paddingTop", "paddingBottom"], function(b, d) {
                            k[d] = "hide";
                            b = ("" + a.css(j.toShow[0], d)).match(/^([\d+-.]+)(.*)$/);
                            l[d] = {value: b[1], unit: b[2] || "px"}
                        });
                        j.toShow.css({height: 0, overflow: "hidden"}).show();
                        j.toHide.filter(":hidden").each(j.complete).end().filter(":visible").animate(k, {step: function(b, d) {
                                if (d.prop == "height") {
                                    m = d.end - d.start === 0 ? 0 : (d.now - d.start) / (d.end - d.start)
                                }
                                j.toShow[0].style[d.prop] = m * l[d.prop].value + l[d.prop].unit
                            }, duration: j.duration, easing: j.easing, complete: function() {
                                j.autoHeight || j.toShow.css("height", "");
                                j.toShow.css({width: n, overflow: o});
                                j.complete()
                            }})
                    } else {
                        j.toHide.animate({height: "hide", paddingTop: "hide", paddingBottom: "hide"}, j)
                    }
                } else {
                    j.toShow.animate({height: "show", paddingTop: "show", paddingBottom: "show"}, j)
                }
            }, bounceslide: function(b) {
                this.slide(b, {easing: b.down ? "easeOutBounce" : "swing", duration: b.down ? 1000 : 200})
            }}})
})(jQuery);
(function(a) {
    a.widget("ui.autocomplete", {options: {appendTo: "body", delay: 300, minLength: 1, position: {my: "left top", at: "left bottom", collision: "none"}, source: null}, _create: function() {
            var d = this, c = this.element[0].ownerDocument, g;
            this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off").attr({role: "textbox", "aria-autocomplete": "list", "aria-haspopup": "true"}).bind("keydown.autocomplete", function(f) {
                if (!(d.options.disabled || d.element.attr("readonly"))) {
                    g = false;
                    var b = a.ui.keyCode;
                    switch (f.keyCode) {
                        case b.PAGE_UP:
                            d._move("previousPage", f);
                            break;
                        case b.PAGE_DOWN:
                            d._move("nextPage", f);
                            break;
                        case b.UP:
                            d._move("previous", f);
                            f.preventDefault();
                            break;
                        case b.DOWN:
                            d._move("next", f);
                            f.preventDefault();
                            break;
                        case b.ENTER:
                        case b.NUMPAD_ENTER:
                            if (d.menu.active) {
                                g = true;
                                f.preventDefault()
                            }
                        case b.TAB:
                            if (!d.menu.active) {
                                return
                            }
                            d.menu.select(f);
                            break;
                        case b.ESCAPE:
                            d.element.val(d.term);
                            d.close(f);
                            break;
                        default:
                            clearTimeout(d.searching);
                            d.searching = setTimeout(function() {
                                if (d.term != d.element.val()) {
                                    d.selectedItem = null;
                                    d.search(null, f)
                                }
                            }, d.options.delay);
                            break
                        }
                }
            }).bind("keypress.autocomplete", function(b) {
                if (g) {
                    g = false;
                    b.preventDefault()
                }
            }).bind("focus.autocomplete", function() {
                if (!d.options.disabled) {
                    d.selectedItem = null;
                    d.previous = d.element.val()
                }
            }).bind("blur.autocomplete", function(b) {
                if (!d.options.disabled) {
                    clearTimeout(d.searching);
                    d.closing = setTimeout(function() {
                        d.close(b);
                        d._change(b)
                    }, 150)
                }
            });
            this._initSource();
            this.response = function() {
                return d._response.apply(d, arguments)
            };
            this.menu = a("<ul></ul>").addClass("ui-autocomplete").appendTo(a(this.options.appendTo || "body", c)[0]).mousedown(function(f) {
                var b = d.menu.element[0];
                a(f.target).closest(".ui-menu-item").length || setTimeout(function() {
                    a(document).one("mousedown", function(h) {
                        h.target !== d.element[0] && h.target !== b && !a.ui.contains(b, h.target) && d.close()
                    })
                }, 1);
                setTimeout(function() {
                    clearTimeout(d.closing)
                }, 13)
            }).menu({focus: function(f, b) {
                    b = b.item.data("item.autocomplete");
                    false !== d._trigger("focus", f, {item: b}) && /^key/.test(f.originalEvent.type) && d.element.val(b.value)
                }, selected: function(h, f) {
                    f = f.item.data("item.autocomplete");
                    var b = d.previous;
                    if (d.element[0] !== c.activeElement) {
                        d.element.focus();
                        d.previous = b;
                        setTimeout(function() {
                            d.previous = b
                        }, 1)
                    }
                    false !== d._trigger("select", h, {item: f}) && d.element.val(f.value);
                    d.term = d.element.val();
                    d.close(h);
                    d.selectedItem = f
                }, blur: function() {
                    d.menu.element.is(":visible") && d.element.val() !== d.term && d.element.val(d.term)
                }}).zIndex(this.element.zIndex() + 1).css({top: 0, left: 0}).hide().data("menu");
            a.fn.bgiframe && this.menu.element.bgiframe()
        }, destroy: function() {
            this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete").removeAttr("role").removeAttr("aria-autocomplete").removeAttr("aria-haspopup");
            this.menu.element.remove();
            a.Widget.prototype.destroy.call(this)
        }, _setOption: function(d, c) {
            a.Widget.prototype._setOption.apply(this, arguments);
            d === "source" && this._initSource();
            if (d === "appendTo") {
                this.menu.element.appendTo(a(c || "body", this.element[0].ownerDocument)[0])
            }
        }, _initSource: function() {
            var d = this, c, g;
            if (a.isArray(this.options.source)) {
                c = this.options.source;
                this.source = function(f, b) {
                    b(a.ui.autocomplete.filter(c, f.term))
                }
            } else {
                if (typeof this.options.source === "string") {
                    g = this.options.source;
                    this.source = function(f, b) {
                        d.xhr && d.xhr.abort();
                        d.xhr = a.getJSON(g, f, function(l, j, k) {
                            k === d.xhr && b(l);
                            d.xhr = null
                        })
                    }
                } else {
                    this.source = this.options.source
                }
            }
        }, search: function(d, c) {
            d = d != null ? d : this.element.val();
            this.term = this.element.val();
            if (d.length < this.options.minLength) {
                return this.close(c)
            }
            clearTimeout(this.closing);
            if (this._trigger("search", c) !== false) {
                return this._search(d)
            }
        }, _search: function(b) {
            this.element.addClass("ui-autocomplete-loading");
            this.source({term: b}, this.response)
        }, _response: function(b) {
            if (b && b.length) {
                b = this._normalize(b);
                this._suggest(b);
                this._trigger("open")
            } else {
                this.close()
            }
            this.element.removeClass("ui-autocomplete-loading")
        }, close: function(b) {
            clearTimeout(this.closing);
            if (this.menu.element.is(":visible")) {
                this._trigger("close", b);
                this.menu.element.hide();
                this.menu.deactivate()
            }
        }, _change: function(b) {
            this.previous !== this.element.val() && this._trigger("change", b, {item: this.selectedItem})
        }, _normalize: function(b) {
            if (b.length && b[0].label && b[0].value) {
                return b
            }
            return a.map(b, function(c) {
                if (typeof c === "string") {
                    return{label: c, value: c}
                }
                return a.extend({label: c.label || c.value, value: c.value || c.label}, c)
            })
        }, _suggest: function(b) {
            this._renderMenu(this.menu.element.empty().zIndex(this.element.zIndex() + 1), b);
            this.menu.deactivate();
            this.menu.refresh();
            this.menu.element.show().position(a.extend({of: this.element}, this.options.position));
            this._resizeMenu()
        }, _resizeMenu: function() {
            var b = this.menu.element;
            b.outerWidth(Math.max(b.width("").outerWidth(), this.element.outerWidth()))
        }, _renderMenu: function(d, c) {
            var g = this;
            a.each(c, function(f, b) {
                g._renderItem(d, b)
            })
        }, _renderItem: function(d, c) {
            return a("<li></li>").data("item.autocomplete", c).append(a("<a></a>").text(c.label)).appendTo(d)
        }, _move: function(d, c) {
            if (this.menu.element.is(":visible")) {
                if (this.menu.first() && /^previous/.test(d) || this.menu.last() && /^next/.test(d)) {
                    this.element.val(this.term);
                    this.menu.deactivate()
                } else {
                    this.menu[d](c)
                }
            } else {
                this.search(null, c)
            }
        }, widget: function() {
            return this.menu.element
        }});
    a.extend(a.ui.autocomplete, {escapeRegex: function(b) {
            return b.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&")
        }, filter: function(d, c) {
            var g = new RegExp(a.ui.autocomplete.escapeRegex(c), "i");
            return a.grep(d, function(b) {
                return g.test(b.label || b.value || b)
            })
        }})
})(jQuery);
(function(a) {
    a.widget("ui.menu", {_create: function() {
            var b = this;
            this.element.addClass("ui-menu ui-widget ui-widget-content ui-corner-all").attr({role: "listbox", "aria-activedescendant": "ui-active-menuitem"}).click(function(c) {
                if (a(c.target).closest(".ui-menu-item a").length) {
                    c.preventDefault();
                    b.select(c)
                }
            });
            this.refresh()
        }, refresh: function() {
            var b = this;
            this.element.children("li:not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role", "menuitem").children("a").addClass("ui-corner-all").attr("tabindex", -1).mouseenter(function(c) {
                b.activate(c, a(this).parent())
            }).mouseleave(function() {
                b.deactivate()
            })
        }, activate: function(h, g) {
            this.deactivate();
            if (this.hasScroll()) {
                var j = g.offset().top - this.element.offset().top, l = this.element.attr("scrollTop"), k = this.element.height();
                if (j < 0) {
                    this.element.attr("scrollTop", l + j)
                } else {
                    j >= k && this.element.attr("scrollTop", l + j - k + g.height())
                }
            }
            this.active = g.eq(0).children("a").addClass("ui-state-hover").attr("id", "ui-active-menuitem").end();
            this._trigger("focus", h, {item: g})
        }, deactivate: function() {
            if (this.active) {
                this.active.children("a").removeClass("ui-state-hover").removeAttr("id");
                this._trigger("blur");
                this.active = null
            }
        }, next: function(b) {
            this.move("next", ".ui-menu-item:first", b)
        }, previous: function(b) {
            this.move("prev", ".ui-menu-item:last", b)
        }, first: function() {
            return this.active && !this.active.prevAll(".ui-menu-item").length
        }, last: function() {
            return this.active && !this.active.nextAll(".ui-menu-item").length
        }, move: function(d, c, g) {
            if (this.active) {
                d = this.active[d + "All"](".ui-menu-item").eq(0);
                d.length ? this.activate(g, d) : this.activate(g, this.element.children(c))
            } else {
                this.activate(g, this.element.children(c))
            }
        }, nextPage: function(g) {
            if (this.hasScroll()) {
                if (!this.active || this.last()) {
                    this.activate(g, this.element.children(".ui-menu-item:first"))
                } else {
                    var d = this.active.offset().top, h = this.element.height(), j = this.element.children(".ui-menu-item").filter(function() {
                        var b = a(this).offset().top - d - h + a(this).height();
                        return b < 10 && b > -10
                    });
                    j.length || (j = this.element.children(".ui-menu-item:last"));
                    this.activate(g, j)
                }
            } else {
                this.activate(g, this.element.children(".ui-menu-item").filter(!this.active || this.last() ? ":first" : ":last"))
            }
        }, previousPage: function(d) {
            if (this.hasScroll()) {
                if (!this.active || this.first()) {
                    this.activate(d, this.element.children(".ui-menu-item:last"))
                } else {
                    var c = this.active.offset().top, g = this.element.height();
                    result = this.element.children(".ui-menu-item").filter(function() {
                        var b = a(this).offset().top - c + g - a(this).height();
                        return b < 10 && b > -10
                    });
                    result.length || (result = this.element.children(".ui-menu-item:first"));
                    this.activate(d, result)
                }
            } else {
                this.activate(d, this.element.children(".ui-menu-item").filter(!this.active || this.first() ? ":last" : ":first"))
            }
        }, hasScroll: function() {
            return this.element.height() < this.element.attr("scrollHeight")
        }, select: function(b) {
            this._trigger("selected", b, {item: this.active})
        }})
})(jQuery);
(function(b) {
    var f, c = function(a) {
        b(":ui-button", a.target.form).each(function() {
            var g = b(this).data("button");
            setTimeout(function() {
                g.refresh()
            }, 1)
        })
    }, d = function(a) {
        var j = a.name, h = a.form, g = b([]);
        if (j) {
            g = h ? b(h).find("[name='" + j + "']") : b("[name='" + j + "']", a.ownerDocument).filter(function() {
                return !this.form
            })
        }
        return g
    };
    b.widget("ui.button", {options: {disabled: null, text: true, label: null, icons: {primary: null, secondary: null}}, _create: function() {
            this.element.closest("form").unbind("reset.button").bind("reset.button", c);
            if (typeof this.options.disabled !== "boolean") {
                this.options.disabled = this.element.attr("disabled")
            }
            this._determineButtonType();
            this.hasTitle = !!this.buttonElement.attr("title");
            var a = this, j = this.options, h = this.type === "checkbox" || this.type === "radio", g = "ui-state-hover" + (!h ? " ui-state-active" : "");
            if (j.label === null) {
                j.label = this.buttonElement.html()
            }
            if (this.element.is(":disabled")) {
                j.disabled = true
            }
            this.buttonElement.addClass("ui-button ui-widget ui-state-default ui-corner-all").attr("role", "button").bind("mouseenter.button", function() {
                if (!j.disabled) {
                    b(this).addClass("ui-state-hover");
                    this === f && b(this).addClass("ui-state-active")
                }
            }).bind("mouseleave.button", function() {
                j.disabled || b(this).removeClass(g)
            }).bind("focus.button", function() {
                b(this).addClass("ui-state-focus")
            }).bind("blur.button", function() {
                b(this).removeClass("ui-state-focus")
            });
            h && this.element.bind("change.button", function() {
                a.refresh()
            });
            if (this.type === "checkbox") {
                this.buttonElement.bind("click.button", function() {
                    if (j.disabled) {
                        return false
                    }
                    b(this).toggleClass("ui-state-active");
                    a.buttonElement.attr("aria-pressed", a.element[0].checked)
                })
            } else {
                if (this.type === "radio") {
                    this.buttonElement.bind("click.button", function() {
                        if (j.disabled) {
                            return false
                        }
                        b(this).addClass("ui-state-active");
                        a.buttonElement.attr("aria-pressed", true);
                        var k = a.element[0];
                        d(k).not(k).map(function() {
                            return b(this).button("widget")[0]
                        }).removeClass("ui-state-active").attr("aria-pressed", false)
                    })
                } else {
                    this.buttonElement.bind("mousedown.button", function() {
                        if (j.disabled) {
                            return false
                        }
                        b(this).addClass("ui-state-active");
                        f = this;
                        b(document).one("mouseup", function() {
                            f = null
                        })
                    }).bind("mouseup.button", function() {
                        if (j.disabled) {
                            return false
                        }
                        b(this).removeClass("ui-state-active")
                    }).bind("keydown.button", function(k) {
                        if (j.disabled) {
                            return false
                        }
                        if (k.keyCode == b.ui.keyCode.SPACE || k.keyCode == b.ui.keyCode.ENTER) {
                            b(this).addClass("ui-state-active")
                        }
                    }).bind("keyup.button", function() {
                        b(this).removeClass("ui-state-active")
                    });
                    this.buttonElement.is("a") && this.buttonElement.keyup(function(k) {
                        k.keyCode === b.ui.keyCode.SPACE && b(this).click()
                    })
                }
            }
            this._setOption("disabled", j.disabled)
        }, _determineButtonType: function() {
            this.type = this.element.is(":checkbox") ? "checkbox" : this.element.is(":radio") ? "radio" : this.element.is("input") ? "input" : "button";
            if (this.type === "checkbox" || this.type === "radio") {
                this.buttonElement = this.element.parents().last().find("label[for=" + this.element.attr("id") + "]");
                this.element.addClass("ui-helper-hidden-accessible");
                var a = this.element.is(":checked");
                a && this.buttonElement.addClass("ui-state-active");
                this.buttonElement.attr("aria-pressed", a)
            } else {
                this.buttonElement = this.element
            }
        }, widget: function() {
            return this.buttonElement
        }, destroy: function() {
            this.element.removeClass("ui-helper-hidden-accessible");
            this.buttonElement.removeClass("ui-button ui-widget ui-state-default ui-corner-all ui-state-hover ui-state-active  ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only").removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
            this.hasTitle || this.buttonElement.removeAttr("title");
            b.Widget.prototype.destroy.call(this)
        }, _setOption: function(a, g) {
            b.Widget.prototype._setOption.apply(this, arguments);
            if (a === "disabled") {
                g ? this.element.attr("disabled", true) : this.element.removeAttr("disabled")
            }
            this._resetButton()
        }, refresh: function() {
            var a = this.element.is(":disabled");
            a !== this.options.disabled && this._setOption("disabled", a);
            if (this.type === "radio") {
                d(this.element[0]).each(function() {
                    b(this).is(":checked") ? b(this).button("widget").addClass("ui-state-active").attr("aria-pressed", true) : b(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", false)
                })
            } else {
                if (this.type === "checkbox") {
                    this.element.is(":checked") ? this.buttonElement.addClass("ui-state-active").attr("aria-pressed", true) : this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", false)
                }
            }
        }, _resetButton: function() {
            if (this.type === "input") {
                this.options.label && this.element.val(this.options.label)
            } else {
                var a = this.buttonElement.removeClass("ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only"), j = b("<span></span>").addClass("ui-button-text").html(this.options.label).appendTo(a.empty()).text(), h = this.options.icons, g = h.primary && h.secondary;
                if (h.primary || h.secondary) {
                    a.addClass("ui-button-text-icon" + (g ? "s" : h.primary ? "-primary" : "-secondary"));
                    h.primary && a.prepend("<span class='ui-button-icon-primary ui-icon " + h.primary + "'></span>");
                    h.secondary && a.append("<span class='ui-button-icon-secondary ui-icon " + h.secondary + "'></span>");
                    if (!this.options.text) {
                        a.addClass(g ? "ui-button-icons-only" : "ui-button-icon-only").removeClass("ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary");
                        this.hasTitle || a.attr("title", j)
                    }
                } else {
                    a.addClass("ui-button-text-only")
                }
            }
        }});
    b.widget("ui.buttonset", {_create: function() {
            this.element.addClass("ui-buttonset")
        }, _init: function() {
            this.refresh()
        }, _setOption: function(a, g) {
            a === "disabled" && this.buttons.button("option", a, g);
            b.Widget.prototype._setOption.apply(this, arguments)
        }, refresh: function() {
            this.buttons = this.element.find(":button, :submit, :reset, :checkbox, :radio, a, :data(button)").filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function() {
                return b(this).button("widget")[0]
            }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":visible").filter(":first").addClass("ui-corner-left").end().filter(":last").addClass("ui-corner-right").end().end().end()
        }, destroy: function() {
            this.element.removeClass("ui-buttonset");
            this.buttons.map(function() {
                return b(this).button("widget")[0]
            }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
            b.Widget.prototype.destroy.call(this)
        }})
})(jQuery);
(function(f, d) {
    var b = {buttons: true, height: true, maxHeight: true, maxWidth: true, minHeight: true, minWidth: true, width: true}, a = {maxHeight: true, maxWidth: true, minHeight: true, minWidth: true};
    f.widget("ui.dialog", {options: {autoOpen: true, buttons: {}, closeOnEscape: true, closeText: "close", dialogClass: "", draggable: true, hide: null, height: "auto", maxHeight: false, maxWidth: false, minHeight: 150, minWidth: 150, modal: false, position: {my: "center", at: "center", of: window, collision: "fit", using: function(g) {
                    var c = f(this).css(g).offset().top;
                    c < 0 && f(this).css("top", g.top - c)
                }}, resizable: true, show: null, stack: true, title: "", width: 300, zIndex: 1000}, _create: function() {
            this.originalTitle = this.element.attr("title");
            if (typeof this.originalTitle !== "string") {
                this.originalTitle = ""
            }
            this.options.title = this.options.title || this.originalTitle;
            var j = this, c = j.options, o = c.title || "&#160;", n = f.ui.dialog.getTitleId(j.element), l = (j.uiDialog = f("<div></div>")).appendTo(document.body).hide().addClass("ui-dialog ui-widget ui-widget-content ui-corner-all " + c.dialogClass).css({zIndex: c.zIndex}).attr("tabIndex", -1).css("outline", 0).keydown(function(g) {
                if (c.closeOnEscape && g.keyCode && g.keyCode === f.ui.keyCode.ESCAPE) {
                    j.close(g);
                    g.preventDefault()
                }
            }).attr({role: "dialog", "aria-labelledby": n}).mousedown(function(g) {
                j.moveToTop(false, g)
            });
            j.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(l);
            var m = (j.uiDialogTitlebar = f("<div></div>")).addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(l), k = f('<a href="#"></a>').addClass("ui-dialog-titlebar-close ui-corner-all").attr("role", "button").hover(function() {
                k.addClass("ui-state-hover")
            }, function() {
                k.removeClass("ui-state-hover")
            }).focus(function() {
                k.addClass("ui-state-focus")
            }).blur(function() {
                k.removeClass("ui-state-focus")
            }).click(function(g) {
                j.close(g);
                return false
            }).appendTo(m);
            (j.uiDialogTitlebarCloseText = f("<span></span>")).addClass("ui-icon ui-icon-closethick").text(c.closeText).appendTo(k);
            f("<span></span>").addClass("ui-dialog-title").attr("id", n).html(o).prependTo(m);
            if (f.isFunction(c.beforeclose) && !f.isFunction(c.beforeClose)) {
                c.beforeClose = c.beforeclose
            }
            m.find("*").add(m).disableSelection();
            c.draggable && f.fn.draggable && j._makeDraggable();
            c.resizable && f.fn.resizable && j._makeResizable();
            j._createButtons(c.buttons);
            j._isOpen = false;
            f.fn.bgiframe && l.bgiframe()
        }, _init: function() {
            this.options.autoOpen && this.open()
        }, destroy: function() {
            var c = this;
            c.overlay && c.overlay.destroy();
            c.uiDialog.hide();
            c.element.unbind(".dialog").removeData("dialog").removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body");
            c.uiDialog.remove();
            c.originalTitle && c.element.attr("title", c.originalTitle);
            return c
        }, widget: function() {
            return this.uiDialog
        }, close: function(g) {
            var c = this, h;
            if (false !== c._trigger("beforeClose", g)) {
                c.overlay && c.overlay.destroy();
                c.uiDialog.unbind("keypress.ui-dialog");
                c._isOpen = false;
                if (c.options.hide) {
                    c.uiDialog.hide(c.options.hide, function() {
                        c._trigger("close", g)
                    })
                } else {
                    c.uiDialog.hide();
                    c._trigger("close", g)
                }
                f.ui.dialog.overlay.resize();
                if (c.options.modal) {
                    h = 0;
                    f(".ui-dialog").each(function() {
                        if (this !== c.uiDialog[0]) {
                            h = Math.max(h, f(this).css("z-index"))
                        }
                    });
                    f.ui.dialog.maxZ = h
                }
                return c
            }
        }, isOpen: function() {
            return this._isOpen
        }, moveToTop: function(g, c) {
            var j = this, h = j.options;
            if (h.modal && !g || !h.stack && !h.modal) {
                return j._trigger("focus", c)
            }
            if (h.zIndex > f.ui.dialog.maxZ) {
                f.ui.dialog.maxZ = h.zIndex
            }
            if (j.overlay) {
                f.ui.dialog.maxZ += 1;
                j.overlay.$el.css("z-index", f.ui.dialog.overlay.maxZ = f.ui.dialog.maxZ)
            }
            g = {scrollTop: j.element.attr("scrollTop"), scrollLeft: j.element.attr("scrollLeft")};
            f.ui.dialog.maxZ += 1;
            j.uiDialog.css("z-index", f.ui.dialog.maxZ);
            j.element.attr(g);
            j._trigger("focus", c);
            return j
        }, open: function() {
            if (!this._isOpen) {
                var g = this, c = g.options, h = g.uiDialog;
                g.overlay = c.modal ? new f.ui.dialog.overlay(g) : null;
                g._size();
                g._position(c.position);
                h.show(c.show);
                g.moveToTop(true);
                c.modal && h.bind("keypress.ui-dialog", function(l) {
                    if (l.keyCode === f.ui.keyCode.TAB) {
                        var j = f(":tabbable", this), k = j.filter(":first");
                        j = j.filter(":last");
                        if (l.target === j[0] && !l.shiftKey) {
                            k.focus(1);
                            return false
                        } else {
                            if (l.target === k[0] && l.shiftKey) {
                                j.focus(1);
                                return false
                            }
                        }
                    }
                });
                f(g.element.find(":tabbable").get().concat(h.find(".ui-dialog-buttonpane :tabbable").get().concat(h.get()))).eq(0).focus();
                g._isOpen = true;
                g._trigger("open");
                return g
            }
        }, _createButtons: function(h) {
            var c = this, l = false, k = f("<div></div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"), j = f("<div></div>").addClass("ui-dialog-buttonset").appendTo(k);
            c.uiDialog.find(".ui-dialog-buttonpane").remove();
            typeof h === "object" && h !== null && f.each(h, function() {
                return !(l = true)
            });
            if (l) {
                f.each(h, function(m, g) {
                    g = f.isFunction(g) ? {click: g, text: m} : g;
                    m = f('<button type="button"></button>').attr(g, true).unbind("click").click(function() {
                        g.click.apply(c.element[0], arguments)
                    }).appendTo(j);
                    f.fn.button && m.button()
                });
                k.appendTo(c.uiDialog)
            }
        }, _makeDraggable: function() {
            function h(g) {
                return{position: g.position, offset: g.offset}
            }
            var c = this, l = c.options, k = f(document), j;
            c.uiDialog.draggable({cancel: ".ui-dialog-content, .ui-dialog-titlebar-close", handle: ".ui-dialog-titlebar", containment: "document", start: function(m, g) {
                    j = l.height === "auto" ? "auto" : f(this).height();
                    f(this).height(f(this).height()).addClass("ui-dialog-dragging");
                    c._trigger("dragStart", m, h(g))
                }, drag: function(m, g) {
                    c._trigger("drag", m, h(g))
                }, stop: function(m, g) {
                    l.position = [g.position.left - k.scrollLeft(), g.position.top - k.scrollTop()];
                    f(this).removeClass("ui-dialog-dragging").height(j);
                    c._trigger("dragStop", m, h(g));
                    f.ui.dialog.overlay.resize()
                }})
        }, _makeResizable: function(h) {
            function c(g) {
                return{originalPosition: g.originalPosition, originalSize: g.originalSize, position: g.position, size: g.size}
            }
            h = h === d ? this.options.resizable : h;
            var l = this, k = l.options, j = l.uiDialog.css("position");
            h = typeof h === "string" ? h : "n,e,s,w,se,sw,ne,nw";
            l.uiDialog.resizable({cancel: ".ui-dialog-content", containment: "document", alsoResize: l.element, maxWidth: k.maxWidth, maxHeight: k.maxHeight, minWidth: k.minWidth, minHeight: l._minHeight(), handles: h, start: function(m, g) {
                    f(this).addClass("ui-dialog-resizing");
                    l._trigger("resizeStart", m, c(g))
                }, resize: function(m, g) {
                    l._trigger("resize", m, c(g))
                }, stop: function(m, g) {
                    f(this).removeClass("ui-dialog-resizing");
                    k.height = f(this).height();
                    k.width = f(this).width();
                    l._trigger("resizeStop", m, c(g));
                    f.ui.dialog.overlay.resize()
                }}).css("position", j).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se")
        }, _minHeight: function() {
            var c = this.options;
            return c.height === "auto" ? c.minHeight : Math.min(c.minHeight, c.height)
        }, _position: function(g) {
            var c = [], j = [0, 0], h;
            if (g) {
                if (typeof g === "string" || typeof g === "object" && "0" in g) {
                    c = g.split ? g.split(" ") : [g[0], g[1]];
                    if (c.length === 1) {
                        c[1] = c[0]
                    }
                    f.each(["left", "top"], function(k, l) {
                        if (+c[k] === c[k]) {
                            j[k] = c[k];
                            c[k] = l
                        }
                    });
                    g = {my: c.join(" "), at: c.join(" "), offset: j.join(" ")}
                }
                g = f.extend({}, f.ui.dialog.prototype.options.position, g)
            } else {
                g = f.ui.dialog.prototype.options.position
            }
            (h = this.uiDialog.is(":visible")) || this.uiDialog.show();
            this.uiDialog.css({top: 0, left: 0}).position(g);
            h || this.uiDialog.hide()
        }, _setOptions: function(g) {
            var c = this, j = {}, h = false;
            f.each(g, function(k, l) {
                c._setOption(k, l);
                if (k in b) {
                    h = true
                }
                if (k in a) {
                    j[k] = l
                }
            });
            h && this._size();
            this.uiDialog.is(":data(resizable)") && this.uiDialog.resizable("option", j)
        }, _setOption: function(h, c) {
            var l = this, k = l.uiDialog;
            switch (h) {
                case"beforeclose":
                    h = "beforeClose";
                    break;
                case"buttons":
                    l._createButtons(c);
                    break;
                case"closeText":
                    l.uiDialogTitlebarCloseText.text("" + c);
                    break;
                case"dialogClass":
                    k.removeClass(l.options.dialogClass).addClass("ui-dialog ui-widget ui-widget-content ui-corner-all " + c);
                    break;
                case"disabled":
                    c ? k.addClass("ui-dialog-disabled") : k.removeClass("ui-dialog-disabled");
                    break;
                case"draggable":
                    var j = k.is(":data(draggable)");
                    j && !c && k.draggable("destroy");
                    !j && c && l._makeDraggable();
                    break;
                case"position":
                    l._position(c);
                    break;
                case"resizable":
                    (j = k.is(":data(resizable)")) && !c && k.resizable("destroy");
                    j && typeof c === "string" && k.resizable("option", "handles", c);
                    !j && c !== false && l._makeResizable(c);
                    break;
                case"title":
                    f(".ui-dialog-title", l.uiDialogTitlebar).html("" + (c || "&#160;"));
                    break
            }
            f.Widget.prototype._setOption.apply(l, arguments)
        }, _size: function() {
            var g = this.options, c, h;
            this.element.show().css({width: "auto", minHeight: 0, height: 0});
            if (g.minWidth > g.width) {
                g.width = g.minWidth
            }
            c = this.uiDialog.css({height: "auto", width: g.width}).height();
            h = Math.max(0, g.minHeight - c);
            if (g.height === "auto") {
                if (f.support.minHeight) {
                    this.element.css({minHeight: h, height: "auto"})
                } else {
                    this.uiDialog.show();
                    g = this.element.css("height", "auto").height();
                    this.uiDialog.hide();
                    this.element.height(Math.max(g, h))
                }
            } else {
                this.element.height(Math.max(g.height - c, 0))
            }
            this.uiDialog.is(":data(resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight())
        }});
    f.extend(f.ui.dialog, {version: "1.8.6", uuid: 0, maxZ: 0, getTitleId: function(c) {
            c = c.attr("id");
            if (!c) {
                this.uuid += 1;
                c = this.uuid
            }
            return"ui-dialog-title-" + c
        }, overlay: function(c) {
            this.$el = f.ui.dialog.overlay.create(c)
        }});
    f.extend(f.ui.dialog.overlay, {instances: [], oldInstances: [], maxZ: 0, events: f.map("focus,mousedown,mouseup,keydown,keypress,click".split(","), function(c) {
            return c + ".dialog-overlay"
        }).join(" "), create: function(g) {
            if (this.instances.length === 0) {
                setTimeout(function() {
                    f.ui.dialog.overlay.instances.length && f(document).bind(f.ui.dialog.overlay.events, function(h) {
                        if (f(h.target).zIndex() < f.ui.dialog.overlay.maxZ) {
                            return false
                        }
                    })
                }, 1);
                f(document).bind("keydown.dialog-overlay", function(h) {
                    if (g.options.closeOnEscape && h.keyCode && h.keyCode === f.ui.keyCode.ESCAPE) {
                        g.close(h);
                        h.preventDefault()
                    }
                });
                f(window).bind("resize.dialog-overlay", f.ui.dialog.overlay.resize)
            }
            var c = (this.oldInstances.pop() || f("<div></div>").addClass("ui-widget-overlay")).appendTo(document.body).css({width: this.width(), height: this.height()});
            f.fn.bgiframe && c.bgiframe();
            this.instances.push(c);
            return c
        }, destroy: function(g) {
            this.oldInstances.push(this.instances.splice(f.inArray(g, this.instances), 1)[0]);
            this.instances.length === 0 && f([document, window]).unbind(".dialog-overlay");
            g.remove();
            var c = 0;
            f.each(this.instances, function() {
                c = Math.max(c, this.css("z-index"))
            });
            this.maxZ = c
        }, height: function() {
            var g, c;
            if (f.browser.msie && f.browser.version < 7) {
                g = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);
                c = Math.max(document.documentElement.offsetHeight, document.body.offsetHeight);
                return g < c ? f(window).height() + "px" : g + "px"
            } else {
                return f(document).height() + "px"
            }
        }, width: function() {
            var g, c;
            if (f.browser.msie && f.browser.version < 7) {
                g = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth);
                c = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);
                return g < c ? f(window).width() + "px" : g + "px"
            } else {
                return f(document).width() + "px"
            }
        }, resize: function() {
            var c = f([]);
            f.each(f.ui.dialog.overlay.instances, function() {
                c = c.add(this)
            });
            c.css({width: 0, height: 0}).css({width: f.ui.dialog.overlay.width(), height: f.ui.dialog.overlay.height()})
        }});
    f.extend(f.ui.dialog.overlay.prototype, {destroy: function() {
            f.ui.dialog.overlay.destroy(this.$el)
        }})
})(jQuery);
(function(a) {
    a.widget("ui.slider", a.ui.mouse, {widgetEventPrefix: "slide", options: {animate: false, distance: 0, max: 100, min: 0, orientation: "horizontal", range: false, step: 1, value: 0, values: null}, _create: function() {
            var d = this, c = this.options;
            this._mouseSliding = this._keySliding = false;
            this._animateOff = true;
            this._handleIndex = null;
            this._detectOrientation();
            this._mouseInit();
            this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget ui-widget-content ui-corner-all");
            c.disabled && this.element.addClass("ui-slider-disabled ui-disabled");
            this.range = a([]);
            if (c.range) {
                if (c.range === true) {
                    this.range = a("<div></div>");
                    if (!c.values) {
                        c.values = [this._valueMin(), this._valueMin()]
                    }
                    if (c.values.length && c.values.length !== 2) {
                        c.values = [c.values[0], c.values[0]]
                    }
                } else {
                    this.range = a("<div></div>")
                }
                this.range.appendTo(this.element).addClass("ui-slider-range");
                if (c.range === "min" || c.range === "max") {
                    this.range.addClass("ui-slider-range-" + c.range)
                }
                this.range.addClass("ui-widget-header")
            }
            a(".ui-slider-handle", this.element).length === 0 && a("<a href='#'></a>").appendTo(this.element).addClass("ui-slider-handle");
            if (c.values && c.values.length) {
                for (; a(".ui-slider-handle", this.element).length < c.values.length; ) {
                    a("<a href='#'></a>").appendTo(this.element).addClass("ui-slider-handle")
                }
            }
            this.handles = a(".ui-slider-handle", this.element).addClass("ui-state-default ui-corner-all");
            this.handle = this.handles.eq(0);
            this.handles.add(this.range).filter("a").click(function(b) {
                b.preventDefault()
            }).hover(function() {
                c.disabled || a(this).addClass("ui-state-hover")
            }, function() {
                a(this).removeClass("ui-state-hover")
            }).focus(function() {
                if (c.disabled) {
                    a(this).blur()
                } else {
                    a(".ui-slider .ui-state-focus").removeClass("ui-state-focus");
                    a(this).addClass("ui-state-focus")
                }
            }).blur(function() {
                a(this).removeClass("ui-state-focus")
            });
            this.handles.each(function(b) {
                a(this).data("index.ui-slider-handle", b)
            });
            this.handles.keydown(function(n) {
                var m = true, l = a(this).data("index.ui-slider-handle"), j, k, b;
                if (!d.options.disabled) {
                    switch (n.keyCode) {
                        case a.ui.keyCode.HOME:
                        case a.ui.keyCode.END:
                        case a.ui.keyCode.PAGE_UP:
                        case a.ui.keyCode.PAGE_DOWN:
                        case a.ui.keyCode.UP:
                        case a.ui.keyCode.RIGHT:
                        case a.ui.keyCode.DOWN:
                        case a.ui.keyCode.LEFT:
                            m = false;
                            if (!d._keySliding) {
                                d._keySliding = true;
                                a(this).addClass("ui-state-active");
                                j = d._start(n, l);
                                if (j === false) {
                                    return
                                }
                            }
                            break
                    }
                    b = d.options.step;
                    j = d.options.values && d.options.values.length ? (k = d.values(l)) : (k = d.value());
                    switch (n.keyCode) {
                        case a.ui.keyCode.HOME:
                            k = d._valueMin();
                            break;
                        case a.ui.keyCode.END:
                            k = d._valueMax();
                            break;
                        case a.ui.keyCode.PAGE_UP:
                            k = d._trimAlignValue(j + (d._valueMax() - d._valueMin()) / 5);
                            break;
                        case a.ui.keyCode.PAGE_DOWN:
                            k = d._trimAlignValue(j - (d._valueMax() - d._valueMin()) / 5);
                            break;
                        case a.ui.keyCode.UP:
                        case a.ui.keyCode.RIGHT:
                            if (j === d._valueMax()) {
                                return
                            }
                            k = d._trimAlignValue(j + b);
                            break;
                        case a.ui.keyCode.DOWN:
                        case a.ui.keyCode.LEFT:
                            if (j === d._valueMin()) {
                                return
                            }
                            k = d._trimAlignValue(j - b);
                            break
                    }
                    d._slide(n, l, k);
                    return m
                }
            }).keyup(function(f) {
                var b = a(this).data("index.ui-slider-handle");
                if (d._keySliding) {
                    d._keySliding = false;
                    d._stop(f, b);
                    d._change(f, b);
                    a(this).removeClass("ui-state-active")
                }
            });
            this._refreshValue();
            this._animateOff = false
        }, destroy: function() {
            this.handles.remove();
            this.range.remove();
            this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all").removeData("slider").unbind(".slider");
            this._mouseDestroy();
            return this
        }, _mouseCapture: function(j) {
            var d = this.options, o, n, m, k, l;
            if (d.disabled) {
                return false
            }
            this.elementSize = {width: this.element.outerWidth(), height: this.element.outerHeight()};
            this.elementOffset = this.element.offset();
            o = this._normValueFromMouse({x: j.pageX, y: j.pageY});
            n = this._valueMax() - this._valueMin() + 1;
            k = this;
            this.handles.each(function(c) {
                var b = Math.abs(o - k.values(c));
                if (n > b) {
                    n = b;
                    m = a(this);
                    l = c
                }
            });
            if (d.range === true && this.values(1) === d.min) {
                l += 1;
                m = a(this.handles[l])
            }
            if (this._start(j, l) === false) {
                return false
            }
            this._mouseSliding = true;
            k._handleIndex = l;
            m.addClass("ui-state-active").focus();
            d = m.offset();
            this._clickOffset = !a(j.target).parents().andSelf().is(".ui-slider-handle") ? {left: 0, top: 0} : {left: j.pageX - d.left - m.width() / 2, top: j.pageY - d.top - m.height() / 2 - (parseInt(m.css("borderTopWidth"), 10) || 0) - (parseInt(m.css("borderBottomWidth"), 10) || 0) + (parseInt(m.css("marginTop"), 10) || 0)};
            this._slide(j, l, o);
            return this._animateOff = true
        }, _mouseStart: function() {
            return true
        }, _mouseDrag: function(d) {
            var c = this._normValueFromMouse({x: d.pageX, y: d.pageY});
            this._slide(d, this._handleIndex, c);
            return false
        }, _mouseStop: function(b) {
            this.handles.removeClass("ui-state-active");
            this._mouseSliding = false;
            this._stop(b, this._handleIndex);
            this._change(b, this._handleIndex);
            this._clickOffset = this._handleIndex = null;
            return this._animateOff = false
        }, _detectOrientation: function() {
            this.orientation = this.options.orientation === "vertical" ? "vertical" : "horizontal"
        }, _normValueFromMouse: function(d) {
            var c;
            if (this.orientation === "horizontal") {
                c = this.elementSize.width;
                d = d.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)
            } else {
                c = this.elementSize.height;
                d = d.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)
            }
            c = d / c;
            if (c > 1) {
                c = 1
            }
            if (c < 0) {
                c = 0
            }
            if (this.orientation === "vertical") {
                c = 1 - c
            }
            d = this._valueMax() - this._valueMin();
            return this._trimAlignValue(this._valueMin() + c * d)
        }, _start: function(f, d) {
            var g = {handle: this.handles[d], value: this.value()};
            if (this.options.values && this.options.values.length) {
                g.value = this.values(d);
                g.values = this.values()
            }
            return this._trigger("start", f, g)
        }, _slide: function(f, d, h) {
            var g;
            if (this.options.values && this.options.values.length) {
                g = this.values(d ? 0 : 1);
                if (this.options.values.length === 2 && this.options.range === true && (d === 0 && h > g || d === 1 && h < g)) {
                    h = g
                }
                if (h !== this.values(d)) {
                    g = this.values();
                    g[d] = h;
                    f = this._trigger("slide", f, {handle: this.handles[d], value: h, values: g});
                    this.values(d ? 0 : 1);
                    f !== false && this.values(d, h, true)
                }
            } else {
                if (h !== this.value()) {
                    f = this._trigger("slide", f, {handle: this.handles[d], value: h});
                    f !== false && this.value(h)
                }
            }
        }, _stop: function(f, d) {
            var g = {handle: this.handles[d], value: this.value()};
            if (this.options.values && this.options.values.length) {
                g.value = this.values(d);
                g.values = this.values()
            }
            this._trigger("stop", f, g)
        }, _change: function(f, d) {
            if (!this._keySliding && !this._mouseSliding) {
                var g = {handle: this.handles[d], value: this.value()};
                if (this.options.values && this.options.values.length) {
                    g.value = this.values(d);
                    g.values = this.values()
                }
                this._trigger("change", f, g)
            }
        }, value: function(b) {
            if (arguments.length) {
                this.options.value = this._trimAlignValue(b);
                this._refreshValue();
                this._change(null, 0)
            }
            return this._value()
        }, values: function(g, d) {
            var k, j, h;
            if (arguments.length > 1) {
                this.options.values[g] = this._trimAlignValue(d);
                this._refreshValue();
                this._change(null, g)
            }
            if (arguments.length) {
                if (a.isArray(arguments[0])) {
                    k = this.options.values;
                    j = arguments[0];
                    for (h = 0; h < k.length; h += 1) {
                        k[h] = this._trimAlignValue(j[h]);
                        this._change(null, h)
                    }
                    this._refreshValue()
                } else {
                    return this.options.values && this.options.values.length ? this._values(g) : this.value()
                }
            } else {
                return this._values()
            }
        }, _setOption: function(f, d) {
            var h, g = 0;
            if (a.isArray(this.options.values)) {
                g = this.options.values.length
            }
            a.Widget.prototype._setOption.apply(this, arguments);
            switch (f) {
                case"disabled":
                    if (d) {
                        this.handles.filter(".ui-state-focus").blur();
                        this.handles.removeClass("ui-state-hover");
                        this.handles.attr("disabled", "disabled");
                        this.element.addClass("ui-disabled")
                    } else {
                        this.handles.removeAttr("disabled");
                        this.element.removeClass("ui-disabled")
                    }
                    break;
                case"orientation":
                    this._detectOrientation();
                    this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation);
                    this._refreshValue();
                    break;
                case"value":
                    this._animateOff = true;
                    this._refreshValue();
                    this._change(null, 0);
                    this._animateOff = false;
                    break;
                case"values":
                    this._animateOff = true;
                    this._refreshValue();
                    for (h = 0; h < g; h += 1) {
                        this._change(null, h)
                    }
                    this._animateOff = false;
                    break
                }
        }, _value: function() {
            var b = this.options.value;
            return b = this._trimAlignValue(b)
        }, _values: function(f) {
            var d, g;
            if (arguments.length) {
                d = this.options.values[f];
                return d = this._trimAlignValue(d)
            } else {
                d = this.options.values.slice();
                for (g = 0; g < d.length; g += 1) {
                    d[g] = this._trimAlignValue(d[g])
                }
                return d
            }
        }, _trimAlignValue: function(f) {
            if (f < this._valueMin()) {
                return this._valueMin()
            }
            if (f > this._valueMax()) {
                return this._valueMax()
            }
            var d = this.options.step > 0 ? this.options.step : 1, g = f % d;
            f = f - g;
            if (Math.abs(g) * 2 >= d) {
                f += g > 0 ? d : -d
            }
            return parseFloat(f.toFixed(5))
        }, _valueMin: function() {
            return this.options.min
        }, _valueMax: function() {
            return this.options.max
        }, _refreshValue: function() {
            var u = this.options.range, s = this.options, r = this, q = !this._animateOff ? s.animate : false, p, n = {}, o, m, k, d;
            if (this.options.values && this.options.values.length) {
                this.handles.each(function(b) {
                    p = (r.values(b) - r._valueMin()) / (r._valueMax() - r._valueMin()) * 100;
                    n[r.orientation === "horizontal" ? "left" : "bottom"] = p + "%";
                    a(this).stop(1, 1)[q ? "animate" : "css"](n, s.animate);
                    if (r.options.range === true) {
                        if (r.orientation === "horizontal") {
                            if (b === 0) {
                                r.range.stop(1, 1)[q ? "animate" : "css"]({left: p + "%"}, s.animate)
                            }
                            if (b === 1) {
                                r.range[q ? "animate" : "css"]({width: p - o + "%"}, {queue: false, duration: s.animate})
                            }
                        } else {
                            if (b === 0) {
                                r.range.stop(1, 1)[q ? "animate" : "css"]({bottom: p + "%"}, s.animate)
                            }
                            if (b === 1) {
                                r.range[q ? "animate" : "css"]({height: p - o + "%"}, {queue: false, duration: s.animate})
                            }
                        }
                    }
                    o = p
                })
            } else {
                m = this.value();
                k = this._valueMin();
                d = this._valueMax();
                p = d !== k ? (m - k) / (d - k) * 100 : 0;
                n[r.orientation === "horizontal" ? "left" : "bottom"] = p + "%";
                this.handle.stop(1, 1)[q ? "animate" : "css"](n, s.animate);
                if (u === "min" && this.orientation === "horizontal") {
                    this.range.stop(1, 1)[q ? "animate" : "css"]({width: p + "%"}, s.animate)
                }
                if (u === "max" && this.orientation === "horizontal") {
                    this.range[q ? "animate" : "css"]({width: 100 - p + "%"}, {queue: false, duration: s.animate})
                }
                if (u === "min" && this.orientation === "vertical") {
                    this.range.stop(1, 1)[q ? "animate" : "css"]({height: p + "%"}, s.animate)
                }
                if (u === "max" && this.orientation === "vertical") {
                    this.range[q ? "animate" : "css"]({height: 100 - p + "%"}, {queue: false, duration: s.animate})
                }
            }
        }});
    a.extend(a.ui.slider, {version: "1.8.6"})
})(jQuery);
(function(h, g) {
    function f() {
        return ++c
    }
    function b() {
        return ++a
    }
    var c = 0, a = 0;
    h.widget("ui.tabs", {options: {add: null, ajaxOptions: null, cache: false, cookie: null, collapsible: false, disable: null, disabled: [], enable: null, event: "click", fx: null, idPrefix: "ui-tabs-", load: null, panelTemplate: "<div></div>", remove: null, select: null, show: null, spinner: "<em>Loading&#8230;</em>", tabTemplate: "<li><a href='#{href}'><span>#{label}</span></a></li>"}, _create: function() {
            this._tabify(true)
        }, _setOption: function(d, j) {
            if (d == "selected") {
                this.options.collapsible && j == this.options.selected || this.select(j)
            } else {
                this.options[d] = j;
                this._tabify()
            }
        }, _tabId: function(d) {
            return d.title && d.title.replace(/\s/g, "_").replace(/[^\w\u00c0-\uFFFF-]/g, "") || this.options.idPrefix + f()
        }, _sanitizeSelector: function(d) {
            return d.replace(/:/g, "\\:")
        }, _cookie: function() {
            var d = this.cookie || (this.cookie = this.options.cookie.name || "ui-tabs-" + b());
            return h.cookie.apply(null, [d].concat(h.makeArray(arguments)))
        }, _ui: function(d, j) {
            return{tab: d, panel: j, index: this.anchors.index(d)}
        }, _cleanup: function() {
            this.lis.filter(".ui-state-processing").removeClass("ui-state-processing").find("span:data(label.tabs)").each(function() {
                var d = h(this);
                d.html(d.data("label.tabs")).removeData("label.tabs")
            })
        }, _tabify: function(z) {
            function x(j, k) {
                j.css("display", "");
                !h.support.opacity && k.opacity && j[0].style.removeAttribute("filter")
            }
            var A = this, y = this.options, w = /^#.+/;
            this.list = this.element.find("ol,ul").eq(0);
            this.lis = h(" > li:has(a[href])", this.list);
            this.anchors = this.lis.map(function() {
                return h("a", this)[0]
            });
            this.panels = h([]);
            this.anchors.each(function(m, o) {
                var k = h(o).attr("href"), j = k.split("#")[0], n;
                if (j && (j === location.toString().split("#")[0] || (n = h("base")[0]) && j === n.href)) {
                    k = o.hash;
                    o.href = k
                }
                if (w.test(k)) {
                    A.panels = A.panels.add(A._sanitizeSelector(k))
                } else {
                    if (k && k !== "#") {
                        h.data(o, "href.tabs", k);
                        h.data(o, "load.tabs", k.replace(/#.*$/, ""));
                        k = A._tabId(o);
                        o.href = "#" + k;
                        o = h("#" + k);
                        if (!o.length) {
                            o = h(y.panelTemplate).attr("id", k).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").insertAfter(A.panels[m - 1] || A.list);
                            o.data("destroy.tabs", true)
                        }
                        A.panels = A.panels.add(o)
                    } else {
                        y.disabled.push(m)
                    }
                }
            });
            if (z) {
                this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all");
                this.list.addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");
                this.lis.addClass("ui-state-default ui-corner-top");
                this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom");
                if (y.selected === g) {
                    location.hash && this.anchors.each(function(j, k) {
                        if (k.hash == location.hash) {
                            y.selected = j;
                            return false
                        }
                    });
                    if (typeof y.selected !== "number" && y.cookie) {
                        y.selected = parseInt(A._cookie(), 10)
                    }
                    if (typeof y.selected !== "number" && this.lis.filter(".ui-tabs-selected").length) {
                        y.selected = this.lis.index(this.lis.filter(".ui-tabs-selected"))
                    }
                    y.selected = y.selected || (this.lis.length ? 0 : -1)
                } else {
                    if (y.selected === null) {
                        y.selected = -1
                    }
                }
                y.selected = y.selected >= 0 && this.anchors[y.selected] || y.selected < 0 ? y.selected : 0;
                y.disabled = h.unique(y.disabled.concat(h.map(this.lis.filter(".ui-state-disabled"), function(j) {
                    return A.lis.index(j)
                }))).sort();
                h.inArray(y.selected, y.disabled) != -1 && y.disabled.splice(h.inArray(y.selected, y.disabled), 1);
                this.panels.addClass("ui-tabs-hide");
                this.lis.removeClass("ui-tabs-selected ui-state-active");
                if (y.selected >= 0 && this.anchors.length) {
                    h(A._sanitizeSelector(A.anchors[y.selected].hash)).removeClass("ui-tabs-hide");
                    this.lis.eq(y.selected).addClass("ui-tabs-selected ui-state-active");
                    A.element.queue("tabs", function() {
                        A._trigger("show", null, A._ui(A.anchors[y.selected], h(A._sanitizeSelector(A.anchors[y.selected].hash))))
                    });
                    this.load(y.selected)
                }
                h(window).bind("unload", function() {
                    A.lis.add(A.anchors).unbind(".tabs");
                    A.lis = A.anchors = A.panels = null
                })
            } else {
                y.selected = this.lis.index(this.lis.filter(".ui-tabs-selected"))
            }
            this.element[y.collapsible ? "addClass" : "removeClass"]("ui-tabs-collapsible");
            y.cookie && this._cookie(y.selected, y.cookie);
            z = 0;
            for (var v; v = this.lis[z]; z++) {
                h(v)[h.inArray(z, y.disabled) != -1 && !h(v).hasClass("ui-tabs-selected") ? "addClass" : "removeClass"]("ui-state-disabled")
            }
            y.cache === false && this.anchors.removeData("cache.tabs");
            this.lis.add(this.anchors).unbind(".tabs");
            if (y.event !== "mouseover") {
                var u = function(j, k) {
                    k.is(":not(.ui-state-disabled)") && k.addClass("ui-state-" + j)
                }, p = function(j, k) {
                    k.removeClass("ui-state-" + j)
                };
                this.lis.bind("mouseover.tabs", function() {
                    u("hover", h(this))
                });
                this.lis.bind("mouseout.tabs", function() {
                    p("hover", h(this))
                });
                this.anchors.bind("focus.tabs", function() {
                    u("focus", h(this).closest("li"))
                });
                this.anchors.bind("blur.tabs", function() {
                    p("focus", h(this).closest("li"))
                })
            }
            var q, l;
            if (y.fx) {
                if (h.isArray(y.fx)) {
                    q = y.fx[0];
                    l = y.fx[1]
                } else {
                    q = l = y.fx
                }
            }
            var d = l ? function(j, k) {
                h(j).closest("li").addClass("ui-tabs-selected ui-state-active");
                k.hide().removeClass("ui-tabs-hide").animate(l, l.duration || "normal", function() {
                    x(k, l);
                    A._trigger("show", null, A._ui(j, k[0]))
                })
            } : function(j, k) {
                h(j).closest("li").addClass("ui-tabs-selected ui-state-active");
                k.removeClass("ui-tabs-hide");
                A._trigger("show", null, A._ui(j, k[0]))
            }, B = q ? function(j, k) {
                k.animate(q, q.duration || "normal", function() {
                    A.lis.removeClass("ui-tabs-selected ui-state-active");
                    k.addClass("ui-tabs-hide");
                    x(k, q);
                    A.element.dequeue("tabs")
                })
            } : function(j, k) {
                A.lis.removeClass("ui-tabs-selected ui-state-active");
                k.addClass("ui-tabs-hide");
                A.element.dequeue("tabs")
            };
            this.anchors.bind(y.event + ".tabs", function() {
                var m = this, n = h(m).closest("li"), k = A.panels.filter(":not(.ui-tabs-hide)"), j = h(A._sanitizeSelector(m.hash));
                if (n.hasClass("ui-tabs-selected") && !y.collapsible || n.hasClass("ui-state-disabled") || n.hasClass("ui-state-processing") || A.panels.filter(":animated").length || A._trigger("select", null, A._ui(this, j[0])) === false) {
                    this.blur();
                    return false
                }
                y.selected = A.anchors.index(this);
                A.abort();
                if (y.collapsible) {
                    if (n.hasClass("ui-tabs-selected")) {
                        y.selected = -1;
                        y.cookie && A._cookie(y.selected, y.cookie);
                        A.element.queue("tabs", function() {
                            B(m, k)
                        }).dequeue("tabs");
                        this.blur();
                        return false
                    } else {
                        if (!k.length) {
                            y.cookie && A._cookie(y.selected, y.cookie);
                            A.element.queue("tabs", function() {
                                d(m, j)
                            });
                            A.load(A.anchors.index(this));
                            this.blur();
                            return false
                        }
                    }
                }
                y.cookie && A._cookie(y.selected, y.cookie);
                if (j.length) {
                    k.length && A.element.queue("tabs", function() {
                        B(m, k)
                    });
                    A.element.queue("tabs", function() {
                        d(m, j)
                    });
                    A.load(A.anchors.index(this))
                } else {
                    throw"jQuery UI Tabs: Mismatching fragment identifier."
                }
                h.browser.msie && this.blur()
            });
            this.anchors.bind("click.tabs", function() {
                return false
            })
        }, _getIndex: function(d) {
            if (typeof d == "string") {
                d = this.anchors.index(this.anchors.filter("[href$=" + d + "]"))
            }
            return d
        }, destroy: function() {
            var d = this.options;
            this.abort();
            this.element.unbind(".tabs").removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible").removeData("tabs");
            this.list.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");
            this.anchors.each(function() {
                var k = h.data(this, "href.tabs");
                if (k) {
                    this.href = k
                }
                var j = h(this).unbind(".tabs");
                h.each(["href", "load", "cache"], function(m, l) {
                    j.removeData(l + ".tabs")
                })
            });
            this.lis.unbind(".tabs").add(this.panels).each(function() {
                h.data(this, "destroy.tabs") ? h(this).remove() : h(this).removeClass("ui-state-default ui-corner-top ui-tabs-selected ui-state-active ui-state-hover ui-state-focus ui-state-disabled ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide")
            });
            d.cookie && this._cookie(null, d.cookie);
            return this
        }, add: function(d, n, k) {
            if (k === g) {
                k = this.anchors.length
            }
            var o = this, m = this.options;
            n = h(m.tabTemplate.replace(/#\{href\}/g, d).replace(/#\{label\}/g, n));
            d = !d.indexOf("#") ? d.replace("#", "") : this._tabId(h("a", n)[0]);
            n.addClass("ui-state-default ui-corner-top").data("destroy.tabs", true);
            var l = h("#" + d);
            l.length || (l = h(m.panelTemplate).attr("id", d).data("destroy.tabs", true));
            l.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide");
            if (k >= this.lis.length) {
                n.appendTo(this.list);
                l.appendTo(this.list[0].parentNode)
            } else {
                n.insertBefore(this.lis[k]);
                l.insertBefore(this.panels[k])
            }
            m.disabled = h.map(m.disabled, function(j) {
                return j >= k ? ++j : j
            });
            this._tabify();
            if (this.anchors.length == 1) {
                m.selected = 0;
                n.addClass("ui-tabs-selected ui-state-active");
                l.removeClass("ui-tabs-hide");
                this.element.queue("tabs", function() {
                    o._trigger("show", null, o._ui(o.anchors[0], o.panels[0]))
                });
                this.load(0)
            }
            this._trigger("add", null, this._ui(this.anchors[k], this.panels[k]));
            return this
        }, remove: function(d) {
            d = this._getIndex(d);
            var k = this.options, j = this.lis.eq(d).remove(), l = this.panels.eq(d).remove();
            if (j.hasClass("ui-tabs-selected") && this.anchors.length > 1) {
                this.select(d + (d + 1 < this.anchors.length ? 1 : -1))
            }
            k.disabled = h.map(h.grep(k.disabled, function(m) {
                return m != d
            }), function(m) {
                return m >= d ? --m : m
            });
            this._tabify();
            this._trigger("remove", null, this._ui(j.find("a")[0], l[0]));
            return this
        }, enable: function(d) {
            d = this._getIndex(d);
            var j = this.options;
            if (h.inArray(d, j.disabled) != -1) {
                this.lis.eq(d).removeClass("ui-state-disabled");
                j.disabled = h.grep(j.disabled, function(k) {
                    return k != d
                });
                this._trigger("enable", null, this._ui(this.anchors[d], this.panels[d]));
                return this
            }
        }, disable: function(d) {
            d = this._getIndex(d);
            var j = this.options;
            if (d != j.selected) {
                this.lis.eq(d).addClass("ui-state-disabled");
                j.disabled.push(d);
                j.disabled.sort();
                this._trigger("disable", null, this._ui(this.anchors[d], this.panels[d]))
            }
            return this
        }, select: function(d) {
            d = this._getIndex(d);
            if (d == -1) {
                if (this.options.collapsible && this.options.selected != -1) {
                    d = this.options.selected
                } else {
                    return this
                }
            }
            this.anchors.eq(d).trigger(this.options.event + ".tabs");
            return this
        }, load: function(d) {
            d = this._getIndex(d);
            var n = this, k = this.options, o = this.anchors.eq(d)[0], m = h.data(o, "load.tabs");
            this.abort();
            if (!m || this.element.queue("tabs").length !== 0 && h.data(o, "cache.tabs")) {
                this.element.dequeue("tabs")
            } else {
                this.lis.eq(d).addClass("ui-state-processing");
                if (k.spinner) {
                    var l = h("span", o);
                    l.data("label.tabs", l.html()).html(k.spinner)
                }
                this.xhr = h.ajax(h.extend({}, k.ajaxOptions, {url: m, success: function(p, q) {
                        h(n._sanitizeSelector(o.hash)).html(p);
                        n._cleanup();
                        k.cache && h.data(o, "cache.tabs", true);
                        n._trigger("load", null, n._ui(n.anchors[d], n.panels[d]));
                        try {
                            k.ajaxOptions.success(p, q)
                        } catch (j) {
                        }
                    }, error: function(p, q) {
                        n._cleanup();
                        n._trigger("load", null, n._ui(n.anchors[d], n.panels[d]));
                        try {
                            k.ajaxOptions.error(p, q, d, o)
                        } catch (j) {
                        }
                    }}));
                n.element.dequeue("tabs");
                return this
            }
        }, abort: function() {
            this.element.queue([]);
            this.panels.stop(false, true);
            this.element.queue("tabs", this.element.queue("tabs").splice(-2, 2));
            if (this.xhr) {
                this.xhr.abort();
                delete this.xhr
            }
            this._cleanup();
            return this
        }, url: function(d, j) {
            this.anchors.eq(d).removeData("cache.tabs").data("load.tabs", j);
            return this
        }, length: function() {
            return this.anchors.length
        }});
    h.extend(h.ui.tabs, {version: "1.8.6"});
    h.extend(h.ui.tabs.prototype, {rotation: null, rotate: function(d, l) {
            var j = this, m = this.options, k = j._rotate || (j._rotate = function(n) {
                clearTimeout(j.rotation);
                j.rotation = setTimeout(function() {
                    var o = m.selected;
                    j.select(++o < j.anchors.length ? o : 0)
                }, d);
                n && n.stopPropagation()
            });
            l = j._unrotate || (j._unrotate = !l ? function(n) {
                n.clientX && j.rotate(null)
            } : function() {
                t = m.selected;
                k()
            });
            if (d) {
                this.element.bind("tabsshow", k);
                this.anchors.bind(m.event + ".tabs", l);
                k()
            } else {
                clearTimeout(j.rotation);
                this.element.unbind("tabsshow", k);
                this.anchors.unbind(m.event + ".tabs", l);
                delete this._rotate;
                delete this._unrotate
            }
            return this
        }})
})(jQuery);
(function(d, G) {
    function K() {
        this.debug = false;
        this._curInst = null;
        this._keyEvent = false;
        this._disabledInputs = [];
        this._inDialog = this._datepickerShowing = false;
        this._mainDivId = "ui-datepicker-div";
        this._inlineClass = "ui-datepicker-inline";
        this._appendClass = "ui-datepicker-append";
        this._triggerClass = "ui-datepicker-trigger";
        this._dialogClass = "ui-datepicker-dialog";
        this._disableClass = "ui-datepicker-disabled";
        this._unselectableClass = "ui-datepicker-unselectable";
        this._currentClass = "ui-datepicker-current-day";
        this._dayOverClass = "ui-datepicker-days-cell-over";
        this.regional = [];
        this.regional[""] = {closeText: "Done", prevText: "Prev", nextText: "Next", currentText: "Today", monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], weekHeader: "Wk", dateFormat: "mm/dd/yy", firstDay: 0, isRTL: false, showMonthAfterYear: false, yearSuffix: ""};
        this._defaults = {showOn: "focus", showAnim: "fadeIn", showOptions: {}, defaultDate: null, appendText: "", buttonText: "...", buttonImage: "", buttonImageOnly: false, hideIfNoPrevNext: false, navigationAsDateFormat: false, gotoCurrent: false, changeMonth: false, changeYear: false, yearRange: "c-10:c+10", showOtherMonths: false, selectOtherMonths: false, showWeek: false, calculateWeek: this.iso8601Week, shortYearCutoff: "+10", minDate: null, maxDate: null, duration: "fast", beforeShowDay: null, beforeShow: null, onSelect: null, onChangeMonthYear: null, onClose: null, numberOfMonths: 1, showCurrentAtPos: 0, stepMonths: 1, stepBigMonths: 12, altField: "", altFormat: "", constrainInput: true, showButtonPanel: false, autoSize: false};
        d.extend(this._defaults, this.regional[""]);
        this.dpDiv = d('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all ui-helper-hidden-accessible"></div>')
    }
    function E(a, b) {
        d.extend(a, b);
        for (var c in b) {
            if (b[c] == null || b[c] == G) {
                a[c] = b[c]
            }
        }
        return a
    }
    d.extend(d.ui, {datepicker: {version: "1.8.6"}});
    var y = (new Date).getTime();
    d.extend(K.prototype, {markerClassName: "hasDatepicker", log: function() {
            this.debug && console.log.apply("", arguments)
        }, _widgetDatepicker: function() {
            return this.dpDiv
        }, setDefaults: function(a) {
            E(this._defaults, a || {});
            return this
        }, _attachDatepicker: function(a, b) {
            var c = null;
            for (var e in this._defaults) {
                var f = a.getAttribute("date:" + e);
                if (f) {
                    c = c || {};
                    try {
                        c[e] = eval(f)
                    } catch (h) {
                        c[e] = f
                    }
                }
            }
            e = a.nodeName.toLowerCase();
            f = e == "div" || e == "span";
            if (!a.id) {
                this.uuid += 1;
                a.id = "dp" + this.uuid
            }
            var i = this._newInst(d(a), f);
            i.settings = d.extend({}, b || {}, c || {});
            if (e == "input") {
                this._connectDatepicker(a, i)
            } else {
                f && this._inlineDatepicker(a, i)
            }
        }, _newInst: function(a, b) {
            return{id: a[0].id.replace(/([^A-Za-z0-9_-])/g, "\\\\$1"), input: a, selectedDay: 0, selectedMonth: 0, selectedYear: 0, drawMonth: 0, drawYear: 0, inline: b, dpDiv: !b ? this.dpDiv : d('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')}
        }, _connectDatepicker: function(a, b) {
            var c = d(a);
            b.append = d([]);
            b.trigger = d([]);
            if (!c.hasClass(this.markerClassName)) {
                this._attachments(c, b);
                c.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker", function(e, f, h) {
                    b.settings[f] = h
                }).bind("getData.datepicker", function(e, f) {
                    return this._get(b, f)
                });
                this._autoSize(b);
                d.data(a, "datepicker", b)
            }
        }, _attachments: function(a, b) {
            var c = this._get(b, "appendText"), e = this._get(b, "isRTL");
            b.append && b.append.remove();
            if (c) {
                b.append = d('<span class="' + this._appendClass + '">' + c + "</span>");
                a[e ? "before" : "after"](b.append)
            }
            a.unbind("focus", this._showDatepicker);
            b.trigger && b.trigger.remove();
            c = this._get(b, "showOn");
            if (c == "focus" || c == "both") {
                a.focus(this._showDatepicker)
            }
            if (c == "button" || c == "both") {
                c = this._get(b, "buttonText");
                var f = this._get(b, "buttonImage");
                b.trigger = d(this._get(b, "buttonImageOnly") ? d("<img/>").addClass(this._triggerClass).attr({src: f, alt: c, title: c}) : d('<button type="button"></button>').addClass(this._triggerClass).html(f == "" ? c : d("<img/>").attr({src: f, alt: c, title: c})));
                a[e ? "before" : "after"](b.trigger);
                b.trigger.click(function() {
                    d.datepicker._datepickerShowing && d.datepicker._lastInput == a[0] ? d.datepicker._hideDatepicker() : d.datepicker._showDatepicker(a[0]);
                    return false
                })
            }
        }, _autoSize: function(a) {
            if (this._get(a, "autoSize") && !a.inline) {
                var b = new Date(2009, 11, 20), c = this._get(a, "dateFormat");
                if (c.match(/[DM]/)) {
                    var e = function(f) {
                        for (var h = 0, i = 0, g = 0; g < f.length; g++) {
                            if (f[g].length > h) {
                                h = f[g].length;
                                i = g
                            }
                        }
                        return i
                    };
                    b.setMonth(e(this._get(a, c.match(/MM/) ? "monthNames" : "monthNamesShort")));
                    b.setDate(e(this._get(a, c.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - b.getDay())
                }
                a.input.attr("size", this._formatDate(a, b).length)
            }
        }, _inlineDatepicker: function(a, b) {
            var c = d(a);
            if (!c.hasClass(this.markerClassName)) {
                c.addClass(this.markerClassName).append(b.dpDiv).bind("setData.datepicker", function(e, f, h) {
                    b.settings[f] = h
                }).bind("getData.datepicker", function(e, f) {
                    return this._get(b, f)
                });
                d.data(a, "datepicker", b);
                this._setDate(b, this._getDefaultDate(b), true);
                this._updateDatepicker(b);
                this._updateAlternate(b)
            }
        }, _dialogDatepicker: function(a, b, c, e, f) {
            a = this._dialogInst;
            if (!a) {
                this.uuid += 1;
                this._dialogInput = d('<input type="text" id="' + ("dp" + this.uuid) + '" style="position: absolute; top: -100px; width: 0px; z-index: -10;"/>');
                this._dialogInput.keydown(this._doKeyDown);
                d("body").append(this._dialogInput);
                a = this._dialogInst = this._newInst(this._dialogInput, false);
                a.settings = {};
                d.data(this._dialogInput[0], "datepicker", a)
            }
            E(a.settings, e || {});
            b = b && b.constructor == Date ? this._formatDate(a, b) : b;
            this._dialogInput.val(b);
            this._pos = f ? f.length ? f : [f.pageX, f.pageY] : null;
            if (!this._pos) {
                this._pos = [document.documentElement.clientWidth / 2 - 100 + (document.documentElement.scrollLeft || document.body.scrollLeft), document.documentElement.clientHeight / 2 - 150 + (document.documentElement.scrollTop || document.body.scrollTop)]
            }
            this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px");
            a.settings.onSelect = c;
            this._inDialog = true;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            d.blockUI && d.blockUI(this.dpDiv);
            d.data(this._dialogInput[0], "datepicker", a);
            return this
        }, _destroyDatepicker: function(a) {
            var b = d(a), c = d.data(a, "datepicker");
            if (b.hasClass(this.markerClassName)) {
                var e = a.nodeName.toLowerCase();
                d.removeData(a, "datepicker");
                if (e == "input") {
                    c.append.remove();
                    c.trigger.remove();
                    b.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp)
                } else {
                    if (e == "div" || e == "span") {
                        b.removeClass(this.markerClassName).empty()
                    }
                }
            }
        }, _enableDatepicker: function(a) {
            var b = d(a), c = d.data(a, "datepicker");
            if (b.hasClass(this.markerClassName)) {
                var e = a.nodeName.toLowerCase();
                if (e == "input") {
                    a.disabled = false;
                    c.trigger.filter("button").each(function() {
                        this.disabled = false
                    }).end().filter("img").css({opacity: "1.0", cursor: ""})
                } else {
                    if (e == "div" || e == "span") {
                        b.children("." + this._inlineClass).children().removeClass("ui-state-disabled")
                    }
                }
                this._disabledInputs = d.map(this._disabledInputs, function(f) {
                    return f == a ? null : f
                })
            }
        }, _disableDatepicker: function(a) {
            var b = d(a), c = d.data(a, "datepicker");
            if (b.hasClass(this.markerClassName)) {
                var e = a.nodeName.toLowerCase();
                if (e == "input") {
                    a.disabled = true;
                    c.trigger.filter("button").each(function() {
                        this.disabled = true
                    }).end().filter("img").css({opacity: "0.5", cursor: "default"})
                } else {
                    if (e == "div" || e == "span") {
                        b.children("." + this._inlineClass).children().addClass("ui-state-disabled")
                    }
                }
                this._disabledInputs = d.map(this._disabledInputs, function(f) {
                    return f == a ? null : f
                });
                this._disabledInputs[this._disabledInputs.length] = a
            }
        }, _isDisabledDatepicker: function(a) {
            if (!a) {
                return false
            }
            for (var b = 0; b < this._disabledInputs.length; b++) {
                if (this._disabledInputs[b] == a) {
                    return true
                }
            }
            return false
        }, _getInst: function(a) {
            try {
                return d.data(a, "datepicker")
            } catch (b) {
                throw"Missing instance data for this datepicker"
            }
        }, _optionDatepicker: function(a, b, c) {
            var e = this._getInst(a);
            if (arguments.length == 2 && typeof b == "string") {
                return b == "defaults" ? d.extend({}, d.datepicker._defaults) : e ? b == "all" ? d.extend({}, e.settings) : this._get(e, b) : null
            }
            var f = b || {};
            if (typeof b == "string") {
                f = {};
                f[b] = c
            }
            if (e) {
                this._curInst == e && this._hideDatepicker();
                var h = this._getDateDatepicker(a, true);
                E(e.settings, f);
                this._attachments(d(a), e);
                this._autoSize(e);
                this._setDateDatepicker(a, h);
                this._updateDatepicker(e)
            }
        }, _changeDatepicker: function(a, b, c) {
            this._optionDatepicker(a, b, c)
        }, _refreshDatepicker: function(a) {
            (a = this._getInst(a)) && this._updateDatepicker(a)
        }, _setDateDatepicker: function(a, b) {
            if (a = this._getInst(a)) {
                this._setDate(a, b);
                this._updateDatepicker(a);
                this._updateAlternate(a)
            }
        }, _getDateDatepicker: function(a, b) {
            (a = this._getInst(a)) && !a.inline && this._setDateFromField(a, b);
            return a ? this._getDate(a) : null
        }, _doKeyDown: function(a) {
            var b = d.datepicker._getInst(a.target), c = true, e = b.dpDiv.is(".ui-datepicker-rtl");
            b._keyEvent = true;
            if (d.datepicker._datepickerShowing) {
                switch (a.keyCode) {
                    case 9:
                        d.datepicker._hideDatepicker();
                        c = false;
                        break;
                    case 13:
                        c = d("td." + d.datepicker._dayOverClass, b.dpDiv).add(d("td." + d.datepicker._currentClass, b.dpDiv));
                        c[0] ? d.datepicker._selectDay(a.target, b.selectedMonth, b.selectedYear, c[0]) : d.datepicker._hideDatepicker();
                        return false;
                    case 27:
                        d.datepicker._hideDatepicker();
                        break;
                    case 33:
                        d.datepicker._adjustDate(a.target, a.ctrlKey ? -d.datepicker._get(b, "stepBigMonths") : -d.datepicker._get(b, "stepMonths"), "M");
                        break;
                    case 34:
                        d.datepicker._adjustDate(a.target, a.ctrlKey ? +d.datepicker._get(b, "stepBigMonths") : +d.datepicker._get(b, "stepMonths"), "M");
                        break;
                    case 35:
                        if (a.ctrlKey || a.metaKey) {
                            d.datepicker._clearDate(a.target)
                        }
                        c = a.ctrlKey || a.metaKey;
                        break;
                    case 36:
                        if (a.ctrlKey || a.metaKey) {
                            d.datepicker._gotoToday(a.target)
                        }
                        c = a.ctrlKey || a.metaKey;
                        break;
                    case 37:
                        if (a.ctrlKey || a.metaKey) {
                            d.datepicker._adjustDate(a.target, e ? +1 : -1, "D")
                        }
                        c = a.ctrlKey || a.metaKey;
                        if (a.originalEvent.altKey) {
                            d.datepicker._adjustDate(a.target, a.ctrlKey ? -d.datepicker._get(b, "stepBigMonths") : -d.datepicker._get(b, "stepMonths"), "M")
                        }
                        break;
                    case 38:
                        if (a.ctrlKey || a.metaKey) {
                            d.datepicker._adjustDate(a.target, -7, "D")
                        }
                        c = a.ctrlKey || a.metaKey;
                        break;
                    case 39:
                        if (a.ctrlKey || a.metaKey) {
                            d.datepicker._adjustDate(a.target, e ? -1 : +1, "D")
                        }
                        c = a.ctrlKey || a.metaKey;
                        if (a.originalEvent.altKey) {
                            d.datepicker._adjustDate(a.target, a.ctrlKey ? +d.datepicker._get(b, "stepBigMonths") : +d.datepicker._get(b, "stepMonths"), "M")
                        }
                        break;
                    case 40:
                        if (a.ctrlKey || a.metaKey) {
                            d.datepicker._adjustDate(a.target, +7, "D")
                        }
                        c = a.ctrlKey || a.metaKey;
                        break;
                    default:
                        c = false
                    }
            } else {
                if (a.keyCode == 36 && a.ctrlKey) {
                    d.datepicker._showDatepicker(this)
                } else {
                    c = false
                }
            }
            if (c) {
                a.preventDefault();
                a.stopPropagation()
            }
        }, _doKeyPress: function(a) {
            var b = d.datepicker._getInst(a.target);
            if (d.datepicker._get(b, "constrainInput")) {
                b = d.datepicker._possibleChars(d.datepicker._get(b, "dateFormat"));
                var c = String.fromCharCode(a.charCode == G ? a.keyCode : a.charCode);
                return a.ctrlKey || c < " " || !b || b.indexOf(c) > -1
            }
        }, _doKeyUp: function(a) {
            a = d.datepicker._getInst(a.target);
            if (a.input.val() != a.lastVal) {
                try {
                    if (d.datepicker.parseDate(d.datepicker._get(a, "dateFormat"), a.input ? a.input.val() : null, d.datepicker._getFormatConfig(a))) {
                        d.datepicker._setDateFromField(a);
                        d.datepicker._updateAlternate(a);
                        d.datepicker._updateDatepicker(a)
                    }
                } catch (b) {
                    d.datepicker.log(b)
                }
            }
            return true
        }, _showDatepicker: function(a) {
            a = a.target || a;
            if (a.nodeName.toLowerCase() != "input") {
                a = d("input", a.parentNode)[0]
            }
            if (!(d.datepicker._isDisabledDatepicker(a) || d.datepicker._lastInput == a)) {
                var b = d.datepicker._getInst(a);
                d.datepicker._curInst && d.datepicker._curInst != b && d.datepicker._curInst.dpDiv.stop(true, true);
                var c = d.datepicker._get(b, "beforeShow");
                E(b.settings, c ? c.apply(a, [a, b]) : {});
                b.lastVal = null;
                d.datepicker._lastInput = a;
                d.datepicker._setDateFromField(b);
                if (d.datepicker._inDialog) {
                    a.value = ""
                }
                if (!d.datepicker._pos) {
                    d.datepicker._pos = d.datepicker._findPos(a);
                    d.datepicker._pos[1] += a.offsetHeight
                }
                var e = false;
                d(a).parents().each(function() {
                    e |= d(this).css("position") == "fixed";
                    return !e
                });
                if (e && d.browser.opera) {
                    d.datepicker._pos[0] -= document.documentElement.scrollLeft;
                    d.datepicker._pos[1] -= document.documentElement.scrollTop
                }
                c = {left: d.datepicker._pos[0], top: d.datepicker._pos[1]};
                d.datepicker._pos = null;
                b.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
                d.datepicker._updateDatepicker(b);
                c = d.datepicker._checkOffset(b, c, e);
                b.dpDiv.css({position: d.datepicker._inDialog && d.blockUI ? "static" : e ? "fixed" : "absolute", display: "none", left: c.left + "px", top: c.top + "px"});
                if (!b.inline) {
                    c = d.datepicker._get(b, "showAnim");
                    var f = d.datepicker._get(b, "duration"), h = function() {
                        d.datepicker._datepickerShowing = true;
                        var i = d.datepicker._getBorders(b.dpDiv);
                        b.dpDiv.find("iframe.ui-datepicker-cover").css({left: -i[0], top: -i[1], width: b.dpDiv.outerWidth(), height: b.dpDiv.outerHeight()})
                    };
                    b.dpDiv.zIndex(d(a).zIndex() + 1);
                    d.effects && d.effects[c] ? b.dpDiv.show(c, d.datepicker._get(b, "showOptions"), f, h) : b.dpDiv[c || "show"](c ? f : null, h);
                    if (!c || !f) {
                        h()
                    }
                    b.input.is(":visible") && !b.input.is(":disabled") && b.input.focus();
                    d.datepicker._curInst = b
                }
            }
        }, _updateDatepicker: function(a) {
            var b = this, c = d.datepicker._getBorders(a.dpDiv);
            a.dpDiv.empty().append(this._generateHTML(a)).find("iframe.ui-datepicker-cover").css({left: -c[0], top: -c[1], width: a.dpDiv.outerWidth(), height: a.dpDiv.outerHeight()}).end().find("button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a").bind("mouseout", function() {
                d(this).removeClass("ui-state-hover");
                this.className.indexOf("ui-datepicker-prev") != -1 && d(this).removeClass("ui-datepicker-prev-hover");
                this.className.indexOf("ui-datepicker-next") != -1 && d(this).removeClass("ui-datepicker-next-hover")
            }).bind("mouseover", function() {
                if (!b._isDisabledDatepicker(a.inline ? a.dpDiv.parent()[0] : a.input[0])) {
                    d(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
                    d(this).addClass("ui-state-hover");
                    this.className.indexOf("ui-datepicker-prev") != -1 && d(this).addClass("ui-datepicker-prev-hover");
                    this.className.indexOf("ui-datepicker-next") != -1 && d(this).addClass("ui-datepicker-next-hover")
                }
            }).end().find("." + this._dayOverClass + " a").trigger("mouseover").end();
            c = this._getNumberOfMonths(a);
            var e = c[1];
            e > 1 ? a.dpDiv.addClass("ui-datepicker-multi-" + e).css("width", 17 * e + "em") : a.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
            a.dpDiv[(c[0] != 1 || c[1] != 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi");
            a.dpDiv[(this._get(a, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
            a == d.datepicker._curInst && d.datepicker._datepickerShowing && a.input && a.input.is(":visible") && !a.input.is(":disabled") && a.input.focus()
        }, _getBorders: function(a) {
            var b = function(c) {
                return{thin: 1, medium: 2, thick: 3}[c] || c
            };
            return[parseFloat(b(a.css("border-left-width"))), parseFloat(b(a.css("border-top-width")))]
        }, _checkOffset: function(a, b, c) {
            var e = a.dpDiv.outerWidth(), f = a.dpDiv.outerHeight(), h = a.input ? a.input.outerWidth() : 0, i = a.input ? a.input.outerHeight() : 0, g = document.documentElement.clientWidth + d(document).scrollLeft(), k = document.documentElement.clientHeight + d(document).scrollTop();
            b.left -= this._get(a, "isRTL") ? e - h : 0;
            b.left -= c && b.left == a.input.offset().left ? d(document).scrollLeft() : 0;
            b.top -= c && b.top == a.input.offset().top + i ? d(document).scrollTop() : 0;
            b.left -= Math.min(b.left, b.left + e > g && g > e ? Math.abs(b.left + e - g) : 0);
            b.top -= Math.min(b.top, b.top + f > k && k > f ? Math.abs(f + i) : 0);
            return b
        }, _findPos: function(a) {
            for (var b = this._get(this._getInst(a), "isRTL"); a && (a.type == "hidden" || a.nodeType != 1); ) {
                a = a[b ? "previousSibling" : "nextSibling"]
            }
            a = d(a).offset();
            return[a.left, a.top]
        }, _hideDatepicker: function(a) {
            var b = this._curInst;
            if (!(!b || a && b != d.data(a, "datepicker"))) {
                if (this._datepickerShowing) {
                    a = this._get(b, "showAnim");
                    var c = this._get(b, "duration"), e = function() {
                        d.datepicker._tidyDialog(b);
                        this._curInst = null
                    };
                    d.effects && d.effects[a] ? b.dpDiv.hide(a, d.datepicker._get(b, "showOptions"), c, e) : b.dpDiv[a == "slideDown" ? "slideUp" : a == "fadeIn" ? "fadeOut" : "hide"](a ? c : null, e);
                    a || e();
                    if (a = this._get(b, "onClose")) {
                        a.apply(b.input ? b.input[0] : null, [b.input ? b.input.val() : "", b])
                    }
                    this._datepickerShowing = false;
                    this._lastInput = null;
                    if (this._inDialog) {
                        this._dialogInput.css({position: "absolute", left: "0", top: "-100px"});
                        if (d.blockUI) {
                            d.unblockUI();
                            d("body").append(this.dpDiv)
                        }
                    }
                    this._inDialog = false
                }
            }
        }, _tidyDialog: function(a) {
            a.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")
        }, _checkExternalClick: function(a) {
            if (d.datepicker._curInst) {
                a = d(a.target);
                a[0].id != d.datepicker._mainDivId && a.parents("#" + d.datepicker._mainDivId).length == 0 && !a.hasClass(d.datepicker.markerClassName) && !a.hasClass(d.datepicker._triggerClass) && d.datepicker._datepickerShowing && !(d.datepicker._inDialog && d.blockUI) && d.datepicker._hideDatepicker()
            }
        }, _adjustDate: function(a, b, c) {
            a = d(a);
            var e = this._getInst(a[0]);
            if (!this._isDisabledDatepicker(a[0])) {
                this._adjustInstDate(e, b + (c == "M" ? this._get(e, "showCurrentAtPos") : 0), c);
                this._updateDatepicker(e)
            }
        }, _gotoToday: function(a) {
            a = d(a);
            var b = this._getInst(a[0]);
            if (this._get(b, "gotoCurrent") && b.currentDay) {
                b.selectedDay = b.currentDay;
                b.drawMonth = b.selectedMonth = b.currentMonth;
                b.drawYear = b.selectedYear = b.currentYear
            } else {
                var c = new Date;
                b.selectedDay = c.getDate();
                b.drawMonth = b.selectedMonth = c.getMonth();
                b.drawYear = b.selectedYear = c.getFullYear()
            }
            this._notifyChange(b);
            this._adjustDate(a)
        }, _selectMonthYear: function(a, b, c) {
            a = d(a);
            var e = this._getInst(a[0]);
            e._selectingMonthYear = false;
            e["selected" + (c == "M" ? "Month" : "Year")] = e["draw" + (c == "M" ? "Month" : "Year")] = parseInt(b.options[b.selectedIndex].value, 10);
            this._notifyChange(e);
            this._adjustDate(a)
        }, _clickMonthYear: function(a) {
            var b = this._getInst(d(a)[0]);
            b.input && b._selectingMonthYear && setTimeout(function() {
                b.input.focus()
            }, 0);
            b._selectingMonthYear = !b._selectingMonthYear
        }, _selectDay: function(a, b, c, e) {
            var f = d(a);
            if (!(d(e).hasClass(this._unselectableClass) || this._isDisabledDatepicker(f[0]))) {
                f = this._getInst(f[0]);
                f.selectedDay = f.currentDay = d("a", e).html();
                f.selectedMonth = f.currentMonth = b;
                f.selectedYear = f.currentYear = c;
                this._selectDate(a, this._formatDate(f, f.currentDay, f.currentMonth, f.currentYear))
            }
        }, _clearDate: function(a) {
            a = d(a);
            this._getInst(a[0]);
            this._selectDate(a, "")
        }, _selectDate: function(a, b) {
            a = this._getInst(d(a)[0]);
            b = b != null ? b : this._formatDate(a);
            a.input && a.input.val(b);
            this._updateAlternate(a);
            var c = this._get(a, "onSelect");
            if (c) {
                c.apply(a.input ? a.input[0] : null, [b, a])
            } else {
                a.input && a.input.trigger("change")
            }
            if (a.inline) {
                this._updateDatepicker(a)
            } else {
                this._hideDatepicker();
                this._lastInput = a.input[0];
                typeof a.input[0] != "object" && a.input.focus();
                this._lastInput = null
            }
        }, _updateAlternate: function(a) {
            var b = this._get(a, "altField");
            if (b) {
                var c = this._get(a, "altFormat") || this._get(a, "dateFormat"), e = this._getDate(a), f = this.formatDate(c, e, this._getFormatConfig(a));
                d(b).each(function() {
                    d(this).val(f)
                })
            }
        }, noWeekends: function(a) {
            a = a.getDay();
            return[a > 0 && a < 6, ""]
        }, iso8601Week: function(a) {
            a = new Date(a.getTime());
            a.setDate(a.getDate() + 4 - (a.getDay() || 7));
            var b = a.getTime();
            a.setMonth(0);
            a.setDate(1);
            return Math.floor(Math.round((b - a) / 86400000) / 7) + 1
        }, parseDate: function(a, b, c) {
            if (a == null || b == null) {
                throw"Invalid arguments"
            }
            b = typeof b == "object" ? b.toString() : b + "";
            if (b == "") {
                return null
            }
            for (var e = (c ? c.shortYearCutoff : null) || this._defaults.shortYearCutoff, f = (c ? c.dayNamesShort : null) || this._defaults.dayNamesShort, h = (c ? c.dayNames : null) || this._defaults.dayNames, i = (c ? c.monthNamesShort : null) || this._defaults.monthNamesShort, g = (c ? c.monthNames : null) || this._defaults.monthNames, k = c = -1, l = -1, u = -1, j = false, o = function(p) {
                (p = z + 1 < a.length && a.charAt(z + 1) == p) && z++;
                return p
            }, m = function(p) {
                o(p);
                p = new RegExp("^\\d{1," + (p == "@" ? 14 : p == "!" ? 20 : p == "y" ? 4 : p == "o" ? 3 : 2) + "}");
                p = b.substring(s).match(p);
                if (!p) {
                    throw"Missing number at position " + s
                }
                s += p[0].length;
                return parseInt(p[0], 10)
            }, n = function(p, w, H) {
                p = o(p) ? H : w;
                for (w = 0; w < p.length; w++) {
                    if (b.substr(s, p[w].length).toLowerCase() == p[w].toLowerCase()) {
                        s += p[w].length;
                        return w + 1
                    }
                }
                throw"Unknown name at position " + s
            }, r = function() {
                if (b.charAt(s) != a.charAt(z)) {
                    throw"Unexpected literal at position " + s
                }
                s++
            }, s = 0, z = 0; z < a.length; z++) {
                if (j) {
                    if (a.charAt(z) == "'" && !o("'")) {
                        j = false
                    } else {
                        r()
                    }
                } else {
                    switch (a.charAt(z)) {
                        case"d":
                            l = m("d");
                            break;
                        case"D":
                            n("D", f, h);
                            break;
                        case"o":
                            u = m("o");
                            break;
                        case"m":
                            k = m("m");
                            break;
                        case"M":
                            k = n("M", i, g);
                            break;
                        case"y":
                            c = m("y");
                            break;
                        case"@":
                            var v = new Date(m("@"));
                            c = v.getFullYear();
                            k = v.getMonth() + 1;
                            l = v.getDate();
                            break;
                        case"!":
                            v = new Date((m("!") - this._ticksTo1970) / 10000);
                            c = v.getFullYear();
                            k = v.getMonth() + 1;
                            l = v.getDate();
                            break;
                        case"'":
                            if (o("'")) {
                                r()
                            } else {
                                j = true
                            }
                            break;
                        default:
                            r()
                        }
                }
            }
            if (c == -1) {
                c = (new Date).getFullYear()
            } else {
                if (c < 100) {
                    c += (new Date).getFullYear() - (new Date).getFullYear() % 100 + (c <= e ? 0 : -100)
                }
            }
            if (u > -1) {
                k = 1;
                l = u;
                do {
                    e = this._getDaysInMonth(c, k - 1);
                    if (l <= e) {
                        break
                    }
                    k++;
                    l -= e
                } while (1)
            }
            v = this._daylightSavingAdjust(new Date(c, k - 1, l));
            if (v.getFullYear() != c || v.getMonth() + 1 != k || v.getDate() != l) {
                throw"Invalid date"
            }
            return v
        }, ATOM: "yy-mm-dd", COOKIE: "D, dd M yy", ISO_8601: "yy-mm-dd", RFC_822: "D, d M y", RFC_850: "DD, dd-M-y", RFC_1036: "D, d M y", RFC_1123: "D, d M yy", RFC_2822: "D, d M yy", RSS: "D, d M y", TICKS: "!", TIMESTAMP: "@", W3C: "yy-mm-dd", _ticksTo1970: (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)) * 24 * 60 * 60 * 10000000, formatDate: function(a, b, c) {
            if (!b) {
                return""
            }
            var e = (c ? c.dayNamesShort : null) || this._defaults.dayNamesShort, f = (c ? c.dayNames : null) || this._defaults.dayNames, h = (c ? c.monthNamesShort : null) || this._defaults.monthNamesShort;
            c = (c ? c.monthNames : null) || this._defaults.monthNames;
            var i = function(o) {
                (o = j + 1 < a.length && a.charAt(j + 1) == o) && j++;
                return o
            }, g = function(o, m, n) {
                m = "" + m;
                if (i(o)) {
                    for (; m.length < n; ) {
                        m = "0" + m
                    }
                }
                return m
            }, k = function(o, m, n, r) {
                return i(o) ? r[m] : n[m]
            }, l = "", u = false;
            if (b) {
                for (var j = 0; j < a.length; j++) {
                    if (u) {
                        if (a.charAt(j) == "'" && !i("'")) {
                            u = false
                        } else {
                            l += a.charAt(j)
                        }
                    } else {
                        switch (a.charAt(j)) {
                            case"d":
                                l += g("d", b.getDate(), 2);
                                break;
                            case"D":
                                l += k("D", b.getDay(), e, f);
                                break;
                            case"o":
                                l += g("o", (b.getTime() - (new Date(b.getFullYear(), 0, 0)).getTime()) / 86400000, 3);
                                break;
                            case"m":
                                l += g("m", b.getMonth() + 1, 2);
                                break;
                            case"M":
                                l += k("M", b.getMonth(), h, c);
                                break;
                            case"y":
                                l += i("y") ? b.getFullYear() : (b.getYear() % 100 < 10 ? "0" : "") + b.getYear() % 100;
                                break;
                            case"@":
                                l += b.getTime();
                                break;
                            case"!":
                                l += b.getTime() * 10000 + this._ticksTo1970;
                                break;
                            case"'":
                                if (i("'")) {
                                    l += "'"
                                } else {
                                    u = true
                                }
                                break;
                            default:
                                l += a.charAt(j)
                            }
                    }
                }
            }
            return l
        }, _possibleChars: function(a) {
            for (var b = "", c = false, e = function(h) {
                (h = f + 1 < a.length && a.charAt(f + 1) == h) && f++;
                return h
            }, f = 0; f < a.length; f++) {
                if (c) {
                    if (a.charAt(f) == "'" && !e("'")) {
                        c = false
                    } else {
                        b += a.charAt(f)
                    }
                } else {
                    switch (a.charAt(f)) {
                        case"d":
                        case"m":
                        case"y":
                        case"@":
                            b += "0123456789";
                            break;
                        case"D":
                        case"M":
                            return null;
                        case"'":
                            if (e("'")) {
                                b += "'"
                            } else {
                                c = true
                            }
                            break;
                        default:
                            b += a.charAt(f)
                        }
                }
            }
            return b
        }, _get: function(a, b) {
            return a.settings[b] !== G ? a.settings[b] : this._defaults[b]
        }, _setDateFromField: function(a, b) {
            if (a.input.val() != a.lastVal) {
                var c = this._get(a, "dateFormat"), e = a.lastVal = a.input ? a.input.val() : null, f, h;
                f = h = this._getDefaultDate(a);
                var i = this._getFormatConfig(a);
                try {
                    f = this.parseDate(c, e, i) || h
                } catch (g) {
                    this.log(g);
                    e = b ? "" : e
                }
                a.selectedDay = f.getDate();
                a.drawMonth = a.selectedMonth = f.getMonth();
                a.drawYear = a.selectedYear = f.getFullYear();
                a.currentDay = e ? f.getDate() : 0;
                a.currentMonth = e ? f.getMonth() : 0;
                a.currentYear = e ? f.getFullYear() : 0;
                this._adjustInstDate(a)
            }
        }, _getDefaultDate: function(a) {
            return this._restrictMinMax(a, this._determineDate(a, this._get(a, "defaultDate"), new Date))
        }, _determineDate: function(a, b, c) {
            var e = function(h) {
                var i = new Date;
                i.setDate(i.getDate() + h);
                return i
            }, f = function(h) {
                try {
                    return d.datepicker.parseDate(d.datepicker._get(a, "dateFormat"), h, d.datepicker._getFormatConfig(a))
                } catch (i) {
                }
                var g = (h.toLowerCase().match(/^c/) ? d.datepicker._getDate(a) : null) || new Date, k = g.getFullYear(), l = g.getMonth();
                g = g.getDate();
                for (var u = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, j = u.exec(h); j; ) {
                    switch (j[2] || "d") {
                        case"d":
                        case"D":
                            g += parseInt(j[1], 10);
                            break;
                        case"w":
                        case"W":
                            g += parseInt(j[1], 10) * 7;
                            break;
                        case"m":
                        case"M":
                            l += parseInt(j[1], 10);
                            g = Math.min(g, d.datepicker._getDaysInMonth(k, l));
                            break;
                        case"y":
                        case"Y":
                            k += parseInt(j[1], 10);
                            g = Math.min(g, d.datepicker._getDaysInMonth(k, l));
                            break
                    }
                    j = u.exec(h)
                }
                return new Date(k, l, g)
            };
            if (b = (b = b == null ? c : typeof b == "string" ? f(b) : typeof b == "number" ? isNaN(b) ? c : e(b) : b) && b.toString() == "Invalid Date" ? c : b) {
                b.setHours(0);
                b.setMinutes(0);
                b.setSeconds(0);
                b.setMilliseconds(0)
            }
            return this._daylightSavingAdjust(b)
        }, _daylightSavingAdjust: function(a) {
            if (!a) {
                return null
            }
            a.setHours(a.getHours() > 12 ? a.getHours() + 2 : 0);
            return a
        }, _setDate: function(a, b, c) {
            var e = !b, f = a.selectedMonth, h = a.selectedYear;
            b = this._restrictMinMax(a, this._determineDate(a, b, new Date));
            a.selectedDay = a.currentDay = b.getDate();
            a.drawMonth = a.selectedMonth = a.currentMonth = b.getMonth();
            a.drawYear = a.selectedYear = a.currentYear = b.getFullYear();
            if ((f != a.selectedMonth || h != a.selectedYear) && !c) {
                this._notifyChange(a)
            }
            this._adjustInstDate(a);
            if (a.input) {
                a.input.val(e ? "" : this._formatDate(a))
            }
        }, _getDate: function(a) {
            return !a.currentYear || a.input && a.input.val() == "" ? null : this._daylightSavingAdjust(new Date(a.currentYear, a.currentMonth, a.currentDay))
        }, _generateHTML: function(a) {
            var b = new Date;
            b = this._daylightSavingAdjust(new Date(b.getFullYear(), b.getMonth(), b.getDate()));
            var c = this._get(a, "isRTL"), e = this._get(a, "showButtonPanel"), f = this._get(a, "hideIfNoPrevNext"), h = this._get(a, "navigationAsDateFormat"), i = this._getNumberOfMonths(a), g = this._get(a, "showCurrentAtPos"), k = this._get(a, "stepMonths"), l = i[0] != 1 || i[1] != 1, u = this._daylightSavingAdjust(!a.currentDay ? new Date(9999, 9, 9) : new Date(a.currentYear, a.currentMonth, a.currentDay)), j = this._getMinMaxDate(a, "min"), o = this._getMinMaxDate(a, "max");
            g = a.drawMonth - g;
            var m = a.drawYear;
            if (g < 0) {
                g += 12;
                m--
            }
            if (o) {
                var n = this._daylightSavingAdjust(new Date(o.getFullYear(), o.getMonth() - i[0] * i[1] + 1, o.getDate()));
                for (n = j && n < j ? j : n; this._daylightSavingAdjust(new Date(m, g, 1)) > n; ) {
                    g--;
                    if (g < 0) {
                        g = 11;
                        m--
                    }
                }
            }
            a.drawMonth = g;
            a.drawYear = m;
            n = this._get(a, "prevText");
            n = !h ? n : this.formatDate(n, this._daylightSavingAdjust(new Date(m, g - k, 1)), this._getFormatConfig(a));
            n = this._canAdjustMonth(a, -1, m, g) ? '<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_' + y + ".datepicker._adjustDate('#" + a.id + "', -" + k + ", 'M');\" title=\"" + n + '"><span class="ui-icon ui-icon-circle-triangle-' + (c ? "e" : "w") + '">' + n + "</span></a>" : f ? "" : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="' + n + '"><span class="ui-icon ui-icon-circle-triangle-' + (c ? "e" : "w") + '">' + n + "</span></a>";
            var r = this._get(a, "nextText");
            r = !h ? r : this.formatDate(r, this._daylightSavingAdjust(new Date(m, g + k, 1)), this._getFormatConfig(a));
            f = this._canAdjustMonth(a, +1, m, g) ? '<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_' + y + ".datepicker._adjustDate('#" + a.id + "', +" + k + ", 'M');\" title=\"" + r + '"><span class="ui-icon ui-icon-circle-triangle-' + (c ? "w" : "e") + '">' + r + "</span></a>" : f ? "" : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="' + r + '"><span class="ui-icon ui-icon-circle-triangle-' + (c ? "w" : "e") + '">' + r + "</span></a>";
            k = this._get(a, "currentText");
            r = this._get(a, "gotoCurrent") && a.currentDay ? u : b;
            k = !h ? k : this.formatDate(k, r, this._getFormatConfig(a));
            h = !a.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery_' + y + '.datepicker._hideDatepicker();">' + this._get(a, "closeText") + "</button>" : "";
            e = e ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (c ? h : "") + (this._isInRange(a, r) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_' + y + ".datepicker._gotoToday('#" + a.id + "');\">" + k + "</button>" : "") + (c ? "" : h) + "</div>" : "";
            h = parseInt(this._get(a, "firstDay"), 10);
            h = isNaN(h) ? 0 : h;
            k = this._get(a, "showWeek");
            r = this._get(a, "dayNames");
            this._get(a, "dayNamesShort");
            var s = this._get(a, "dayNamesMin"), z = this._get(a, "monthNames"), v = this._get(a, "monthNamesShort"), p = this._get(a, "beforeShowDay"), w = this._get(a, "showOtherMonths"), H = this._get(a, "selectOtherMonths");
            this._get(a, "calculateWeek");
            for (var L = this._getDefaultDate(a), I = "", C = 0; C < i[0]; C++) {
                for (var M = "", D = 0; D < i[1]; D++) {
                    var N = this._daylightSavingAdjust(new Date(m, g, a.selectedDay)), t = " ui-corner-all", x = "";
                    if (l) {
                        x += '<div class="ui-datepicker-group';
                        if (i[1] > 1) {
                            switch (D) {
                                case 0:
                                    x += " ui-datepicker-group-first";
                                    t = " ui-corner-" + (c ? "right" : "left");
                                    break;
                                case i[1] - 1:
                                    x += " ui-datepicker-group-last";
                                    t = " ui-corner-" + (c ? "left" : "right");
                                    break;
                                default:
                                    x += " ui-datepicker-group-middle";
                                    t = "";
                                    break
                                }
                        }
                        x += '">'
                    }
                    x += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + t + '">' + (/all|left/.test(t) && C == 0 ? c ? f : n : "") + (/all|right/.test(t) && C == 0 ? c ? n : f : "") + this._generateMonthYearHeader(a, g, m, j, o, C > 0 || D > 0, z, v) + '</div><table class="ui-datepicker-calendar"><thead><tr>';
                    var A = k ? '<th class="ui-datepicker-week-col">' + this._get(a, "weekHeader") + "</th>" : "";
                    for (t = 0; t < 7; t++) {
                        var q = (t + h) % 7;
                        A += "<th" + ((t + h + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : "") + '><span title="' + r[q] + '">' + s[q] + "</span></th>"
                    }
                    x += A + "</tr></thead><tbody>";
                    A = this._getDaysInMonth(m, g);
                    if (m == a.selectedYear && g == a.selectedMonth) {
                        a.selectedDay = Math.min(a.selectedDay, A)
                    }
                    t = (this._getFirstDayOfMonth(m, g) - h + 7) % 7;
                    A = l ? 6 : Math.ceil((t + A) / 7);
                    q = this._daylightSavingAdjust(new Date(m, g, 1 - t));
                    for (var O = 0; O < A; O++) {
                        x += "<tr>";
                        var P = !k ? "" : '<td class="ui-datepicker-week-col">' + this._get(a, "calculateWeek")(q) + "</td>";
                        for (t = 0; t < 7; t++) {
                            var F = p ? p.apply(a.input ? a.input[0] : null, [q]) : [true, ""], B = q.getMonth() != g, J = B && !H || !F[0] || j && q < j || o && q > o;
                            P += '<td class="' + ((t + h + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (B ? " ui-datepicker-other-month" : "") + (q.getTime() == N.getTime() && g == a.selectedMonth && a._keyEvent || L.getTime() == q.getTime() && L.getTime() == N.getTime() ? " " + this._dayOverClass : "") + (J ? " " + this._unselectableClass + " ui-state-disabled" : "") + (B && !w ? "" : " " + F[1] + (q.getTime() == u.getTime() ? " " + this._currentClass : "") + (q.getTime() == b.getTime() ? " ui-datepicker-today" : "")) + '"' + ((!B || w) && F[2] ? ' title="' + F[2] + '"' : "") + (J ? "" : ' onclick="DP_jQuery_' + y + ".datepicker._selectDay('#" + a.id + "'," + q.getMonth() + "," + q.getFullYear() + ', this);return false;"') + ">" + (B && !w ? "&#xa0;" : J ? '<span class="ui-state-default">' + q.getDate() + "</span>" : '<a class="ui-state-default' + (q.getTime() == b.getTime() ? " ui-state-highlight" : "") + (q.getTime() == u.getTime() ? " ui-state-active" : "") + (B ? " ui-priority-secondary" : "") + '" href="#">' + q.getDate() + "</a>") + "</td>";
                            q.setDate(q.getDate() + 1);
                            q = this._daylightSavingAdjust(q)
                        }
                        x += P + "</tr>"
                    }
                    g++;
                    if (g > 11) {
                        g = 0;
                        m++
                    }
                    x += "</tbody></table>" + (l ? "</div>" + (i[0] > 0 && D == i[1] - 1 ? '<div class="ui-datepicker-row-break"></div>' : "") : "");
                    M += x
                }
                I += M
            }
            I += e + (d.browser.msie && parseInt(d.browser.version, 10) < 7 && !a.inline ? '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : "");
            a._keyEvent = false;
            return I
        }, _generateMonthYearHeader: function(a, b, c, e, f, h, i, g) {
            var k = this._get(a, "changeMonth"), l = this._get(a, "changeYear"), u = this._get(a, "showMonthAfterYear"), j = '<div class="ui-datepicker-title">', o = "";
            if (h || !k) {
                o += '<span class="ui-datepicker-month">' + i[b] + "</span>"
            } else {
                i = e && e.getFullYear() == c;
                var m = f && f.getFullYear() == c;
                o += '<select class="ui-datepicker-month" onchange="DP_jQuery_' + y + ".datepicker._selectMonthYear('#" + a.id + "', this, 'M');\" onclick=\"DP_jQuery_" + y + ".datepicker._clickMonthYear('#" + a.id + "');\">";
                for (var n = 0; n < 12; n++) {
                    if ((!i || n >= e.getMonth()) && (!m || n <= f.getMonth())) {
                        o += '<option value="' + n + '"' + (n == b ? ' selected="selected"' : "") + ">" + g[n] + "</option>"
                    }
                }
                o += "</select>"
            }
            u || (j += o + (h || !(k && l) ? "&#xa0;" : ""));
            if (h || !l) {
                j += '<span class="ui-datepicker-year">' + c + "</span>"
            } else {
                g = this._get(a, "yearRange").split(":");
                var r = (new Date).getFullYear();
                i = function(s) {
                    s = s.match(/c[+-].*/) ? c + parseInt(s.substring(1), 10) : s.match(/[+-].*/) ? r + parseInt(s, 10) : parseInt(s, 10);
                    return isNaN(s) ? r : s
                };
                b = i(g[0]);
                g = Math.max(b, i(g[1] || ""));
                b = e ? Math.max(b, e.getFullYear()) : b;
                g = f ? Math.min(g, f.getFullYear()) : g;
                for (j += '<select class="ui-datepicker-year" onchange="DP_jQuery_' + y + ".datepicker._selectMonthYear('#" + a.id + "', this, 'Y');\" onclick=\"DP_jQuery_" + y + ".datepicker._clickMonthYear('#" + a.id + "');\">"; b <= g; b++) {
                    j += '<option value="' + b + '"' + (b == c ? ' selected="selected"' : "") + ">" + b + "</option>"
                }
                j += "</select>"
            }
            j += this._get(a, "yearSuffix");
            if (u) {
                j += (h || !(k && l) ? "&#xa0;" : "") + o
            }
            j += "</div>";
            return j
        }, _adjustInstDate: function(a, b, c) {
            var e = a.drawYear + (c == "Y" ? b : 0), f = a.drawMonth + (c == "M" ? b : 0);
            b = Math.min(a.selectedDay, this._getDaysInMonth(e, f)) + (c == "D" ? b : 0);
            e = this._restrictMinMax(a, this._daylightSavingAdjust(new Date(e, f, b)));
            a.selectedDay = e.getDate();
            a.drawMonth = a.selectedMonth = e.getMonth();
            a.drawYear = a.selectedYear = e.getFullYear();
            if (c == "M" || c == "Y") {
                this._notifyChange(a)
            }
        }, _restrictMinMax: function(a, b) {
            var c = this._getMinMaxDate(a, "min");
            a = this._getMinMaxDate(a, "max");
            b = c && b < c ? c : b;
            return b = a && b > a ? a : b
        }, _notifyChange: function(a) {
            var b = this._get(a, "onChangeMonthYear");
            if (b) {
                b.apply(a.input ? a.input[0] : null, [a.selectedYear, a.selectedMonth + 1, a])
            }
        }, _getNumberOfMonths: function(a) {
            a = this._get(a, "numberOfMonths");
            return a == null ? [1, 1] : typeof a == "number" ? [1, a] : a
        }, _getMinMaxDate: function(a, b) {
            return this._determineDate(a, this._get(a, b + "Date"), null)
        }, _getDaysInMonth: function(a, b) {
            return 32 - (new Date(a, b, 32)).getDate()
        }, _getFirstDayOfMonth: function(a, b) {
            return(new Date(a, b, 1)).getDay()
        }, _canAdjustMonth: function(a, b, c, e) {
            var f = this._getNumberOfMonths(a);
            c = this._daylightSavingAdjust(new Date(c, e + (b < 0 ? b : f[0] * f[1]), 1));
            b < 0 && c.setDate(this._getDaysInMonth(c.getFullYear(), c.getMonth()));
            return this._isInRange(a, c)
        }, _isInRange: function(a, b) {
            var c = this._getMinMaxDate(a, "min");
            a = this._getMinMaxDate(a, "max");
            return(!c || b.getTime() >= c.getTime()) && (!a || b.getTime() <= a.getTime())
        }, _getFormatConfig: function(a) {
            var b = this._get(a, "shortYearCutoff");
            b = typeof b != "string" ? b : (new Date).getFullYear() % 100 + parseInt(b, 10);
            return{shortYearCutoff: b, dayNamesShort: this._get(a, "dayNamesShort"), dayNames: this._get(a, "dayNames"), monthNamesShort: this._get(a, "monthNamesShort"), monthNames: this._get(a, "monthNames")}
        }, _formatDate: function(a, b, c, e) {
            if (!b) {
                a.currentDay = a.selectedDay;
                a.currentMonth = a.selectedMonth;
                a.currentYear = a.selectedYear
            }
            b = b ? typeof b == "object" ? b : this._daylightSavingAdjust(new Date(e, c, b)) : this._daylightSavingAdjust(new Date(a.currentYear, a.currentMonth, a.currentDay));
            return this.formatDate(this._get(a, "dateFormat"), b, this._getFormatConfig(a))
        }});
    d.fn.datepicker = function(a) {
        if (!d.datepicker.initialized) {
            d(document).mousedown(d.datepicker._checkExternalClick).find("body").append(d.datepicker.dpDiv);
            d.datepicker.initialized = true
        }
        var b = Array.prototype.slice.call(arguments, 1);
        if (typeof a == "string" && (a == "isDisabled" || a == "getDate" || a == "widget")) {
            return d.datepicker["_" + a + "Datepicker"].apply(d.datepicker, [this[0]].concat(b))
        }
        if (a == "option" && arguments.length == 2 && typeof arguments[1] == "string") {
            return d.datepicker["_" + a + "Datepicker"].apply(d.datepicker, [this[0]].concat(b))
        }
        return this.each(function() {
            typeof a == "string" ? d.datepicker["_" + a + "Datepicker"].apply(d.datepicker, [this].concat(b)) : d.datepicker._attachDatepicker(this, a)
        })
    };
    d.datepicker = new K;
    d.datepicker.initialized = false;
    d.datepicker.uuid = (new Date).getTime();
    d.datepicker.version = "1.8.6";
    window["DP_jQuery_" + y] = d
})(jQuery);
(function(a, d) {
    a.widget("ui.progressbar", {options: {value: 0}, min: 0, max: 100, _create: function() {
            this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({role: "progressbar", "aria-valuemin": this.min, "aria-valuemax": this.max, "aria-valuenow": this._value()});
            this.valueDiv = a("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);
            this._refreshValue()
        }, destroy: function() {
            this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
            this.valueDiv.remove();
            a.Widget.prototype.destroy.apply(this, arguments)
        }, value: function(b) {
            if (b === d) {
                return this._value()
            }
            this._setOption("value", b);
            return this
        }, _setOption: function(b, c) {
            if (b === "value") {
                this.options.value = c;
                this._refreshValue();
                this._trigger("change");
                this._value() === this.max && this._trigger("complete")
            }
            a.Widget.prototype._setOption.apply(this, arguments)
        }, _value: function() {
            var b = this.options.value;
            if (typeof b !== "number") {
                b = 0
            }
            return Math.min(this.max, Math.max(this.min, b))
        }, _refreshValue: function() {
            var b = this.value();
            this.valueDiv.toggleClass("ui-corner-right", b === this.max).width(b + "%");
            this.element.attr("aria-valuenow", b)
        }});
    a.extend(a.ui.progressbar, {version: "1.8.6"})
})(jQuery);
jQuery.effects || function(w, v) {
    function g(j) {
        var f;
        if (j && j.constructor == Array && j.length == 3) {
            return j
        }
        if (f = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(j)) {
            return[parseInt(f[1], 10), parseInt(f[2], 10), parseInt(f[3], 10)]
        }
        if (f = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(j)) {
            return[parseFloat(f[1]) * 2.55, parseFloat(f[2]) * 2.55, parseFloat(f[3]) * 2.55]
        }
        if (f = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(j)) {
            return[parseInt(f[1], 16), parseInt(f[2], 16), parseInt(f[3], 16)]
        }
        if (f = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(j)) {
            return[parseInt(f[1] + f[1], 16), parseInt(f[2] + f[2], 16), parseInt(f[3] + f[3], 16)]
        }
        if (/rgba\(0, 0, 0, 0\)/.exec(j)) {
            return d.transparent
        }
        return d[w.trim(j).toLowerCase()]
    }
    function z(k, j) {
        var f;
        do {
            f = w.curCSS(k, j);
            if (f != "" && f != "transparent" || w.nodeName(k, "body")) {
                break
            }
            j = "backgroundColor"
        } while (k = k.parentNode);
        return g(f)
    }
    function c() {
        var m = document.defaultView ? document.defaultView.getComputedStyle(this, null) : this.currentStyle, j = {}, f, l;
        if (m && m.length && m[0] && m[m[0]]) {
            for (var k = m.length; k--; ) {
                f = m[k];
                if (typeof m[f] == "string") {
                    l = f.replace(/\-(\w)/g, function(o, n) {
                        return n.toUpperCase()
                    });
                    j[l] = m[f]
                }
            }
        } else {
            for (f in m) {
                if (typeof m[f] === "string") {
                    j[f] = m[f]
                }
            }
        }
        return j
    }
    function b(k) {
        var j, f;
        for (j in k) {
            f = k[j];
            if (f == null || w.isFunction(f) || j in y || /scrollbar/.test(j) || !/color/i.test(j) && isNaN(parseFloat(f))) {
                delete k[j]
            }
        }
        return k
    }
    function x(l, j) {
        var f = {_: 0}, k;
        for (k in j) {
            if (l[k] != j[k]) {
                f[k] = j[k]
            }
        }
        return f
    }
    function r(l, j, f, k) {
        if (typeof l == "object") {
            k = j;
            f = null;
            j = l;
            l = j.effect
        }
        if (w.isFunction(j)) {
            k = j;
            f = null;
            j = {}
        }
        if (typeof j == "number" || w.fx.speeds[j]) {
            k = f;
            f = j;
            j = {}
        }
        if (w.isFunction(f)) {
            k = f;
            f = null
        }
        j = j || {};
        f = f || j.duration;
        f = w.fx.off ? 0 : typeof f == "number" ? f : w.fx.speeds[f] || w.fx.speeds._default;
        k = k || j.complete;
        return[l, j, f, k]
    }
    function h(f) {
        if (!f || typeof f === "number" || w.fx.speeds[f]) {
            return true
        }
        if (typeof f === "string" && !w.effects[f]) {
            return true
        }
        return false
    }
    w.effects = {};
    w.each(["backgroundColor", "borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor", "borderColor", "color", "outlineColor"], function(j, f) {
        w.fx.step[f] = function(k) {
            if (!k.colorInit) {
                k.start = z(k.elem, f);
                k.end = g(k.end);
                k.colorInit = true
            }
            k.elem.style[f] = "rgb(" + Math.max(Math.min(parseInt(k.pos * (k.end[0] - k.start[0]) + k.start[0], 10), 255), 0) + "," + Math.max(Math.min(parseInt(k.pos * (k.end[1] - k.start[1]) + k.start[1], 10), 255), 0) + "," + Math.max(Math.min(parseInt(k.pos * (k.end[2] - k.start[2]) + k.start[2], 10), 255), 0) + ")"
        }
    });
    var d = {aqua: [0, 255, 255], azure: [240, 255, 255], beige: [245, 245, 220], black: [0, 0, 0], blue: [0, 0, 255], brown: [165, 42, 42], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgrey: [169, 169, 169], darkgreen: [0, 100, 0], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkviolet: [148, 0, 211], fuchsia: [255, 0, 255], gold: [255, 215, 0], green: [0, 128, 0], indigo: [75, 0, 130], khaki: [240, 230, 140], lightblue: [173, 216, 230], lightcyan: [224, 255, 255], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightyellow: [255, 255, 224], lime: [0, 255, 0], magenta: [255, 0, 255], maroon: [128, 0, 0], navy: [0, 0, 128], olive: [128, 128, 0], orange: [255, 165, 0], pink: [255, 192, 203], purple: [128, 0, 128], violet: [128, 0, 128], red: [255, 0, 0], silver: [192, 192, 192], white: [255, 255, 255], yellow: [255, 255, 0], transparent: [255, 255, 255]}, a = ["add", "remove", "toggle"], y = {border: 1, borderBottom: 1, borderColor: 1, borderLeft: 1, borderRight: 1, borderTop: 1, borderWidth: 1, margin: 1, padding: 1};
    w.effects.animateClass = function(l, j, f, k) {
        if (w.isFunction(f)) {
            k = f;
            f = null
        }
        return this.each(function() {
            var q = w(this), p = q.attr("style") || " ", n = b(c.call(this)), o, m = q.attr("className");
            w.each(a, function(s, u) {
                l[u] && q[u + "Class"](l[u])
            });
            o = b(c.call(this));
            q.attr("className", m);
            q.animate(x(n, o), j, f, function() {
                w.each(a, function(s, u) {
                    l[u] && q[u + "Class"](l[u])
                });
                if (typeof q.attr("style") == "object") {
                    q.attr("style").cssText = "";
                    q.attr("style").cssText = p
                } else {
                    q.attr("style", p)
                }
                k && k.apply(this, arguments)
            })
        })
    };
    w.fn.extend({_addClass: w.fn.addClass, addClass: function(l, j, f, k) {
            return j ? w.effects.animateClass.apply(this, [{add: l}, j, f, k]) : this._addClass(l)
        }, _removeClass: w.fn.removeClass, removeClass: function(l, j, f, k) {
            return j ? w.effects.animateClass.apply(this, [{remove: l}, j, f, k]) : this._removeClass(l)
        }, _toggleClass: w.fn.toggleClass, toggleClass: function(m, j, f, l, k) {
            return typeof j == "boolean" || j === v ? f ? w.effects.animateClass.apply(this, [j ? {add: m} : {remove: m}, f, l, k]) : this._toggleClass(m, j) : w.effects.animateClass.apply(this, [{toggle: m}, j, f, l])
        }, switchClass: function(m, j, f, l, k) {
            return w.effects.animateClass.apply(this, [{add: j, remove: m}, f, l, k])
        }});
    w.extend(w.effects, {version: "1.8.6", save: function(k, j) {
            for (var f = 0; f < j.length; f++) {
                j[f] !== null && k.data("ec.storage." + j[f], k[0].style[j[f]])
            }
        }, restore: function(k, j) {
            for (var f = 0; f < j.length; f++) {
                j[f] !== null && k.css(j[f], k.data("ec.storage." + j[f]))
            }
        }, setMode: function(j, f) {
            if (f == "toggle") {
                f = j.is(":hidden") ? "show" : "hide"
            }
            return f
        }, getBaseline: function(k, j) {
            var f;
            switch (k[0]) {
                case"top":
                    f = 0;
                    break;
                case"middle":
                    f = 0.5;
                    break;
                case"bottom":
                    f = 1;
                    break;
                default:
                    f = k[0] / j.height
            }
            switch (k[1]) {
                case"left":
                    k = 0;
                    break;
                case"center":
                    k = 0.5;
                    break;
                case"right":
                    k = 1;
                    break;
                default:
                    k = k[1] / j.width
            }
            return{x: k, y: f}
        }, createWrapper: function(k) {
            if (k.parent().is(".ui-effects-wrapper")) {
                return k.parent()
            }
            var j = {width: k.outerWidth(true), height: k.outerHeight(true), "float": k.css("float")}, f = w("<div></div>").addClass("ui-effects-wrapper").css({fontSize: "100%", background: "transparent", border: "none", margin: 0, padding: 0});
            k.wrap(f);
            f = k.parent();
            if (k.css("position") == "static") {
                f.css({position: "relative"});
                k.css({position: "relative"})
            } else {
                w.extend(j, {position: k.css("position"), zIndex: k.css("z-index")});
                w.each(["top", "left", "bottom", "right"], function(m, l) {
                    j[l] = k.css(l);
                    if (isNaN(parseInt(j[l], 10))) {
                        j[l] = "auto"
                    }
                });
                k.css({position: "relative", top: 0, left: 0})
            }
            return f.css(j).show()
        }, removeWrapper: function(f) {
            if (f.parent().is(".ui-effects-wrapper")) {
                return f.parent().replaceWith(f)
            }
            return f
        }, setTransition: function(l, j, f, k) {
            k = k || {};
            w.each(j, function(n, m) {
                unit = l.cssUnit(m);
                if (unit[0] > 0) {
                    k[m] = unit[0] * f + unit[1]
                }
            });
            return k
        }});
    w.fn.extend({effect: function(l) {
            var j = r.apply(this, arguments), f = {options: j[1], duration: j[2], callback: j[3]};
            j = f.options.mode;
            var k = w.effects[l];
            if (w.fx.off || !k) {
                return j ? this[j](f.duration, f.callback) : this.each(function() {
                    f.callback && f.callback.call(this)
                })
            }
            return k.call(this, f)
        }, _show: w.fn.show, show: function(j) {
            if (h(j)) {
                return this._show.apply(this, arguments)
            } else {
                var f = r.apply(this, arguments);
                f[1].mode = "show";
                return this.effect.apply(this, f)
            }
        }, _hide: w.fn.hide, hide: function(j) {
            if (h(j)) {
                return this._hide.apply(this, arguments)
            } else {
                var f = r.apply(this, arguments);
                f[1].mode = "hide";
                return this.effect.apply(this, f)
            }
        }, __toggle: w.fn.toggle, toggle: function(j) {
            if (h(j) || typeof j === "boolean" || w.isFunction(j)) {
                return this.__toggle.apply(this, arguments)
            } else {
                var f = r.apply(this, arguments);
                f[1].mode = "toggle";
                return this.effect.apply(this, f)
            }
        }, cssUnit: function(k) {
            var j = this.css(k), f = [];
            w.each(["em", "px", "%", "pt"], function(m, l) {
                if (j.indexOf(l) > 0) {
                    f = [parseFloat(j), l]
                }
            });
            return f
        }});
    w.easing.jswing = w.easing.swing;
    w.extend(w.easing, {def: "easeOutQuad", swing: function(m, j, f, l, k) {
            return w.easing[w.easing.def](m, j, f, l, k)
        }, easeInQuad: function(m, j, f, l, k) {
            return l * (j /= k) * j + f
        }, easeOutQuad: function(m, j, f, l, k) {
            return -l * (j /= k) * (j - 2) + f
        }, easeInOutQuad: function(m, j, f, l, k) {
            if ((j /= k / 2) < 1) {
                return l / 2 * j * j + f
            }
            return -l / 2 * (--j * (j - 2) - 1) + f
        }, easeInCubic: function(m, j, f, l, k) {
            return l * (j /= k) * j * j + f
        }, easeOutCubic: function(m, j, f, l, k) {
            return l * ((j = j / k - 1) * j * j + 1) + f
        }, easeInOutCubic: function(m, j, f, l, k) {
            if ((j /= k / 2) < 1) {
                return l / 2 * j * j * j + f
            }
            return l / 2 * ((j -= 2) * j * j + 2) + f
        }, easeInQuart: function(m, j, f, l, k) {
            return l * (j /= k) * j * j * j + f
        }, easeOutQuart: function(m, j, f, l, k) {
            return -l * ((j = j / k - 1) * j * j * j - 1) + f
        }, easeInOutQuart: function(m, j, f, l, k) {
            if ((j /= k / 2) < 1) {
                return l / 2 * j * j * j * j + f
            }
            return -l / 2 * ((j -= 2) * j * j * j - 2) + f
        }, easeInQuint: function(m, j, f, l, k) {
            return l * (j /= k) * j * j * j * j + f
        }, easeOutQuint: function(m, j, f, l, k) {
            return l * ((j = j / k - 1) * j * j * j * j + 1) + f
        }, easeInOutQuint: function(m, j, f, l, k) {
            if ((j /= k / 2) < 1) {
                return l / 2 * j * j * j * j * j + f
            }
            return l / 2 * ((j -= 2) * j * j * j * j + 2) + f
        }, easeInSine: function(m, j, f, l, k) {
            return -l * Math.cos(j / k * (Math.PI / 2)) + l + f
        }, easeOutSine: function(m, j, f, l, k) {
            return l * Math.sin(j / k * (Math.PI / 2)) + f
        }, easeInOutSine: function(m, j, f, l, k) {
            return -l / 2 * (Math.cos(Math.PI * j / k) - 1) + f
        }, easeInExpo: function(m, j, f, l, k) {
            return j == 0 ? f : l * Math.pow(2, 10 * (j / k - 1)) + f
        }, easeOutExpo: function(m, j, f, l, k) {
            return j == k ? f + l : l * (-Math.pow(2, -10 * j / k) + 1) + f
        }, easeInOutExpo: function(m, j, f, l, k) {
            if (j == 0) {
                return f
            }
            if (j == k) {
                return f + l
            }
            if ((j /= k / 2) < 1) {
                return l / 2 * Math.pow(2, 10 * (j - 1)) + f
            }
            return l / 2 * (-Math.pow(2, -10 * --j) + 2) + f
        }, easeInCirc: function(m, j, f, l, k) {
            return -l * (Math.sqrt(1 - (j /= k) * j) - 1) + f
        }, easeOutCirc: function(m, j, f, l, k) {
            return l * Math.sqrt(1 - (j = j / k - 1) * j) + f
        }, easeInOutCirc: function(m, j, f, l, k) {
            if ((j /= k / 2) < 1) {
                return -l / 2 * (Math.sqrt(1 - j * j) - 1) + f
            }
            return l / 2 * (Math.sqrt(1 - (j -= 2) * j) + 1) + f
        }, easeInElastic: function(o, j, f, n, m) {
            o = 1.70158;
            var l = 0, k = n;
            if (j == 0) {
                return f
            }
            if ((j /= m) == 1) {
                return f + n
            }
            l || (l = m * 0.3);
            if (k < Math.abs(n)) {
                k = n;
                o = l / 4
            } else {
                o = l / (2 * Math.PI) * Math.asin(n / k)
            }
            return -(k * Math.pow(2, 10 * (j -= 1)) * Math.sin((j * m - o) * 2 * Math.PI / l)) + f
        }, easeOutElastic: function(o, j, f, n, m) {
            o = 1.70158;
            var l = 0, k = n;
            if (j == 0) {
                return f
            }
            if ((j /= m) == 1) {
                return f + n
            }
            l || (l = m * 0.3);
            if (k < Math.abs(n)) {
                k = n;
                o = l / 4
            } else {
                o = l / (2 * Math.PI) * Math.asin(n / k)
            }
            return k * Math.pow(2, -10 * j) * Math.sin((j * m - o) * 2 * Math.PI / l) + n + f
        }, easeInOutElastic: function(o, j, f, n, m) {
            o = 1.70158;
            var l = 0, k = n;
            if (j == 0) {
                return f
            }
            if ((j /= m / 2) == 2) {
                return f + n
            }
            l || (l = m * 0.3 * 1.5);
            if (k < Math.abs(n)) {
                k = n;
                o = l / 4
            } else {
                o = l / (2 * Math.PI) * Math.asin(n / k)
            }
            if (j < 1) {
                return -0.5 * k * Math.pow(2, 10 * (j -= 1)) * Math.sin((j * m - o) * 2 * Math.PI / l) + f
            }
            return k * Math.pow(2, -10 * (j -= 1)) * Math.sin((j * m - o) * 2 * Math.PI / l) * 0.5 + n + f
        }, easeInBack: function(n, j, f, m, l, k) {
            if (k == v) {
                k = 1.70158
            }
            return m * (j /= l) * j * ((k + 1) * j - k) + f
        }, easeOutBack: function(n, j, f, m, l, k) {
            if (k == v) {
                k = 1.70158
            }
            return m * ((j = j / l - 1) * j * ((k + 1) * j + k) + 1) + f
        }, easeInOutBack: function(n, j, f, m, l, k) {
            if (k == v) {
                k = 1.70158
            }
            if ((j /= l / 2) < 1) {
                return m / 2 * j * j * (((k *= 1.525) + 1) * j - k) + f
            }
            return m / 2 * ((j -= 2) * j * (((k *= 1.525) + 1) * j + k) + 2) + f
        }, easeInBounce: function(m, j, f, l, k) {
            return l - w.easing.easeOutBounce(m, k - j, 0, l, k) + f
        }, easeOutBounce: function(m, j, f, l, k) {
            return(j /= k) < 1 / 2.75 ? l * 7.5625 * j * j + f : j < 2 / 2.75 ? l * (7.5625 * (j -= 1.5 / 2.75) * j + 0.75) + f : j < 2.5 / 2.75 ? l * (7.5625 * (j -= 2.25 / 2.75) * j + 0.9375) + f : l * (7.5625 * (j -= 2.625 / 2.75) * j + 0.984375) + f
        }, easeInOutBounce: function(m, j, f, l, k) {
            if (j < k / 2) {
                return w.easing.easeInBounce(m, j * 2, 0, l, k) * 0.5 + f
            }
            return w.easing.easeOutBounce(m, j * 2 - k, 0, l, k) * 0.5 + l * 0.5 + f
        }})
}(jQuery);
(function(a) {
    a.effects.blind = function(b) {
        return this.queue(function() {
            var c = a(this), l = ["position", "top", "left"], m = a.effects.setMode(c, b.options.mode || "hide"), o = b.options.direction || "vertical";
            a.effects.save(c, l);
            c.show();
            var n = a.effects.createWrapper(c).css({overflow: "hidden"}), k = o == "vertical" ? "height" : "width";
            o = o == "vertical" ? n.height() : n.width();
            m == "show" && n.css(k, 0);
            var j = {};
            j[k] = m == "show" ? o : 0;
            n.animate(j, b.duration, b.options.easing, function() {
                m == "hide" && c.hide();
                a.effects.restore(c, l);
                a.effects.removeWrapper(c);
                b.callback && b.callback.apply(c[0], arguments);
                c.dequeue()
            })
        })
    }
})(jQuery);
(function(a) {
    a.effects.bounce = function(c) {
        return this.queue(function() {
            var x = a(this), n = ["position", "top", "left"], r = a.effects.setMode(x, c.options.mode || "effect"), v = c.options.direction || "up", w = c.options.distance || 20, b = c.options.times || 5, q = c.duration || 250;
            /show|hide/.test(r) && n.push("opacity");
            a.effects.save(x, n);
            x.show();
            a.effects.createWrapper(x);
            var u = v == "up" || v == "down" ? "top" : "left";
            v = v == "up" || v == "left" ? "pos" : "neg";
            w = c.options.distance || (u == "top" ? x.outerHeight({margin: true}) / 3 : x.outerWidth({margin: true}) / 3);
            if (r == "show") {
                x.css("opacity", 0).css(u, v == "pos" ? -w : w)
            }
            if (r == "hide") {
                w /= b * 2
            }
            r != "hide" && b--;
            if (r == "show") {
                var s = {opacity: 1};
                s[u] = (v == "pos" ? "+=" : "-=") + w;
                x.animate(s, q / 2, c.options.easing);
                w /= 2;
                b--
            }
            for (s = 0; s < b; s++) {
                var p = {}, o = {};
                p[u] = (v == "pos" ? "-=" : "+=") + w;
                o[u] = (v == "pos" ? "+=" : "-=") + w;
                x.animate(p, q / 2, c.options.easing).animate(o, q / 2, c.options.easing);
                w = r == "hide" ? w * 2 : w / 2
            }
            if (r == "hide") {
                s = {opacity: 0};
                s[u] = (v == "pos" ? "-=" : "+=") + w;
                x.animate(s, q / 2, c.options.easing, function() {
                    x.hide();
                    a.effects.restore(x, n);
                    a.effects.removeWrapper(x);
                    c.callback && c.callback.apply(this, arguments)
                })
            } else {
                p = {};
                o = {};
                p[u] = (v == "pos" ? "-=" : "+=") + w;
                o[u] = (v == "pos" ? "+=" : "-=") + w;
                x.animate(p, q / 2, c.options.easing).animate(o, q / 2, c.options.easing, function() {
                    a.effects.restore(x, n);
                    a.effects.removeWrapper(x);
                    c.callback && c.callback.apply(this, arguments)
                })
            }
            x.queue("fx", function() {
                x.dequeue()
            });
            x.dequeue()
        })
    }
})(jQuery);
(function(a) {
    a.effects.clip = function(b) {
        return this.queue(function() {
            var j = a(this), k = ["position", "top", "left", "height", "width"], n = a.effects.setMode(j, b.options.mode || "hide"), p = b.options.direction || "vertical";
            a.effects.save(j, k);
            j.show();
            var o = a.effects.createWrapper(j).css({overflow: "hidden"});
            o = j[0].tagName == "IMG" ? o : j;
            var m = {size: p == "vertical" ? "height" : "width", position: p == "vertical" ? "top" : "left"};
            p = p == "vertical" ? o.height() : o.width();
            if (n == "show") {
                o.css(m.size, 0);
                o.css(m.position, p / 2)
            }
            var l = {};
            l[m.size] = n == "show" ? p : 0;
            l[m.position] = n == "show" ? 0 : p / 2;
            o.animate(l, {queue: false, duration: b.duration, easing: b.options.easing, complete: function() {
                    n == "hide" && j.hide();
                    a.effects.restore(j, k);
                    a.effects.removeWrapper(j);
                    b.callback && b.callback.apply(j[0], arguments);
                    j.dequeue()
                }})
        })
    }
})(jQuery);
(function(a) {
    a.effects.drop = function(b) {
        return this.queue(function() {
            var d = a(this), k = ["position", "top", "left", "opacity"], n = a.effects.setMode(d, b.options.mode || "hide"), c = b.options.direction || "left";
            a.effects.save(d, k);
            d.show();
            a.effects.createWrapper(d);
            var m = c == "up" || c == "down" ? "top" : "left";
            c = c == "up" || c == "left" ? "pos" : "neg";
            var l = b.options.distance || (m == "top" ? d.outerHeight({margin: true}) / 2 : d.outerWidth({margin: true}) / 2);
            if (n == "show") {
                d.css("opacity", 0).css(m, c == "pos" ? -l : l)
            }
            var j = {opacity: n == "show" ? 1 : 0};
            j[m] = (n == "show" ? c == "pos" ? "+=" : "-=" : c == "pos" ? "-=" : "+=") + l;
            d.animate(j, {queue: false, duration: b.duration, easing: b.options.easing, complete: function() {
                    n == "hide" && d.hide();
                    a.effects.restore(d, k);
                    a.effects.removeWrapper(d);
                    b.callback && b.callback.apply(this, arguments);
                    d.dequeue()
                }})
        })
    }
})(jQuery);
(function(a) {
    a.effects.explode = function(b) {
        return this.queue(function() {
            var q = b.options.pieces ? Math.round(Math.sqrt(b.options.pieces)) : 3, p = b.options.pieces ? Math.round(Math.sqrt(b.options.pieces)) : 3;
            b.options.mode = b.options.mode == "toggle" ? a(this).is(":visible") ? "hide" : "show" : b.options.mode;
            var j = a(this).show().css("visibility", "hidden"), m = j.offset();
            m.top -= parseInt(j.css("marginTop"), 10) || 0;
            m.left -= parseInt(j.css("marginLeft"), 10) || 0;
            for (var l = j.outerWidth(true), k = j.outerHeight(true), o = 0; o < q; o++) {
                for (var n = 0; n < p; n++) {
                    j.clone().appendTo("body").wrap("<div></div>").css({position: "absolute", visibility: "visible", left: -n * (l / p), top: -o * (k / q)}).parent().addClass("ui-effects-explode").css({position: "absolute", overflow: "hidden", width: l / p, height: k / q, left: m.left + n * (l / p) + (b.options.mode == "show" ? (n - Math.floor(p / 2)) * (l / p) : 0), top: m.top + o * (k / q) + (b.options.mode == "show" ? (o - Math.floor(q / 2)) * (k / q) : 0), opacity: b.options.mode == "show" ? 0 : 1}).animate({left: m.left + n * (l / p) + (b.options.mode == "show" ? 0 : (n - Math.floor(p / 2)) * (l / p)), top: m.top + o * (k / q) + (b.options.mode == "show" ? 0 : (o - Math.floor(q / 2)) * (k / q)), opacity: b.options.mode == "show" ? 1 : 0}, b.duration || 500)
                }
            }
            setTimeout(function() {
                b.options.mode == "show" ? j.css({visibility: "visible"}) : j.css({visibility: "visible"}).hide();
                b.callback && b.callback.apply(j[0]);
                j.dequeue();
                a("div.ui-effects-explode").remove()
            }, b.duration || 500)
        })
    }
})(jQuery);
(function(a) {
    a.effects.fade = function(b) {
        return this.queue(function() {
            var g = a(this), f = a.effects.setMode(g, b.options.mode || "hide");
            g.animate({opacity: f}, {queue: false, duration: b.duration, easing: b.options.easing, complete: function() {
                    b.callback && b.callback.apply(this, arguments);
                    g.dequeue()
                }})
        })
    }
})(jQuery);
(function(a) {
    a.effects.fold = function(b) {
        return this.queue(function() {
            var v = a(this), n = ["position", "top", "left"], u = a.effects.setMode(v, b.options.mode || "hide"), q = b.options.size || 15, p = !!b.options.horizFirst, m = b.duration ? b.duration / 2 : a.fx.speeds._default / 2;
            a.effects.save(v, n);
            v.show();
            var s = a.effects.createWrapper(v).css({overflow: "hidden"}), r = u == "show" != p, c = r ? ["width", "height"] : ["height", "width"];
            r = r ? [s.width(), s.height()] : [s.height(), s.width()];
            var o = /([0-9]+)%/.exec(q);
            if (o) {
                q = parseInt(o[1], 10) / 100 * r[u == "hide" ? 0 : 1]
            }
            if (u == "show") {
                s.css(p ? {height: 0, width: q} : {height: q, width: 0})
            }
            p = {};
            o = {};
            p[c[0]] = u == "show" ? r[0] : q;
            o[c[1]] = u == "show" ? r[1] : 0;
            s.animate(p, m, b.options.easing).animate(o, m, b.options.easing, function() {
                u == "hide" && v.hide();
                a.effects.restore(v, n);
                a.effects.removeWrapper(v);
                b.callback && b.callback.apply(v[0], arguments);
                v.dequeue()
            })
        })
    }
})(jQuery);
(function(a) {
    a.effects.highlight = function(b) {
        return this.queue(function() {
            var c = a(this), h = ["backgroundImage", "backgroundColor", "opacity"], j = a.effects.setMode(c, b.options.mode || "show"), g = {backgroundColor: c.css("backgroundColor")};
            if (j == "hide") {
                g.opacity = 0
            }
            a.effects.save(c, h);
            c.show().css({backgroundImage: "none", backgroundColor: b.options.color || "#ffff99"}).animate(g, {queue: false, duration: b.duration, easing: b.options.easing, complete: function() {
                    j == "hide" && c.hide();
                    a.effects.restore(c, h);
                    j == "show" && !a.support.opacity && this.style.removeAttribute("filter");
                    b.callback && b.callback.apply(this, arguments);
                    c.dequeue()
                }})
        })
    }
})(jQuery);
(function(a) {
    a.effects.pulsate = function(b) {
        return this.queue(function() {
            var d = a(this), f = a.effects.setMode(d, b.options.mode || "show");
            times = (b.options.times || 5) * 2 - 1;
            duration = b.duration ? b.duration / 2 : a.fx.speeds._default / 2;
            isVisible = d.is(":visible");
            animateTo = 0;
            if (!isVisible) {
                d.css("opacity", 0).show();
                animateTo = 1
            }
            if (f == "hide" && isVisible || f == "show" && !isVisible) {
                times--
            }
            for (f = 0; f < times; f++) {
                d.animate({opacity: animateTo}, duration, b.options.easing);
                animateTo = (animateTo + 1) % 2
            }
            d.animate({opacity: animateTo}, duration, b.options.easing, function() {
                animateTo == 0 && d.hide();
                b.callback && b.callback.apply(this, arguments)
            });
            d.queue("fx", function() {
                d.dequeue()
            }).dequeue()
        })
    }
})(jQuery);
(function(a) {
    a.effects.puff = function(c) {
        return this.queue(function() {
            var b = a(this), k = a.effects.setMode(b, c.options.mode || "hide"), j = parseInt(c.options.percent, 10) || 150, f = j / 100, d = {height: b.height(), width: b.width()};
            a.extend(c.options, {fade: true, mode: k, percent: k == "hide" ? j : 100, from: k == "hide" ? d : {height: d.height * f, width: d.width * f}});
            b.effect("scale", c.options, c.duration, c.callback);
            b.dequeue()
        })
    };
    a.effects.scale = function(c) {
        return this.queue(function() {
            var b = a(this), m = a.extend(true, {}, c.options), k = a.effects.setMode(b, c.options.mode || "effect"), j = parseInt(c.options.percent, 10) || (parseInt(c.options.percent, 10) == 0 ? 0 : k == "hide" ? 0 : 100), d = c.options.direction || "both", l = c.options.origin;
            if (k != "effect") {
                m.origin = l || ["middle", "center"];
                m.restore = true
            }
            l = {height: b.height(), width: b.width()};
            b.from = c.options.from || (k == "show" ? {height: 0, width: 0} : l);
            j = {y: d != "horizontal" ? j / 100 : 1, x: d != "vertical" ? j / 100 : 1};
            b.to = {height: l.height * j.y, width: l.width * j.x};
            if (c.options.fade) {
                if (k == "show") {
                    b.from.opacity = 0;
                    b.to.opacity = 1
                }
                if (k == "hide") {
                    b.from.opacity = 1;
                    b.to.opacity = 0
                }
            }
            m.from = b.from;
            m.to = b.to;
            m.mode = k;
            b.effect("size", m, c.duration, c.callback);
            b.dequeue()
        })
    };
    a.effects.size = function(c) {
        return this.queue(function() {
            var B = a(this), z = ["position", "top", "left", "width", "height", "overflow", "opacity"], x = ["position", "top", "left", "overflow", "opacity"], w = ["width", "height", "overflow"], v = ["fontSize"], y = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"], s = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"], b = a.effects.setMode(B, c.options.mode || "effect"), o = c.options.restore || false, q = c.options.scale || "both", r = c.options.origin, u = {height: B.height(), width: B.width()};
            B.from = c.options.from || u;
            B.to = c.options.to || u;
            if (r) {
                r = a.effects.getBaseline(r, u);
                B.from.top = (u.height - B.from.height) * r.y;
                B.from.left = (u.width - B.from.width) * r.x;
                B.to.top = (u.height - B.to.height) * r.y;
                B.to.left = (u.width - B.to.width) * r.x
            }
            var A = {from: {y: B.from.height / u.height, x: B.from.width / u.width}, to: {y: B.to.height / u.height, x: B.to.width / u.width}};
            if (q == "box" || q == "both") {
                if (A.from.y != A.to.y) {
                    z = z.concat(y);
                    B.from = a.effects.setTransition(B, y, A.from.y, B.from);
                    B.to = a.effects.setTransition(B, y, A.to.y, B.to)
                }
                if (A.from.x != A.to.x) {
                    z = z.concat(s);
                    B.from = a.effects.setTransition(B, s, A.from.x, B.from);
                    B.to = a.effects.setTransition(B, s, A.to.x, B.to)
                }
            }
            if (q == "content" || q == "both") {
                if (A.from.y != A.to.y) {
                    z = z.concat(v);
                    B.from = a.effects.setTransition(B, v, A.from.y, B.from);
                    B.to = a.effects.setTransition(B, v, A.to.y, B.to)
                }
            }
            a.effects.save(B, o ? z : x);
            B.show();
            a.effects.createWrapper(B);
            B.css("overflow", "hidden").css(B.from);
            if (q == "content" || q == "both") {
                y = y.concat(["marginTop", "marginBottom"]).concat(v);
                s = s.concat(["marginLeft", "marginRight"]);
                w = z.concat(y).concat(s);
                B.find("*[width]").each(function() {
                    child = a(this);
                    o && a.effects.save(child, w);
                    var d = {height: child.height(), width: child.width()};
                    child.from = {height: d.height * A.from.y, width: d.width * A.from.x};
                    child.to = {height: d.height * A.to.y, width: d.width * A.to.x};
                    if (A.from.y != A.to.y) {
                        child.from = a.effects.setTransition(child, y, A.from.y, child.from);
                        child.to = a.effects.setTransition(child, y, A.to.y, child.to)
                    }
                    if (A.from.x != A.to.x) {
                        child.from = a.effects.setTransition(child, s, A.from.x, child.from);
                        child.to = a.effects.setTransition(child, s, A.to.x, child.to)
                    }
                    child.css(child.from);
                    child.animate(child.to, c.duration, c.options.easing, function() {
                        o && a.effects.restore(child, w)
                    })
                })
            }
            B.animate(B.to, {queue: false, duration: c.duration, easing: c.options.easing, complete: function() {
                    B.to.opacity === 0 && B.css("opacity", B.from.opacity);
                    b == "hide" && B.hide();
                    a.effects.restore(B, o ? z : x);
                    a.effects.removeWrapper(B);
                    c.callback && c.callback.apply(this, arguments);
                    B.dequeue()
                }})
        })
    }
})(jQuery);
(function(a) {
    a.effects.shake = function(b) {
        return this.queue(function() {
            var v = a(this), n = ["position", "top", "left"];
            a.effects.setMode(v, b.options.mode || "effect");
            var u = b.options.direction || "left", s = b.options.distance || 20, d = b.options.times || 3, r = b.duration || b.options.duration || 140;
            a.effects.save(v, n);
            v.show();
            a.effects.createWrapper(v);
            var q = u == "up" || u == "down" ? "top" : "left", p = u == "up" || u == "left" ? "pos" : "neg";
            u = {};
            var o = {}, m = {};
            u[q] = (p == "pos" ? "-=" : "+=") + s;
            o[q] = (p == "pos" ? "+=" : "-=") + s * 2;
            m[q] = (p == "pos" ? "-=" : "+=") + s * 2;
            v.animate(u, r, b.options.easing);
            for (s = 1; s < d; s++) {
                v.animate(o, r, b.options.easing).animate(m, r, b.options.easing)
            }
            v.animate(o, r, b.options.easing).animate(u, r / 2, b.options.easing, function() {
                a.effects.restore(v, n);
                a.effects.removeWrapper(v);
                b.callback && b.callback.apply(this, arguments)
            });
            v.queue("fx", function() {
                v.dequeue()
            });
            v.dequeue()
        })
    }
})(jQuery);
(function(a) {
    a.effects.slide = function(b) {
        return this.queue(function() {
            var d = a(this), k = ["position", "top", "left"], n = a.effects.setMode(d, b.options.mode || "show"), c = b.options.direction || "left";
            a.effects.save(d, k);
            d.show();
            a.effects.createWrapper(d).css({overflow: "hidden"});
            var m = c == "up" || c == "down" ? "top" : "left";
            c = c == "up" || c == "left" ? "pos" : "neg";
            var l = b.options.distance || (m == "top" ? d.outerHeight({margin: true}) : d.outerWidth({margin: true}));
            if (n == "show") {
                d.css(m, c == "pos" ? -l : l)
            }
            var j = {};
            j[m] = (n == "show" ? c == "pos" ? "+=" : "-=" : c == "pos" ? "-=" : "+=") + l;
            d.animate(j, {queue: false, duration: b.duration, easing: b.options.easing, complete: function() {
                    n == "hide" && d.hide();
                    a.effects.restore(d, k);
                    a.effects.removeWrapper(d);
                    b.callback && b.callback.apply(this, arguments);
                    d.dequeue()
                }})
        })
    }
})(jQuery);
(function(a) {
    a.effects.transfer = function(b) {
        return this.queue(function() {
            var g = a(this), k = a(b.options.to), j = k.offset();
            k = {top: j.top, left: j.left, height: k.innerHeight(), width: k.innerWidth()};
            j = g.offset();
            var h = a('<div class="ui-effects-transfer"></div>').appendTo(document.body).addClass(b.options.className).css({top: j.top, left: j.left, height: g.innerHeight(), width: g.innerWidth(), position: "absolute"}).animate(k, b.duration, b.options.easing, function() {
                h.remove();
                b.callback && b.callback.apply(g[0], arguments);
                g.dequeue()
            })
        })
    }
})(jQuery);
(function(a, b) {
    a.widget("ui.dynamicdropdown", a.ui.autocomplete, {_renderItem: function(d, h) {
            var l = a.ui.dynamicdropdown.highlightTerm(h.label || h.value || h || "", this.term), k = a("<li/>").data("item.autocomplete", h), g = a('<a class="prop-dyn-dynamic-dropdown-item"/>'), j = h.tooltip || h.param || "", c = this.element[0].parentNode.dynamicDropdownContent.containsIcons;
            if (c) {
                var f = h.iconType && h.iconType.length > 0 && '<span class="caption-icon-16x16 prop-dropdown-icon prop-dropdown-' + h.iconType + '-icon"></span>' || "";
                l = f + l;
                g.addClass("prop-dyn-dynamic-dropdown-item-padded")
            }
            if (h.category) {
                l += '<span class="prop-dyn-dynamic-dropdown-category">' + a.ui.dynamicdropdown.highlightTerm(h.category, this.term) + "</span>"
            }
            return k.append(g.prop("title", j).append(l)).appendTo(d)
        }, _resizeMenu: function() {
            this.menu.element.css({left: "-=21px", top: "+=2px", width: this.element.closest(".prop-grid_vertical_align").width() - 6})
        }, _initSource: function() {
            this.source = function(d, c) {
                c(a.ui.dynamicdropdown.filter(this.options.source, d.term))
            }
        }});
    (function(c) {
        c.extend(c.ui.dynamicdropdown, {filter: function(f, d) {
                d = d.split(" ");
                return c.grep(f, function(h) {
                    var g = true, j = (h.category || "") + (h.label || h.value || h || "");
                    c.each(d, function() {
                        g = g && new RegExp(c.ui.autocomplete.escapeRegex(this), "i").test(j)
                    });
                    return g
                })
            }, highlightTerm: function(f, d) {
                d = (d || "").split(" ");
                c.each(d, function() {
                    f = f.replace(new RegExp(c.ui.autocomplete.escapeRegex(this) + "(?!([^<]+)?>)", "ig"), function(g) {
                        return"<span class='prop-dyn-dynamic-dropdown-highlight'>" + g + "</span>"
                    })
                });
                return f
            }})
    })(jQuery);
    jQuery.extend(a.ui.sortable.prototype, {_clear: function(f, g) {
            this.reverting = false;
            var h = [], c = this;
            if (!this._noFinalSort && this.currentItem[0].parentNode) {
                this.placeholder.before(this.currentItem)
            }
            this._noFinalSort = null;
            if (this.helper[0] == this.currentItem[0]) {
                for (var d in this._storedCSS) {
                    if (this._storedCSS[d] == "auto" || this._storedCSS[d] == "static") {
                        this._storedCSS[d] = ""
                    }
                }
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
            } else {
                this.currentItem.show()
            }
            if (this.fromOutside && !g) {
                h.push(function(j) {
                    this._trigger("receive", j, this._uiHash(this.fromOutside))
                })
            }
            if ((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !g) {
                h.push(function(j) {
                    this._trigger("update", j, this._uiHash())
                })
            }
            if (!a.ui.contains(this.element[0], this.currentItem[0])) {
                if (!g) {
                    h.push(function(j) {
                        this._trigger("remove", j, this._uiHash())
                    })
                }
                for (var d = this.containers.length - 1; d >= 0; d--) {
                    if (a.ui.contains(this.containers[d].element[0], this.currentItem[0]) && !g) {
                        h.push((function(j) {
                            return function(k) {
                                j._trigger("receive", k, this._uiHash(this))
                            }
                        }).call(this, this.containers[d]));
                        h.push((function(j) {
                            return function(k) {
                                j._trigger("update", k, this._uiHash(this))
                            }
                        }).call(this, this.containers[d]))
                    }
                }
            }
            for (var d = this.containers.length - 1; d >= 0; d--) {
                if (!g) {
                    h.push((function(j) {
                        return function(k) {
                            j._trigger("deactivate", k, this._uiHash(this))
                        }
                    }).call(this, this.containers[d]))
                }
                if (this.containers[d].containerCache.over) {
                    h.push((function(j) {
                        return function(k) {
                            j._trigger("out", k, this._uiHash(this))
                        }
                    }).call(this, this.containers[d]));
                    this.containers[d].containerCache.over = 0
                }
            }
            if (this._storedCursor) {
                a("body").css("cursor", this._storedCursor)
            }
            if (this._storedOpacity) {
                this.helper.css("opacity", this._storedOpacity)
            }
            if (this._storedZIndex) {
                this.helper.css("zIndex", this._storedZIndex == "auto" ? "" : this._storedZIndex)
            }
            this.dragging = false;
            if (this.cancelHelperRemoval) {
                if (!g) {
                    this._trigger("beforeStop", f, this._uiHash());
                    for (var d = 0; d < h.length; d++) {
                        h[d].call(this, f)
                    }
                    this._trigger("stop", f, this._uiHash())
                }
                return false
            }
            if (!g) {
                this._trigger("beforeStop", f, this._uiHash())
            }
            if (this.placeholder[0].parentNode) {
                this.placeholder[0].parentNode.removeChild(this.placeholder[0])
            }
            if (this.helper[0] != this.currentItem[0]) {
                this.helper.remove()
            }
            this.helper = null;
            if (!g) {
                for (var d = 0; d < h.length; d++) {
                    h[d].call(this, f)
                }
                this._trigger("stop", f, this._uiHash())
            }
            this.fromOutside = false;
            return true
        }})
})(jQuery);
(function(a, b) {
    if (!Qva.Mgr) {
        Qva.Mgr = {}
    }
    QvDragRect = function() {
        this.$Element = a("<div>");
        this.$Element.addClass("QvDragRect").css({position: "absolute", "z-index": 666});
        this.$Element.insertBefore(document.body.firstChild);
        this.DragRect = {left: 0, top: 0, width: 0, height: 0}
    };
    QvDragRect.prototype.Open = function(c, d) {
        this.DragStartX = c;
        this.DragStartY = d
    };
    QvDragRect.prototype.Size = function(c, d) {
        this.DragRect.left = Math.min(this.DragStartX, c);
        this.DragRect.top = Math.min(this.DragStartY, d);
        this.DragRect.width = Math.abs(c - this.DragStartX);
        this.DragRect.height = Math.abs(d - this.DragStartY);
        this.$Element.css(this.DragRect)
    };
    QvDragRect.prototype.Close = function() {
        this.$Element.remove()
    };
    Qva.DragRect = {Rects: [], CurrentMgr: null, CurrentIndex: 0, Open: function(f, d, c) {
            if ((this.CurrentMgr && this.CurrentMgr != c)) {
                this.Close()
            }
            this.CurrentMgr = c;
            if (this.Rects.length <= this.CurrentIndex) {
                this.Rects[this.CurrentIndex] = new QvDragRect()
            }
            this.Rects[this.CurrentIndex].Open(f, d)
        }, Size: function(d, c) {
            this.Rects[this.CurrentIndex].Size(d, c)
        }, End: function(g, f, d, c) {
            this.Size(g, f);
            if (c) {
                this.CurrentIndex++
            } else {
                if (this.CurrentMgr.HandleSelection) {
                    this.MakeSelection()
                }
                this.Close()
            }
        }, SendSelection: function(c) {
            if (this.CurrentMgr && (c == 17 || c == 224 || c == 91)) {
                if (this.CurrentMgr.HandleSelection) {
                    this.MakeSelection()
                }
                this.Close()
            }
        }, MakeSelection: function() {
            var f = [];
            var d = a(this.CurrentMgr.Element).offset();
            for (var c = 0; c < this.Rects.length; c++) {
                f[f.length] = {left: this.Rects[c].DragRect.left - d.left, top: this.Rects[c].DragRect.top - d.top, width: this.Rects[c].DragRect.width, height: this.Rects[c].DragRect.height}
            }
            this.CurrentMgr.HandleSelection(f)
        }, Close: function() {
            while (this.Rects.length) {
                var c = this.Rects.pop();
                c.Close()
            }
            this.CurrentMgr = null;
            this.CurrentIndex = 0
        }};
    Qva.Clicks = {List: [], CurrentMgr: null, Click: function(g, h, f) {
            if (this.CurrentMgr && this.CurrentMgr != h) {
                this.Close()
            }
            this.CurrentMgr = h;
            if (this.CurrentMgr && this.CurrentMgr.HandleClick) {
                var c = a(this.CurrentMgr.Element).offset();
                var d = {offsetX: g.pageX - c.left, offsetY: g.pageY - c.top};
                if (f) {
                    this.List[this.List.length] = d
                } else {
                    this.List[0] = d;
                    this.CurrentMgr.HandleClick(this.List);
                    this.Close()
                }
            }
        }, SendSelection: function(c) {
            if (this.CurrentMgr && this.CurrentMgr.HandleClick && (c == 17 || c == 224 || c == 91)) {
                this.CurrentMgr.HandleClick(this.List);
                this.Close()
            }
        }, Close: function() {
            this.List.length = 0;
            this.CurrentMgr = null
        }};
    Qva.SelectionRectManager = function(l) {
        var h = this;
        var g = true;
        var f = a(document);
        var k;
        var j;
        var m;
        var d = a(l.Element);
        this.MouseDown = function(o) {
            if (jQuery.event.fix(o).which != 1) {
                return
            }
            g = true;
            var n = d.offset();
            m = {top: n.top, left: n.left, right: (n.left + d.width()), bottom: (n.top + d.height())};
            k = o.pageX;
            j = o.pageY;
            f.bind("mouseup.dragselect", h.OnMouseUp);
            f.bind("mousemove.dragselect", h.MouseMove);
            o.preventDefault();
            Qva.BlurActiveElement();
            f.disableSelection()
        };
        var c = 4;
        this.MouseMove = function(o) {
            o.preventDefault();
            if (g) {
                var q = Math.max(Math.abs(o.pageX - k), Math.abs(o.pageY - j));
                if (q > c) {
                    g = false;
                    Qva.DragRect.Open(k, j, l)
                }
            }
            if (!g) {
                var n = Math.min(Math.max(o.pageX, m.left), m.right);
                var p = Math.min(Math.max(o.pageY, m.top), m.bottom);
                Qva.DragRect.Size(n, p)
            }
        };
        this.OnMouseUp = function(o) {
            f.enableSelection();
            var n = ctrlKeyPressed(o);
            if (g) {
                Qva.Clicks.Click(o, l, n)
            } else {
                Qva.DragRect.End(o.pageX, o.pageY, l, n)
            }
            if (n) {
                f.unbind(".ctrlselect");
                f.bind("keyup.ctrlselect", h.SendSelection)
            }
            f.unbind(".dragselect")
        };
        this.SendSelection = function(n) {
            f.unbind(".ctrlselect");
            Qva.DragRect.SendSelection(n.keyCode);
            Qva.Clicks.SendSelection(n.keyCode)
        };
        d.bind("mousedown.dragselect", h.MouseDown);
        this.DisableSelection = function(n) {
            if (n) {
                a(l.Element).unbind("mousedown.dragselect", h.MouseDown)
            } else {
                a(l.Element).bind("mousedown.dragselect", h.MouseDown)
            }
        }
    };
    Qva.enableSelectionRect = function(c) {
        if (IS_TOUCHENABLED) {
            Qva.Touch.Chart.AddTouchSupport(c)
        }
        return new Qva.SelectionRectManager(c)
    }
})(window.jQuery);
(function(a, b) {
    if (!Qva.Mgr) {
        Qva.Mgr = {}
    }
    Qva.Mgr.menu = function(c, f, d, g) {
        a.extend(this, {Name: Qva.MgrMakeName((d != null) ? d : "", g), Element: f, binderid: c.binderid});
        a(f).data("qvManager", this).bind("contextmenu", function() {
            return false
        });
        c.AddManager(this);
        c.Append(this, this.Name, "menu")
    };
    Qva.Mgr.menu.doAction = function(k) {
        var d = a(k.target).closest("li"), h = d.closest("ul"), c = d.data("qvData"), j = h.data("qvManager"), f = j && Qva.GetBinder(j.binderid), l = Qva.ContextMenu ? Qva.ContextMenu.X + ":" + Qva.ContextMenu.Y : k.pageX + ":" + k.pageY, g;
        if (!f || !c || !c.action && !c.clientAction || d.is(".ctx-menu-disabled")) {
            return
        }
        g = Qva.Mgr.menu.specialActions[c.action];
        if (g) {
            c.binder = f;
            c.item = d;
            if (g(c) === false) {
                return
            }
        }
        if (c.clientAction) {
            Qva.ContextClientAction({clientAction: c.clientAction, param: c.param, name: c.action, binder: f, event: k, cursor: l})
        } else {
            if (c.action) {
                f.Set(j.Context + "." + c.action || j.ObjectId, {action: "", clientsizeWH: Qva.GetViewportWidth() + ":" + Qva.GetViewportHeight(), position: c.index || j.Position || "", cursor: l})
            }
        }
        Qva.HideContextMenu();
        return false
    };
    Qva.Mgr.menu.createIcon = function(c) {
        return a("<span/>").addClass("cell-icon cell-" + c.replace(/\./g, "_") + "-icon")
    };
    Qva.Mgr.menu.createOptions = function(d, h, g) {
        var c = this, f = [];
        a.each(h, function() {
            f.push(c.createOption(d, this, g))
        });
        d.append(f);
        d.removeClass("ctx-menu-no-icons ctx-menu-contains-submenus");
        if (!d.find("> li:not(.ctx-menu-has-submenu) > a > .cell-icon").length) {
            d.addClass("ctx-menu-no-icons")
        }
        if (d.find("> .ctx-menu-has-submenu").length) {
            d.addClass("ctx-menu-contains-submenus")
        }
    };
    Qva.Mgr.menu.createOption = function(c, j, s) {
        var w = j.name || "", k = (j.text || "").split(/\n/)[0], o = Qva.SpecialActions.GetShortcutText(w), p = !!j.icon, r = !!j.submenu, f = c.parent().is("li"), n = s instanceof Qva.Mgr.toolbar, v = !!j.showpane, g = j.sharing && j.sharing == "true", l = j.mode && j.mode !== "enabled", q = c.find(".ctx-menu-action-" + w), h = a('<li class="cf"><a href="javascript:;"></a></li>').addClass("ctx-menu-action-" + w), m, u = a(document);
        h.data("qvData", {action: w, param: j.param, index: j.index, clientAction: j.clientaction, obj: j, mgr: s});
        if (!j.mode) {
            a.extend(h.data("qvData"), {isSpecial: true, obj: j})
        }
        if (l) {
            h.addClass("ctx-menu-disabled")
        }
        if (w === "Bookmarks" || w === "Reports") {
            new Qva.Mgr[w.toLowerCase() + "select"](s.PageBinder, a("<select/>").appendTo(h.find("a").remove().end())[0], "Document." + w);
            return h[0]
        }
        if (k) {
            if (n && p && !f && (w !== "CLEARSTATE" && w !== "COLLABORATION" && w !== "FOLDOUTDOWN" && w !== "HELP")) {
                !l && h.addClass("ctx-menu-icon-only").attr("title", k)
            } else {
                a('<span class="ctx-menu-text"/>').text(k).appendTo(h.find("a"))
            }
        }
        if (!n && o) {
            h.find("a").append('<span class="ctx-menu-shortcut">' + o + "</span>")
        }
        if (r) {
            m = a('<ul class="ctx-menu ctx-menu-submenu popup-shadow"/>').data("qvManager", s).appendTo(h.addClass("ctx-menu-has-submenu"));
            if (!p) {
                h.append(Qva.Mgr.menu.createIcon("FOLDOUT"))
            }
            Qva.Mgr.menu.createOptions(m, j.action || [], s)
        }
        if (p && w) {
            h.find(">a").prepend(Qva.Mgr.menu.createIcon(j.name))
        }
        if (j.type === "divider") {
            h.addClass("ctx-menu-divider").find("a").remove()
        }
        h[g ? "addClass" : "removeClass"]("sharing-active");
        if (j.sharing) {
            u.unbind(".toolbarshare");
            if (j.showpane) {
                u.bind("click.toolbarshare", function d(x) {
                    if (!a(x.target).closest(".Qv_SessionCollaboration, .ctx-menu-action-COLLABORATION").length) {
                        Qva.Mgr.menu.specialActions.COLLABORATION({binder: Qva.GetBinder(s.binderid)});
                        u.unbind(".toolbarshare")
                    }
                })
            }
        }
        if (v || s.ToggleStates && s.ToggleStates[w]) {
            h.addClass("active").find(".cell-icon").addClass("cell-invert")
        }
        if (q.length) {
            c.find(".ctx-menu-action-" + w).replaceWith(h);
            return null
        }
        return h[0]
    };
    Qva.Mgr.menu.doHighlight = function(g) {
        var f = a(g.target).closest("li");
        if (f.is(".ctx-menu-disabled")) {
            return
        }
        function d(h) {
            h && f[h]("active").find("> .cell-icon, > a > .cell-icon")[h]("cell-invert")
        }
        f.bind("mouseup mouseleave touchend", function c(j) {
            var h = f.data("qvData") || {};
            d(h.mgr && h.mgr.ToggleStates && h.mgr.ToggleStates[h.action] ? "addClass" : "removeClass");
            f.unbind("mouseup mouseleave touchend", c)
        });
        d("addClass");
        if (!(g.type == "touchstart" && f.find("#Close").length)) {
            return false
        }
    };
    Qva.Mgr.menu.doSubMenu = function(j) {
        var d = "removeClass", g = "hide", c = a(document.body), h = a(j.target).closest(".ctx-menu-has-submenu");
        if (j.type !== "mouseleave") {
            d = "addClass";
            g = "show";
            if (j.type === "touchend") {
                c.bind("touchend", function f(k) {
                    if (!a(k.target).closest(".ctx-menu-has-submenu").length) {
                        c.unbind("touchend", f);
                        Qva.Mgr.menu.doSubMenu({target: h[0], type: "mouseleave"})
                    }
                })
            }
        }
        h[d]("active").find("> .cell-icon, > a > .cell-icon")[d]("cell-invert").end().find("> ul")[g]();
        return false
    };
    Qva.Mgr.menu.prototype.Paint = function(l, j) {
        var h = this, g = a(h.Element), f = a(j), d = f.attr("context");
        a.extend(h, {Touched: true, Context: h.PageBinder.DefaultScope + "." + d, ObjectId: d, Position: f.attr("position")});
        this.MenuData = {};
        Qva.ObjectifyXML(this.MenuData, j);
        if (!this.MenuData.action) {
            g.hide();
            return
        }
        if (IS_TOUCHENABLED) {
            this.MenuData.action = a.map(this.MenuData.action, function(m) {
                return a.inArray(m.name, ["PROPS", "COPY", "PR", "EC", "DELETE"]) !== -1 ? null : m
            });
            if (!IS_IPAD) {
                this.MenuData.action = a.map(this.MenuData.action, function(m) {
                    return a.inArray(m.name, ["XL"]) !== -1 ? null : m
                })
            }
        }
        Qva.Mgr.menu.createOptions(g, this.MenuData.action, this);
        g.show();
        if (Qva.ContextMenu) {
            var k = Qva.ContextMenu.Y;
            left = Qva.ContextMenu.X;
            if (k + g.height() - a(window).scrollTop() > Qva.GetViewportHeight()) {
                k = Math.max(0, k - g.height())
            }
            if (left + g.width() - a(window).scrollLeft() > Qva.GetViewportWidth()) {
                left = Math.max(0, left - g.width())
            }
            if (k != Qva.ContextMenu.Y || left != Qva.ContextMenu.X) {
                var c = a(Qva.ContextMenu);
                c.css({left: left, top: k})
            }
        }
    };
    a(document).ready(function() {
        a(document.body).delegate(".ctx-menu li:not(.ctx-menu-has-submenu) :not(select)", "mousedown touchstart", Qva.Mgr.menu.doHighlight).delegate(".ctx-menu .ctx-menu-has-submenu", "mouseenter mouseleave touchend", Qva.Mgr.menu.doSubMenu).delegate(".ctx-menu li:not(.ctx-menu-disabled) :not(select)", "mouseup touchend", Qva.Mgr.menu.doAction)
    });
    Qva.Mgr.menu.specialActions = {HELP: function(c) {
            Qva.Help.Show(c.obj.url)
        }};
    Qva.ContextClientAction = function(f) {
        var g = f.param && f.param.split(":") || [], d, c, h;
        if (f.clientAction == "modal" && Qva.Modal.instance != null) {
            d = Qva.Remote + (Qva.Remote.indexOf("?") >= 0 ? "&" : "?");
            d += "public=only&name=" + g[0] + ".htm&target=" + Qva.EncodeComponent(f.name), parseInt(g[1]), parseInt(g[2]);
            Qva.Modal.instance.Show(f.binder, d)
        } else {
            if (f.clientAction == "inputfield") {
                Qva.OpenPopupInput(f.element)
            } else {
                if (f.clientAction == "confirm") {
                    c = f.name + "." + g[0];
                    h = g.slice(1).join(":");
                    if (window.confirm(h)) {
                        f.binder.Set(c, "action", "", true)
                    }
                } else {
                    if (f.clientAction == "url") {
                        window.open(f.param)
                    } else {
                        if (f.clientAction == "bundledurl") {
                            var d = f.binder.BuildBinaryUrl(null, "", f.param);
                            window.open(d)
                        } else {
                            if (f.clientAction == "popup") {
                                Qva.ShowMessagePopup(elem.param, f.binder)
                            } else {
                                if (f.clientAction == "menu") {
                                    f.binder.OnContextMenu(f.event, (event.target || event.srcElement).ObjectId);
                                    return
                                } else {
                                    alert("Not supported clientside action: " + f.clientAction)
                                }
                            }
                        }
                    }
                }
            }
        }
        Qva.HideContextMenu()
    };
    Qva.DefaultOnCreateContextMenu = function(g, h, f, c, j) {
        var d = a(Qva.ContextMenu);
        h = a.event.fix(h);
        Qva.CancelBubble(h);
        if (Qva.ContextMenu == null || Qva.ContextMenuMgr.binderid != g.binderid) {
            Qva.ContextMenu = a('<ul class="ctx-menu popup-shadow"/>').hide().appendTo("body")[0];
            Qva.ContextMenuMgr = new Qva.Mgr.menu(g, Qva.ContextMenu, g.DefaultScope + ".Menu");
            d = a(Qva.ContextMenu)
        } else {
            d.show().empty()
        }
        j = j || {x: h.pageX, y: h.pageY};
        Qva.ContextMenu.X = j.x;
        Qva.ContextMenu.Y = j.y;
        d.css({left: j.x, top: j.y});
        g.GetMenu(f, c);
        return false
    };
    Qva.HideContextMenu = function(c) {
        if (Qva.ContextMenu) {
            a(Qva.ContextMenu).hide()
        }
    }
})(jQuery);
(function(a, b) {
    if (!Qva.Mgr) {
        Qva.Mgr = {}
    }
    Qva.Mgr.toolbar = function(c, h, g, j) {
        var f = a(h), d = this;
        g = Qva.MgrMakeName((g != null) ? g : "", j);
        d.ToggleStates = {};
        Qva.StandardActions = d;
        a.extend(d, {Name: g, Element: h, binderid: c.binderid, Context: "Document.StandardActions"});
        a.each([{name: "Annotations", internal: "TOGGLENOTES"}, {name: "CurrentSelection", internal: "CS"}, {name: "TOOLS\\REPOSITORY", internal: "REPOSITORY"}, {name: "TOOLS\\NEWSHEETOBJ", internal: "NEWSHEETOBJ"}, {name: "TOOLS\\SHOWFIELDS", internal: "SHOWFIELDS"}], function() {
            var k = this;
            c.SubscribeToVisibility(k.name, function(l) {
                var m = l ? "addClass" : "removeClass";
                f.find(".cell-" + k.internal + "-icon")[m]("cell-invert").closest("li")[m]("active");
                d.ToggleStates[k.internal] = l
            })
        });
        c.Append(this, g, "toolbar");
        c.AddManager(this)
    };
    Qva.Mgr.toolbar.getModifiedObjects = function(d, c) {
        var f;
        f = a.map(d, function(j, h) {
            for (var g in j) {
                if (!c.hasOwnProperty(h) || (j.hasOwnProperty(g) && j[g] !== c[h][g])) {
                    return j
                }
            }
            return null
        });
        return f
    };
    Qva.Mgr.toolbar.prototype.createOptions = function(c) {
        this.listElement = this.listElement || a('<ul class="ctx-menu ui-helper-clearfix"/>').data("qvManager", this).appendTo(this.Element);
        Qva.Mgr.menu.createOptions(this.listElement, c, this)
    };
    Qva.Mgr.toolbar.prototype.Paint = function(h, d) {
        if (h == "h") {
            this.Element.style.display = "none";
            return
        }
        var c = a(this.Element), g, f = [];
        this.Touched = true;
        this.oldLayout = this.Layout;
        this.Layout = {};
        Qva.ObjectifyXML(this.Layout, d);
        a("#Close").find(".ctx-menu-text").text(this.PageBinder.Translations.Close).end()[0].RestoreText = this.PageBinder.Translations.Restore;
        this.PageBinder.QueuePostPaintMessage(this)
    };
    Qva.Mgr.toolbar.prototype.PostPaint = function() {
        if (this.PageBinder.PaintToolbar) {
            this.PostPaintCustom = this.PageBinder.PaintToolbar;
            this.PostPaintCustom()
        } else {
            this.PostPaintDefault()
        }
    };
    Qva.Mgr.toolbar.prototype.PostPaintDefault = function() {
        var c = this, g = c.Layout, f = a(c.Element), d = {action: c.Layout.help || [], name: "FOLDOUTDOWN", text: this.PageBinder.Translations.More, icon: "true", submenu: "true"};
        if (c.oldLayout) {
            a.each(["action", "select", "collaboration"], function() {
                objects = objects.concat(Qva.Mgr.toolbar.getModifiedObjects(g[this] || [], c.oldLayout[this] || []))
            })
        } else {
            objects = g.action.concat(g.select || []).concat(g.collaboration || [])
        }
        if (IS_TOUCHENABLED) {
            d.action.push({icon: "true", name: "SMALLDEVICES", text: this.PageBinder.Translations.SwitchToSmallDevices});
            objects = a.map(objects, function(h) {
                return a.inArray(h.name, ["CS", "REPOSITORY", "NEWSHEETOBJ", "SHOWFIELDS"]) !== -1 ? null : h
            })
        }
        objects = a.map(objects, function(h) {
            if (a.inArray(h.name, ["DBGINFO", "MAILASLINK", "SUPPORTINFO"]) >= 0) {
                d.action.push(h);
                return null
            }
            return h
        });
        c.createOptions(objects);
        c.moreMenu = a(c.moreMenu || Qva.Mgr.menu.createOption(c.listElement, d, c)).find("ul").addClass("ctx-menu-shadow").end();
        c.listElement.append(c.moreMenu);
        if (g.collaboration) {
            c.PostPaintSharedSession();
            a(c.SharedSessionDiv).css({top: a("#QvAjaxToolbar").height(), left: a(".cell-COLLABORATION-icon").offset().left - 7})
        }
        f.find(".ctx-menu-divider").remove();
        f.find("> ul > li").after('<li class="ctx-menu-divider"/>')
    };
    Qva.Mgr.toolbar.prototype.PostPaintSharedSession = function() {
        if (!this.Layout.collaboration) {
            if (this.SharedSessionDiv) {
                a(this.SharedSessionDiv).hide()
            }
            return
        }
        var c = this.SharedSessionDiv;
        if (!c) {
            c = this.SharedSessionDiv = document.createElement("div");
            c.onclick = Qva.CancelAction;
            Qva.SetContextMenu(c, Qva.CancelAction);
            c.className = "Qv_SessionCollaboration ctx-menu-shadow";
            c.style.display = "none";
            document.body.appendChild(c);
            var o = this;
            this.PageBinder.LoadHtml("SessionCollaboration.qvpp", function(j) {
                c.innerHTML = j;
                a(c).find("*[data-action]").each(function() {
                    var l = this.getAttribute("data-action");
                    this.onclick = onclick_action;
                    this.Action = "Document.SessionCollaboration." + l;
                    this.binderid = o.binderid
                });
                a(c).children().children().hide();
                o.PageBinder.QueuePostPaintMessage(o)
            })
        }
        var p = this.Layout.collaboration[0];
        var h = a(c).children().children();
        if (p.showpane) {
            a(c).show()
        }
        if (!p.showpane && (h.length == 0 || h.length == 6)) {
            a(c).hide()
        }
        if (h.length > 0) {
            if (p.timeout) {
                a(c).find('*[data-value="timeout"]').text(p.timeout)
            }
            if (p.participants) {
                a(c).find('*[data-value="participants"]').html(p.participants)
            }
            if (p.inviteurl) {
                var r = Qva.ReplaceOpenDoc(p.inviteurl);
                var m = a(c).find("textarea");
                m.click(function() {
                    a(this).focus().select()
                });
                if (m.val() !== r) {
                    m.val(r)
                }
                var w = "mailto:?subject=" + Qva.EncodeComponent(r) + "&body=" + Qva.EncodeComponent(r);
                a(c).find('a[data-value="mail"]').attr("href", w)
            }
            var f = p.parts.split(",");
            var n = false;
            for (var k = 0; k < f.length; ++k) {
                var s = f[k] ? "show" : "hide";
                a(h[k])[s]()
            }
            a(c).find('*[data-action="LeaveSession"]').click(function() {
                a(c).hide()
            });
            if (p.participant) {
                var q = a(c).find('*[data-list="Participants"]');
                var k = p.participant.length - 1;
                var x = q.children("li");
                for (var g = x.length - 1; g >= 0; --g) {
                    var d = x[g].s_id;
                    if (k >= 0 && p.participant[k].id === d) {
                        --k
                    } else {
                        a(x[g]).slideUp(function() {
                            a(this).remove()
                        })
                    }
                }
                for (; k >= 0; --k) {
                    var v = a("<li></li>").hide().prependTo(q);
                    var u = a('<a class="prop-sortable-list-close-button-position" style="float: right;"></a>').append('<span class="prop-icon-24x24 prop-sortable-list-close-button"></span>').appendTo(v)[0];
                    a("<span></span>").text(p.participant[k].name).appendTo(v);
                    v[0].s_id = p.participant[k].id;
                    u.Action = "Document.SessionCollaboration.Participants.Remove";
                    u.Position = p.participant[k].id;
                    u.binderid = this.PageBinder.ID;
                    u.onclick = onclick_action;
                    v.slideDown()
                }
            }
            if (p.indication) {
                for (var k = 0; k < p.indication.length; ++k) {
                    a(c).show();
                    var g = a('<div><b></b><br /><span style="font-size: 7pt; color: gray;"></span></div>');
                    g.find("b").text(p.indication[k].name);
                    g.find("span").text(p.indication[k].action);
                    g.appendTo(c);
                    g.slideDown(200).delay(1000).slideUp(300, function() {
                        a(this).remove();
                        if (a(c).children().children(":visible").length == 0) {
                            a(c).hide()
                        }
                    })
                }
            }
        }
    };
    Qva.Mgr.menu.specialActions.COLLABORATION = function(c) {
        c.binder.Set("Document.SessionCollaboration.TogglePane", {action: "", clientsizeWH: Qva.GetViewportWidth() + ":" + Qva.GetViewportHeight()})
    };
    Qva.Mgr.menu.specialActions.SMALLDEVICES = function() {
        location.href = location.href.replace("opendoc.htm", "mobile/opendoc.htm");
        return false
    };
    a.each(["REPOSITORY", "NEWSHEETOBJ", "SHOWFIELDS"], function(c, f) {
        var d = f;
        Qva.Mgr.menu.specialActions[d] = function(g) {
            if (g.mgr.ToggleStates && g.mgr.ToggleStates[d]) {
                g.binder.SimpleCall("set", "Document.TOOLS\\" + d + ".CX", null, {action: ""});
                return false
            }
        }
    })
}(jQuery));
(function(b, c) {
    if (!Qva.Mgr) {
        Qva.Mgr = {}
    }
    Qva.Mgr.graph = function(d, j, f, k) {
        j.Name = this.Name = Qva.MgrMakeName(f, k);
        j.binderid = d.binderid;
        j.ObjectId = d.Element.ObjectId;
        j.isgraph = true;
        this.AutoSize = j.style.width == "auto" && j.style.height == "auto";
        d.AddManager(this);
        this.Element = j;
        this.ScrollBars = [];
        this.HotSpots = [];
        this.IsSelectable = true;
        this.SelectionMgr = Qva.enableSelectionRect(this);
        var g = d.oldShow = d.Show;
        d.Show = function() {
        };
        this.Show = function() {
            g.call(d)
        };
        if (!IS_TOUCHENABLED) {
            var h = Qva.GetBinder(j.binderid).GetHoverDiv();
            h.style.display = "none";
            j.style.display = "none";
            j.LastHoverPos = {};
            b(j).bind("mouseover.graphhover mousemove.graphhover", function(o) {
                if (!this.hover) {
                    return
                }
                var l = Qva.GetBinder(this.binderid);
                if (!l) {
                    return
                }
                var m = this.Name;
                var q = {x: o.clientX + Qva.GetScrollLeft(), y: o.clientY + Qva.GetScrollTop()};
                if (q.x === this.LastHoverPos.x && q.y === this.LastHoverPos.y) {
                    return
                }
                this.LastHoverPos = q;
                h.style.left = q.x + 10 + "px";
                h.style.top = q.y + 5 + "px";
                h.style.display = "none";
                var p = Qva.GetPageCoords(this);
                var n = (o.clientX - p.x) + ":" + (o.clientY - p.y);
                if (this.hoverTimout) {
                    this.hoverTimout = clearTimeout(this.hoverTimout)
                }
                this.hoverTimout = setTimeout(function() {
                    if (Qva.IsContextOpen()) {
                        return
                    }
                    if (!l.GetEnabled()) {
                        return
                    }
                    l.Hover(m, n)
                }, 500)
            });
            j.onmouseout = function(l) {
                if (this.hoverTimout) {
                    this.hoverTimout = clearTimeout(this.hoverTimout)
                }
            }
        }
        j.style.cursor = "crosshair"
    };
    Qva.Mgr.graph.prototype.Remove = function() {
        b(this.Element).html("").remove()
    };
    Qva.Mgr.graph.prototype.IsSliding = function() {
        var d = false;
        if (!this.ScrollBars) {
            return d
        } else {
            for (var f = 0; f < this.ScrollBars.length; f++) {
                d = this.ScrollBars[f].isSliding;
                if (d) {
                    break
                }
            }
        }
        return d
    };
    Qva.Mgr.graph.prototype.Unlock = function() {
        this.Touched = true;
        if (this.Element.style.display != "none") {
            this.PostPaint()
        }
    };
    a.prototype.Step = function(j) {
        var d = this.PageBinder;
        if (!this.PageBinder.IsValid()) {
            return
        }
        if (this.ScrollId == null && j == this.Pos) {
            return
        }
        var f = this.Name;
        var h = {};
        if (this.ScrollId != null) {
            h.id = this.ScrollId;
            h.scrollpos = j
        } else {
            var g = j - this.Pos;
            h.scrollstep = g
        }
        d.Set(f, h)
    };
    a.prototype.createScrollEnd = function(m, g, o, f, h, j) {
        var d = document.createElement("div");
        if (this.IsXScroll) {
            d.style.top = (m + 1) + "px";
            g++;
            if (!j) {
                g += (f - o)
            }
            d.style.left = g + "px";
            o -= 2;
            d.style.height = o + "px";
            d.style.width = o + "px"
        } else {
            d.style.left = (g + 1) + "px";
            m++;
            if (!j) {
                m += (o - f)
            }
            d.style.top = m + "px";
            f -= 2;
            d.style.height = f + "px";
            d.style.width = f + "px"
        }
        d.style.cursor = "pointer";
        d.style.position = "absolute";
        d.firstbutton = j;
        var k, n;
        if (this.IsXScroll) {
            k = [parseInt(o / 2) - 1, parseInt(o / 2) - 3];
            n = j ? [[2, 0], [0, 3], [2, 6]] : [[0, 0], [2, 3], [0, 6]]
        } else {
            k = [parseInt(f / 2) - 3, parseInt(f / 2)];
            n = j ? [[0, 2], [3, 0], [6, 2]] : [[0, 0], [3, 2], [6, 0]]
        }
        var p = [9, 9];
        var l = this;
        d.onmousedown = function(q) {
            if (!q) {
                q = window.event
            }
            q.cancelBubble = true;
            var r = this.firstbutton ? l.Pos - 1 : l.Pos + 1;
            if (r >= 0) {
                l.Step(r)
            }
            return false
        };
        return d
    };
    function a(u, s, q, g, f, v, j, k, p, n, o, r, d) {
        var h = document.createElement("div");
        h.style.backgroundColor = k;
        h.style.opacity = "0.001";
        h.style.filter = "alpha(opacity=0.001)";
        h.style.cursor = "pointer";
        h.style.position = "absolute";
        this.binderid = u.Element.binderid;
        this.PageBinder = u.PageBinder;
        this.Name = u.Name;
        this.IsXScroll = r;
        this.ScrollId = d;
        var l = this;
        var w;
        l.isSliding = false;
        this.G = SelectInitGraphics();
        u.actions = {step: function(x) {
                if (w) {
                    clearTimeout(w);
                    w = null
                }
                l.isSliding = true;
                l.Step(l.Pos + (x > 0 ? -l.Page : l.Page));
                w = setTimeout(function() {
                    l.isSliding = false
                }, 300)
            }};
        Qva.AddMouseScroll(u);
        h.onmousedown = function(A) {
            if (!A) {
                A = window.event
            }
            A.cancelBubble = true;
            var z = Qva.GetPageCoords(this);
            var y;
            var x;
            if (l.IsXScroll) {
                y = l.ScrollStart + A.clientX - z.x;
                x = parseInt(l.Pos * l.ScrollLength / l.Page) + l.ScrollStart + parseInt(l.firstbutton.style.width)
            } else {
                y = l.ScrollStart + A.clientY - z.y;
                x = parseInt(l.Pos * l.ScrollLength / l.Page) + l.ScrollStart + parseInt(l.firstbutton.style.height)
            }
            var B = y < (x) ? (l.Pos - l.Page) > 0 ? l.Pos - l.Page : 0 : Math.min(l.Pos + l.Page, (l.Max - l.Page));
            if (B >= 0) {
                l.UpdateSliderPos(B);
                l.Step(B)
            }
            return false
        };
        var m = document.createElement("div");
        m.style.cursor = "pointer";
        m.style.position = "absolute";
        m.onmousedown = function(z) {
            if (!z) {
                z = window.event
            }
            z.cancelBubble = true;
            if (l.IsXScroll) {
                m.mouseZero = z.clientX;
                m.scrollZero = m.offsetLeft
            } else {
                m.mouseZero = z.clientY;
                m.scrollZero = m.offsetTop
            }
            function A(D, E) {
                if (!D) {
                    D = window.event
                }
                var B, F;
                if (l.IsXScroll) {
                    B = m.scrollZero + D.clientX - m.mouseZero
                } else {
                    B = m.scrollZero + D.clientY - m.mouseZero
                }
                if (B < l.ScrollStart) {
                    B = l.ScrollStart;
                    F = 0
                } else {
                    if (B > l.ScrollStop) {
                        B = l.ScrollStop;
                        F = l.Max - l.Page
                    } else {
                        F = Math.round((B - l.ScrollStart) * l.Page / l.ScrollLength)
                    }
                }
                if (l.IsXScroll) {
                    m.style.left = B + "px"
                } else {
                    m.style.top = B + "px"
                }
                var C = function(G) {
                    if (l.PageBinder.IsValid() && !l.PageBinder.GetDocumentMgr().IsUpdating) {
                        l.Step(G)
                    } else {
                        setTimeout(function() {
                            C(G)
                        }, 100)
                    }
                };
                if (l.Pos != F) {
                    if (l.thread) {
                        clearTimeout(l.thread)
                    }
                    l.thread = setTimeout(function() {
                        C(F)
                    }, 100)
                }
                if (E) {
                    l.isSliding = false
                }
            }
            function x(B) {
                Qva.removeEvent(document, "mousemove", y);
                Qva.removeEvent(document, "mouseup", x);
                if (m.releaseCapture) {
                    m.releaseCapture()
                }
                A(B, true);
                l.i_Scroll.mouseZero = null
            }
            function y(B) {
                A(B, false);
                l.isSliding = true;
                B = B || window.event;
                if (B.preventDefault) {
                    B.preventDefault()
                } else {
                    B.returnValue = false
                }
                return false
            }
            Qva.addEvent(document, "mousemove", y);
            Qva.addEvent(document, "mouseup", x);
            if (m.setCapture) {
                m.setCapture()
            }
            return false
        };
        this.o_Scroll = h;
        this.i_Scroll = m;
        s.appendChild(h);
        s.appendChild(m);
        this.UpdateScrollSize(q, g, f, v, p, n, o, j, k)
    }
    a.prototype.UpdateScrollPos = function(d) {
        if (!isNaN(d)) {
            this.Pos = d
        }
        if (!this.isSliding) {
            this.UpdateSliderPos(d)
        }
    };
    a.prototype.UpdateSliderPos = function(f) {
        var d = parseInt(f * this.ScrollLength / this.Page) + this.ScrollStart;
        if (d > this.ScrollStop) {
            d = this.ScrollStop
        }
        if (this.IsXScroll) {
            this.i_Scroll.style.left = d + "px"
        } else {
            this.i_Scroll.style.top = d + "px"
        }
    };
    a.prototype.UpdateScrollSize = function(n, g, d, r, o, l, m, h, p) {
        if (this.Top != n || this.Left != g || this.Height != r || this.Width != d) {
            this.Height = r;
            this.Top = n;
            this.Left = g;
            this.Width = d;
            this.o_Scroll.style.height = r + "px";
            this.o_Scroll.style.top = n + "px";
            this.o_Scroll.style.left = g + "px";
            this.o_Scroll.style.width = Math.max(0, d) + "px";
            if (this.IsXScroll) {
                this.i_Scroll.style.height = Math.max(1, r - 4) + "px";
                this.i_Scroll.style.top = n + 1 + "px";
                this.i_Scroll.style.left = (r + g) + "px"
            } else {
                this.i_Scroll.style.top = (d + n) + "px";
                this.i_Scroll.style.left = (g + 1) + "px";
                this.i_Scroll.style.width = Math.max(1, d - 4) + "px"
            }
            var q = this.o_Scroll.parentNode;
            if (this.firstbutton) {
                q.removeChild(this.firstbutton);
                q.removeChild(this.lastbutton)
            }
            var k = this.createScrollEnd(n, g, r, d, h, true);
            var f = this.createScrollEnd(n, g, r, d, h, false);
            this.firstbutton = k;
            this.lastbutton = f;
            q.appendChild(k);
            q.appendChild(f)
        }
        this.Page = l;
        this.Max = o;
        var j = this.Max - this.Page;
        if (this.IsXScroll) {
            this.ScrollStart = this.o_Scroll.offsetLeft + parseInt(this.Height);
            this.ScrollLength = parseFloat((this.Width - 2 * (this.Height)) * this.Page / this.Max);
            this.ScrollLengthVisible = (this.ScrollLength > 5) ? parseInt(this.ScrollLength) : 5;
            this.ScrollStop = parseInt(j * this.ScrollLength / this.Page) + this.ScrollStart - (this.ScrollLengthVisible - parseInt(this.ScrollLength));
            this.i_Scroll.style.width = this.ScrollLengthVisible + "px"
        } else {
            this.ScrollStart = this.o_Scroll.offsetTop + parseInt(this.Width);
            this.ScrollLength = parseFloat((this.Height - 2 * (this.Width)) * this.Page / this.Max);
            this.ScrollLengthVisible = (this.ScrollLength > 5) ? parseInt(this.ScrollLength) : 5;
            this.ScrollStop = parseInt(j * this.ScrollLength / this.Page) + this.ScrollStart - (this.ScrollLengthVisible - parseInt(this.ScrollLength));
            this.i_Scroll.style.height = this.ScrollLengthVisible + "px"
        }
        this.UpdateScrollPos(m)
    };
    a.prototype.GetOffset = function(f) {
        var d;
        if (this.IsXScroll) {
            d = this.o_Scroll.offsetWidth - 2 * this.Height
        } else {
            d = this.o_Scroll.offsetHeight - 2 * this.Width
        }
        return Math.round(this.Page * f / d)
    };
    Qva.Mgr.graph.prototype.RemoveScrollBars = function() {
        for (var d = 0; d < this.ScrollBars.length; d++) {
            this.Element.parentNode.removeChild(this.ScrollBars[d].o_Scroll);
            this.Element.parentNode.removeChild(this.ScrollBars[d].i_Scroll);
            this.Element.parentNode.removeChild(this.ScrollBars[d].firstbutton);
            this.Element.parentNode.removeChild(this.ScrollBars[d].lastbutton)
        }
        this.ScrollBars.length = 0
    };
    Qva.Mgr.graph.prototype.Paint = function(q, z) {
        this.Touched = true;
        var d = this.Element;
        d.style.display = Qva.MgrGetDisplayFromMode(this, q);
        if (d.style.display == "none") {
            return
        }
        var f = (q != "e");
        d.disabled = f;
        var v = z.getAttribute("selectable") !== "false";
        if (this.IsSelectable != v) {
            this.SelectionMgr.DisableSelection(!v);
            if (v) {
                d.style.cursor = "crosshair"
            } else {
                d.style.cursor = ""
            }
        }
        this.IsSelectable = v;
        d.hover = z.getAttribute("hover") === "true";
        var j = z.getElementsByTagName("scroll");
        if (j.length > 0) {
            var p = false;
            for (var B = 0; B < j.length; B++) {
                var F = j[B];
                var x = F.getAttribute("id");
                var C = F.getAttribute("horizontal") == "true";
                if (this.ScrollBars[B]) {
                    if (this.ScrollBars[B].ScrollId != x || this.ScrollBars[B].IsXScroll != C) {
                        p = false;
                        break
                    } else {
                        p = true
                    }
                } else {
                    p = false;
                    break
                }
            }
            if (!p && this.ScrollBars.length > 0) {
                this.RemoveScrollBars()
            }
            for (var B = 0; B < j.length; B++) {
                var F = j[B];
                var D = parseInt(F.getAttribute("max"));
                var k = parseInt(F.getAttribute("page"));
                var m = parseInt(F.getAttribute("pos"));
                var r = parseInt(F.getAttribute("top"));
                var g = parseInt(F.getAttribute("left"));
                var u = parseInt(F.getAttribute("height"));
                var y = parseInt(F.getAttribute("width"));
                var A = HtmlifyARGB(F.getAttribute("color"));
                var n = HtmlifyARGB(F.getAttribute("bkgcolor"));
                if (this.ScrollBars[B]) {
                    if (!this.ScrollBars[B].i_Scroll.mouseZero) {
                        this.ScrollBars[B].UpdateScrollSize(r, g, y, u, D, k, m, A, n)
                    } else {
                        this.ScrollBars[B].UpdateScrollPos(m)
                    }
                } else {
                    if (y > 2 && u > 2) {
                        var x = F.getAttribute("id");
                        var C = F.getAttribute("horizontal") == "true";
                        this.ScrollBars[B] = new a(this, d.parentNode, r, g, y, u, A, n, D, k, m, C, F.getAttribute("id"))
                    }
                }
            }
        } else {
            this.RemoveScrollBars()
        }
        for (var E = 0; E < this.HotSpots.length; E++) {
            this.Element.parentNode.removeChild(this.HotSpots[E])
        }
        this.HotSpots.length = 0;
        var s = z.getElementsByTagName("hotspot");
        if (s.length > 0) {
            for (var E = 0; E < s.length; E++) {
                var l = s[E];
                var r = parseInt(l.getAttribute("top"));
                var g = parseInt(l.getAttribute("left"));
                var u = parseInt(l.getAttribute("height"));
                var y = parseInt(l.getAttribute("width"));
                var o = document.createElement("div");
                o.className = "Qv_Hotspot";
                o.style.cursor = "pointer";
                o.style.position = "absolute";
                o.style.top = r + "px";
                o.style.left = g + "px";
                o.style.height = u + "px";
                o.style.width = y + "px";
                o.index = l.getAttribute("index");
                o.Name = d.Name;
                o.binderid = d.binderid;
                o.onclick = o.ontouchend = function(H) {
                    Qva.GetBinder(this.binderid).SetClick(H, this.Name, this)
                };
                d.parentNode.appendChild(o);
                this.HotSpots[E] = o
            }
        }
        var w = z.getAttribute("stamp");
        if (w != "0") {
            var G = w ? this.Name : z.getAttribute("name");
            if (d.disabled) {
                G += ".DISABLED"
            }
            var h = this.PageBinder.BuildBinaryUrl(z.getAttribute("path"), w, G);
            this.avq_url = h
        }
        this.PageBinder.QueuePostPaintMessage(this)
    };
    Qva.Mgr.graph.prototype.PostPaint = function() {
        var f = this;
        var j = this.Element;
        if (j.style.display == "none") {
            return
        }
        if (this.AutoSize) {
            this.PageBinder.SetObjectWidth(0);
            this.PageBinder.SetObjectHeight(0)
        }
        var h = this.avq_url;
        var l = false;
        if (j.style.width != "" && j.style.height != "") {
            var g = Qva.GetObjectBinder(j);
            var k = g.GetImageSize(j);
            if (this.GraphWidth != k.width || this.GraphHeight != k.height) {
                this.GraphWidth = k.width;
                this.GraphHeight = k.height;
                l = true
            }
            h += "&width=" + Qva.EncodeComponent(k.width) + "&height=" + Qva.EncodeComponent(k.height)
        }
        if (this.avq_url) {
            var d = new Image();
            if (!this.IsSliding()) {
                d.onload = function() {
                    var m = b(j);
                    m.fadeOut("fast", function() {
                        m.attr("src", d.src).fadeIn("fast", function() {
                            d = null;
                            f.Show()
                        })
                    })
                }
            } else {
                d = j;
                f.Show()
            }
            h = Qva.AddProxyIfAny(h);
            h = Qva.XrfSecure(h);
            d.src = h
        } else {
            f.Show()
        }
        if (l) {
            this.PageBinder.SetSize(this.Name, this.GraphWidth + ":" + this.GraphHeight)
        }
        j.style.display = "block"
    };
    Qva.Mgr.graph.prototype.HandleSelection = function(d) {
        var g = {};
        g.rects = "";
        g.rect = [];
        for (var f = 0; f < d.length; f++) {
            g.rect[g.rect.length] = "" + d[f].left + ":" + d[f].top + ":" + d[f].width + ":" + d[f].height
        }
        this.PageBinder.Set(this.Name, g)
    };
    Qva.Mgr.graph.prototype.HandleClick = function(g) {
        var d = Qva.GetObjectBinder(this.Element);
        var h = d.GetImageSize(this.Element);
        var j = {};
        j.clicks = "";
        j.click = [];
        for (var f = 0; f < g.length; f++) {
            j.click[j.click.length] = "" + g[f].offsetX + ":" + g[f].offsetY + ":" + h.width + ":" + h.height
        }
        this.PageBinder.Set(this.Name, j)
    }
})(window.jQuery);
(function(b, d) {
    if (!Qva.Mgr) {
        Qva.Mgr = {}
    }
    window.onclick_action = function(g) {
        if (this.disabled) {
            return
        }
        var f = Qva.GetBinder(this.binderid);
        var h = document.activeElement;
        if (h && h.onchange) {
            h.onchange();
            h.blur()
        }
        var j = {};
        if (this.Position != null) {
            j.position = this.Position
        }
        j.action = "";
        j.clientsizeWH = Qva.GetViewportWidth() + ":" + Qva.GetViewportHeight();
        if (this.NeedCursor) {
            if (Qva.ContextMenu) {
                j.cursor = Qva.ContextMenu.X + ":" + Qva.ContextMenu.Y
            } else {
                if (!g) {
                    g = window.event
                }
                j.cursor = (g.clientX + Qva.GetScrollLeft()) + ":" + (g.clientY + Qva.GetScrollTop())
            }
        }
        f.Set(this.Action || this.ObjectId, j);
        Qva.HideContextMenu()
    };
    window.onclick_ContextClientAction = function(f) {
        Qva.GetBinder(this.binderid).ContextClientAction(f, this)
    };
    Qva.Mgr.show = function(f, h, g, j, k) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        this.Condition = k;
        this.Conditions = k.split(",");
        f.AddManager(this);
        this.Element = h;
        f.Append(this, this.Name, "value");
        this.Element.style.display = "none"
    };
    Qva.Mgr.show.prototype.Paint = function(k, j) {
        this.Touched = true;
        var g = false;
        if (k == "n") {
            g = (this.ModeIfNotEnabled == "d")
        } else {
            var f = j.getAttribute("value");
            if (!f) {
                f = j.getAttribute("text")
            }
            if (this.Conditions.length) {
                for (var h = 0; h < this.Conditions.length; h++) {
                    if (f == this.Conditions[h]) {
                        g = true;
                        break
                    }
                }
            } else {
                g = (f == this.Condition)
            }
        }
        this.Element.style.display = g ? "" : "none"
    };
    Qva.Mgr.hide = function(f, h, g, j, k) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        this.Condition = k;
        this.Element = h;
        f.AddManager(this);
        f.Append(this, this.Name, "value")
    };
    Qva.Mgr.hide.prototype.Paint = function(j, h) {
        this.Touched = true;
        var g;
        if (j == "n") {
            if (this.Condition == null) {
                g = (this.ModeIfNotEnabled != "d")
            } else {
                g = false
            }
        } else {
            var f = h.getAttribute("value");
            if (!f) {
                f = h.getAttribute("text")
            }
            g = (f == this.Condition)
        }
        this.Element.style.display = g ? "none" : ""
    };
    Qva.Mgr.disable = function(f, h, g, j) {
        this.Name = Qva.MgrMakeName(g, j);
        this.Element = h;
        f.AddManager(this)
    };
    Qva.Mgr.disable.prototype.Lock = Qva.LockDisabled;
    Qva.Mgr.disable.prototype.Unlock = Qva.UnlockDisabled;
    Qva.Mgr.disable.prototype.Paint = function(h, g) {
        this.Touched = true;
        var f = this.Element;
        f.disabled = (h != "e");
        f.style.display = Qva.MgrGetDisplayFromMode(this, h)
    };
    Qva.Mgr.background = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h;
        h.binderid = f.binderid;
        this.AutoSize = h.tagName == "DIV";
        f.BackgroundMgr = this
    };
    Qva.Mgr.background.prototype.SetBackgroundPosition = function() {
        if (!this.HasBkgImage) {
            return
        }
        var g = this.Element;
        var f = g === document.body;
        var h = f ? Qva.GetAbsolutePageCoords(document.getElementById("PageContainer")).y : 0;
        this.backgroundPosition = this.Layout.bkgposition || "left top";
        if (this.backgroundPosition.search("top") != -1) {
            if (IS_CHROME) {
                g.style.backgroundPosition = "0px " + h + "px"
            } else {
                g.style.backgroundPosition = this.backgroundPosition.replace("top", h + "px")
            }
        } else {
            g.style.backgroundPosition = this.backgroundPosition
        }
    };
    Qva.Mgr.background.prototype.PostPaint2 = function() {
        if (this.HasBkgImage) {
            var j = this.Element;
            var g = j === document.body;
            var l = g ? Qva.GetAbsolutePageCoords(document.getElementById("PageContainer")).y : 0;
            var h = this.avq_url;
            if (this.AutoSize) {
                var k = getClientWidth(j);
                var f = g ? Qva.GetDocHeight() : getClientHeight(j);
                if (isNaN(k) || isNaN(f)) {
                    if (g) {
                        k = parseInt(Qva.GetViewportWidth());
                        f = parseInt(Qva.GetViewportHeight())
                    } else {
                        Assert(false)
                    }
                }
                f -= l;
                if (this.PageBinder.IsHosted && this.PageBinder.SetSize) {
                    if (this.Height != f || this.Width != k) {
                        this.Height = f;
                        this.Width = k;
                        this.PageBinder.SetSize(this.PageBinder.Name || this.Name, this.Width + ":" + this.Height)
                    }
                }
                h += "&width=" + Qva.EncodeComponent(k);
                h += "&height=" + parseInt(b(j).height());
                h = Qva.AddProxyIfAny(h);
                h = Qva.XrfSecure(h)
            }
            if (this.HasBkgImage) {
                this.appliedurl = h;
                j.style.backgroundImage = "url(" + h + ")"
            } else {
                this.appliedurl = "";
                j.style.backgroundImage = ""
            }
            this.SetBackgroundPosition();
            if (j != document.body) {
                j.style.backgroundRepeat = "no-repeat"
            }
        }
    };
    Qva.Mgr.background.prototype.Paint = function(h, g, f) {
        this.Touched = true;
        this.Layout = {};
        Qva.ObjectifyXML(this.Layout, g);
        this.PageBinder.QueuePostPaintMessage(this)
    };
    Qva.Mgr.background.prototype.PostPaint = function() {
        if (this.PageBinder.PaintBackground) {
            this.PostPaintCustom = this.PageBinder.PaintBackground;
            this.PostPaintCustom()
        } else {
            if (this.PageBinder.PageBinder && this.PageBinder.PageBinder.PaintBackground) {
                this.PostPaintCustom = this.PageBinder.PageBinder.PaintBackground;
                this.PostPaintCustom()
            } else {
                this.PostPaintDefault()
            }
        }
    };
    Qva.Mgr.background.prototype.PostPaintDefault = function() {
        if (!this.Layout) {
            this.PostPaint2();
            return
        }
        var k = this.Element, j = this.Layout.stamp ? this.Layout.stamp : null, f = IS_WEBKIT || (IS_GECKO && GECKO_VERSION >= 3.6) || IE_DOCMODE > 8, h = false;
        this.HasBkgImage = this.Layout.image != null;
        this.avq_url = null;
        if (!this.HasBkgImage) {
            this.appliedurl = "";
            k.style.backgroundImage = "";
            k.style.backgroundColor = ""
        }
        if (IS_IE && IE_DOCMODE > 8) {
            k.style.filter = ""
        }
        var g = k === document.body;
        if (g && this.HasBkgImage) {
            f = false
        }
        if (!this.HasBkgImage || g) {
            var l = (!f && j === null) || g;
            h = Qva.ApplyColorDataToElement(this.Layout, k, f, l);
            if (!h) {
                this.HasBkgImage = this.HasBkgImage || (j && j != "0")
            }
        }
        if (this.HasBkgImage) {
            this.avq_url = this.PageBinder.BuildBinaryUrl(this.Layout.path, j, this.Name)
        }
        if (k === document.body) {
            Qva.ResizeBody();
            if (this.Layout.bkgcolor) {
                k.style.backgroundColor = HtmlifyARGB(this.Layout.bkgcolor)
            }
            this.backgroundPosition = this.Layout.bkgposition || "left top";
            if (this.Layout.bkgrepeat) {
                k.style.backgroundRepeat = this.Layout.bkgrepeat
            }
            if (this.Layout.opacity) {
                if (IS_WEBKIT || IS_OPERA) {
                    k.style.opacity = parseFloat(this.Layout.opacity)
                } else {
                    if (IS_GECKO) {
                        k.style.MozOpacity = parseFloat(this.Layout.opacity)
                    } else {
                        k.style.filter = "alpha(opacity:" + parseFloat(this.Layout.opacity) * 100 + ")"
                    }
                }
            }
            if (!this.Layout.bkgposition && this.Layout.bkgrepeat != "repeat") {
                this.AutoSize = true
            }
        }
        if (this.HasBkgImage) {
            this.PostPaint2()
        }
    };
    Qva.Mgr.fullsize = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h;
        this.AutoSize = h.style.width == "auto" && h.style.height == "auto" && this.PageBinder.Element;
        if (!this.AutoSize) {
            this.PostPaint = null
        }
    };
    Qva.Mgr.fullsize.prototype.PostPaint = function() {
        var g = this.Element;
        if (g.style.display == "none") {
            return
        }
        if (this.AutoSize) {
            this.PageBinder.SetObjectWidth(0);
            this.PageBinder.SetObjectHeight(0);
            if (g.tagName == "DIV") {
                if (!b(g).parent().hasClass("lockedheight")) {
                    var f = this.PageBinder.GetContentMaxHeight(g);
                    if (!isNaN(f)) {
                        g.style.height = f + "px"
                    }
                }
                if (IS_CHROME && g.style.width == "auto") {
                    g.style.width = "100%"
                }
            }
        } else {
            Assert(false)
        }
    };
    Qva.Mgr.fullsize.prototype.Paint = function() {
        this.Touched = true
    };
    Qva.Mgr.fullsize.prototype.Remove = function() {
        b(this.Element).html("").remove()
    };
    Qva.Mgr.visibility = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h
    };
    Qva.Mgr.visibility.prototype.Paint = function(f) {
        this.Touched = true;
        this.Element.style.display = Qva.MgrGetDisplayFromMode(this, f)
    };
    Qva.Mgr.visibility.prototype.Remove = function() {
        b(this.Element).find("div").remove();
        b(this.Element).html("").remove()
    };
    Qva.Mgr.label = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h;
        this.AutoSize = h.style.width == "auto" && h.style.height == "auto" && this.PageBinder.Element;
        if (!this.AutoSize) {
            this.PostPaint = null
        }
    };
    Qva.Mgr.label.prototype.PostPaint = function() {
        var g = this.Element;
        if (g.style.display == "none") {
            return
        }
        if (this.AutoSize) {
            this.PageBinder.SetObjectWidth(0);
            this.PageBinder.SetObjectHeight(0);
            if (g.tagName == "DIV") {
                var f = this.PageBinder.GetContentHeight();
                if (!isNaN(f)) {
                    g.style.height = f + "px"
                }
            }
        }
    };
    Qva.Mgr.label.prototype.Paint = function(h, g) {
        this.Touched = true;
        var f = this.Element;
        f.style.display = Qva.MgrGetDisplayFromMode(this, h);
        if (this.AutoSize && f.style.display != "none") {
            this.PageBinder.QueuePostPaintMessage(this)
        }
    };
    Qva.Mgr.inline = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h
    };
    Qva.Mgr.inline.prototype.Paint = function(j, h) {
        this.Touched = true;
        var g = this.Element;
        g.style.display = Qva.MgrGetDisplayFromMode(this, j);
        if (g.style.display == "none") {
            return
        }
        g.innerHTML = "";
        var f = h.removeChild(h.firstChild);
        g.appendChild(f)
    };
    Qva.Mgr.edit = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h;
        f.Append(this, this.Name, "choice")
    };
    Qva.Mgr.edit.prototype.Paint = function(l, h, f) {
        this.Touched = true;
        var g = this.Element;
        var k = h.getAttribute("text");
        if (f == this.ToolTip && k) {
            g.title = k;
            return
        }
        if (h.getAttribute("title") != null) {
            g.title = h.getAttribute("title")
        } else {
            if (this.Name === this.ToolTip && k) {
                g.title = k
            }
        }
        var j = "";
        if (l != "n") {
            j = h.getAttribute(this.Attr);
            switch (this.Attr) {
                case"value":
                    if (h.getAttribute("text") == "") {
                        j = ""
                    }
                    break;
                case"color":
                    if (h.getAttribute("color") && h.getAttribute("bkgcolor")) {
                        g.style.color = h.getAttribute("color");
                        g.style.backgroundColor = h.getAttribute("bkgcolor");
                        return
                    }
                }
        }
        if (j == "" && this.TextIfNull) {
            j = this.TextIfNull
        }
        var k;
        if (this.Dec != null) {
            k = Qva.Trunc(j, this.Dec)
        } else {
            k = j
        }
        if (g.tagName == "INPUT" || g.tagName == "TEXTAREA") {
            g.value = k
        } else {
            g.innerHTML = Qva.ConvertToBr(k)
        }
        g.style.display = Qva.MgrGetDisplayFromMode(this, l)
    };
    Qva.Mgr.dsi = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h
    };
    Qva.Mgr.dsi.prototype.Paint = function(k, j, g) {
        this.Touched = true;
        var h = this.Element;
        var f = j.getAttribute("text").split(";");
        h.value = f.join("\n");
        h.style.display = "block"
    };
    Qva.Mgr.inputcheckbox = function(g, j, f, l, h) {
        if (!Qva.MgrSplit(this, f, l)) {
            return
        }
        this.Element = j;
        g.AddManager(this);
        if (h != null) {
            var o = h.substr(1, 1);
            var k = h.split(o);
            this.Conditional = (k[0] == "-") ? -1 : 1;
            var n = (k.length > 1) ? k[1] : "";
            var m = (k.length > 2) ? k[2] : null;
            j.True = (this.Conditional > 0) ? n : m;
            j.False = (this.Conditional < 0) ? n : m
        } else {
            this.Conditional = 0;
            j.True = "1";
            j.False = "0";
            this.Attr = "value"
        }
        j.Name = this.Name;
        j.Attr = this.Attr;
        j.binderid = g.binderid;
        j.onclick = Qva.Mgr.inputcheckbox.OnClick;
        g.Append(this, this.Name, "choice")
    };
    Qva.Mgr.inputcheckbox.prototype.Lock = Qva.LockDisabled;
    Qva.Mgr.inputcheckbox.prototype.Unlock = Qva.UnlockDisabled;
    Qva.Mgr.inputcheckbox.prototype.Paint = function(k, h) {
        this.Touched = true;
        var g = this.Element;
        var j = h.getAttribute(this.Attr);
        if (this.Conditional < 0) {
            g.checked = (j != g.False)
        } else {
            g.checked = (j == g.True)
        }
        var l = h.getElementsByTagName("choice");
        if (l.length == 0) {
            g.disabled = (k != "e")
        } else {
            l = l[0].getElementsByTagName("element");
            var f = l.length;
            if (f > 1) {
                g.disabled = (k != "e")
            } else {
                g.disabled = true
            }
        }
        this.Locked = g.disabled;
        g.style.display = Qva.MgrGetDisplayFromMode(this, k)
    };
    Qva.Mgr.inputcheckbox.OnClick = function() {
        var f = Qva.GetBinder(this.binderid);
        if (!f.Enabled) {
            return
        }
        var g = this.checked ? this.True : this.False;
        if (g != null) {
            f.Set(this.Name, this.Attr, g, true)
        } else {
            g = this.checked ? this.False : this.True;
            f.Set(this.Name, "count", "-" + g, true)
        }
    };
    Qva.Mgr.inputradio = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        this.Element = h;
        h.Name = this.Name;
        h.name = this.Name;
        h.Attr = this.Attr;
        h.binderid = f.binderid;
        f.AddManager(this);
        h.onclick = function() {
            var k = Qva.GetBinder(this.binderid);
            if (!k.Enabled) {
                return
            }
            k.Set(this.Name, this.Attr, this.getAttribute("value"), true)
        };
        f.Append(this, this.Name, "choice")
    };
    Qva.Mgr.inputradio.prototype.PostScan = function(g) {
        var f = this.Element.getAttribute(g.Prefix + "checkif");
        if (f) {
            this.CheckIf = new Function("value", "return " + f)
        }
    };
    Qva.Mgr.inputradio.prototype.Lock = Qva.LockDisabled;
    Qva.Mgr.inputradio.prototype.Unlock = Qva.UnlockDisabled;
    Qva.Mgr.inputradio.prototype.Paint = function(l, h) {
        this.Touched = true;
        var g = this.Element;
        var k = h.getAttribute(this.Attr);
        if (k == null) {
            k = h.getAttribute("value")
        }
        if (this.CheckIf) {
            g.checked = this.CheckIf(k)
        } else {
            g.checked = (g.getAttribute("value") == k)
        }
        g.disabled = (l != "e");
        if (l == "e" && !g.checked) {
            var m = h.getElementsByTagName("choice");
            if (m.length >= 1) {
                g.disabled = true;
                m = m[0].getElementsByTagName("element");
                var j = m.length;
                for (var f = 0; f < j; ++f) {
                    if (m[f].getAttribute(this.Attr) == g.getAttribute("value")) {
                        g.disabled = false;
                        break
                    }
                }
            }
        }
        this.Locked = g.disabled;
        g.style.display = Qva.MgrGetDisplayFromMode(this, l)
    };
    Qva.Mgr.inputtext = function(f, h, g, j, l) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        this.Element = h;
        this.Condition = l;
        h.Name = this.Name;
        h.binderid = f.binderid;
        h.Attr = this.Attr;
        var k = this;
        f.AddManager(this);
        h.onclick = function(m) {
            Qva.ActiveObjectsCloak = true;
            if (!m) {
                m = window.event
            }
            m.cancelBubble = true
        };
        h.onchange = function() {
            var m = Qva.GetBinder(this.binderid);
            if (k.Value == this.value) {
                return
            }
            if (this.value == "") {
                m.Set(this.Name, "text", "", true)
            } else {
                m.Set(this.Name, this.Attr, this.value, true)
            }
        };
        h.onfocus = function() {
            Qva.ActiveObjectsCloak = true;
            if (!this.EmptyText) {
                return
            }
            if (!b(this).hasClass("EmptyText")) {
                return
            }
            b(this).val("");
            b(this).removeClass("EmptyText")
        };
        h.onblur = function() {
            if (this === Qva.ActiveElement) {
                Qva.ActiveElement = null
            }
            if (!this.EmptyText) {
                return
            }
            if (b(this).val()) {
                return
            }
            if (b(this).hasClass("EmptyText")) {
                return
            }
            b(this).addClass("EmptyText");
            b(this).val(h.EmptyText)
        };
        h.onkeyup = function(m) {
            Qva.ActiveObjectsCloak = true;
            return false
        };
        b(h).keydown(function(n) {
            if (n.target.tagName && (n.target.tagName.toLowerCase() == "textarea")) {
                return true
            }
            var m = n.keyCode || n.which;
            if (m === 13) {
                n.preventDefault();
                return false
            }
        })
    };
    Qva.Mgr.inputtext.prototype.Lock = Qva.LockReadOnly;
    Qva.Mgr.inputtext.prototype.Unlock = Qva.UnlockReadOnly;
    Qva.Mgr.inputtext.prototype.Paint = function(n, h) {
        this.Touched = true;
        var g = this.Element;
        g.readOnly = (n != "e");
        g.style.color = g.readOnly ? "graytext" : "";
        g.disabled = false;
        var k = "";
        if (n != "n") {
            k = h.getAttribute(this.Attr);
            if (this.Attr == "value" && h.getAttribute("text") == "") {
                k = ""
            }
        }
        if (n != "n" && this.Condition != null) {
            var m = h.getAttribute("value");
            if (m == this.Condition) {
                g.disabled = true;
                k = ""
            }
        }
        if (k == "" && this.TextIfNull) {
            k = this.TextIfNull
        }
        var j = k;
        if (this.Dec != null) {
            j = Qva.Trunc(k, this.Dec)
        }
        var l = g === document.activeElement;
        g.EmptyText = h.getAttribute("emptytext");
        var f = !l && !j && g.EmptyText;
        g.value = f ? g.EmptyText : j;
        if (g.EmptyText) {
            b(g)[f ? "addClass" : "removeClass"]("EmptyText")
        }
        this.Value = g.value;
        this.Locked = g.disabled;
        g.style.display = Qva.MgrGetDisplayFromMode(this, n)
    };
    Qva.Mgr.inputtext.prototype.Remove = function() {
        b(this.Element).find("div").remove();
        b(this.Element).html("").remove()
    };
    Qva.Mgr.textarea = Qva.Mgr.inputtext;
    Qva.Mgr.inputpassword = Qva.Mgr.inputtext;
    Qva.Mgr.text = function(f, h, g, k, j) {
        if (!Qva.MgrSplit(this, g, k)) {
            return
        }
        if (j != null) {
            this.ToolTip = Qva.MgrMakeName(j, k);
            f.Append(this, this.ToolTip)
        }
        if (h.tagName == "SELECT") {
            Assert(false)
        }
        f.AddManager(this);
        this.Element = h
    };
    Qva.Mgr.text.prototype.Paint = Qva.Mgr.edit.prototype.Paint;
    Qva.Mgr.text.prototype.Remove = function() {
        b(this.Element).html("").remove()
    };
    Qva.Mgr.step = function(f, j, g, k, h) {
        switch (h) {
            case"next":
                this.Next = true;
                break;
            case"prev":
                this.Next = false;
                break;
            default:
                j.Step = parseFloat(h);
                if (isNaN(j.Step)) {
                    return
                }
                break
        }
        if (!Qva.MgrSplit(this, g, k)) {
            return
        }
        if (j.Step == null) {
            j.Choice = new Array()
        }
        f.AddManager(this);
        this.Element = j;
        j.Name = this.Name;
        j.binderid = f.binderid;
        j.Attr = this.Attr;
        j.onclick = Qva.Mgr.step.OnClick;
        f.Append(this, this.Name, "choice")
    };
    Qva.Mgr.step.prototype.Lock = Qva.LockDisabled;
    Qva.Mgr.step.prototype.Unlock = Qva.UnlockDisabled;
    Qva.Mgr.step.prototype.Paint = function(m, j) {
        this.Touched = true;
        var h = this.Element;
        h.disabled = (m != "e");
        if (m == "n") {
        } else {
            if (h.Step != null) {
                h.Last = parseFloat(j.getAttribute(this.Attr))
            } else {
                var l = j.getAttribute(this.Attr);
                var g = j.getElementsByTagName("choice");
                h.Pending = -1;
                if (g.length >= 1) {
                    var n = g[0].getElementsByTagName("element");
                    var f = n.length;
                    for (var k = 0; k < f; ++k) {
                        h.Choice[k] = n[k].getAttribute(this.Attr);
                        if (n[k].getAttribute("selected") == "yes") {
                            if (this.Next) {
                                h.Pending = k + 1
                            } else {
                                h.Pending = k - 1
                            }
                        }
                    }
                    h.Choice.length = f
                }
                if (h.Pending < 0 || h.Pending >= h.Choice.length) {
                    h.disabled = true
                }
            }
        }
        h.style.display = Qva.MgrGetDisplayFromMode(this, m)
    };
    Qva.Mgr.step.OnClick = function() {
        var f = Qva.GetBinder(this.binderid);
        if (!f.Enabled) {
            return
        }
        var g;
        if (this.Step != null) {
            g = this.Last + this.Step
        } else {
            if (this.Pending < 0 || this.Pending >= this.Choice.length) {
                return
            }
            g = this.Choice[this.Pending]
        }
        f.Set(this.Name, this.Attr, "" + g, true)
    };
    Qva.Mgr.actions = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        this.Attr = "mode";
        f.AddManager(this);
        this.Element = h;
        h.Action = this.Name;
        h.binderid = f.binderid
    };
    Qva.Mgr.actions.prototype.Remove = function() {
        Qva.RemoveHtml(this.Element)
    };
    Qva.Mgr.actions.prototype.Lock = Qva.LockDisabled;
    Qva.Mgr.actions.prototype.Unlock = Qva.UnlockDisabled;
    Qva.Mgr.actions.prototype.Paint = function(j, h) {
        this.Touched = true;
        var f = this.Element;
        var g = (j != "e");
        f.style.display = Qva.MgrGetDisplayFromMode(this, j);
        if (h.getAttribute("actions") == "true" && !g) {
            f.style.cursor = "pointer";
            f.onclick = onclick_action
        } else {
            if (f.style.cursor == "pointer") {
                f.style.cursor = "auto"
            }
            if (f.onclick == onclick_action) {
                f.onclick = null
            }
        }
    };
    Qva.Mgr.qvscroll = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h;
        this.Owner = f;
        this.qvscroll = new QvScroll({startAttached: false, attachElement: b(h)[0], cancelEvents: true, indicators: {enabled: true}})
    };
    Qva.Mgr.qvscroll.prototype.Paint = function(j, g) {
        this.Touched = true;
        var h = g.getAttribute("overflowx") && g.getAttribute("overflowx") !== "hidden";
        var f = g.getAttribute("overflowy") && g.getAttribute("overflowy") !== "hidden";
        if (this.doScrollX !== h || this.doScrollY !== f) {
            this.doScrollX = h;
            this.doScrollY = f;
            this.PageBinder.QueuePostPaintMessage(this)
        }
    };
    Qva.Mgr.qvscroll.prototype.PostPaint = function() {
        var f = b(this.Element), g = this.ScrollProperties, h;
        f.parent().css("overflow", "visible");
        f.find("table").css("table-layout", "auto");
        if (this.doScrollX) {
            f.find("td").css("white-space", "pre")
        } else {
            f.find("td").css("white-space", "")
        }
        f.parent().css("overflow", "hidden");
        this.qvscroll.setOptions({horizontal: this.doScrollX ? "auto" : "disabled", vertical: this.doScrollY ? "auto" : "disabled"}).attach()
    };
    Qva.Mgr.scroll = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h;
        this.Owner = f
    };
    Qva.Mgr.scroll.prototype.GetScrollDimensions = function(g, h) {
        var j = this.Element, k = {visibleWidth: j.clientWidth, visibleHeight: j.clientHeight, overflowWidth: this.TableCellElement.scrollWidth - j.clientWidth, overflowHeight: this.TableCellElement.scrollHeight - j.clientHeight, bothEnabled: false};
        if (h) {
            k.leftOffset = j.clientWidth - g;
            k.topOffset = 0
        } else {
            k.leftOffset = 0;
            k.topOffset = j.clientHeight - g
        }
        var l = k.overflowWidth > 0 && k.overflowHeight + g > 0 || k.overflowWidth + g > 0 && k.overflowHeight > 0, f = this.doScrollY && this.doScrollX;
        if (l && f) {
            k.visibleWidth -= g;
            k.visibleHeight -= g;
            k.overflowWidth += g;
            k.overflowHeight += g;
            k.bothEnabled = true
        }
        return k
    };
    Qva.Mgr.scroll.prototype.CalculateBarPosition = function(f, j, h) {
        var k = parseFloat(j.bar.style[f ? "height" : "width"]), g = parseFloat(j.background.style[f ? "height" : "width"]) - k - this.ScrollProperties.width * 2;
        if (h < 0) {
            h = 0
        } else {
            if (h > 1) {
                h = 1
            }
        }
        return g * h
    };
    Qva.Mgr.scroll.prototype.CalculateContentPosition = function(g, j, h) {
        var f = g ? j.Alignments.overflowHeight : j.Alignments.overflowWidth;
        if (h < 0) {
            h = 0
        } else {
            if (h > 1) {
                h = 1
            }
        }
        return h * f
    };
    Qva.Mgr.scroll.prototype.GetScrollPercent = function(h, m, l, f) {
        var k = parseFloat(m.Element.firstChild.style.fontSize) || 16, j = typeof f !== "undefined" ? f : parseFloat(this.Element.firstChild.style[h ? "marginTop" : "marginLeft"]), n = h ? m.Alignments.visibleHeight : m.Alignments.visibleWidth, g = h ? m.Alignments.overflowHeight : m.Alignments.overflowWidth;
        j = isNaN(j) ? 0 : j;
        j = ((j / k) + l) * k;
        return -j / g
    };
    Qva.Mgr.scroll.prototype.SetScrollPosition = function(g, l, j, f) {
        var h = this.GetScrollPercent(g, l, j, f), k = this.CalculateBarPosition(g, l, h);
        l.bar.style[g ? "marginTop" : "marginLeft"] = k + "px";
        this.Element.firstChild.style[g ? "marginTop" : "marginLeft"] = -this.CalculateContentPosition(g, l, h) + "px";
        l.bar_pos = k
    };
    Qva.Mgr.scroll.prototype.CreateScrollBarManager = function(j, k, f) {
        var g = this, h = !!f ? f : new Qva.ScrollBarMgr(this, j, true);
        h.background.style.backgroundColor = this.Owner.ContentElement.style.backgroundColor;
        h.setProperties(this.ScrollProperties);
        if (j) {
            h.Set(k.leftOffset, k.topOffset, k.visibleHeight, k.overflowHeight + k.visibleHeight, k.visibleHeight, k.leftOffset, k.topOffset)
        } else {
            h.Set(k.leftOffset, k.topOffset, k.visibleWidth, k.overflowWidth + k.visibleWidth, k.visibleWidth, k.leftOffset, k.topOffset)
        }
        h.Alignments = k;
        h.Element = this.Element;
        h.bar_pos = 0;
        h.actions = {step: function(l) {
                g.SetScrollPosition(j, h, l)
            }, scroll_end: function(l) {
                this.scroll(l);
                this.isScrolling = false
            }, scroll: function(l) {
                var m = parseFloat(g.Element.firstChild.style[j ? "marginTop" : "marginLeft"]) || 0;
                if (!this.isScrolling) {
                    this.isScrolling = true;
                    this.originScrollOffset = m
                }
                g.SetScrollPosition(j, h, 0, this.originScrollOffset + l)
            }};
        h.addEvents();
        Qva.AddMouseScroll(h);
        return h
    };
    Qva.Mgr.scroll.prototype.Hide = function() {
        this.background.style.display = "none";
        this.bar.style.display = "none";
        this.start.style.display = "none";
        this.end.style.display = "none";
        if (this.scrollMgrY && this.scrollMgrY.paddingelement) {
            this.scrollMgrY.paddingelement.style.display = "none"
        }
    };
    Qva.Mgr.scroll.prototype.Paint = function(j, g) {
        this.Touched = true;
        this.ScrollProperties = Qva.GetScrollBarProperties(this.PageBinder.ScrollWidth);
        this.TableCellElement = this.Element.firstChild.getElementsByTagName("td")[0];
        var h = g.getAttribute("overflowx") && g.getAttribute("overflowx") !== "hidden";
        var f = g.getAttribute("overflowy") && g.getAttribute("overflowy") !== "hidden";
        if (this.doScrollX !== h || this.doScrollY !== f) {
            this.doScrollX = h;
            this.doScrollY = f;
            this.PageBinder.QueuePostPaintMessage(this)
        }
    };
    Qva.Mgr.scroll.prototype.PostPaint = function() {
        var f = this.Element, g = this.ScrollProperties, h;
        f.style.overflow = "visible";
        f.firstChild.style.tableLayout = "auto";
        if (this.doScrollX) {
            this.TableCellElement.style.whiteSpace = "pre";
            h = this.GetScrollDimensions(g.width, false);
            if (h.overflowWidth > 0) {
                this.scrollMgrX = this.CreateScrollBarManager(false, h, this.scrollMgrX)
            } else {
                if (this.scrollMgrX) {
                    this.scrollMgrX.Hide()
                }
            }
        } else {
            this.TableCellElement.style.whiteSpace = "";
            if (this.scrollMgrX) {
                this.scrollMgrX.Hide()
            }
        }
        if (this.doScrollY) {
            h = this.GetScrollDimensions(g.width, true);
            if (h.overflowHeight > 0) {
                this.scrollMgrY = this.CreateScrollBarManager(true, h, this.scrollMgrY)
            } else {
                if (this.scrollMgrY) {
                    this.scrollMgrY.Hide()
                }
            }
        } else {
            if (this.scrollMgrY) {
                this.scrollMgrY.Hide()
            }
        }
        if (this.scrollMgrY && this.scrollMgrX) {
            this.scrollMgrY.EnablePaddingElement()
        }
        f.style.overflow = "hidden"
    };
    Qva.Mgr.action = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        this.Attr = "mode";
        f.AddManager(this);
        this.Element = h;
        h.Action = this.Name;
        h.binderid = f.binderid;
        h.onclick = onclick_action;
        f.Append(this, this.Name, "action")
    };
    Qva.Mgr.action.prototype.Lock = Qva.LockDisabled;
    Qva.Mgr.action.prototype.Unlock = Qva.UnlockDisabled;
    Qva.Mgr.action.prototype.Paint = function(m, l) {
        this.Touched = true;
        var j = this.Element;
        j[(m != "e") ? "setAttribute" : "removeAttribute"]("disabled", "");
        j.disabled = (m != "e");
        this.Locked = j.disabled;
        var h = l.getAttribute("label") || j.alt;
        if (h) {
            j.title = h
        }
        j.style.display = Qva.MgrGetDisplayFromMode(this, m);
        if (l.getAttribute("clientaction")) {
            j.onclick = onclick_ContextClientAction;
            j.Name = this.Name;
            j.AvqMgr = this;
            j.clientaction = l.getAttribute("clientaction");
            j.param = l.getAttribute("param")
        }
        j.Position = l.getAttribute("value");
        var k = j.getAttribute("icon");
        if (k) {
            var f = Qva.GetBinder(j.binderid);
            if (j.disabled) {
                k += ".DISABLED"
            }
            var g = f.BuildBinaryUrl(l.getAttribute("path"), null, k);
            j.src = g;
            j.onmouseover = function() {
                this.className = this.disabled ? "" : "prop-dyn-sortable-item-highlighted"
            };
            j.onmouseout = function() {
                this.className = ""
            }
        }
    };
    Qva.Mgr.hr = function(f, j, g, k) {
        if (!Qva.MgrSplit(this, g, k)) {
            return
        }
        f.AddManager(this);
        var h = j.nextSibling;
        while (h && h.tagName != "BUTTON") {
            h = h.nextSibling
        }
        if (h) {
            this.Element = h;
            h.binderid = f.binderid;
            h.Name = this.Name;
            h.moveObj = "*";
            h.xOnly = true;
            h.xMin = 0;
            h.xMax = 100;
            h.disabled = true;
            h.style.cursor = h.disabled ? "" : "pointer";
            b(h).bind("mousedown", Qva.Move.mouseDown)
        }
    };
    Qva.Mgr.hr.prototype.Paint = function(h, g) {
        this.Touched = true;
        var f = this.Element;
        f.disabled = h != "e";
        var j = parseInt(g.getAttribute("text"));
        j = isNaN(j) ? 0 : (j / 2.55);
        f.style.left = j + "px";
        f.style.cursor = f.disabled ? "" : "pointer"
    };
    Qva.Mgr.select = function(f, h, g, j, k) {
        if (h.multiple) {
            Assert(false);
            return
        }
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h;
        this.Condition = k;
        this.Texts = new Array();
        this.Values = new Array();
        this.Disabled = new Array();
        this.Locked = new Array();
        h.binderid = f.binderid;
        h.Name = this.Name;
        h.onchange = Qva.Mgr.select.OnChange;
        h.onclick = Qva.CancelBubble
    };
    Qva.Mgr.select.prototype.Paint = function(o, j) {
        this.Touched = true;
        var l = this.Element;
        var p = {};
        if (typeof(j.nodeType) !== "undefined") {
            Qva.ObjectifyXML(p, j)
        } else {
            p = j
        }
        if (p.mode != "hidden") {
            l.ByValue = p.value != null
        }
        var r = p.text;
        if (this.Dec != null) {
            r = Qva.Trunc(r, this.Dec)
        }
        if (r == null) {
            r = ""
        }
        if (this.TextIfNull && r == "") {
            r = this.TextIfNull
        }
        var q = l.options.length;
        if (p.mode == "enabled" && (this.Condition == null || r != "")) {
            var v = p.choice;
            if (!v) {
                v = []
            }
            if (v.length >= 1) {
                if (v[0].element) {
                    v = v[0].element
                } else {
                    v.length = 0
                }
            }
            var m = (this.Condition == null) ? 0 : 1;
            var u = v.length - m;
            l.options.length = u;
            if (u >= 1) {
                this.SelectedIndex = -1;
                for (var h = 0; h < u; ++h) {
                    var n = v[h + m];
                    var g = n.text;
                    if (this.TextIfNull && g == "") {
                        g = this.TextIfNull
                    }
                    if (this.Dec != null) {
                        g = Qva.Trunc(g, this.Dec)
                    }
                    var f = l.options[h];
                    if (isNaN(g)) {
                        f.text = g.replace(/\t/g, " ")
                    } else {
                        f.text = "" + g
                    }
                    f.value = l.ByValue ? n.value : g;
                    var k = false;
                    if (l.ByValue) {
                        if (f.value == p.value) {
                            this.SelectedIndex = h;
                            k = true
                        }
                    } else {
                        if (g == r) {
                            this.SelectedIndex = h;
                            k = true
                        }
                    }
                    if (k) {
                        f.selected = true
                    }
                }
                if (this.SelectedIndex == -1) {
                    l.options[u - 1].selected = true
                }
            }
            l.disabled = false
        } else {
            l.disabled = true;
            if (q < 1 || this.Condition != null) {
                l.options.length = 1;
                var s = l.options[0];
                if (isNaN(r)) {
                    s.text = (r != null) ? r.replace(/\t/g, " ") : ""
                } else {
                    s.text = "" + r
                }
                s.value = l.ByValue ? j.value : r;
                s.selected = true
            }
        }
        this.Locked = l.disabled;
        l.style.display = p.mode == "hidden" ? "none" : ""
    };
    Qva.Mgr.select.OnChange = function() {
        var f = Qva.GetBinder(this.binderid);
        if (this.selectedIndex < 0) {
            return
        }
        var g = this.options[this.selectedIndex];
        if (this.ByValue === true) {
            f.Set(this.Name, "value", g.value, true)
        } else {
            f.Set(this.Name, "text", g.text, true)
        }
    };
    Qva.Mgr.textSelect = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h;
        this.ByValue = true;
        h.binderid = f.binderid;
        h.Name = this.Name;
        h.onchange = Qva.Mgr.textSelect.OnChange;
        h.onclick = Qva.CancelBubble
    };
    Qva.Mgr.textSelect.OnChange = function() {
        var f = Qva.GetBinder(this.binderid);
        if (!f.Enabled) {
            return
        }
        if (this.selectedIndex < 0) {
            return
        }
        var g = this.options[this.selectedIndex];
        f.Set(this.Name, "text", g.value, true)
    };
    Qva.Mgr.textSelect.prototype.Paint = function(l, k) {
        this.Touched = true;
        var g = this.Element;
        var h = k.getAttribute("value");
        if (h == null) {
            h = ""
        }
        var j = g.options.length;
        g.disabled = l != "e";
        for (var f = 0; f < j; ++f) {
            if (g.options[f].value === h) {
                g.selectedIndex = f
            }
        }
        g.style.display = Qva.MgrGetDisplayFromMode(this, l)
    };
    Qva.Mgr.binary = function(f, h, g, j) {
        h.Name = this.Name = Qva.MgrMakeName(g, j);
        h.binderid = f.binderid;
        h.ObjectId = f.Element.ObjectId;
        f.AddManager(this);
        this.Element = h
    };
    Qva.Mgr.binary.prototype.Paint = function(m, l) {
        this.Touched = true;
        var j = this.Element;
        j.style.display = Qva.MgrGetDisplayFromMode(this, m);
        if (j.style.display == "none") {
            return
        }
        if (!this.PageBinder.BuildBinaryUrl) {
            return
        }
        var k = (m != "e");
        var h = l.getAttribute("stamp");
        if (h != "0" && this.PageBinder.BuildBinaryUrl) {
            var g = h ? this.Name : l.getAttribute("name");
            if (k) {
                g += ".DISABLED"
            }
            var f = this.PageBinder.BuildBinaryUrl(l.getAttribute("path"), h, g);
            this.avq_url = f
        }
        this.PageBinder.QueuePostPaintMessage(this)
    };
    Qva.Mgr.binary.prototype.PostPaint = function() {
        var g = this.Element;
        if (g.style.display == "none") {
            return
        }
        var f = this.avq_url;
        if (this.avq_url) {
            g.src = f
        }
        g.style.display = "block"
    };
    Qva.Mgr.button = function(f, h, g, j) {
        h.Name = this.Name = Qva.MgrMakeName(g, j);
        h.binderid = f.binderid;
        h.ObjectId = f.Element.ObjectId;
        f.AddManager(this);
        this.Element = h
    };
    Qva.Mgr.button.prototype.Paint = Qva.Mgr.binary.prototype.Paint;
    Qva.Mgr.button.prototype.PostPaint = function() {
        var k = this.Element;
        if (k.style.display == "none") {
            return
        }
        var f = null;
        if (k.tagName != "BUTTON") {
            Assert(false)
        }
        for (var j = 0; j < k.childNodes.length; j++) {
            if (k.childNodes[j].tagName == "IMG") {
                f = k.childNodes[j];
                break
            }
        }
        if (f) {
            var h = this.avq_url;
            var m = false;
            var n = this.PageBinder.IsHosted;
            if (k.style.width != "" && k.style.height != "") {
                var g = Qva.GetObjectBinder(k);
                var l = g.GetImageSize(k);
                if ((IS_GECKO || IS_CHROME)) {
                    l.width -= 3;
                    l.height -= 1
                }
                if (n && (this.GraphWidth != l.width || this.GraphHeight != l.height)) {
                    this.GraphWidth = l.width;
                    this.GraphHeight = l.height;
                    m = true
                }
                h += "&width=" + Qva.EncodeComponent(l.width);
                h += "&height=" + Qva.EncodeComponent(l.height)
            }
            if (this.avq_url) {
                h = Qva.AddProxyIfAny(h);
                h = Qva.XrfSecure(h);
                f.src = h
            }
            if (m) {
                this.PageBinder.SetSize(this.Name, this.GraphWidth + ":" + this.GraphHeight)
            }
            f.style.display = "block"
        } else {
            Assert(false)
        }
    };
    Qva.SpecialActions = {};
    Qva.SpecialActions.list = [];
    Qva.SpecialActions.AddAction = function(k, g, f, j, h) {
        this[k] = {keycode: g, document: f, ctrl: j, shift: h};
        this.list[this.list.length] = {id: k, keycode: g, document: f, ctrl: j, shift: h}
    };
    Qva.SpecialActions.AddAction("REDO", 89, true, true, false);
    Qva.SpecialActions.AddAction("UNDO", 90, true, true, false);
    Qva.SpecialActions.AddAction("LS", 76, true, true, true);
    Qva.SpecialActions.AddAction("US", 85, true, true, true);
    Qva.SpecialActions.AddAction("CLEARSTATE", 68, true, true, true);
    Qva.SpecialActions.AddAction("BCK", 37, true, false, true);
    Qva.SpecialActions.AddAction("FWD", 39, true, false, true);
    Qva.SpecialActions.GetAction = function(h) {
        for (var f = 0; f < this.list.length; f++) {
            var g = this.list[f];
            if (g.keycode == h.keyCode) {
                if (g.ctrl == ctrlKeyPressed(h) && g.shift == h.shiftKey) {
                    return g
                }
                return null
            }
        }
        return null
    };
    Qva.SpecialActions.GetShortcutText = function(h) {
        var f = this[h];
        if (f) {
            var g = "\t";
            if (f.ctrl) {
                g += "Ctrl+ "
            }
            if (f.shift) {
                g += "Shift+ "
            }
            if (f.keycode == 37) {
                g += "Left Arrow"
            } else {
                if (f.keycode == 39) {
                    g += "Right Arrow"
                } else {
                    g += String.fromCharCode(f.keycode)
                }
            }
            return g
        }
        return""
    };
    Qva.MgrLinkScan = function(k, f, j, m) {
        k.LinkParts = j.split("$");
        var h = k.LinkParts.length;
        k.LinkArgs = j.split("$");
        if (h >= 2) {
            for (var l = 1; l < h; l += 2) {
                var g = m + k.LinkParts[l];
                f.Append(k, g);
                k.LinkParts[l] = g
            }
        }
    };
    function a() {
        window.open(this.link)
    }
    Qva.Mgr.link = function(f, h, g, j, k) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        Qva.MgrLinkScan(this, f, k, j);
        f.AddManager(this);
        this.Element = h;
        h.Name = this.Name;
        h.binderid = f.binderid;
        h.onclick = a
    };
    Qva.Mgr.link.prototype.Paint = function(k, h, f) {
        this.Touched = true;
        var g = this.Element;
        if (g.Name == f) {
            g.style.display = Qva.MgrGetDisplayFromMode(this, k)
        }
        for (var j = 1; j < this.LinkParts.length; j += 2) {
            if (this.LinkParts[j] == f) {
                this.LinkArgs[j] = h.getAttribute("text")
            }
        }
        g.link = "";
        for (var j = 0; j < this.LinkArgs.length; j++) {
            g.link += this.LinkArgs[j]
        }
    };
    Qva.Mgr.hover = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h
    };
    Qva.Mgr.hover.prototype.Paint = function(n, l, g) {
        var k = this.Element;
        k.style.display = Qva.MgrGetDisplayFromMode(this, n);
        k.innerHTML = "";
        var f = l.getElementsByTagName("line");
        for (var j = 0; j < f.length; j++) {
            var m = document.createElement("span");
            m.innerText = f[j].getAttribute("text");
            k.appendChild(m);
            var h = document.createElement("br");
            k.appendChild(h)
        }
    };
    Qva.Mgr.dlg = function(f, j, g, k, h) {
        if (!Qva.MgrSplit(this, g, k)) {
            return
        }
        f.AddManager(this);
        this.Element = j;
        if (h.toUpperCase() == "EXPRESSION.QVPP") {
            this.IsExpression = true
        }
        j.binderid = f.binderid;
        j.Name = this.Name;
        j.AvqDialog = h;
        j.onclick = Qva.Mgr.dlg.OnClick;
        j.style.borderColor = "gainsboro";
        j.onmouseover = function() {
            if (!this.disabled) {
                this.style.borderColor = "darkgray"
            }
        };
        j.onmouseout = function() {
            this.style.borderColor = "gainsboro"
        }
    };
    Qva.Mgr.dlg.prototype.Paint = function(l, k) {
        this.Touched = true;
        var h = this.Element;
        h.disabled = (l != "e");
        if (this.IsExpression) {
            h.ExpressionType = k.getAttribute("expression");
            h.Value = k.getAttribute("text");
            this.Value = h.Value;
            this.ExpressionType = h.ExpressionType
        }
        if (k.getAttribute("label")) {
            h.title = k.getAttribute("label")
        }
        if (h.tagName == "IMG") {
            var j = h.getAttribute("icon");
            if (j) {
                if (h.disabled) {
                    j += ".DISABLED"
                }
                var f = Qva.GetBinder(h.binderid);
                var g = f.BuildBinaryUrl(null, null, j);
                h.src = g
            }
        }
        h.style.display = Qva.MgrGetDisplayFromMode(this, l)
    };
    Qva.Mgr.dlg.OnClick = function() {
        if (this.disabled) {
            return
        }
        var g = Qva.GetBinder(this.binderid);
        if (this.ExpressionType) {
            Qva.ExpressionDialog(this, this.Value)
        } else {
            if (Qva.ContextDialogBtn == this) {
                Qva.HideContextDialog()
            } else {
                var f = this;
                g.LoadHtml(this.AvqDialog, function(h) {
                    Qva.ShowContextDialog(f, h);
                    g.Refresh()
                })
            }
        }
    };
    Qva.Mgr.panel = function(g, h, f, m, k) {
        if (!Qva.MgrSplit(this, f, m)) {
            return
        }
        g.AddManager(this);
        this.Element = h;
        h.SelfScanning = true;
        var j = g.PageBinder;
        while (j && !j.LoadHtml) {
            j = PageBinder.PageBinder
        }
        var l = this.Name;
        if (h.tagName == "TR") {
            h.cells[0].onclick = function() {
                Qva.SelectToolPane(this, false)
            };
            h.cells[1].onclick = function() {
                Qva.SelectToolPane(this, true)
            };
            var n = document.createElement("img");
            n.src = j.BuildBinaryUrl("", null, "web:unpinned");
            h.cells[1].appendChild(n);
            var o = h.parentNode.parentNode.rows[h.rowIndex + 1].cells[0];
            j.LoadHtml(k, function(p) {
                o.innerHTML = p;
                g.Scan(l, o)
            })
        } else {
            j.LoadHtml(k, function(p) {
                h.innerHTML = p;
                if (g.ScanAndPaint) {
                    g.ScanAndPaint(l, h.firstChild)
                } else {
                    g.Scan(l, h.firstChild);
                    g.Paint()
                }
            })
        }
    };
    Qva.Mgr.panel.prototype.Paint = function(g, f) {
        this.Touched = true
    };
    Qva.Mgr.style = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h;
        this.InlineStyle = f.InlineStyle
    };
    Qva.Mgr.style.prototype.Remove = function() {
        b(this.Element).html("").remove()
    };
    Qva.Mgr.style.prototype.Paint = function(j, g) {
        this.Touched = true;
        var h = this.PageBinder.PageBinder.isSmallDevices, f = 14;
        if (this.InlineStyle) {
            if (h) {
                this.PageBinder.FontAspectRatio = f / (parseFloat(g.getAttribute("fontsize")) || 9);
                g.setAttribute("fontsize", f)
            }
            SetElementStyle(this.Element, "fontWeight", g.getAttribute("fontweight"));
            SetElementStyle(this.Element, "textAlign", g.getAttribute("textalign"));
            SetElementStyle(this.Element, "verticalAlign", g.getAttribute("verticalalign"));
            SetElementStyle(this.Element, "fontFamily", g.getAttribute("fontfamily"));
            SetElementStyle(this.Element, "fontSize", g.getAttribute("fontsize"), "pt");
            SetElementStyle(this.Element, "fontStyle", g.getAttribute("fontstyle"));
            SetElementStyle(this.Element, "textDecoration", g.getAttribute("textdecoration"));
            SetElementStyle(this.Element, "paddingTop", g.getAttribute("paddingTop"), "px");
            SetElementStyle(this.Element, "paddingLeft", g.getAttribute("paddingLeft"), "px");
            SetElementStyle(this.Element, "paddingRight", g.getAttribute("paddingRight"), "px");
            SetElementStyle(this.Element, "paddingBottom", g.getAttribute("paddingBottom"), "px");
            if (g.getAttribute("color") && !h) {
                SetElementColorStyle(this.Element, "color", g.getAttribute("color"))
            }
        }
    };
    Qva.Mgr.bookmarksselect = function(f, h, g) {
        if (f.BookmarksSubscribers) {
            f.BookmarksSubscribers[f.BookmarksSubscribers.length] = this
        }
        this.Element = h;
        h.binderid = f.binderid;
        h.Name = g;
        h.onchange = Qva.Mgr.bookmarksselect.OnChange;
        h.onclick = Qva.CancelBubble;
        if (f.BookmarksMgr) {
            this.Paint(f.BookmarksMgr)
        }
    };
    Qva.Mgr.bookmarksselect.prototype.Paint2 = function(o, m, p) {
        var k = this.Element;
        var n = k.options.length;
        var q = o.length;
        k.options.length = q;
        if (q >= 1) {
            this.SelectedIndex = -1;
            for (var h = 0; h < q; ++h) {
                var l = o[h];
                var g = "" + l.text;
                var f = k.options[h];
                f.text = g.replace(/\t/g, " ");
                f.value = l.value;
                var j = false;
                if (f.value == m) {
                    this.SelectedIndex = h;
                    j = true
                }
                if (j) {
                    f.selected = true
                }
            }
            if (this.SelectedIndex == -1) {
                k.options[q - 1].selected = true
            }
        }
        k.disabled = p == "disabled"
    };
    Qva.Mgr.bookmarksselect.prototype.Paint = function(f) {
        if (!f) {
            return
        }
        this.Paint2(f.BookMarks, f.CurrentValue, f.Mode)
    };
    Qva.Mgr.bookmarksselect.OnChange = function() {
        var f = Qva.GetBinder(this.binderid);
        if (!f.Enabled) {
            return
        }
        if (this.selectedIndex < 0) {
            return
        }
        var g = this.options[this.selectedIndex];
        f.Set(this.Name, "value", g.value, true);
        this.blur()
    };
    Qva.Mgr.reportsselect = function(f, h, g) {
        if (f.ReportsSubscribers) {
            f.ReportsSubscribers[f.ReportsSubscribers.length] = this
        }
        this.Element = h;
        h.binderid = f.binderid;
        h.Name = g;
        h.onchange = Qva.Mgr.bookmarksselect.OnChange;
        h.onclick = Qva.CancelBubble;
        if (f.ReportsMgr) {
            this.Paint(f.ReportsMgr)
        }
    };
    Qva.Mgr.reportsselect.prototype.Paint = function(f) {
        if (!f) {
            return
        }
        this.Paint2(f.Reports, f.CurrentValue, f.Mode)
    };
    Qva.Mgr.reportsselect.prototype.Paint2 = Qva.Mgr.bookmarksselect.prototype.Paint2;
    Qva.Mgr.reports = function(f, g) {
        if (!Qva.MgrSplit(this, g, "Document")) {
            return
        }
        f.AddManager(this);
        this.Reports = []
    };
    Qva.Mgr.reports.prototype.Paint = function(l, j, h) {
        this.CurrentText = j.getAttribute("text");
        this.CurrentValue = j.getAttribute("value");
        this.Mode = j.getAttribute("mode");
        var g = j.firstChild;
        this.Reports.length = 0;
        if (g.nodeName == "choice") {
            for (var k = g.firstChild; k; k = k.nextSibling) {
                var f = {};
                ObjectifyXmlAttributes(f, k);
                this.Reports[this.Reports.length] = f
            }
        } else {
            Assert(false)
        }
        this.PageBinder.UpdateReports()
    };
    Qva.Mgr.bookmarks = function(f, g) {
        if (!Qva.MgrSplit(this, g, "Document")) {
            return
        }
        f.AddManager(this);
        this.BookMarks = []
    };
    Qva.Mgr.bookmarks.prototype.Paint = function(m, k, h) {
        this.CurrentText = k.getAttribute("text");
        this.CurrentValue = k.getAttribute("value");
        this.Mode = k.getAttribute("mode");
        var g = k.firstChild;
        this.BookMarks.length = 0;
        var f = null;
        if (g.nodeName == "choice") {
            for (var l = g.firstChild; l; l = l.nextSibling) {
                var j = {};
                ObjectifyXmlAttributes(j, l);
                this.BookMarks[this.BookMarks.length] = j;
                if (this.NewBookmarkName && this.NewBookmarkCallback) {
                    if (j.text == this.NewBookmarkName) {
                        f = j.value
                    }
                }
            }
        } else {
            Assert(false)
        }
        if (f) {
            this.NewBookmarkCallback(f);
            this.NewBookmarkName = null;
            this.NewBookmarkCallback = null
        }
        this.PageBinder.UpdateBookMarks()
    };
    Qva.Mgr.bookmarks.prototype.NewBookmark = function(g, n, o, l, f, m, k, p, h) {
        var j = {};
        j.bmname = g;
        if (n) {
            j.additive = "true"
        }
        if (o) {
            j.share = "true"
        }
        if (l) {
            j.excludeselections = "true"
        }
        if (f) {
            j.layoutstate = "true"
        }
        if (m) {
            j.hide = "true"
        }
        if (k) {
            j.showpopupinfo = "true"
        }
        if (p) {
            j.infomsg = p
        }
        if (h) {
            j.inputfieldvaluesflag = "true"
        }
        this.PageBinder.Set(this.Name, j)
    };
    Qva.Mgr.bookmarks.prototype.NewBookmarkExtended = function(n, g, m, o, k, f, l, j, p, h) {
        this.NewBookmarkName = g;
        this.NewBookmarkCallback = n;
        this.NewBookmark(g, m, o, k, f, l, j, p, h)
    };
    Qva.Mgr.bookmarks.prototype.SelectBookmark = function(f) {
        this.PageBinder.Set(this.Name, "value", f, true)
    };
    Qva.Mgr.bookmarks.prototype.DeleteBookmark = function(f) {
        this.PageBinder.Set(this.Name, "delete", f, true)
    };
    Qva.Mgr.selectionsstyle = function(f, g) {
        if (!Qva.MgrSplit(this, g, "Document")) {
            return
        }
        f.AddManager(this);
        this.Styles = []
    };
    Qva.Mgr.selectionsstyle.prototype.GetSelectionStyle = function(g) {
        for (var f = 0; f < this.Styles.length; f++) {
            if (this.Styles[f].name == g) {
                return this.Styles[f]
            }
        }
        Assert(false);
        return null
    };
    Qva.Mgr.selectionsstyle.prototype.Paint = function(q, l, k) {
        var m = l.firstChild;
        this.Styles.length = 0;
        if (m.nodeName == "state") {
            for (; m; m = m.nextSibling) {
                var j = {};
                j.name = m.getAttribute("name");
                ObjectifyXmlAttributes(j, m);
                this.Styles[this.Styles.length] = j
            }
        } else {
            Assert(false)
        }
        var g = false;
        for (var n = 0; n < document.styleSheets.length; n++) {
            if (g) {
                break
            }
            var r;
            try {
                r = document.styleSheets[n].rules ? document.styleSheets[n].rules : document.styleSheets[n].cssRules
            } catch (p) {
                continue
            }
            if (!r) {
                continue
            }
            for (var h = 0; h < this.Styles.length; h++) {
                for (var o = 0; o < r.length; o++) {
                    var j = r[o];
                    if (j.selectorText == (".Qv" + this.Styles[h].name)) {
                        g = true;
                        j.style.color = HtmlifyARGB(this.Styles[h].color);
                        var f = Qva.Hex2CSSExpression(this.Styles[h].backgroundcolor);
                        if (!f) {
                            f = HtmlifyARGB(this.Styles[h].backgroundcolor)
                        }
                        j.style.backgroundColor = f
                    }
                }
            }
        }
        Assert(g)
    };
    Qva.Mgr.translations = function(f, g) {
        if (!Qva.MgrSplit(this, g, "Document")) {
            return
        }
        f.AddManager(this)
    };
    Qva.Mgr.translations.prototype.Paint = function(j, h, g) {
        var f = this.PageBinder;
        f.Translations = {};
        b(h).find("translate").each(function() {
            f.Translations[this.getAttribute("name")] = this.getAttribute("text")
        })
    };
    Qva.Extensions = function(f) {
        this.Name = f.DefaultScope + ".Extensions";
        this.PageBinder = f;
        f.AddManager(this);
        this.Extensions = {};
        this.Members = []
    };
    Qva.AddDocumentExtensionBase = function(g, f) {
        if (!Qva.Mgr[g]) {
            Qva.Mgr[g] = function(h) {
                this.Document = new Qv.Document(h.ID)
            }
        }
    };
    Qva.Extensions.prototype.Paint = function(k, h) {
        var f = h.getElementsByTagName("extension");
        for (var g = 0; g < f.length; g++) {
            var j = f[g].getAttribute("path");
            if (this.Extensions[j]) {
                continue
            }
            this.Extensions[j] = true;
            Qva.AddDocumentExtensionBase(j, this.PageBinder);
            this.Members[this.Members.length] = {path: j, object: new Qva.Mgr[j](this.PageBinder)};
            this.PageBinder.QueuePostPaintMessage(this, true)
        }
    };
    Qva.Extensions.prototype.PostPaint = function() {
        var g = true;
        for (var f = 0; f < this.Members.length; f++) {
            if (this.Members[f].object.FirstLoad) {
                continue
            }
            var h = Qva.ExtensionCreator[this.Members[f].path];
            if (h == null) {
                Qva.ExtensionCreator[this.Members[f].path] = Qva.WaitingForRequest;
                Qva.RequestScript(this.Members[f].path, this.PageBinder, "document")
            } else {
                if (h != Qva.WaitingForRequest) {
                    Assert(false)
                }
            }
            g = false
        }
        if (!g) {
            this.PageBinder.QueuePostPaintMessage(this, true);
            return
        }
        for (var f = 0; f < this.Members.length; f++) {
            Qva.ExtensionCreator[this.Members[f].path] = null;
            this.Members[f].object.FirstLoad()
        }
    };
    Qva.AddDocumentExtension = function(g, h, f) {
        if (f) {
            Qva.Mgr[g].prototype.Debug = true
        }
        Qva.Mgr[g].prototype.FirstLoad = function() {
            if (typeof(this.Paint) === "undefined") {
                this.Paint = h
            }
            try {
                this.Paint()
            } catch (j) {
                if (f) {
                    Assert(false, "An error occured in the postpaint-function in the extension object: \n" + j.description)
                }
            }
        }
    };
    Qva.Mgr.Documentdata = function(f, g) {
        if (!Qva.MgrSplit(this, g, "Document")) {
            return
        }
        f.AddManager(this);
        this.Items = []
    };
    function c(g, f) {
        g.SubItems = [];
        for (var h = f.firstChild; h; h = h.nextSibling) {
            g.SubItems[g.SubItems.length] = {};
            c(g.SubItems[g.SubItems.length - 1], h)
        }
        ObjectifyXmlAttributes(g, f)
    }
    Qva.Mgr.Documentdata.prototype.Paint = function(h, f) {
        this.Items = [];
        for (var g = f.firstChild; g; g = g.nextSibling) {
            this.Items[this.Items.length] = {};
            c(this.Items[this.Items.length - 1], g)
        }
    };
    Qva.Mgr.CurrentSelection = function(f) {
        if (!Qva.MgrSplit(this, ".CurrentSelectionData", "Document")) {
            return
        }
        f.AddManager(this);
        this.Settings = {};
        this.Fields = {};
        this.Fields.length = 0
    };
    Qva.Mgr.CurrentSelection.prototype.PostPaint = function() {
    };
    Qva.Mgr.CurrentSelection.prototype.Paint = function(l, h) {
        var f = this.Mode = h.getAttribute("mode");
        if (f != "enabled") {
            if (this.Settings.enabled) {
                this.poll = {name: "CurrentSelectionData", clearcache: "false"};
                this.PageBinder.Send()
            }
        } else {
            if (!this.GenericPaint) {
                this.GenericPaint = Qva.Mgr.object.prototype.GenericPaint
            }
            this.GenericPaint(l, h);
            if (this.Settings.fields.length == 0) {
                return
            }
            var k = null;
            for (var g = 0; g < h.childNodes.length; ++g) {
                if (h.childNodes[g].tagName == "value" && h.childNodes[g].getAttribute("name") == "C0") {
                    k = h.childNodes[g]
                }
            }
            if (k) {
                for (var g = 0; g < k.childNodes.length; ++g) {
                    if (k.childNodes[g].tagName == "element") {
                        var j = k.childNodes[g].getAttribute("text");
                        for (var n = 0; n < this.Settings.fields.length; n++) {
                            if (this.Settings.fields[n].name == j) {
                                if (!this.Fields[j]) {
                                    this.Fields[j] = new Qva.Mgr.field(this.PageBinder, this.Settings.fields[n]);
                                    this.Fields.length++
                                }
                            }
                        }
                    }
                }
            }
            if (this.Fields.length > 0) {
                for (var n = 0; n < this.Settings.fields.length; n++) {
                    if (this.Fields[this.Settings.fields[n].name]) {
                        this.Fields[this.Settings.fields[n].name].GetData(false)
                    }
                }
                this.PageBinder.Send()
            }
        }
    };
    Qva.Mgr.CurrentSelection.prototype.Enable = function() {
        this.Settings.enabled = true
    };
    Qva.Mgr.CurrentSelection.prototype.Disable = function() {
        this.Settings.enabled = false
    };
    Qva.Mgr.CurrentSelection.prototype.Init = function(f) {
        this.Settings = f;
        if (this.Settings.onChange) {
            this.PostPaint = function() {
                this.Settings.onChange.call(this.QvaPublic)
            }
        }
    };
    Qva.Mgr.CurrentSelection.prototype.GetData = function(f) {
        if (f) {
            this.Init(f)
        }
        if (this.Settings.enabled) {
            this.poll = {name: "CurrentSelectionData", clearcache: "true"};
            this.PageBinder.Send()
        }
    };
    Qva.Mgr.CurrentSelection.prototype.IsInvalid = function() {
        return !this.Mode || this.Mode == "invalid"
    };
    Qva.Mgr.CurrentSelection.prototype.GetUpdates = function(f) {
        if (this.Settings.enabled && this.IsInvalid()) {
            var g = clone(this.poll);
            if (this.poll.clearcache) {
                delete this.poll.clearcache
            }
            f.push(g);
            this.Mode = "waiting"
        }
    };
    Qva.Mgr.CurrentSelection.prototype.Size = function() {
    };
    Qva.Mgr.field = function(f, h, g) {
        if (!Qva.MgrSplit(this, ".Fields." + h.name, "Document")) {
            return
        }
        f.AddManager(this);
        this.Type = "Field";
        this.Settings = h;
        var j = this;
        if (this.Settings.onDataLoaded) {
            if (g == d) {
                j.onDataLoaded = this.Settings.onDataLoaded
            } else {
                this.onDataLoaded = function() {
                    j.Settings.onDataLoaded.call(this);
                    j.PageBinder.RemoveFromManagers(j);
                    j.PageBinder.RemoveFromMembers(j)
                }
            }
        }
    };
    Qva.Mgr.field.prototype.PostPaint = function() {
        if ((!this.Settings.size || this.QvaPublic.Data.Rows.length < this.Settings.size) && this.QvaPublic.Data.Rows.length < this.QvaPublic.Data.TotalSize.y && this.QvaPublic.Data.Rows.length == (this.QvaPublic.Data.PageOffset.y + this.QvaPublic.Data.PageSize.y)) {
            this.GetData(true, this.QvaPublic.Data.Rows.length)
        } else {
            this.onDataLoaded.call(this.QvaPublic)
        }
    };
    Qva.Mgr.field.prototype.GetData = function(f, g) {
        this.poll = {name: "Fields." + this.Settings.name, clearcache: "false"};
        if (this.Settings.size && this.Settings.size < 500) {
            this.poll.size = "1:" + this.Settings.size
        }
        if (g) {
            this.poll.offset = "0:" + g
        }
        if (this.Settings.state) {
            this.poll.options = this.Settings.state
        }
        this.Mode = "invalid";
        if (f) {
            this.PageBinder.Send()
        }
    };
    Qva.Mgr.field.prototype.IsInvalid = function() {
        return !this.Mode || this.Mode == "invalid"
    };
    Qva.Mgr.field.prototype.GetUpdates = function(f) {
        if (this.IsInvalid() && this.poll) {
            var g = clone(this.poll);
            if (this.poll.clearcache) {
                delete this.poll.clearcache
            }
            f.push(g);
            this.Mode = "waiting"
        }
    };
    Qva.Mgr.field.prototype.Paint = function(g, f) {
        if (!this.GenericPaint) {
            this.GenericPaint = Qva.Mgr.object.prototype.GenericPaint
        }
        this.GenericPaint(g, f)
    };
    Qva.PageBinding.prototype.GetField = function(g, f) {
        return new Qva.Mgr.field(this, g, f)
    }
})(window.jQuery);
(function(g, b) {
    if (!Qva.Mgr) {
        Qva.Mgr = {}
    }
    Qva.Mgr.objectstyle = function(n, p, o, q) {
        if (!Qva.MgrSplit(this, o, q)) {
            return
        }
        n.AddManager(this);
        this.Element = p;
        this.radiustopleft = -1;
        this.radiustopright = -1;
        this.radiusbottomleft = -1;
        this.radiusbottomright = -1;
        this.shadowintensity = 0;
        this.InlineStyle = n.InlineStyle
    };
    function j(p, s, o, r, n, q) {
        if (!p) {
            return
        }
        p.style["border" + o + "Radius"] = n + "px";
        j(s, null, o, r, n - q)
    }
    function k(q, p, o) {
        var n = parseFloat(o.getAttribute(p));
        if (q[p] != n) {
            q[p] = n;
            return true
        }
        return false
    }
    Qva.Mgr.objectstyle.prototype.ApplyShadowIntensity = function(n) {
        var q = n + "px", p = q + " " + q + " " + n * 2 + "px " + (this.PageBinder.BorderColor || "#999"), o = this.Element.style;
        this.shadowintensity = n;
        o.boxShadow = o.webkitBoxShadow = o.mozBoxShadow = o.oBoxShadow = p
    };
    Qva.Mgr.objectstyle.prototype.Paint = function(v, q, n, x) {
        if (x) {
            return
        }
        if (q.getAttribute("bordercolor")) {
            if (IS_IE && IE_DOCMODE <= 8) {
                this.PageBinder.BorderColor = HtmlifyARGB(q.getAttribute("bordercolor"));
                this.PageBinder.ActiveBorderColor = HtmlifyARGB(q.getAttribute("activebordercolor"))
            } else {
                this.PageBinder.BorderColor = Qva.Hex2RGBA(q.getAttribute("bordercolor"));
                if (q.getAttribute("activebordercolor")) {
                    this.PageBinder.ActiveBorderColor = Qva.Hex2RGBA(q.getAttribute("activebordercolor"))
                }
            }
            if (q.getAttribute("borderstyle")) {
                this.PageBinder.BorderStyle = q.getAttribute("borderstyle")
            }
        }
        this.PageBinder.BorderAroundContent = q.getAttribute("borderposition") == "content";
        var p = parseInt(q.getAttribute("borderwidth"));
        if (isNaN(p)) {
            p = 0
        }
        var z = this.PageBinder.BorderWidth != p;
        this.PageBinder.BorderWidth = p;
        this.PageBinder.ScrollWidth = parseFloat(q.getAttribute("scrollwidth")) || null;
        if (q.getAttribute("scrollbuttoncolor")) {
            if (IS_IE && IE_DOCMODE <= 8) {
                this.PageBinder.ScrollButtonColor = HtmlifyARGB(q.getAttribute("scrollbuttoncolor"))
            } else {
                this.PageBinder.ScrollButtonColor = Qva.Hex2RGBA(q.getAttribute("scrollbuttoncolor"))
            }
        }
        if (q.getAttribute("scrollbkgcolor")) {
            if (IS_IE && IE_DOCMODE <= 8) {
                this.PageBinder.ScrollBkgColor = HtmlifyARGB(q.getAttribute("scrollbkgcolor"))
            } else {
                this.PageBinder.ScrollBkgColor = Qva.Hex2RGBA(q.getAttribute("scrollbkgcolor"))
            }
        }
        this.ApplyShadowIntensity(q.getAttribute("shadowintensity") || 0);
        if (z) {
            this.PageBinder.UpdateMoveAndResizeHandles(this.Element)
        }
        if ((!IS_IE || IE_DOCMODE >= 9) && this.InlineStyle) {
            var u = this.Element;
            var y = q;
            var w = k(this, "radiustopleft", y);
            w |= k(this, "radiustopright", y);
            w |= k(this, "radiusbottomleft", y);
            w |= k(this, "radiusbottomright", y);
            var A = null;
            for (var s = 0; s < u.childNodes.length; s++) {
                var o = u.childNodes[s];
                if (!o.style) {
                    continue
                }
                if (o.style.display == "none") {
                    continue
                }
                if (o.className == "ResizeFrame") {
                    continue
                }
                if (g(o).hasClass("QvAnnotation")) {
                    continue
                }
                A = o;
                break
            }
            if (this.FirstChild != A) {
                this.FirstChild = A;
                w = true
            }
            var r = null;
            for (var s = u.childNodes.length - 1; s >= 0; s--) {
                var o = u.childNodes[s];
                if (!o.style) {
                    continue
                }
                if (o.style.display == "none") {
                    continue
                }
                if (o.className == "MoveZone") {
                    continue
                }
                if (g(o).hasClass("QvAnnotation")) {
                    continue
                }
                r = o;
                break
            }
            if (this.LastChild != r) {
                this.LastChild = r;
                w = true
            }
            if (w == true) {
                j(u, this.FirstChild, "TopLeft", "Topleft", this.radiustopleft, this.PageBinder.BorderWidth);
                j(u, this.FirstChild, "TopRight", "Topright", this.radiustopright, this.PageBinder.BorderWidth);
                j(u, this.LastChild, "BottomRight", "Bottomright", this.radiusbottomright, this.PageBinder.BorderWidth);
                j(u, this.LastChild, "BottomLeft", "Bottomleft", this.radiusbottomleft, this.PageBinder.BorderWidth)
            }
        }
        this.PageBinder.Resized()
    };
    Qva.Mgr.objectstyle.prototype.Remove = function() {
        g(this.Element).html("").remove()
    };
    Qva.PageBinding.prototype.GetMaximizedRect = function(r) {
        var n = document.getElementById("PageContainer");
        var q = Qva.GetAbsolutePageCoords(n).y;
        var v = Qva.GetScrollTop();
        var w = Qva.GetViewportHeight();
        var o = Qva.GetViewportWidth();
        var p = Qva.GetScrollLeft();
        var u = Math.max(v - q, 0);
        if (v < q) {
            w -= (q - v)
        }
        var s = {};
        s.height = "" + w;
        s.width = "" + o;
        s.left = "" + p;
        s.top = "" + u;
        return s
    };
    Qva.Mgr.SizeElement = function(o, q) {
        var w = false;
        var n = parseInt(q.width);
        var u = parseInt(q.height);
        if (isNaN(u)) {
            return false
        }
        if (o.rect == null) {
            var v = g(o).getPath();
            g(o).css("top", parseFloat(q.top) + "px");
            g(o).css("left", parseFloat(q.left) + "px");
            Qva.ElementAttributesHandler(v, o, "left", null, q.left);
            Qva.ElementAttributesHandler(v, o, "top", null, q.top);
            if (!isNaN(n)) {
                Qva.ElementAttributesHandler(v, o, "initwidth", null, q.width);
                Qva.ElementAttributesHandler(v, o, "initheight", null, q.height)
            }
            w = true
        } else {
            if (q.height != g(o).css("height") || q.width != g(o).css("width") || q.top != g(o).css("top") || q.left != g(o).css("left")) {
                if (q.top != parseInt(g(o).css("top"))) {
                    g(o).css("top", parseFloat(q.top) + "px")
                }
                if (q.left != parseInt(g(o).css("left"))) {
                    g(o).css("left", parseFloat(q.left) + "px")
                }
                if (q.width != o.rect.width || q.height != o.rect.height) {
                    if (!isNaN(n)) {
                        if (o.className.indexOf("_LB") == -1) {
                            o.style.width = n + "px";
                            o.style.height = u + "px";
                            w = true
                        }
                        if (o.className.indexOf("_SO") > -1) {
                            var s = parseInt(g(o).find("span").width());
                            var p = parseInt(g(o).css("border-left-width")) + parseInt(g(o).css("border-right-width"));
                            var r = n - s - p - 6;
                            g(o).find("input").css("width", r + "px")
                        }
                    }
                }
            }
        }
        o.rect = q;
        return w
    };
    Qva.Mgr.CreateAndUpdateResizeHandles = function(x, B, q, J) {
        var K = 2;
        var H = 2;
        var w = 4;
        var u = 4;
        var C = parseInt(x.style.width);
        var o = parseInt(g(x).height());
        if (parseInt(g(x).css("borderTopWidth")) != 0 && !IS_IE6_OR_IE7) {
            o = o + 2 * B
        }
        if (IS_IE6_OR_IE7) {
            if (!isNaN(parseInt(g(x).css("borderTopWidth")))) {
                C += 2 * B;
                o += 2 * B
            }
            g(x).css("position", "absolute !important")
        }
        var F = x.id + "_resize";
        var v = document.getElementById(F);
        if (!v) {
            var v = document.createElement("div");
            v.id = F;
            v.className = "ResizeFrame";
            v.ResizeType = "Parent";
            x.insertBefore(v, x.firstChild)
        }
        if (IS_IE6_OR_IE7) {
            if (parseInt(g(x).css("borderTopWidth")) != 0) {
                v.style.left = "0px";
                v.style.top = "0px"
            }
        } else {
            v.style.left = -B + "px";
            v.style.top = -B + "px"
        }
        var n = q ? ["br", "r", "b"] : ["br", "r", "b", "bl", "l", "tl", "t", "tr"];
        switch (J) {
            case"height":
                n = ["t", "b"];
                break;
            case"width":
                n = ["l", "r"];
                break
        }
        for (var D = 0; D < n.length; D++) {
            var p = x.id + "_resize_" + n[D];
            var I = document.getElementById(p);
            if (!I) {
                var I = document.createElement("div");
                I.id = p;
                I.ResizeType = n[D];
                v.appendChild(I);
                I.className = "ResizeZone"
            }
            var G = 0;
            var E = 0;
            if (IS_IE6_OR_IE7) {
                G = -B;
                E = -B
            }
            if (n[D].indexOf("r") != -1) {
                var s = G + C - w
            } else {
                if (n[D].indexOf("l") != -1) {
                    var s = G - u
                } else {
                    var s = G + w
                }
            }
            if (n[D].indexOf("b") != -1) {
                var y = E + o - w
            } else {
                if (n[D].indexOf("t") != -1) {
                    var y = E - H
                } else {
                    var y = E + w
                }
            }
            if (n[D].indexOf("r") != -1 || n[D].indexOf("l") != -1) {
                var A = w + u
            } else {
                var A = C - 2 * w
            }
            if (n[D].indexOf("b") != -1) {
                var z = w + u
            } else {
                if (n[D].indexOf("t") != -1) {
                    var z = w + H
                } else {
                    var z = o - 2 * w
                }
            }
            var r = "";
            if (n[D].indexOf("t") != -1) {
                r = "n"
            } else {
                if (n[D].indexOf("b") != -1) {
                    r = "s"
                }
            }
            if (n[D].indexOf("l") != -1) {
                r += "w"
            } else {
                if (n[D].indexOf("r") != -1) {
                    r += "e"
                }
            }
            I.style.cssText = "width: " + A + "px; height: " + z + "px; cursor: " + r + "-resize; left: " + s + "px; top: " + y + "px;";
            I.onmousedown = function(L) {
                Qva.Resize.mouseDown(L, x)
            }
        }
    };
    Qva.Mgr.CreateOrDeleteMoveHandle = function(o, r, p, s) {
        var v = o.id + "_move";
        var n = document.getElementById(v);
        if (p) {
            var w = s ? parseInt(o.style.height) : 4, u = s ? 0 : -6 - r, q = parseInt(o.style.width);
            if (IS_IE6_OR_IE7) {
                q += 2 * r
            }
            if (q < 10) {
                q = 10
            }
            if (!n) {
                n = document.createElement("div");
                n.id = v;
                n.className = "MoveZone";
                n.style.cssText = "width: " + q + "px; height: " + w + "px; left: " + 0 + "px; top: " + u + "px;";
                n.Name = o.Name;
                n.moveObj = o.id;
                n.yMin = 0;
                n.xMin = 0;
                g(n).bind("mousedown", Qva.Move.mouseDown);
                n.binderid = o.binderid;
                o.appendChild(n)
            }
            n.style.cssText = "width: " + q + "px; height: " + w + "px; left: " + 0 + "px; top: " + u + "px;"
        } else {
            if (n) {
                o.removeChild(n)
            }
        }
    };
    Qva.Mgr.object = function(o, p, n, r, q) {
        if (!Qva.MgrSplit(this, n, r)) {
            return
        }
        o.AddManager(this);
        this.Managers = new Array();
        this.Members = {};
        this.Element = p;
        this.binderid = o.binderid;
        p.binderid = o.binderid;
        p.ObjectId = p.id;
        p.Name = this.Name;
        p.AvqMgr = this;
        this.LeftButton = o.LeftButton;
        this.TableLimit = o.TableLimit;
        this.IsHosted = o.IsHosted;
        this.FirstTime = true;
        this.FontAspectRatio = 1;
        this.BorderColor = null;
        this.BorderStyle = null;
        this.BorderWidth = 0;
        this.MinWidth = 0;
        this.MinHeight = 0;
        var w = q != null && q.type == "TW";
        if (w) {
            var u = this;
            g(p).bind("click", function(y) {
                u.PageBinder.ToolWindowZLevel.PromoteDialog(n)
            })
        } else {
            if (Qva.LabelClick) {
                p.onclick = function(y) {
                    Qva.GetBinder(o.binderid).SetClick(y, this.ObjectId)
                }
            }
        }
        Qva.DragDrop.DropFrames[Qva.DragDrop.DropFrames.length] = this;
        var s = o.DefaultScope + ".DS";
        if (Qva.LabelClick && this.PageBinder.CreateTransientListBox && o.Members && !o.Members[s]) {
            this.PageBinder.CreateTransientListBox(s)
        }
        this.InlineStyle = o.InlineStyle;
        if (p.getAttribute("AvqStyle")) {
            this.InlineStyle = p.getAttribute("AvqStyle") == "true"
        }
        new Qva.Mgr.objectstyle(this, this.Element, n + ".Style", r);
        var n = this.Name.substr("Document.".length);
        this.poll = {name: n, clearcache: "true"};
        this.PostPaintQueue = [];
        if (q == null || q.id != "DS") {
            var x = document.createElement("div");
            x.style.display = "none";
            x.innerText = " ";
            p.appendChild(x);
            if (!this.PageBinder.isSmallDevices) {
                this.Caption = new Qva.Mgr.caption(this, x, this.Name + ".Caption", (w ? "QvCaption_Prop" : "QvCaption"), (w ? Qva.Mgr.caption.prototype.PropertiesPaint : Qva.Mgr.caption.prototype.CaptionPaint))
            }
        } else {
            this.FirstTime = false
        }
        var v = document.createElement("div");
        v.className = "QvContent";
        if (this.PageBinder.GetDocumentMgr().Platform == "WORKBENCH" || this.PageBinder.GetDocumentMgr().Platform == "WEBPARTS") {
            v.style.cssText = "height:100%; width:100%;"
        } else {
            v.style.cssText = "height:auto; width:auto;"
        }
        p.appendChild(v);
        this.ContentElement = v;
        if (!this.PageBinder.isSmallDevices) {
            new Qva.Mgr.background(this, v, this.Name + ".Background");
            new Qva.Mgr.fullsize(this, v, this.Name)
        }
    };
    Qva.Mgr.object.prototype.Remove = function() {
        var n;
        for (n = 0; n < this.Managers.length; n++) {
            if (this.Managers[n].Remove) {
                this.Managers[n].Remove()
            }
            this.Managers[n] = {}
        }
        for (n = 0; n < Qva.DragDrop.DropFrames.length; ++n) {
            if (Qva.DragDrop.DropFrames[n] === this) {
                Qva.DragDrop.DropFrames[n] = Qva.DragDrop.DropFrames[Qva.DragDrop.DropFrames.length - 1];
                Qva.DragDrop.DropFrames.length = Qva.DragDrop.DropFrames.length - 1
            }
        }
        this.Managers = {};
        Qva.RemoveHtml(this.Mask);
        Qva.RemoveHtml(this.Element)
    };
    Qva.Mgr.object.prototype.UpdateMoveAndResizeHandles = function(o, p, r) {
        var n = false;
        if (r) {
            this.AllowResize = r.allowresize == "true";
            this.AllowMove = r.allowmove == "true";
            n = r.allowresize == "height"
        }
        var q = this.BorderAroundContent ? 0 : this.BorderWidth;
        if (this.AllowResize || n) {
            Qva.Mgr.CreateAndUpdateResizeHandles(o, q, p, n ? "height" : "true")
        } else {
            var s = o.firstChild;
            if (s && s.className != "ResizeFrame") {
                s = null
            }
            if (s) {
                o.removeChild(s)
            }
        }
        Qva.Mgr.CreateOrDeleteMoveHandle(o, q, this.AllowMove, p)
    };
    Qva.Mgr.object.prototype.Size = function(q) {
        var o = this.Element;
        var n = window.document.getElementById(o.id + "_minimized");
        var p = {};
        p.left = q.left;
        p.top = q.top;
        p.width = q.width;
        p.height = q.height;
        this.Maximized = false;
        var r = q.mode;
        if (r == "minimized") {
            o.style.display = "none";
            if (!n) {
                return
            }
            n.style.display = "";
            if (Qva.Mgr.SizeElement(n, p)) {
                g(n).height(q.height);
                this.UpdateMoveAndResizeHandles(n, true, q)
            }
        } else {
            if (r == "hidden") {
                if (n) {
                    n.style.display = "none"
                }
                o.style.display = "none"
            } else {
                if (r == "maximized" || q.maximized == "true") {
                    this.Maximized = true;
                    p = this.PageBinder.GetMaximizedRect && this.PageBinder.GetMaximizedRect(o);
                    if (n) {
                        n.style.display = "none"
                    }
                    if (Qva.Mgr.SizeElement(o, p)) {
                        this.Resized();
                        q.allowmove = false;
                        q.allowresize = false;
                        this.UpdateMoveAndResizeHandles(o, false, q)
                    }
                    o.style.display = ""
                } else {
                    if (q.left != null) {
                        if (n) {
                            n.style.display = "none"
                        }
                        if (Qva.Mgr.SizeElement(o, p)) {
                            this.Resized();
                            this.UpdateMoveAndResizeHandles(o, false, q)
                        } else {
                            this.UpdateMoveAndResizeHandles(o, false, q)
                        }
                        o.style.display = ""
                    }
                }
            }
        }
    };
    Qva.Mgr.object.prototype.Resized = function() {
        this.SetObjectWidth(0);
        this.SetObjectHeight(0, null, true);
        for (var n = 0; n < this.Managers.length; ++n) {
            if (!this.Managers[n].PostPaint) {
                continue
            }
            if (this.Managers[n].Fixed) {
                this.Managers[n].Fixed = false
            }
            this.QueuePostPaintMessage(this.Managers[n])
        }
    };
    Qva.Mgr.object.prototype.HandleKeyUp = function(n) {
        var o = Qva.SpecialActions.GetAction(n);
        if (o) {
            if (!o.document) {
                this.Set(this.Name + "." + o.id, "action", "", true);
                return true
            } else {
                Assert(false)
            }
        }
        return false
    };
    Qva.Mgr.object.prototype.Inside = function(v, r) {
        var s = this.Element;
        var q = Qva.GetPageCoords(s);
        var p = parseInt(s.offsetWidth);
        var n = parseInt(s.offsetHeight);
        if (v.x > q.x && v.x < q.x + p && v.y > q.y && v.y < q.y + n) {
            for (var u = 0; u < this.DropTypes.length; u++) {
                var o = this.DropTypes[u];
                if (o == r) {
                    return{Element: s, Dialog: "Drop.qvpp"}
                }
            }
            return{Element: null}
        }
        return null
    };
    Qva.Mgr.object.prototype.PostPaint = function() {
        if (!this.Element) {
            return
        }
        if (this.Extension) {
            if (!this.FirstTime && !Qva.Mgr[this.Extension].prototype.PostPaint) {
                var p = Qva.ExtensionCreator[this.Extension];
                if (p == null) {
                    Qva.ExtensionCreator[this.Extension] = Qva.WaitingForRequest;
                    Qva.RequestScript(this.Extension, this.PageBinder)
                } else {
                    if (p != Qva.WaitingForRequest) {
                        Assert(false)
                    }
                }
                this.PageBinder.QueuePostPaintMessage(this);
                return
            } else {
                Qva.ExtensionCreator[this.Extension] = null
            }
        }
        if (this.PostPaintQueue.length == 0) {
            return
        }
        var n = this.PostPaintQueue;
        this.PostPaintQueue = [];
        for (var o = 0; o < n.length; ++o) {
            if (n[o].PostPaint) {
                n[o].PostPaint()
            }
        }
    };
    Qva.Mgr.object.prototype.QueuePostPaintMessage = function(o) {
        for (var n = 0; n < this.PostPaintQueue.length; ++n) {
            if (this.PostPaintQueue[n] == o) {
                return
            }
        }
        this.PostPaintQueue.push(o);
        this.PageBinder.QueuePostPaintMessage(this)
    };
    Qva.Mgr.object.prototype.CreateBookmarkButton = function(s, u) {
        var n = s.insertCell(-1);
        n.style.cssText = "padding:0px 2px 0px 2px;";
        var q = document.createElement("button");
        q.setAttribute("type", "button");
        var p = document.createElement("img");
        p.galleryimg = "no";
        p.style.cssText = "float:left;";
        q.appendChild(p);
        var o = document.createTextNode(" ");
        q.appendChild(o);
        var r = document.createElement("span");
        q.appendChild(r);
        q.PageBinder = this;
        q.onmouseover = function() {
            this.style.border = "outset 1px Gray"
        };
        q.onmouseout = function() {
            this.style.border = "outset 1px Transparent"
        };
        n.appendChild(q);
        new Qva.Mgr.visibility(this, n, this.Name + u);
        new Qva.Mgr.action(this, q, this.Name + u);
        new Qva.Mgr.style(this, q, this.Name + ".Style");
        new Qva.Mgr.binary(this, p, this.Name + u);
        new Qva.Mgr.text(this, r, this.Name + u);
        new Qva.Mgr.style(this, q, this.Name + u)
    };
    Qva.Mgr.object.prototype.CreateBookmark = function() {
        this.ContentElement.className += " QvBookmarkObject";
        var s = document.createElement("table");
        var o = document.createElement("colgroup");
        var q = document.createElement("col");
        q.style.cssText = "width:45%;";
        o.appendChild(q);
        q = document.createElement("col");
        q.style.cssText = "width:55%;";
        o.appendChild(q);
        s.appendChild(o);
        var u = s.insertRow(-1);
        var p = u.insertCell(-1);
        p.style.cssText = "padding:2px 4px 10px 4px;";
        p.colSpan = 2;
        var n = document.createElement("select");
        p.appendChild(n);
        var r = s.insertRow(-1);
        this.CreateBookmarkButton(r, ".ADD");
        this.CreateBookmarkButton(r, ".REM");
        this.ContentElement.appendChild(s);
        new Qva.Mgr.bookmarksselect(this.PageBinder.GetDocumentMgr(), n, this.PageBinder.GetDocumentMgr().DefaultScope + ".Bookmarks");
        new Qva.Mgr.style(this, n, this.Name + ".Style")
    };
    Qva.Mgr.object.prototype.CreateButton = function() {
        this.ContentElement.className += " QvButton";
        var o = document.createElement("button");
        o.setAttribute("type", "button");
        o.style.cssText = "cursor: pointer; width: auto; height: auto;";
        var n = document.createElement("img");
        n.galleryimg = "no";
        o.appendChild(n);
        this.ContentElement.appendChild(o);
        new Qva.Mgr.actions(this, o, this.Name + ".Content");
        new Qva.Mgr.button(this, o, this.Name + ".Content")
    };
    Qva.Mgr.object.prototype.CreateTextOrLineObject = function(o) {
        if (o) {
            var p = document.createElement("table");
            p.className = "TextObject";
            g(this.Element).attr("objType", "TextObject");
            p.style.cssText = "line-height: 1.3; width: 100%; height:100%;";
            var q = p.insertRow(-1);
            var n = q.insertCell(-1);
            if (IS_TOUCHENABLED) {
                var r = g("<div/>");
                r.append(p);
                this.ContentElement.appendChild(r[0])
            } else {
                this.ContentElement.appendChild(p)
            }
            this.ContentElement.style.overflow = "hidden";
            new Qva.Mgr.text(this, n, this.Name + ".Content");
            new Qva.Mgr.style(this, n, this.Name + ".Style");
            new Qva.Mgr.style(this, n, this.Name + ".Content.Style");
            if (IS_TOUCHENABLED) {
                new Qva.Mgr.qvscroll(this, r, this.Name + ".Content.Style")
            } else {
                new Qva.Mgr.scroll(this, this.ContentElement, this.Name + ".Content.Style")
            }
        }
        new Qva.Mgr.actions(this, this.ContentElement, this.Name + ".Content")
    };
    Qva.Mgr.object.prototype.CreateListBox = function() {
        var n = document.createElement("div");
        n.className = "QvListbox";
        g(n).attr("objType", "Listbox");
        g(n).css("visibility", "hidden");
        this.ContentElement.appendChild(n);
        var o = new Qva.Mgr.listbox(this, n, this.Name, "", this.PageBinder);
        new Qva.Mgr.style(this, n, this.Name + ".Style");
        if (IS_TOUCHENABLED) {
            Qva.Touch.Listbox.AddTouchSupport(this.ContentElement)
        }
        return o
    };
    Qva.Mgr.container = function(n, q, p, r) {
        if (!Qva.MgrSplit(this, p, r)) {
            return
        }
        this.Appearance = null;
        this.Children = null;
        this.Element = q;
        this.NavigatorElement = null;
        this.Touched = false;
        this.NavigatorItems = new Array();
        this.binderid = n.binderid;
        this.NavigatorElement = document.createElement("div");
        var o = document.createElement("div");
        this.Element.appendChild(this.NavigatorElement);
        this.Element.appendChild(o);
        this.Children = new Qva.Mgr.children(n, o, this.Name + ".Children");
        n.AddManager(this);
        this.NavigatorElement.onclick = function(s) {
            Qva.CancelBubble(s)
        }
    };
    Qva.Mgr.container.prototype = {Appearance: null, AppearanceEnum: {Top: "top", Left: "left", Right: "right", Bottom: "bottom", Drop: "drop", Grid: "grid"}, Children: null, Touched: null, Element: null, NavigatorElement: null, NavigatorItems: [{itemId: "", elem: null}], NavigatorChange: function(o) {
            var n = Qva.GetBinder(this.binderid);
            if (this.NavigatorElement.SelectedVal !== o) {
                n.Set(this.Name, "select", o, true);
                this.NavigatorElement.SelectedVal = o
            }
        }, RemoveNavigatorContent: function() {
            while (this.NavigatorElement.firstChild) {
                this.NavigatorElement.removeChild(this.NavigatorElement.firstChild)
            }
        }, TabClick: function(p, n) {
            if (!p) {
                p = window.event
            }
            var o = p.target || p.srcElement;
            if (o && o.tagName === "DIV" && o.ObjectId) {
                n.NavigatorChange(o.ObjectId)
            } else {
                if (o && o.tagName === "IMG" && o.parentNode.tagName === "DIV" && o.parentNode.ObjectId) {
                    n.NavigatorChange(o.parentNode.ObjectId)
                }
            }
        }, GetLargestTabHeight: function() {
            var o = 0, p = 0, n = this.NavigatorItems.length, q = 0;
            for (; p < n; p++) {
                q = this.NavigatorItems[p].elem.offsetHeight;
                if (o < q) {
                    o = q
                }
            }
            return o
        }};
    Qva.Mgr.container.__class = true;
    Qva.Mgr.container.prototype.AddTab = function(p, q) {
        var n = this;
        p.onclick = function(r) {
            n.TabClick(r, n)
        };
        p.ObjectId = q.getAttribute("id");
        icon = q.getAttribute("icon");
        if (icon) {
            var o = document.createElement("img");
            o.src = Qva.GetBinder(this.binderid).BuildBinaryUrl(null, null, icon);
            o.className = "QvTabIcon";
            p.appendChild(o)
        }
        this.styleTab(p, q);
        text = q.getAttribute("text");
        text = text ? text.replace(/\t/g, " ") : " ";
        p.appendChild(document.createTextNode(text))
    };
    Qva.Mgr.container.prototype.styleTab = function(n, o) {
        SetElementStyle(n, "fontWeight", o.getAttribute("fontweight"));
        SetElementStyle(n, "fontFamily", o.getAttribute("fontfamily"));
        SetElementStyle(n, "fontSize", o.getAttribute("fontsize"), "pt");
        SetElementStyle(n, "fontStyle", o.getAttribute("fontstyle"));
        SetElementStyle(n, "textDecoration", o.getAttribute("textdecoration"));
        SetElementColorStyle(n, "color", o.getAttribute("color"));
        SetElementColorStyle(n, "backgroundColor", o.getAttribute("backgroundcolor"))
    };
    Qva.Mgr.container.prototype.Paint = function(B, J) {
        var z = this, y = J.getAttribute("appearance"), N = J.getElementsByTagName("element"), H = N.length, L = 0, n = (z.Appearance !== y) || (z.NavigatorItems.length !== H && y != z.AppearanceEnum.Grid);
        this.membersCount = H;
        z.Appearance = y;
        if (!n && (z.NavigatorItems.length > 0 && H > 0)) {
            for (; L < H; L++) {
                if (N[L].getAttribute("id") !== z.NavigatorItems[L].itemId || N[L].getAttribute("text") !== z.NavigatorItems[L].elem.innerText || ((N[L].getAttribute("icon") == null) != (z.NavigatorItems[L].elem.getElementsByTagName("img").length == 0))) {
                    n = true;
                    break
                }
            }
        }
        z.Touched = true;
        z.NavigatorElement.SelectedVal = J.getAttribute("selected");
        if (n) {
            z.NavigatorItems = new Array();
            z.RemoveNavigatorContent();
            z.Children.Grid = (y == z.AppearanceEnum.Grid);
            for (var q in z.Children.GridElements) {
                var E = z.Children.GridElements[q];
                E.removeAttribute("style")
            }
            var G = "", A = "";
            switch (z.Appearance) {
                case z.AppearanceEnum.Grid:
                    break;
                case z.AppearanceEnum.Drop:
                    var u = document.createElement("select");
                    u.style.width = getClientWidth(this.Children.Element) + "px";
                    u.style.height = "100%";
                    u.style.margin = "0px 1px";
                    z.NavigatorElement.appendChild(u);
                    for (L = 0; L < H; L++) {
                        A = N[L].getAttribute("text");
                        G = N[L].getAttribute("id");
                        var C = document.createElement("option");
                        C.innerText = A;
                        C.value = G;
                        u.appendChild(C);
                        z.NavigatorItems.push({itemId: G, elem: C})
                    }
                    u.onchange = function() {
                        z.NavigatorChange(u.options[u.selectedIndex].value)
                    };
                    break;
                case z.AppearanceEnum.Top:
                case z.AppearanceEnum.Bottom:
                    var o = null, M = null, A = "", w = getClientWidth(this.Children.Element), D = Math.floor(w / N.length), F = 3, p = 0;
                    for (L = 0; L < H; L++) {
                        o = document.createElement("div");
                        this.AddTab(o, N[L]);
                        o.className = "QvTab QvFloatLeft";
                        o.style.width = D - F * 2 + "px";
                        z.NavigatorElement.appendChild(o);
                        p = getClientHeight(o);
                        z.NavigatorItems.push({itemId: o.ObjectId, elem: o})
                    }
                    break;
                case z.AppearanceEnum.Left:
                case z.AppearanceEnum.Right:
                default:
                    var o = null, M = null, A = "";
                    for (L = 0; L < N.length; L++) {
                        o = document.createElement("div");
                        this.AddTab(o, N[L]);
                        o.className = "QvTab";
                        if (this.Appearance === this.AppearanceEnum.Left) {
                            o.className += " QvTabLeft"
                        } else {
                            if (this.Appearance === this.AppearanceEnum.Right) {
                                o.className += " QvTabRight"
                            }
                        }
                        z.NavigatorElement.appendChild(o);
                        z.NavigatorItems.push({itemId: o.ObjectId, elem: o})
                    }
                    break
                }
        } else {
            if (z.NavigatorItems.length > 0) {
                for (L = 0; L < H; L++) {
                    this.styleTab(this.NavigatorItems[L].elem, N[L])
                }
            }
        }
        if (z.Appearance == z.AppearanceEnum.Grid) {
            this.GridOrder = [];
            for (L = 0; L < H; L++) {
                this.GridOrder.push(parseInt(N[L].getAttribute("id")))
            }
            z.GridColumnWiths = [];
            var K = J.getElementsByTagName("columnwidths");
            if (K && K[0]) {
                var x = K[0].getElementsByTagName("width");
                for (var s = 0; s < x.length; s++) {
                    z.GridColumnWiths.push(x[s].getAttribute("value"))
                }
            }
            z.GridRowHeights = [];
            var r = J.getElementsByTagName("rowheights");
            if (r && r[0]) {
                var I = r[0].getElementsByTagName("height");
                for (var v = 0; v < I.length; v++) {
                    z.GridRowHeights.push(I[v].getAttribute("value"))
                }
            }
            z.GridSpacing = parseInt(J.getAttribute("spacing"))
        } else {
            if (this.PageBinder.PageBinder.OfflineRecorder) {
                this.PageBinder.PageBinder.OfflineRecorder.AddContainer(z)
            }
        }
        z.SetActiveStyle(true);
        z.PageBinder.QueuePostPaintMessage(this)
    };
    Qva.Mgr.container.calculateTabWidth = function(o) {
        var n = 0;
        o.find("div").each(function() {
            var p = Qva.MeasureText(g(this).text(), g(this).css("font-family"), g(this).css("font-size")).width;
            if (p > n) {
                n = p
            }
        });
        return n
    };
    Qva.Mgr.container.prototype.PostPaint = function() {
        var G = this.PageBinder.GetContentMaxHeight(this.Element), E = "100%", N = 0, P = "none", K = "0px 0px 0px 0px", Q = "0px", H = "0px", q = this.PageBinder.GetMaxClientWidth(), r = G - N, J = "relative", L = 0, R = Qva.Mgr.container.calculateTabWidth(g(this.Element).find("div").first()) + 55;
        this.Element.style.height = G + "px";
        switch (this.Appearance) {
            case this.AppearanceEnum.Grid:
                E = "0px";
                r = G;
                break;
            case this.AppearanceEnum.Drop:
            case this.AppearanceEnum.Top:
                K = "1px 0px";
                if (this.Appearance === this.AppearanceEnum.Drop) {
                    N = "22"
                } else {
                    N = this.GetLargestTabHeight() + 2
                }
                r = G - N - 1;
                break;
            case this.AppearanceEnum.Bottom:
                J = "absolute";
                N = this.GetLargestTabHeight() + 2;
                r = G - N - 1;
                K = r + "px 0px 1px 0px";
                break;
            case this.AppearanceEnum.Right:
            case this.AppearanceEnum.Left:
            default:
                J = "absolute";
                P = "left";
                E = R + "px";
                N = G;
                H = E;
                Q = "0px";
                q -= R;
                r = G;
                if (this.Appearance === this.AppearanceEnum.Right) {
                    P = "right";
                    H = "0px";
                    K = "0px 0px 0px " + q + "px"
                }
                break
        }
        if (q < 0) {
            var s = g(this.Element).width();
            var n = (s < 200) ? s : 200;
            E = n + "px";
            q = g(this.Element).width() - n;
            R = n;
            H = n + "px"
        }
        this.Children.Element.style.display = q <= 0 ? "none" : "block";
        this.NavigatorElement.style.cssFloat = P;
        this.NavigatorElement.style.styleFloat = P;
        this.NavigatorElement.style.margin = K;
        this.NavigatorElement.style.position = "relative";
        this.NavigatorElement.style.left = "0px";
        this.NavigatorElement.style.top = "0px";
        this.NavigatorElement.style.width = E;
        this.NavigatorElement.style.height = N + "px";
        this.Children.Element.style.position = J;
        this.Children.Element.style.top = Q;
        this.Children.Element.style.left = H;
        if (this.Appearance == this.AppearanceEnum.Grid) {
            this.Children.Element.style.width = q + "px";
            this.Children.Element.style.height = r + "px"
        } else {
            this.Children.Element.style.width = q - 2 + "px";
            this.Children.Element.style.height = r - 2 + "px";
            this.Children.Element.style.margin = "1px"
        }
        var v = this.Children.Element.childNodes;
        if (this.Appearance == this.AppearanceEnum.Grid) {
            var z = 0;
            var w = this.GridSpacing;
            var C = parseInt(Q) + w;
            var I = [];
            for (var y = 0; y < this.GridRowHeights.length; y++) {
                var p = Math.floor((r - (this.GridRowHeights.length) * w * 2) * this.GridRowHeights[y] / 100);
                var u = parseInt(H) + w;
                for (var x = 0; x < this.GridColumnWiths.length; x++) {
                    var D = p;
                    var F = Math.floor((q - (this.GridColumnWiths.length) * w * 2) * this.GridColumnWiths[x] / 100);
                    if (x == this.GridColumnWiths.length - 1) {
                        F = q - u - w
                    }
                    if (y == this.GridRowHeights.length - 1) {
                        D = r - C - w
                    }
                    I.push({position: "absolute", top: C, left: u, height: D, width: F});
                    u += F + w * 2
                }
                C += p + w * 2
            }
            for (var L = 0; L < v.length && L < this.GridOrder.length && L < I.length; L++) {
                g(v[this.GridOrder[L]]).css(I[L])
            }
        } else {
            for (var L = 0; L < v.length; L++) {
                var o = v[L];
                o.style.top = "";
                o.style.left = "";
                o.style.width = "";
                o.style.height = "";
                o.style.position = ""
            }
        }
        switch (this.Appearance) {
            case this.AppearanceEnum.Left:
            case this.AppearanceEnum.Right:
                var A = R;
                var B = 3;
                this.selectActiveTab(A, B);
                break;
            case this.AppearanceEnum.Top:
            case this.AppearanceEnum.Bottom:
                var A = Math.floor(getClientWidth(this.Children.Element) / this.membersCount);
                var B = 3;
                this.selectActiveTab(A, B);
                break;
            case this.AppearanceEnum.Drop:
                var M = this.NavigatorElement.getElementsByTagName("select");
                if (M && M.length === 1) {
                    M = M[0]
                }
                M.value = this.NavigatorElement.SelectedVal;
                break;
            default:
                break
        }
        for (L = 0; L < this.Children.Managers.length; ++L) {
            var O = this.Children.Managers[L];
            if (O.Element.style.display === "") {
                O.Size({mode: "enabled", maximized: "true"})
            }
        }
    };
    Qva.Mgr.container.prototype.selectActiveTab = function(n, o) {
        for (i = 0; i < this.NavigatorItems.length; i++) {
            if (this.NavigatorItems[i].itemId === this.NavigatorElement.SelectedVal) {
                if (this.NavigatorItems[i].elem.className.indexOf("QvTabSelected") === -1) {
                    this.NavigatorItems[i].elem.className += " QvTabSelected"
                }
            } else {
                this.NavigatorItems[i].elem.className = this.NavigatorItems[i].elem.className.replace("QvTabSelected", "")
            }
            if (n > 0) {
                this.NavigatorItems[i].elem.style.width = n - o * 2 + "px"
            }
        }
    };
    Qva.Mgr.object.prototype.CreateContainer = function() {
        g(this.Element).attr("objType", "Container");
        new Qva.Mgr.container(this, this.ContentElement, this.Name)
    };
    Qva.Mgr.object.prototype.CreateBasicTable = function() {
        var n = document.createElement("div");
        n.className = "QvGrid";
        g(this.Element).attr("objType", "Grid");
        this.ContentElement.appendChild(n);
        new Qva.Mgr.grid(this, n, this.Name);
        new Qva.Mgr.style(this, n, this.Name + ".Style")
    };
    Qva.Mgr.object.prototype.CreateSlider = function() {
        var n = document.createElement("div");
        n.className = "QvSliderObject";
        g(this.Element).attr("objType", "SliderObject");
        n.style.cssText = "display:none; width: 100%; height: auto;";
        this.ContentElement.appendChild(n);
        var r = document.createElement("div");
        r.className = "QvSliderObject";
        r.style.cssText = "display:none; width: auto; height: auto;";
        var v = document.createElement("table");
        v.style.cssText = "margin: 5px; width:100%;";
        var p = document.createElement("colgroup");
        var o = document.createElement("col");
        o.style.cssText = "width: 80%;";
        p.appendChild(o);
        o = document.createElement("col");
        o.style.cssText = "width: 20%;";
        p.appendChild(o);
        v.appendChild(p);
        var w = v.insertRow(-1);
        var u = w.insertCell(-1);
        u.style.cssText = "display:none; background-color: White;";
        var s = w.insertCell(-1);
        s.style.cssText = "padding: 3px 3px 3px 3px;";
        var q = document.createElement("img");
        q.src = this.PageBinder.BuildBinaryUrl(null, null, "Calendar_img");
        q.title = "Date selector";
        q.style.cssText = "display:none; cursor: pointer; border: 1px solid red;";
        s.appendChild(q);
        r.appendChild(v);
        this.ContentElement.appendChild(r);
        new Qva.Mgr.visibility(this, n, this.Name + ".Slider");
        new Qva.Mgr.visibility(this, r, this.Name + ".Calendar");
        new Qva.Mgr.slider(this, n, this.Name + ".Slider");
        new Qva.Mgr.style(this, n, this.Name + ".Style");
        new Qva.Mgr.text(this, u, this.Name + ".Calendar");
        new Qva.Mgr.style(this, u, this.Name + ".Style");
        new Qva.Mgr.date(this, q, this.Name + ".Calendar");
        new Qva.Mgr.actionicon(this, u, this.Name + ".Calendar")
    };
    Qva.Mgr.hideifhidden = function(n, p, o, q) {
        if (!Qva.MgrSplit(this, o, q)) {
            return
        }
        n.AddManager(this);
        this.Element = p
    };
    Qva.Mgr.hideifhidden.prototype.Paint = function(p, o) {
        this.Touched = true;
        var n = this.Element;
        if (n.style.display != "none") {
            n.style.display = Qva.MgrGetDisplayFromMode(this, p)
        }
    };
    function a(n, p) {
        var o = p.parentNode;
        o.removeChild(p);
        var r = document.createElement("div");
        o.appendChild(r);
        r.appendChild(p);
        o.style.overflowY = "hidden";
        r.style.overflowY = "hidden";
        r.style.overflowX = "hidden";
        r.style.position = "relative";
        var q = {};
        q.Element = r;
        q.TableElement = p;
        q.ScrollParent = o;
        q.Lines = [];
        q.Body = p.tBodies[0];
        if (q.Body == null) {
            p.insertRow(-1);
            q.Body = p.tBodies[0]
        }
        q.TableMgr = n;
        p.TableMgr = n;
        return q
    }
    Qva.Mgr.object.prototype.CreateChartOrTableBox = function(n) {
        this.CreateBasicTable();
        if (n) {
            var p = document.createElement("div");
            p.className = "QvGraph";
            p.style.cssText = "display:none;width:auto;height:auto;";
            var o = document.createElement("img");
            o.style.cssText = "width:auto;height:auto;";
            this.Chart = o;
            p.appendChild(o);
            this.ContentElement.appendChild(p)
        }
        if (n) {
            new Qva.Mgr.label(this, p, this.Name + ".Graph");
            var p = new Qva.Mgr.graph(this, o, this.Name + ".Graph");
            new Qva.Mgr.actions(this, o, this.Name + ".Graph")
        }
    };
    Qva.Mgr.object.prototype.CreateSearchObject = function(o) {
        var n = g(this.ContentElement).addClass("QvSearchObject ui-helper-clearfix").append('<span class="prop-icon-24x24 prop-dyn-dynamic-dropdown-search-icon"></span><input/>').find("input")[0];
        g(this.Element).attr("objType", "SearchObject");
        new Qva.Mgr.style(this, n, this.Name + ".Style");
        new Qva.Mgr.style(this, n, this.Name + ".Input");
        new Qva.Mgr.inputsearch(this, n, this.Name + ".Input")
    };
    Qva.Mgr.object.prototype.CreateObjectContent = function(p, q) {
        switch (p) {
            case"CH":
                var n = true;
            case"TB":
                this.CreateChartOrTableBox(n);
                break;
            case"TX":
                var o = true;
            case"LA":
                this.CreateTextOrLineObject(o);
                break;
            case"CS":
            case"IB":
            case"MB":
            case"SB":
                this.CreateBasicTable();
                break;
            case"LB":
                this.CreateListBox();
                break;
            case"BM":
                this.CreateBookmark();
                break;
            case"SL":
                this.CreateSlider();
                break;
            case"BU":
                this.CreateButton();
                break;
            case"SO":
                this.CreateSearchObject();
                break;
            case"CT":
                this.CreateContainer();
                break;
            case"TW":
                break;
            default:
                break
            }
    };
    Qva.Mgr.object.prototype.IsInvalid = function() {
        return !this.Mode || this.Mode == "invalid"
    };
    Qva.Mgr.object.prototype.IsWaiting = function() {
        return this.Mode && this.Mode == "waiting"
    };
    Qva.Mgr.object.prototype.IsAborted = function() {
        return this.Mode && this.Mode == "aborted"
    };
    Qva.Mgr.object.prototype.GetUpdates = function(p) {
        if (this.IsInvalid()) {
            var q = clone(this.poll);
            if (this.poll.clearcache) {
                delete this.poll.clearcache
            }
            p.push(q);
            this.Mode = "waiting";
            if (this.Hide) {
                this.Hide()
            }
        }
        for (var n = 0; n < this.Managers.length; ++n) {
            var o = this.Managers[n];
            if (o.GetUpdates) {
                o.GetUpdates(p)
            }
        }
    };
    Qva.Mgr.object.prototype.Paint = function(v, u, q, p) {
        var n = this.Mode = u.getAttribute("mode");
        if (u.getAttribute("menu") == "true") {
            Qva.SetContextMenu(this.Element, function(w) {
                return Qva.GetBinder(this.binderid).OnContextMenu(w, this.ObjectId)
            })
        }
        if (n == "aborted") {
            this.Abort()
        } else {
            if (n == "working" || n == "invalid") {
            } else {
                this.Show();
                if (n != "cached") {
                    var s = u.getAttribute("accept");
                    this.DropTypes = s ? s.split(";") : [];
                    var r = this.Element;
                    r.TargetName = u.getAttribute("objectid");
                    r.style.display = Qva.MgrGetDisplayFromMode(this, v);
                    if (r.style.display == "none") {
                        if (this.TableMgr) {
                            this.TableMgr.Reset()
                        }
                        return
                    }
                    if (this.FirstTime) {
                        if (!this.Caption) {
                            if (!this.PageBinder.isSmallDevices) {
                                var o = document.createElement("div");
                                o.className = "QvCaption";
                                o.innerText = " ";
                                this.Element.appendChild(o);
                                this.Caption = new Qva.Mgr.caption(this, o, this.Name + ".Caption")
                            }
                        }
                        this.Type = u.getAttribute("type");
                        if (u.getAttribute("extension")) {
                            this.Extension = u.getAttribute("extension");
                            Qva.AddExtensionBase(this.Extension, this);
                            this.PageBinder.QueuePostPaintMessage(this)
                        } else {
                            this.CreateObjectContent(u.getAttribute("type"), u.getAttribute("format"))
                        }
                        this.FirstTime = false
                    }
                    if (u.getAttribute("menu") == "true") {
                        Qva.SetContextMenu(r, function(w) {
                            return Qva.GetBinder(this.binderid).OnContextMenu(w || window.event, this.ObjectId)
                        })
                    }
                    this.PaintTree(u, p, this.Name);
                    this.SetActiveStyle(this.IsActive)
                } else {
                    if (this.Element.style.display == "none" && (this.PageBinder.GetDocumentMgr().Platform == "WORKBENCH" || this.PageBinder.GetDocumentMgr().Platform == "WEBPARTS")) {
                        this.Element.style.display = ""
                    } else {
                        this.Element.style.display = "block";
                        if (this.Type === "CH") {
                            this[this.oldShow ? "oldShow" : "Show"]()
                        }
                    }
                }
            }
        }
    };
    Qva.Mgr.object.prototype.SetMask = function(q, o) {
        var r = g(this.Element), p, n = this.Type && g.inArray(this.Type, ["TX", "SO", "CS", "LA", "BM", "CT"]) === -1;
        if (!r.length || !n) {
            return
        }
        this.Mask = this.Mask || document.createElement("div");
        p = g(this.Mask);
        if (o && this.MaskTimeout) {
            this.MaskTimeout = clearTimeout(this.MaskTimeout)
        }
        if (q === 0 || p.is(":visible")) {
            p.fadeOut("fast");
            return
        }
        p.css({width: r.outerWidth(), height: r.outerHeight(), zIndex: 1000, position: "absolute", left: 0, top: 0, backgroundColor: "white", display: "none", opacity: q}).empty().appendTo(r);
        return this.AsyncElement
    };
    Qva.Mgr.object.prototype.Abort = function() {
        if (this.State != "Abort") {
            this.State = "Abort";
            this.SetMask(0.4);
            if (!this.Mask) {
                return
            }
            this.Mask.innerHTML = '<img style="position: absolute; width: 100%; height: 100%;" src="' + Qva.QvAjaxZfcPath + 'htc/Aborted2.png" alt="" />'
        }
    };
    Qva.Mgr.object.prototype.Hide = function() {
        var p = this;
        if (this.State != "Hide") {
            this.State = "Hide";
            this.SetMask(0.4);
            if (!this.Mask) {
                return
            }
            if (typeof this.MaskTimeout !== "number") {
                this.MaskTimeout = setTimeout(function() {
                    g(p.Mask).fadeIn()
                }, 1000)
            }
            var n = Qva.GetBinder(p.binderid);
            var o = !n.isSmallDevices ? '<img style="position: relative; left: -8px; top: -8px;" src="' + Qva.QvAjaxZfcPath + 'htc/Images/Working.gif" alt="" />' : '<img style="margin-left: -60px; margin-top: -20px;" src="img/loader-object.gif" />';
            var q = !n.isSmallDevices ? -47 : -90;
            this.Mask.innerHTML = '<div style="position: absolute; left: 50%; top: 50%; width: auto; height: auto;">' + o + "</div>"
        }
    };
    Qva.Mgr.object.prototype.Disable = function() {
        if (this.State != "Disable") {
            this.State = "Disable";
            this.SetMask(0)
        }
    };
    Qva.Mgr.object.prototype.Show = function() {
        if (this.State != "Show") {
            this.State = "Show";
            this.SetMask(0, true)
        }
    };
    Qva.Mgr.object.prototype.Append = function(q, o, n, p) {
        this.PageBinder.Append(this, this.Name, n, p)
    };
    Qva.Mgr.object.prototype.SetInitial = function(n, o) {
        this.PageBinder.SetInitial(this.Name, n, o)
    };
    Qva.ObjectifyXML = function(r, p) {
        for (var s = 0; s < p.attributes.length; s++) {
            var n = p.attributes[s].name;
            var w = p.attributes[s].value;
            if (n == "mode") {
                switch (w) {
                    case"enabled":
                        r.visible = true;
                        r.enabled = true;
                        break;
                    case"disabled":
                        r.visible = true;
                        r.enabled = false;
                        break;
                    case"hidden":
                        r.visible = false;
                        r.enabled = false;
                        break
                    }
            }
            var v = parseFloat(p.attributes[s].value);
            if (w == v) {
                r[n] = v
            } else {
                r[n] = w
            }
        }
        var u = 0;
        for (var o = p.firstChild; o; o = o.nextSibling) {
            var q = {};
            Qva.ObjectifyXML(q, o);
            if (!r[o.tagName]) {
                r[o.tagName] = new Array()
            }
            r[o.tagName].push(q)
        }
    };
    window.ObjectifyXmlAttributes = function(r, p) {
        if (!p) {
            return
        }
        for (var o = 0; o < p.attributes.length; o++) {
            var n = p.attributes[o].name;
            if (n == "name") {
                continue
            }
            var s = p.attributes[o].value;
            if (n == "mode") {
                switch (s) {
                    case"enabled":
                        r.visible = true;
                        r.enabled = true;
                        break;
                    case"disabled":
                        r.visible = true;
                        r.enabled = false;
                        break;
                    case"hidden":
                        r.visible = false;
                        r.enabled = false;
                        break
                    }
            }
            var q = parseFloat(p.attributes[o].value);
            if (s == q) {
                r[p.attributes[o].name] = q
            } else {
                r[p.attributes[o].name] = s
            }
        }
    };
    Qva.ObjectifyXmlNode = function(o, n) {
        if (!n.getAttribute("name")) {
            return
        }
        o[n.getAttribute("name")] = {};
        for (var p = n.firstChild; p; p = p.nextSibling) {
            Qva.ObjectifyXmlNode(o[n.getAttribute("name")], p)
        }
        ObjectifyXmlAttributes(o[n.getAttribute("name")], n)
    };
    Qva.Mgr.object.prototype.GenericPaint = function(z, r) {
        this.Touched = true;
        if (typeof(this.QvaPublic) === "undefined") {
            this.QvaPublic = new Qva.Public.Wrapper(this)
        }
        if (typeof(this.DynamicMethodsSet) === "undefined") {
            this.DynamicMethodsSet = true;
            if (typeof(this.QvaPublic.Type) === "undefined") {
                this.QvaPublic.Type = this.Type
            }
            if (typeof(this.Type) === "undefined") {
                this.Type = this.QvaPublic.Type
            }
            switch (this.Type) {
                case"LB":
                    this.QvaPublic.Data.GetSelected = function() {
                        var F = new Array();
                        for (var E = 0; E < this.Rows.length; E++) {
                            if (this.Rows[E] !== b) {
                                var G = this.Rows[E][0];
                                if (G.selected === "yes") {
                                    F.push(G)
                                }
                            }
                        }
                        return F
                    };
                    this.QvaPublic.Data.GetEnabled = function() {
                        var F = new Array();
                        for (var E = 0; E < this.Rows.length; E++) {
                            if (this.Rows[E] !== b) {
                                var G = this.Rows[E][0];
                                if (G.mode !== "disabled") {
                                    F.push(G)
                                }
                            }
                        }
                        return F
                    };
                case"Field":
                    this.QvaPublic.Data.Lock = function() {
                        var E = {};
                        E.action = "";
                        this.Super.DocumentMgr.Set(this.Super.Name + ".LOC", E)
                    };
                    this.QvaPublic.Data.Unlock = function() {
                        var E = {};
                        E.action = "";
                        this.Super.DocumentMgr.Set(this.Super.Name + ".ULC", E)
                    };
                    this.QvaPublic.Data.Search = function(F, E) {
                        if (this.Super.ObjectMgr.Extension) {
                            this.Super.DocumentMgr.Search(this.Super.Layout.ObjectId, F, E, true)
                        } else {
                            this.Super.DocumentMgr.Search(this.Super.Name, F, E, true)
                        }
                    };
                    this.QvaPublic.Data.SelectValues = function(F, E) {
                        var G = {};
                        G.select = F;
                        G.toggle = E ? "true" : "false";
                        this.Super.DocumentMgr.Set(this.Super.Name, G)
                    };
                    this.QvaPublic.Data.SelectTexts = function() {
                        var E = arguments.length, F = "", G = 0;
                        if (E > 0) {
                            if (E === 1 && typeof(arguments[0]) === "object" && arguments[0].length > 0) {
                                for (G; G < arguments[0].length; G++) {
                                    F += '"' + arguments[0][G] + '" '
                                }
                            } else {
                                for (G; G < E; G++) {
                                    F += '"' + arguments[G] + '" '
                                }
                            }
                            this.Search(F)
                        }
                    };
                    this.QvaPublic.Data.ClearSelections = function() {
                        var E = {};
                        E.action = "";
                        this.Super.DocumentMgr.Set(this.Super.Name + ".CD", E)
                    };
                    this.QvaPublic.Data.ClearAllButThis = function() {
                        var E = {};
                        E.action = "";
                        this.Super.DocumentMgr.Set(this.Super.Name + ".CO", E)
                    };
                    this.QvaPublic.Data.SelectAll = function() {
                        var E = {};
                        E.action = "";
                        this.Super.DocumentMgr.Set(this.Super.Name + ".SA", E)
                    };
                    this.QvaPublic.Data.SelectExcluded = function() {
                        var E = {};
                        E.action = "";
                        this.Super.DocumentMgr.Set(this.Super.Name + ".SE", E)
                    };
                    this.QvaPublic.Data.SelectPossible = function() {
                        var E = {};
                        E.action = "";
                        this.Super.DocumentMgr.Set(this.Super.Name + ".SP", E)
                    };
                    break;
                case"IB":
                    this.QvaPublic.GetVariable = function(E) {
                        if (E == b) {
                            E = 0
                        }
                        if (this.Data.Rows[E]) {
                            return this.Data.Rows[E][2]
                        }
                        return null
                    };
                    this.QvaPublic.SetVariable = function(G, F) {
                        if (F == b) {
                            F = 0
                        }
                        var E = {};
                        E.text = G;
                        this.DocumentMgr.Set(this.Name + ".V" + F, E)
                    };
                    break;
                case"TX":
                    this.QvaPublic.GetText = function() {
                        if (this.Layout && this.Layout.Content && this.Layout.Content.text) {
                            return this.Layout.Content.text
                        }
                        return null
                    };
                    break;
                case"SO":
                case"SL":
                case"BM":
                case"LA":
                    break;
                case"BU":
                    this.QvaPublic.Click = function() {
                        var E = {};
                        E.action = "";
                        this.DocumentMgr.Set(this.Name, E)
                    };
                    break;
                case"CH":
                    this.QvaPublic.Data.SearchColumn = function(H, G, E, F) {
                        var I = {};
                        I.search = G;
                        if (E) {
                            I.toggle = "true"
                        }
                        this.Super.DocumentMgr.Set(this.Super.Name + ".C" + H, I, F)
                    };
                    this.QvaPublic.Data.SelectTextsInColumn = function(H, F) {
                        var E = arguments.length, I = {};
                        if (E > 2) {
                            I.select = "";
                            I.text = [];
                            if (E === 3 && typeof(arguments[2]) === "object" && arguments[2].length > 0) {
                                for (var G = 0; G < arguments[2].length; G++) {
                                    I.text[I.text.length] = arguments[2][G]
                                }
                            } else {
                                for (var G = 2; G < E; G++) {
                                    I.text[I.text.length] = arguments[G]
                                }
                            }
                            I.toggle = F ? "true" : "false";
                            this.Super.DocumentMgr.Set(this.Super.Name + ".C" + H, I)
                        }
                    };
                    this.QvaPublic.Data.SelectValuesInColumn = function(H, F, E, G) {
                        var I = {};
                        I.select = F;
                        I.toggle = E ? "true" : "false";
                        this.Super.DocumentMgr.Set(this.Super.Name + ".C" + H, I, G)
                    };
                    this.QvaPublic.Data.SelectRow = function(F) {
                        var G = new Array();
                        for (var E = 0; E < this.Rows[F].length; E++) {
                            if (this.Rows[F][E].value) {
                                G.push(E)
                            }
                        }
                        for (var I = 0; I < G.length; I++) {
                            var H = (I == G.length - 1);
                            this.SelectValuesInColumn(I, this.Rows[F][I].value, false, H)
                        }
                    };
                    this.QvaPublic.Data.DrillUp = function(E, F) {
                        var G = {drillup: E};
                        if (F) {
                            G.column = F
                        }
                        this.Super.DocumentMgr.Set(this.Super.Name, G, true)
                    };
                    this.QvaPublic.Data.Cycle = function(E, F) {
                        var G = {cycle: E};
                        if (F) {
                            G.column = F
                        }
                        this.Super.DocumentMgr.Set(this.Super.Name, G, true)
                    };
                case"MB":
                case"TB":
                    this.QvaPublic.Data.ClearSelections = function() {
                        var E = {};
                        E.action = "";
                        this.Super.DocumentMgr.Set(this.Super.Name + ".CA", E)
                    };
                    break
            }
            switch (this.Type) {
                case"LB":
                case"CH":
                case"TB":
                    this.QvaPublic.Data.PageObject = function(E, F, G) {
                        if (!G) {
                            G = 1
                        }
                        this._parent = E;
                        this._size = F;
                        this.Current = G;
                        this.Count = Math.ceil(E.TotalSize.y / F);
                        this.Set = function(H) {
                            if (H >= 1 && H <= this.Count) {
                                this.Current = H;
                                this._parent.NewOffset.x = 0;
                                this._parent.NewOffset.y = (H - 1) * this._size;
                                if (this._parent.IsDataFetched()) {
                                    this._parent.Super.ObjectMgr.PageBinder.QueuePostPaintMessage(this._parent.Super.PageBinder)
                                }
                            }
                        };
                        this.Next = function() {
                            this.Set(this.Current + 1)
                        };
                        this.Prev = function() {
                            this.Set(this.Current - 1)
                        };
                        this.StartItem = function() {
                            return(this.Current - 1) * this._size
                        }
                    };
                    this.QvaPublic.Data.SetOffset = function(E) {
                        if (!this.Rows[E.y] && E.y <= this.TotalSize.y) {
                            this.Super.ObjectMgr.PartialLoad(this.Super.Name, E)
                        } else {
                            this.PageOffset = E;
                            this.Super.Paint()
                        }
                    };
                    this.QvaPublic.Data.SetPagesize = function(E) {
                        this.PageSize = E;
                        var F = {};
                        F.pageSize = E.x + ":" + E.y;
                        this.Super.DocumentMgr.Set(this.Super.Name, F)
                    };
                    this.QvaPublic.Data.SetPagesizeX = function(F) {
                        var E = {};
                        E.x = F;
                        E.y = this.PageSize.y;
                        this.SetPagesize(E)
                    };
                    this.QvaPublic.Data.SetPagesizeY = function(F) {
                        var E = {};
                        E.x = this.PageSize.x;
                        E.y = F;
                        this.SetPagesize(E)
                    };
                case"MB":
                    this.QvaPublic.Data.SetRect = function(F, E) {
                        this.Super.DocumentMgr.Set(this.Super.Name, "rect", F, E)
                    }
                }
        }
        this.QvaPublic.Layout.ObjectId = r.getAttribute("objectid");
        this.ResetScrollPosition = true;
        if (r.getAttribute("pageoffset")) {
            var A = r.getAttribute("pageoffset");
            this.QvaPublic.Data.PageOffset.x = parseInt(A.split(":")[0]);
            this.QvaPublic.Data.PageOffset.y = parseInt(A.split(":")[1]);
            var u = r.getAttribute("pagesize");
            this.QvaPublic.Data.PageSize.x = parseInt(u.split(":")[0]);
            this.QvaPublic.Data.PageSize.y = parseInt(u.split(":")[1]);
            var y = r.getAttribute("totalsize");
            this.QvaPublic.Data.TotalSize.x = parseInt(y.split(":")[0]);
            this.QvaPublic.Data.TotalSize.y = parseInt(y.split(":")[1]);
            this.SetOffset = this.PageBinder.SetOffset
        }
        if (this.QvaPublic.Data.PageOffset.y == 0) {
            this.QvaPublic.Data.Rows.length = 0;
            this.QvaPublic.Data.HeaderRows.length = 0
        } else {
            this.ResetScrollPosition = false
        }
        for (var p = r.firstChild; p; p = p.nextSibling) {
            if (p.nodeName == "value") {
                var D = parseInt(p.getAttribute("name").substr(1));
                if (!isNaN(D)) {
                    var n = 0;
                    var B = 0;
                    if (!isNaN(this.QvaPublic.Data.PageOffset.y)) {
                        n = this.QvaPublic.Data.PageOffset.y
                    }
                    for (var q = p.firstChild; q; q = q.nextSibling) {
                        if (q.nodeName != "element") {
                            continue
                        }
                        var x = {};
                        var v = q.getAttribute("position") == "top";
                        var C = q.getAttribute("title");
                        if (!C) {
                            C = q.getAttribute("text")
                        }
                        x.text = C;
                        for (var w = 0; w < q.attributes.length; w++) {
                            if (q.attributes[w].name == "name") {
                                continue
                            }
                            if (q.attributes[w].name == "text") {
                                continue
                            }
                            if (q.attributes[w].name == "title") {
                                continue
                            }
                            if (q.attributes[w].name == "position") {
                                continue
                            }
                            x[q.attributes[w].name] = q.attributes[w].value
                        }
                        if (v) {
                            if (!this.QvaPublic.Data.HeaderRows[B]) {
                                if (B != this.QvaPublic.Data.HeaderRows.length) {
                                    Assert(false)
                                }
                                this.QvaPublic.Data.HeaderRows[B] = new Array()
                            }
                            for (var s = q.firstChild; s; s = s.nextSibling) {
                                if (s.nodeName != "member") {
                                    continue
                                }
                                if (!x.members) {
                                    x.members = []
                                }
                                x.members[x.members.length] = {label: s.getAttribute("label"), active: s.getAttribute("active") == "true"}
                            }
                            this.QvaPublic.Data.HeaderRows[B++][D] = x
                        } else {
                            if (this.Type == "Field") {
                                if (!this.QvaPublic.Data.Rows[n]) {
                                    this.QvaPublic.Data.Rows[n] = x
                                }
                                this.QvaPublic.Data.Rows[n++] = x
                            } else {
                                if (!this.QvaPublic.Data.Rows[n]) {
                                    this.QvaPublic.Data.Rows[n] = new Array()
                                }
                                this.QvaPublic.Data.Rows[n++][D] = x
                            }
                        }
                    }
                } else {
                    Qva.ObjectifyXmlNode(this.QvaPublic.Layout, p)
                }
            } else {
                if (p.nodeName == "style") {
                    for (var q = p.firstChild; q; q = q.nextSibling) {
                        var o = {};
                        ObjectifyXmlAttributes(o, q);
                        this.QvaPublic.Data.CellStyles[this.QvaPublic.Data.CellStyles.length] = o
                    }
                } else {
                    if (p.nodeName == "borderstyle") {
                        for (var q = p.firstChild; q; q = q.nextSibling) {
                            var o = {};
                            ObjectifyXmlAttributes(o, q);
                            this.QvaPublic.Data.CellBorderStyles[this.QvaPublic.Data.CellBorderStyles.length] = o
                        }
                    }
                }
            }
        }
        this.PageBinder.QueuePostPaintMessage(this)
    };
    Qva.Mgr.object.prototype.AddManager = function(n) {
        n.PageBinder = this;
        n.Touched = false;
        if (n.SelectedClassName == null) {
            n.SelectedClassName = "QvSelected";
            n.DeselectedClassName = "QvDeselected";
            n.EnabledClassName = "QvOptional";
            n.DisabledClassName = "QvExcluded";
            n.LockedClassName = "QvLocked";
            n.SelectedExcludedClassName = "QvSelectedExcluded";
            n.LockedExcludedClassName = "QvLockedExcluded";
            n.AlternativeClassName = "QvAlternative";
            n.ModeIfNotEnabled = "n"
        }
        if (!n.Paint) {
            n.Paint = this.GenericPaint;
            n.pageoffset = {};
            n.pagesize = {};
            n.totalsize = {}
        }
        this.Managers[this.Managers.length] = n;
        this.AddSubscription(n, n.Name)
    };
    Qva.Mgr.object.prototype.AddSubscription = function(q, n) {
        if (n == null || n.substr(0, 1) == ".") {
            Assert(false)
        }
        if (n == null || n == "") {
            return
        }
        var p = this.Members[n];
        if (p == null) {
            p = new Array();
            this.Members[n] = p
        }
        for (var o = 0; o < p.length; o++) {
            if (p[o] == q) {
                break
            }
        }
        if (o == p.length) {
            p[p.length] = q
        }
    };
    Qva.Mgr.CreateObject = function(o, q) {
        var r = document.createElement("div");
        var p = g(r);
        p.addClass("QvFrame");
        if (q.objectid) {
            p.addClass(q.objectid.replace("\\", "_"))
        }
        r.id = q.id;
        if (q.mode == "maximized" || q.maximized == "true") {
            r.style.left = "0";
            r.style.top = "0";
            r.style.width = "100%";
            r.style.height = "100%"
        } else {
            if (q.left != null) {
                r.style.left = q.left + "px";
                r.style.top = q.top + "px";
                if (q.width) {
                    r.style.width = q.width + "px";
                    r.style.height = q.height + "px"
                }
            } else {
                r.style.display = "none"
            }
        }
        var n = new Qva.Mgr.object(o, r, q.name, null, q);
        return n
    };
    Qva.PageBinding.prototype.RemoveObject = function(n) {
        this.SignalVisibility(n, false);
        var o = this.Members["Document." + n];
        if (o) {
            o = o[0]
        }
        if (o) {
            if (o.Remove) {
                o.Remove()
            }
            this.RemoveFromManagers(o)
        }
        this.Members["Document." + n] = {};
        this.Members["Document." + n] = null
    };
    Qva.PageBinding.prototype.DetachObject = function(p) {
        var o = b;
        var n = g("#" + p).parents()[0];
        o = g("#" + p).detach();
        Qva.Detached[parseInt(p)] = [o[0], n]
    };
    Qva.Mgr.object.prototype.PaintElem = function(o, n, u) {
        var s = this.Members[n];
        if (s != null) {
            var r = "d";
            switch (o.getAttribute("mode")) {
                case"not-applicable":
                    r = "n";
                    break;
                case"hidden":
                    r = "h";
                    break;
                case"enabled":
                    r = "e";
                    break
            }
            var p = s.length;
            for (var v = 0; v < p; ++v) {
                var w = s[v];
                var q = r;
                if (r != "n" && w.HideIf && w.HideIf(o.getAttribute("value"), o.getAttribute("text"))) {
                    q = "n"
                }
                w.Paint(q, o, n, u)
            }
        }
    };
    Qva.Mgr.object.prototype.PaintTree = function(q, o, n) {
        var s = n + ".";
        for (var r = q.firstChild; r != null; r = r.nextSibling) {
            if (r.nodeName != "value" && r.nodeName != "action" && r.nodeName != "group" && r.nodeName != "list") {
                continue
            }
            var p = s + r.getAttribute("name");
            this.PaintTree(r, o, p)
        }
        this.PaintElem(q, n, o)
    };
    Qva.Mgr.object.prototype.BuildBinaryUrl = function(q, p, o, n) {
        return this.PageBinder.BuildBinaryUrl(q, p, o, n)
    };
    Qva.Mgr.object.prototype.PartialLoad = function(n, o) {
        if (isNaN(parseInt(o.x)) || isNaN(parseInt(o.y))) {
            return
        }
        var p = this.GetDocumentMgr();
        p.IsPartialLoad = true;
        p._Send("get", n.substr("Document.".length), true, {offset: o.x + ":" + o.y})
    };
    Qva.Mgr.object.prototype.SetScrollPos = function(n) {
        if (isNaN(parseInt(n.x)) || isNaN(parseInt(n.y))) {
            return
        }
        var o = this.GetDocumentMgr();
        o._Send("set", this.Name.substr("Document.".length), true, {scrollposition: n.x + ":" + n.y})
    };
    Qva.Mgr.object.prototype.FixName = function(n) {
        return n
    };
    Qva.Mgr.object.prototype._Send = function(q, p, o, n) {
        this.PageBinder._Send(q, this.FixName(p), o, n)
    };
    Qva.Mgr.object.prototype.Set = function(o, p, q, n) {
        this.PageBinder.Set(this.FixName(o), p, q, n)
    };
    Qva.Mgr.object.prototype.Search = function(p, q, n, o) {
        this.PageBinder.Search(this.FixName(p), q, n, o)
    };
    Qva.Mgr.object.prototype.Hover = function(n, o) {
        this.PageBinder.Hover(this.FixName(n), o)
    };
    Qva.Mgr.object.prototype.SetSize = function(n, o) {
        this.poll.size = o;
        this.Mode = "invalid"
    };
    Qva.Mgr.object.prototype.GetEnabled = function() {
        return this.PageBinder.Enabled
    };
    Qva.Mgr.object.prototype.IsValid = function() {
        return !this.IsInvalid() && this.GetEnabled() && !this.IsWaiting() && !this.IsAborted()
    };
    Qva.Mgr.object.prototype.GetDocumentMgr = function() {
        return this.PageBinder.GetDocumentMgr()
    };
    Qva.Mgr.object.prototype.LoadBegin = function() {
        this.PageBinder.LoadBegin()
    };
    Qva.Mgr.object.prototype.GetBody = function() {
        for (var n = 0; n < this.Managers.length; ++n) {
            var o = this.Managers[n];
            if (o.IsBody) {
                return o
            }
        }
        return null
    };
    Qva.Mgr.object.prototype.GetSearchMgr = function() {
        mgr = this.GetBody();
        if (mgr) {
            return mgr
        }
        for (var n = 0; n < this.Managers.length; ++n) {
            mgr = this.Managers[n];
            if (mgr.SearchName) {
                return mgr
            }
        }
        return null
    };
    Qva.Mgr.object.prototype.GetMaxClientHeight = function(o, n) {
        if (!o) {
            o = this.Element
        }
        if (!n) {
            n = this
        }
        if (o.rect) {
            var p = isNaN(n.BorderWidth) ? 0 : n.BorderWidth;
            return o.rect.height - 2 * p
        } else {
            return getClientHeight(o)
        }
    };
    Qva.Mgr.object.prototype.GetMaxClientWidth = function() {
        if (this.Element.rect) {
            var n = isNaN(this.BorderWidth) ? 0 : this.BorderWidth;
            return this.Element.rect.width - 2 * n
        } else {
            return getClientWidth(this.Element)
        }
    };
    Qva.Mgr.object.prototype.GetElementSize = function(x, y, o, z, A) {
        var E, C, w, r, B;
        E = 0;
        if (x) {
            if (x.className.indexOf("QvFrame") == -1) {
                B = x;
                x = g(x).parent()[0]
            }
            if (!x) {
                return
            }
        }
        switch (y) {
            case"Height":
            case"MaxHeight":
                if (Qva.UseTraditional(x)) {
                    E = this.GetMaxClientHeight();
                    C = this.Element.childNodes.length;
                    for (w = 0; w < C; w++) {
                        r = this.Element.childNodes[w];
                        if (r == x) {
                            continue
                        }
                        if (r.nodeName != "DIV") {
                            continue
                        }
                        if (r.style.display == "none") {
                            continue
                        }
                        if (r.ResizeType) {
                            continue
                        }
                        if (r.className == "MoveZone") {
                            continue
                        }
                        if (IS_IE) {
                            if (r.currentStyle.position != "relative") {
                                continue
                            }
                        } else {
                            var q = document.defaultView.getComputedStyle(r, "");
                            if (q.getPropertyValue("position") != "relative") {
                                continue
                            }
                        }
                        E -= r.offsetHeight
                    }
                } else {
                    E = this.GetMaxClientHeight(x);
                    var n = Qva.GetStamp(this);
                    var p = g(x).children();
                    C = p.length;
                    for (w = 0; w < C; w++) {
                        r = p[w];
                        if (r == B) {
                            continue
                        }
                        if (r.nodeName != "DIV") {
                            continue
                        }
                        if (r.style.display == "none") {
                            continue
                        }
                        if (r.ResizeType) {
                            continue
                        }
                        if (r.className == "MoveZone") {
                            continue
                        }
                        if (IS_IE) {
                            if (r.currentStyle.position != "relative") {
                                continue
                            }
                        } else {
                            var q = document.defaultView.getComputedStyle(r, "");
                            if (q.getPropertyValue("position") != "relative") {
                                continue
                            }
                        }
                        var v = g(r).getPath();
                        var s = Qva.ElementAttributesHandler(v, r, "offsetHeight", n);
                        switch (y) {
                            case"Height":
                                var u = parseInt(g(x).css("border-bottom-width"));
                                E -= s;
                                if (!A) {
                                    A = 1
                                }
                                if (z) {
                                    if (!o || o == 0) {
                                        o = 1
                                    }
                                    var D = Math.floor((E - (g(x).attr("cached") == "1" ? 0 : u)) / o);
                                    if (D > z) {
                                        D = z
                                    }
                                    E = D * o + s + u * 2
                                } else {
                                    E = Math.floor((E - (g(x).attr("cached") == "1" ? 0 : u)) / o) * o + s + u * 2
                                }
                                g(x).attr("cached", "1");
                                break;
                            case"MaxHeight":
                                E -= s;
                                break
                            }
                    }
                }
                break
        }
        return E
    };
    Qva.Mgr.object.prototype.GetContentMaxHeight = function(y) {
        if (typeof y == "undefined") {
            y = this.ContentElement
        }
        var u, n;
        var z = Qva.UseTraditional(g(y).children()[0]);
        if (z) {
            u = this.GetMaxClientHeight();
            var B = this.Element.childNodes.length;
            for (var v = 0; v < B; v++) {
                var o = this.Element.childNodes[v];
                if (o == y) {
                    continue
                }
                if (o.nodeName != "DIV") {
                    continue
                }
                if (o.style.display == "none") {
                    continue
                }
                if (o.ResizeType) {
                    continue
                }
                if (o.className == "MoveZone") {
                    continue
                }
                if (IS_IE) {
                    if (o.currentStyle.position != "relative") {
                        continue
                    }
                } else {
                    var p = document.defaultView.getComputedStyle(o, "");
                    if (p.getPropertyValue("position") != "relative") {
                        continue
                    }
                }
                u -= o.offsetHeight
            }
        } else {
            var s = Qva.GetChildByClassName(y, "QvListbox");
            if (s) {
                var q = s.style.cssText.split(";");
                var r = [{}];
                for (var x = 0; x < q.length; x++) {
                    var w = q[x].split(":");
                    if (w[0]) {
                        r[0][g.trim(w[0])] = g.trim(w[1])
                    }
                }
                var A = Qva.MeasureText("?g", r[0]["font-family"], r[0]["font-size"]).height;
                var D = s.Mgr.Lines;
                if (!D) {
                } else {
                    var C = D[D.length - 1];
                    n = C ? C.rowspan * A : 0;
                    if (this.PageBinder.GetDocumentMgr().isSmallDevices && this.ObjectId === "DS") {
                        this.rowHeight += 32
                    }
                }
            }
            if (n != 0) {
                u = this.GetElementSize(y, "MaxHeight", n)
            } else {
                u = this.GetElementSize(null, "MaxHeight")
            }
        }
        if (u > 0) {
            return parseInt(u)
        }
        u = parseInt(y.style.height);
        if (isNaN(u)) {
            return 0
        }
        return u
    };
    Qva.Mgr.object.prototype.GetContentHeight = function(y) {
        var p, D, z;
        if (!y) {
            p = this.Element
        } else {
            p = y
        }
        var C = p.style.height, u = C && C.indexOf("%") < 0 && parseInt(C), q = 0, r = "";
        if (typeof g(p).children()[2] != "undefined" && typeof g(p).children()[2].children[0] != "undefined") {
            r = g(p).children()[2].children[0].className
        } else {
            return
        }
        var F = Qva.UseTraditional(p);
        if (isNaN(u) || typeof u !== "Number") {
            if (F) {
                u = p.offsetHeight
            } else {
                switch (r) {
                    case"Listbox":
                    case"QvListbox":
                        var I = Qva.GetChildByClassName(p, "QvListbox");
                        if (I) {
                            var G = I.style.cssText.split(";");
                            var v = [{}];
                            for (var B = 0; B < G.length; B++) {
                                var E = G[B].split(":");
                                if (E[0]) {
                                    v[0][g.trim(E[0])] = g.trim(E[1])
                                }
                            }
                            var n = Qva.MeasureText("?g", v[0]["font-family"], v[0]["font-size"]).height;
                            var o = I.Mgr.Lines;
                            z = I.Mgr.fixedCols;
                            if (o) {
                                D = o.length;
                                var x = o[o.length - 1];
                                q = x ? x.rowspan * n : 0;
                                if (this.PageBinder.GetDocumentMgr().isSmallDevices && this.ObjectId === "DS") {
                                    this.rowHeight += 32
                                }
                                u = parseInt(g(p).css("height"))
                            }
                        }
                        break
                    }
            }
        }
        if (F) {
            u -= 2 * this.BorderWidth
        } else {
            u -= parseInt(g(p).css("border-bottom-width"))
        }
        if (F) {
            var H = p.childNodes.length;
            for (var s = 0; s < H; s++) {
                var w = p.childNodes[s];
                if (w == this.ContentElement) {
                    continue
                }
                if (w.nodeName != "DIV") {
                    continue
                }
                if (w.style.display == "none") {
                    continue
                }
                if (w.ResizeType) {
                    continue
                }
                if (w.className == "MoveZone") {
                    continue
                }
                if (IS_IE) {
                    if (w.currentStyle.position != "relative") {
                        continue
                    }
                } else {
                    var A = document.defaultView.getComputedStyle(w, "");
                    if (A.getPropertyValue("position") != "relative") {
                        continue
                    }
                }
                u -= w.offsetHeight
            }
        } else {
            u = this.GetElementSize(p, "Height", q, D, z)
        }
        if (u > 0) {
            return parseInt(u)
        }
        u = parseInt(p.style.height);
        u -= 2 * this.BorderWidth;
        if (isNaN(u)) {
            return 0
        }
        if (u < 0) {
            return 0
        }
        return u
    };
    Qva.Mgr.object.prototype.GetImageSize = function(p) {
        var o = {width: 0, height: 0};
        var r = p;
        var q = p.style.width;
        if (q == "auto" || p.autosize) {
            if (q == "auto") {
                p.autosize = true
            }
            q = this.GetMaxClientWidth();
            p.style.width = q + "px";
            o.width = q
        } else {
            o.width = p.offsetWidth
        }
        var n = p.style.height;
        if (n == "auto" || p.autosize) {
            if (n == "auto") {
                p.autosize = true
            }
            n = this.GetContentMaxHeight();
            if (n < 0) {
                n = getClientHeight(p.parentNode)
            }
            p.style.height = n + "px";
            o.height = n
        } else {
            o.height = p.offsetHeight
        }
        return o
    };
    Qva.Mgr.object.prototype.SetObjectHeight = function(y, D) {
        var q = D;
        if (Qva.UseTraditional(this.Element)) {
            var s = isNaN(this.BorderWidth) ? 0 : this.BorderWidth;
            if (this.Element.rect && this.Element.rect.height) {
                var E = this.Element.rect.height;
                var r = E - 2 * s;
                if (IS_IE6_OR_IE7 && !this.BorderAroundContent) {
                    E = r
                }
                var w = parseInt(this.Element.style.height);
                var C = E - y;
                if (C != w) {
                    this.Element.style.height = C + "px";
                    if (this.Element.firstChild.ResizeType) {
                        Qva.Mgr.CreateAndUpdateResizeHandles(this.Element, this.BorderAroundContent ? 0 : s)
                    }
                }
            }
            var p = this.GetContentHeight();
            if (p != b) {
                p += "px";
                if (this.ContentElement.style.height !== p) {
                    this.ContentElement.style.height = p;
                    if (this.BackgroundMgr) {
                        this.QueuePostPaintMessage(this.BackgroundMgr)
                    }
                }
            }
        } else {
            var x = this.Element;
            var v = Qva.ElementCacheHandler();
            var u = v.length;
            if (!D) {
                D = g(x).getPath()
            }
            var o = Qva.GetStamp(this);
            if (!v.length || v.length == 0) {
                Qva.ElementCacheHandler(false, x, o, D, this);
                return
            }
            if (!Qva.CheckElementCache(D)) {
                var z = u - 1;
                if (v[z][4] == "complete") {
                    z++
                }
                var n = v[z];
                var A = n[1];
                var B = n[3];
                var s = isNaN(B.BorderWidth) ? 0 : B.BorderWidth;
                var p = this.GetContentHeight(A);
                if (g(A).find(".Qv_ScrollbarHorizontalDivider")) {
                    return
                }
                if (p && B.ContentElement.style.height !== p) {
                    g(A).addClass("lockedheight");
                    switch (g(g(B.ContentElement).children()[0]).attr("objType")) {
                        case"Listbox":
                            g(A).css("height", p + s);
                            g(A).css("visibility", "visible");
                            g(g(B.ContentElement).children()[0]).css("visibility", "visible");
                            break
                    }
                    if (A.firstChild) {
                        if (A.firstChild.ResizeType) {
                        }
                    }
                    if (!q && B.BackgroundMgr) {
                        this.QueuePostPaintMessage(B.BackgroundMgr)
                    }
                }
                Qva.ElementCacheHandler(false, x, o, g(x).getPath(), this)
            } else {
                g(x).css("visibility", "visible");
                return
            }
        }
    };
    Qva.Mgr.object.prototype.SetObjectWidth = function(s) {
        if (!this.Element.rect || !this.Element.rect.width) {
            return
        }
        if (this.Maximized) {
            s = 0
        }
        var p = isNaN(this.BorderWidth) ? 0 : this.BorderWidth;
        var v = this.Element.rect.width;
        maxclientwidth = v - 2 * p;
        if (IS_IE6_OR_IE7 && !this.BorderAroundContent) {
            v = maxclientwidth
        }
        var x = parseInt(this.Element.style.width);
        var n = v - s;
        if (n != x) {
            this.Element.style.width = n + "px";
            if (this.Element.firstChild.ResizeType) {
                Qva.Mgr.CreateAndUpdateResizeHandles(this.Element, this.BorderAroundContent ? 0 : p)
            }
        }
        var w = this.Element.childNodes.length;
        for (var r = 0; r < w; r++) {
            var o = this.Element.childNodes[r];
            if (o.nodeName != "DIV") {
                continue
            }
            if (o.style.display == "none") {
                continue
            }
            if (o.className == "Qv_Scrollbar") {
                continue
            }
            if (o.className == "Qv_ScrollbarBackground") {
                continue
            }
            if (g(o).hasClass("QvAnnotation")) {
                continue
            }
            if (o.className == "TouchScrollbar") {
                continue
            }
            if (o.ResizeType) {
                continue
            }
            var u = maxclientwidth - s;
            if (this.BorderAroundContent && o != this.ContentElement) {
                u += 2 * p
            }
            var q = parseInt(o.style.width);
            if (q != u) {
                o.style.width = u + "px"
            }
        }
    };
    Qva.Mgr.object.prototype.SetColumnWidth = function(n, o) {
        this.Set(this.Name, "resizecolumn", n + ":" + o, true)
    };
    function l(n) {
        n[4] || (n = n.replace(/./g, "$&$&").slice(1));
        return["0x" + n[1] + n[2] | 0, "0x" + n[3] + n[4] | 0, "0x" + n[5] + n[6] | 0]
    }
    function m(s) {
        if (IS_IE6_OR_IE7) {
            var v, o, x, A, q;
            s = s.replace("#", "");
            v = parseInt(s, 16);
            o = (v >> 16) & 255;
            x = (v >> 8) & 255;
            A = v & 255;
            q = 0.2126 * o + 0.7152 * x + 0.0722 * A;
            return q < 20
        }
        var p = l(s);
        var o = p[0] / 255;
        var x = p[1] / 255;
        var A = p[2] / 255;
        var B = Math.min(o, Math.min(x, A));
        var C = Math.max(o, Math.max(x, A));
        var n = 0;
        var y = 0;
        if (B == C) {
            var u = B
        } else {
            var z = (o == B) ? x - A : ((A == B) ? o - x : A - o);
            var w = (o == B) ? 3 : ((A == B) ? 1 : 5);
            n = 60 * (w - z / (C - B));
            y = (C - B) / C;
            u = C
        }
        return y < 0.2
    }
    Qva.Mgr.object.prototype.SetActiveStyle = function(D) {
        var x = this.BorderAroundContent ? this.ContentElement : this.Element;
        var E = g(x);
        this.IsActive = D;
        if (!this.Caption) {
            return
        }
        if (this.Element.style.display == "none") {
            return
        }
        if (this.BorderStyle == null) {
            return
        }
        var y = D && this.ActiveBorderColor ? this.ActiveBorderColor : this.BorderColor;
        var q = this.BorderWidth + "px " + this.BorderStyle + " " + y;
        x.style.border = q;
        var v = this.Caption.Element;
        if (this.setAnnotation && E.find(".QvAnnotation:visible").length) {
            E.addClass("has-annotation")[D ? "addClass" : "removeClass"]("annotation-active")
        }
        if (v != null) {
            var s = D ? this.Caption.activecolor : this.Caption.color;
            if (s == null) {
                return
            }
            if (!this.BorderAroundContent) {
                if (v.style.display == "none") {
                    return
                }
                Qva.ApplyColorDataToElement(s, v, true, true);
                v.style.borderBottom = "1px " + this.BorderStyle + " " + y;
                var B = v.childNodes.length;
                for (var u = 0; u < B; u++) {
                    var o = v.childNodes[u];
                    if (o.nodeName != "IMG") {
                        continue
                    }
                    var n = o.src;
                    n = Qva.FixUrl(n, "color", HtmlifyARGB(s.color));
                    n = Qva.FixUrl(n, "bkgcolor", HtmlifyARGB(s.bkgColor));
                    o.src = n
                }
            }
            var p = g(v);
            var C = p.find(".caption-icon-16x16");
            var w = m(s.color);
            for (var z = 0; z < C.length; z++) {
                var A = C[z];
                var r = A.className;
                if (w) {
                    r = r.replace("-dark-", "-light-")
                } else {
                    r = r.replace("-light-", "-dark-")
                }
                A.className = r
            }
        } else {
            Assert(false)
        }
    };
    Qva.Mgr.container.prototype.SetActiveStyle = Qva.Mgr.object.prototype.SetActiveStyle;
    Qva.Mgr.captionstyle = function(n, p, o) {
        if (!Qva.MgrSplit(this, o)) {
            return
        }
        n.AddManager(this);
        this.Element = p;
        this.InlineStyle = n.InlineStyle
    };
    window.SetElementColorStyle = function(p, o, n) {
        if (IS_IE && IE_DOCMODE <= 8) {
            n = HtmlifyARGB(n)
        } else {
            n = Qva.Hex2RGBA(n)
        }
        p.style[o] = n
    };
    window.SetElementStyle = function(p, n, q, o) {
        if (!q) {
            return false
        }
        if (o) {
            q += o
        }
        if (q != p.style[n]) {
            p.style[n] = q;
            return true
        }
        return false
    };
    Qva.Mgr.captionstyle.prototype.Paint = function(p, o) {
        this.Touched = true;
        var n = SetElementStyle(this.Element, "fontFamily", o.getAttribute("fontfamily"));
        n |= SetElementStyle(this.Element, "fontSize", o.getAttribute("fontsize"), "pt");
        n |= SetElementStyle(this.Element, "fontStyle", o.getAttribute("fontstyle"));
        n |= SetElementStyle(this.Element, "fontWeight", o.getAttribute("fontweight"));
        n |= SetElementStyle(this.Element, "textAlign", o.getAttribute("textalign"));
        n |= SetElementStyle(this.Element, "verticalAlign", o.getAttribute("verticalalign"));
        n |= SetElementStyle(this.Element, "textDecoration", o.getAttribute("textdecoration"));
        if (n) {
            this.PageBinder.Resized()
        }
    };
    Qva.Mgr.caption = function(n, r, p, s, q) {
        if (!Qva.MgrSplit(this, p)) {
            return
        }
        this.Paint = q;
        this.Element = r;
        var o = g(this.Element);
        o.addClass(s);
        n.AddManager(this);
        this.ObjectId = n.Element.id;
        r.moveObj = this.ObjectId;
        r.yMin = 0;
        r.xMin = 0;
        r.Name = this.Name;
        r.binderid = n.binderid;
        this.RowHeight = -1;
        this.InlineStyle = n.InlineStyle;
        if (r.getAttribute("AvqStyle")) {
            this.InlineStyle = r.getAttribute("AvqStyle") == "true"
        }
        if (this.InlineStyle) {
            new Qva.Mgr.captionstyle(n, this.Element, p + ".Style")
        }
    };
    Qva.Mgr.caption.prototype.SetPending = function(p) {
        for (var n = 0; n < p.length; ++n) {
            if (this.ObjectId != p[n]) {
                continue
            }
            this.Element.parentNode.className += " QvPending";
            if (this.Element.BkgElem) {
                this.Element.BkgElem.className += " QvPending"
            }
            return
        }
        var o = this.Element.parentNode.className;
        this.Element.parentNode.className = o.replace(" QvPending", "")
    };
    Qva.Mgr.caption.prototype.GeneralPaint = function(q, o, n) {
        this.Touched = true;
        var p = Qva.MgrGetDisplayFromMode(this, q);
        if (p != this.Element.style.display) {
            this.PageBinder.Resized()
        }
        this.Element.style.display = p;
        if (this.Element.style.display == "none") {
            return
        }
        var r = g(this.Element);
        if (o.getAttribute("allowmove") == "true") {
            r.bind("mousedown", Qva.Move.mouseDown)
        } else {
            r.unbind("mousedown", Qva.Move.mouseDown)
        }
        if (this.InlineStyle) {
            this.activecolor = {};
            this.color = {};
            ObjectifyXmlAttributes(this.activecolor, o.getElementsByTagName("activecolor")[0]);
            ObjectifyXmlAttributes(this.color, o.getElementsByTagName("color")[0])
        }
        this.label = o.getAttribute("label");
        if (!this.label) {
            this.NoText = true;
            this.Element.title = ""
        } else {
            this.NoText = false;
            this.Element.title = this.label
        }
    };
    Qva.Mgr.caption.MinHeight = 16;
    Qva.Mgr.caption.prototype.createLayout = function() {
        var r;
        var z = g(this.Element);
        if (z.css("display") == "none") {
            return
        }
        if (this.RowHeight == -1 && this.RowSpan != 1) {
            this.RowHeight = z.height()
        }
        if (this.RowHeight != -1) {
            r = Math.max(this.RowSpan == 1 ? this.RowHeight : (this.RowHeight * this.RowSpan), Qva.Mgr.caption.MinHeight);
            z.height(r);
            z.find(".vertical").css("vertical-align", z.css("verticalAlign"));
            z.find(".vertical").height(r);
            if (!IS_IE6_OR_IE7) {
                z.find(".vertical").width(z.width());
                var o = z.find(".QvCaptionImgContainer").width();
                var x = z.width();
                var s = Qva.MeasureText("W", z.css("font-family"), z.css("font-size")).width;
                var u = x - o;
                z.find(".vertical").children().first().width(u);
                if (x - o < s) {
                    z.find(".vertical").children().first().css("display", "none")
                } else {
                    var q = z.find(".vertical").children().first().text().split(" ");
                    var p = 0;
                    var y;
                    for (var v = q.length - 1; v >= 0; v -= 1) {
                        if (q[v].length > p) {
                            p = q[v].length;
                            y = v
                        }
                    }
                    var n = Qva.MeasureText(q[y], z.css("font-family"), z.css("font-size")).width;
                    if (x - o < (n + s)) {
                        var w = x - o;
                        z.find(".vertical").children().first().css("display", "block").css("width", w - s)
                    } else {
                        z.find(".vertical").children().first().css("display", "inline")
                    }
                }
            }
        }
        if (this.NoText) {
            z.find(".horizontal").html("&nbsp;")
        }
    };
    Qva.Mgr.caption.prototype.PropertiesPaint = function(r, p, o) {
        this.GeneralPaint(r, p, o);
        var s = g(document.createElement("span"));
        s.addClass("QvCaption_PropText");
        var w = g(this.Element);
        var v;
        var q;
        var u;
        if (r != "n") {
            w.html("");
            var n = g(document.createElement("span"));
            n.attr("alt", "");
            n.addClass("prop-icon-34x34").addClass("QvClosePropIcon");
            w.append(n);
            n.attr("binderid", w.attr("binderid"));
            n.attr("ObjectId", this.ObjectId);
            n.click(onclick_action);
            n[0].Action = this.Name.replace("Caption", "CX");
            u = p.getAttribute("label");
            if (!u) {
                if (this.Element.color && this.Element.color.getAttribute("bkgcolor")) {
                    this.Element.style.color = this.Element.color.getAttribute("bkgcolor")
                }
                u = " ";
                this.NoText = true;
                this.Element.title = ""
            } else {
                this.NoText = false;
                this.Element.title = u
            }
            s.text(u);
            this.Element.appendChild(s.get(0))
        }
        this.PostPaint = null
    };
    Qva.Mgr.caption.prototype.Remove = function() {
        Qva.RemoveHtml(this.Element)
    };
    Qva.Mgr.captionstyle.prototype.Remove = function() {
        Qva.RemoveHtml(this.Element)
    };
    Qva.Mgr.caption.prototype.CaptionPaint = function(w, y, G) {
        this.GeneralPaint(w, y, G);
        var x = g(this.Element);
        var q;
        var v;
        var p;
        var E;
        var F;
        var s;
        if (w != "n") {
            x.html("");
            var D = y.getElementsByTagName("action");
            if (D.length >= 1) {
                if (!IS_IE6_OR_IE7) {
                    s = g(document.createElement("div"));
                    s.addClass("QvCaptionImgContainer")
                }
                if (this.InlineStyle) {
                    var o = m(this.PageBinder.IsActive ? this.activecolor.color : this.color.color)
                }
                for (var B = (D.length - 1); B >= 0; B--) {
                    var C = D[B];
                    if (C.getAttribute("type") == "divider") {
                        Assert(false);
                        continue
                    }
                    if (IS_TOUCHENABLED && !IS_IPAD) {
                        if (C.getAttribute("name") === "XL") {
                            continue
                        }
                    }
                    var z = C.getAttribute("name");
                    var r = C.getAttribute("mode") == "disabled";
                    var F = document.createElement("div");
                    $img = g(F);
                    if (!r) {
                        $img.addClass("QvCaptionIcon")
                    } else {
                        $img.addClass("QvCaptionIcon-disabled")
                    }
                    F.title = C.getAttribute("text");
                    $img.addClass("caption-icon-16x16").addClass("caption-" + z + (o ? "-light" : "-dark") + "-icon");
                    if (this.PageBinder.GetDocumentMgr().CustomIcons[z]) {
                        $img.css("background-image", "url('" + this.PageBinder.GetDocumentMgr().CustomIcons[z] + "')")
                    }
                    if (!r) {
                        var u = C.getAttribute("clientaction");
                        $img[0].binderid = this.Element.binderid;
                        $img[0].ObjectId = this.ObjectId;
                        if (u) {
                            $img.bind("click", onclick_ContextClientAction);
                            $img[0].clientaction = u;
                            $img[0].param = C.getAttribute("param")
                        } else {
                            if (z) {
                                $img.bind("click", onclick_action);
                                $img[0].Action = this.Name.replace("Caption", z)
                            }
                        }
                        if (C.getAttribute("menu") == "true") {
                            $img[0].position = z;
                            Qva.SetContextMenu($img.get(0), function(H) {
                                return Qva.GetBinder(this.binderid).OnContextMenu(H, this.ObjectId)
                            })
                        }
                    }
                    if (!IS_IE6_OR_IE7) {
                        s.append($img)
                    } else {
                        x.append($img)
                    }
                }
                if (!IS_IE6_OR_IE7) {
                    s.width(function() {
                        return s.get(0).childNodes.length * 17
                    });
                    x.append(s)
                }
            }
        }
        var n = Math.ceil(Qva.MeasureFontHeight(x.css("font-family"), x.css("font-size")));
        this.RowHeight = n;
        if (this.InlineStyle) {
            q = g(document.createElement("div"));
            v = g(document.createElement("div"));
            v.css("display", "inline");
            q.addClass("horizontal").addClass("alignmentcontainer");
            v.html(this.label ? Qva.ConvertToBr(this.label) : "");
            E = y.getAttribute("rowspan");
            if (E && E > 1) {
                p = g(document.createElement("div"));
                p.addClass("vertical").addClass("alignmentcontainer").addClass("QvCaptionmultitext");
                p.append(v);
                q.append(p);
                x.find(".QvCaptionImgContainer").css("float", "right");
                if (this.RowSpan != E) {
                    this.PageBinder.Resized()
                }
                this.RowSpan = E;
                this.PageBinder.QueuePostPaintMessage(this)
            } else {
                this.PageBinder.Resized();
                this.RowSpan = 1;
                q.addClass("QvCaptiontext");
                q.append(v)
            }
            x.append(q);
            this.createLayout()
        } else {
            var A = document.createElement("span");
            A.innerText = this.label;
            if (this.PropertyDialog) {
                g(A).addClass("QvCaption_PropText")
            }
            x.append(A)
        }
    };
    Qva.Mgr.restore = function(n, p, o, q) {
        if (!Qva.MgrSplit(this, o, q)) {
            return
        }
        n.AddManager(this);
        this.Element = p;
        this.Element.Name = this.Name;
        this.Element.binderid = n.binderid;
        this.Element.moveObj = p.id;
        this.Element.yMin = 0;
        this.Element.xMin = 0;
        n.Append(this, this.Name, "action");
        this.Element.ondblclick = this.Restore;
        Qva.SetContextMenu(p, function(r) {
            return Qva.GetBinder(this.binderid).OnContextMenu(r, this.Name.replace(".RE", ""))
        });
        if (IS_TOUCHENABLED) {
            Qva.Touch.Restore.AddTouchSupport(this)
        }
    };
    Qva.Mgr.restore.prototype.Remove = function() {
        Qva.RemoveHtml(this.Element)
    };
    Qva.Mgr.restore.prototype.Restore = function() {
        Qva.GetBinder(this.binderid).Set(this.Name, "action", "", true)
    };
    Qva.Mgr.restore.prototype.PostPaint = function() {
        if (this.Element.style.display == "none") {
            return
        }
        var n = this.avq_url;
        n += "&width=" + Qva.EncodeComponent(parseInt(this.Element.offsetWidth + 2));
        n += "&height=" + Qva.EncodeComponent(parseInt(this.Element.offsetHeight));
        this.Element.style.backgroundImage = "url(" + n + ")"
    };
    Qva.Mgr.restore.prototype.Paint = function(s, r) {
        this.Touched = true;
        var p = this.Element;
        var q = this.Element.offsetWidth;
        var n = this.Element.offsetHeight;
        if (p.rect) {
            n = p.rect.height;
            q = p.rect.width
        }
        g(p).width(q).height(n);
        g(".MoveZone", p).height(n).width(q);
        p.style.display = Qva.MgrGetDisplayFromMode(this, s);
        if (p.style.display == "none") {
            return
        }
        var o = this.PageBinder.BuildBinaryUrl(r.getAttribute("path"), r.getAttribute("stamp"), this.Name);
        this.avq_url = o;
        this.PageBinder.QueuePostPaintMessage(this)
    };
    Qva.Mgr.QvObject = function(n, o, p) {
        if (!Qva.MgrSplit(this, o, p)) {
            return
        }
        n.AddManager(this);
        this.Managers = new Array();
        this.Members = {};
        this.IsInvalid = Qva.Mgr.object.prototype.IsInvalid;
        this.GetUpdates = Qva.Mgr.object.prototype.GetUpdates;
        this.GetWidth = Qva.Mgr.object.prototype.GetMaxClientWidth;
        this.GetHeight = Qva.Mgr.object.prototype.GetMaxClientHeight;
        this.pageoffset = {};
        this.pagesize = {};
        this.totalsize = {};
        var o = this.Name.substr("Document.".length);
        this.poll = {name: o, clearcache: "true"};
        this.PostPaintQueue = [];
        this.Paint = function(v, u, s, r) {
            this.Type = u.getAttribute("type");
            var q = this.Mode = u.getAttribute("mode");
            if (q == "aborted") {
            } else {
                if (q == "working" || q == "invalid") {
                } else {
                    if (q != "cached") {
                        Qva.Mgr.object.prototype.GenericPaint.apply(this, Array(v, u))
                    }
                }
            }
        };
        this.QvaPublic = new Qva.Public.Wrapper(this);
        return this
    };
    Qva.Mgr.QvObject.prototype.PartialLoad = function(n, o) {
        if (isNaN(parseInt(o.x)) || isNaN(parseInt(o.y))) {
            return
        }
        this.PageBinder.IsPartialLoad = true;
        this.PageBinder._Send("get", n.substr("Document.".length), true, {offset: o.x + ":" + o.y})
    };
    Qva.Mgr.QvObject.prototype.QueuePostPaintMessage = function(o) {
        for (var n = 0; n < this.PostPaintQueue.length; ++n) {
            if (this.PostPaintQueue[n] == o) {
                return
            }
        }
        this.PostPaintQueue.push(o);
        this.PageBinder.QueuePostPaintMessage(this)
    };
    Qva.Mgr.search = function(n, p, o, q) {
        if (!Qva.MgrSplit(this, o, q)) {
            return
        }
        n.AddManager(this);
        this.Element = p;
        this.Element.Name = this.Name;
        this.Element.binderid = n.binderid;
        this.Element.className = "PopupSearch";
        this.First = true
    };
    Qva.Mgr.search.Do = function(n, p, o) {
        n.Set(".Search", "search", p, o)
    };
    Qva.Mgr.search.KeyUp = function(p) {
        if (!p) {
            p = window.event
        }
        var o = p.keyCode;
        switch (o) {
            case 13:
            case 27:
                break;
            default:
                this.last_search = this.value;
                var n = Qva.GetBinder(this.binderid);
                if (n.GetEnabled()) {
                    Qva.Mgr.search.Do(n, this.value, true)
                } else {
                    n.PendingSearchName = ".Search";
                    n.PendingSearchValue = this.value
                }
                break
            }
    };
    Qva.Mgr.search.Close = function(q, p, s) {
        Qva.KeepPopupSearchAlive = false;
        var u = ".Search";
        var o = q.value;
        q.value = "";
        window.focus();
        var n = Qva.GetBinder(q.binderid);
        if (n.Enabled) {
            if (p) {
                Qva.Mgr.search.Do(n, o, false)
            }
            var r;
            if (p) {
                r = s ? "ctrlaccept" : "accept"
            } else {
                r = "abort"
            }
            n.Set(u, "closesearch", r, true)
        } else {
            Qva.PendingSearchKey = (p ? "accept" : "abort");
            Qva.PendingSearchKeyName = u
        }
    };
    Qva.Mgr.search.TryClose = function(o, n, p) {
        if (Qva.GetBinder(o.binderid).GetEnabled()) {
            Qva.Mgr.search.Close(o, n, p)
        } else {
            setTimeout(function() {
                Qva.Mgr.search.TryClose(o, n, p)
            }, 100);
            return
        }
    };
    Qva.Mgr.search.KeyDown = function(o) {
        if (!o) {
            o = window.event
        }
        var n = o.keyCode;
        switch (n) {
            case 13:
                Qva.Mgr.search.TryClose(this, true, ctrlKeyPressed(o));
                return false;
            case 27:
                var p = this;
                window.setTimeout(function() {
                    Qva.Mgr.search.Close(p, false)
                }, 0);
                break
            }
    };
    Qva.Mgr.search.prototype.Paint = function(x, C) {
        if (this.First) {
            this.First = false;
            var w = this.ToogleImg = document.createElement("div");
            w.style.display = "none";
            var q = g(w);
            q.addClass("caption-icon-16x16");
            if (IS_IE6_OR_IE7) {
                q.addClass("QvCaptionIconIE7")
            } else {
                q.addClass("QvCaptionIcon")
            }
            q.addClass("search-expand-icon");
            w.alt = "expand";
            w.Action = "Document.Search.TG";
            w.onclick = onclick_action;
            w.binderid = this.Element.binderid;
            this.Element.appendChild(w);
            var u = document.createElement("div");
            var D = g(u);
            D.addClass("caption-icon-16x16");
            if (IS_IE6_OR_IE7) {
                D.addClass("QvCaptionIconIE7")
            } else {
                D.addClass("QvCaptionIcon")
            }
            D.addClass("search-close-icon");
            u.alt = "close";
            u.Action = "Document.Search.Close";
            u.onclick = onclick_action;
            u.binderid = this.Element.binderid;
            this.Element.appendChild(u);
            var G = {};
            G.name = "Document.Search.DS";
            G.id = "Search.DS";
            var y = this.AssosiatedDS = Qva.Mgr.CreateObject(this.PageBinder, G, false);
            y.Element.className += " DS";
            y.Element.style.cssText = "z-index: 100; display: none; left: 10pt; top: 10pt; width: 10pt; height: 800pt; position:absolute;";
            new Qva.Mgr.transientpos(y, y.Element, G.name);
            new Qva.Mgr.closetransient(y, y.Element, name, "", y.CreateListBox());
            document.body.appendChild(y.Element)
        }
        this.Touched = true;
        var o = this.Element;
        o.style.display = Qva.MgrGetDisplayFromMode(this, x);
        if (o.style.display == "none") {
            if (this.AssosiatedDS) {
                this.AssosiatedDS.Element.style.display = "none"
            }
            if (this.TextBox) {
                purge(this.TextBox);
                this.Element.removeChild(this.TextBox);
                this.TextBox = null
            }
            return
        }
        if (!this.TextBox) {
            var A = this.TextBox = document.createElement("input");
            A.binderid = this.Element.binderid;
            A.tabIndex = 1;
            A.onkeyup = Qva.Mgr.search.KeyUp;
            A.onkeydown = Qva.Mgr.search.KeyDown;
            A.onclick = Qva.CancelAction;
            if (IS_TOUCHENABLED) {
                A.ontouchend = Qva.CancelAction
            }
            this.Element.appendChild(A);
            this.TextBox.last_search = ""
        }
        var n = C.getAttribute("owner");
        var v = C.getAttribute("text");
        var s = C.getAttribute("associatedsearch");
        var E = window.document.getElementById(n);
        var r = Qva.GetAbsolutePageCoords(E);
        var F = 36;
        if (IS_IE6_OR_IE7) {
            F = 38
        }
        var z = r.y - 20;
        var B = E.offsetWidth;
        switch (s) {
            case"true":
                B *= 2;
                this.ToogleImg.alt = "collapse";
                g(this.ToogleImg).removeClass("search-expand-icon").addClass("search-collapse-icon");
                this.ToogleImg.style.display = "";
                break;
            case"false":
                this.AssosiatedDS.Element.style.display = "none";
                this.ToogleImg.alt = "expand";
                g(this.ToogleImg).addClass("search-expand-icon").removeClass("search-collapse-icon");
                this.ToogleImg.style.display = "";
                break;
            case"hidden":
            default:
                this.AssosiatedDS.Element.style.display = "none";
                F = 18;
                this.ToogleImg.style.display = "none";
                break
        }
        B -= 2;
        if (B < 100) {
            B = 100
        }
        o.style.left = r.x + "px";
        o.style.top = z + "px";
        o.style.width = B + "px";
        this.TextBox.style.width = (B - F) + "px";
        this.TextBox.focus();
        Qva.ActiveElement = this.TextBox;
        if (Qva.InitSearch) {
            if (Qva.InitSearch == "<" || Qva.InitSearch == ">" || Qva.InitSearch == "=") {
                this.TextBox.value = Qva.InitSearch
            } else {
                if (v == "**") {
                    this.TextBox.value = "*" + Qva.InitSearch + "*"
                } else {
                    if (v == "~") {
                        this.TextBox.value = "~" + Qva.InitSearch
                    } else {
                        this.TextBox.value = Qva.InitSearch
                    }
                }
            }
            this.TextBox.last_search = this.TextBox.value;
            Qva.Mgr.search.Do(this.PageBinder, this.TextBox.value, true);
            Qva.SetCursor(this.TextBox, false);
            Qva.InitSearch = ""
        } else {
            if (this.PageBinder.PendingSearchName == "" && this.TextBox.value != v && this.TextBox.last_search == this.TextBox.value) {
                this.TextBox.value = v;
                Qva.SetCursor(this.TextBox, false)
            }
        }
    };
    Qva.AddAnnotation = function(p) {
        var n = document.createElement("div");
        n.style.display = "none";
        n.className = "QvAnnotation";
        n.onclick = function(q) {
            p.PageBinder.Set("Document.Annotations.Filter", "value", p.Name, true)
        };
        var o = document.createElement("span");
        n.appendChild(o);
        p.Element.appendChild(n);
        p.setAnnotation = function(r) {
            var s = r.getAttribute("annotations");
            var q = r.getAttribute("selected_annotations") === "true";
            n.style.display = s ? "" : "none";
            if (n.style.display == "none") {
                return
            }
            g(p.Element).addClass("has-annotation");
            g(n)[q ? "addClass" : "removeClass"]("Selected");
            o.innerText = s
        }
    };
    Qva.Mgr.textdatetemplate = function(n, p, o, q) {
        if (!Qva.MgrSplit(this, o, q)) {
            return
        }
        n.AddManager(this);
        this.Element = p
    };
    Qva.Mgr.textdatetemplate.prototype.Paint = function(q, o) {
        this.Touched = true;
        var n = this.Element;
        var p = h(o, "text");
        n.innerText = p;
        n.style.display = Qva.MgrGetDisplayFromMode(this, q)
    };
    function f(n, o) {
        n = ("" + n);
        while (n.length < o) {
            n = "0" + n
        }
        return n
    }
    function d(n) {
        if (!n) {
            return null
        }
        while (n.length > 1 && n.charAt(0) === "0") {
            n = n.substr(1)
        }
        return parseInt(n)
    }
    function c(u, y) {
        var z = /(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/;
        var n = z.exec(u);
        if (n) {
            var v = d(n[1]);
            var q = d(n[2]);
            var o = d(n[3]);
            var w = d(n[4]);
            var p = d(n[5]);
            var x = d(n[6]);
            var s = new Date(Date.UTC(v, q - 1, o, w, p, x));
            if (y) {
                return y(s)
            } else {
                return s.toLocaleString()
            }
        } else {
            return u
        }
    }
    function h(q, o) {
        var p = q.getAttribute(o + "_template");
        var s = c(q.getAttribute(o + "_date"), function(u) {
            return u
        });
        var n = f(s.getFullYear(), 4) + "." + f(s.getMonth() + 1, 2) + "." + f(s.getDate(), 2);
        var r = f(s.getHours(), 2) + ":" + f(s.getMinutes(), 2);
        return p.replace("{date}", n).replace("{time}", r)
    }
    Qva.Mgr.notelist = function(n, p, o, q) {
        if (!Qva.MgrSplit(this, o, q)) {
            return
        }
        n.AddManager(this);
        this.Element = p
    };
    Qva.Mgr.notelist.prototype.Paint = function(z, o) {
        this.Touched = true;
        var u = this.Element;
        u.style.display = Qva.MgrGetDisplayFromMode(this, z);
        if (u.style.display == "none") {
            return
        }
        u.innerHTML = "";
        var r = o.getAttribute("compactview") === "true";
        g(u).parent().parent().addClass(r ? "ConciseView" : "VerboseView").removeClass(r ? "VerboseView" : "ConciseView");
        u.className = r ? "ConciseView" : "VerboseView";
        var x = o.getElementsByTagName("element");
        for (var v = 0; v < x.length; ++v) {
            var D = x[v];
            var n = document.createElement("div");
            n.className = "Note";
            if (!r) {
                var w = document.createElement("div");
                w.className = "Header";
                w.innerText = D.getAttribute("header");
                n.appendChild(w)
            }
            if (D.getAttribute("bookmark") === "true") {
                var A = document.createElement("span");
                A.className = "has-snapshot";
                n.appendChild(A)
            }
            var B = document.createElement("div");
            B.className = "Title";
            B.innerText = D.getAttribute("title");
            n.appendChild(B);
            var y = document.createElement("div");
            y.className = "Body";
            y.innerText = D.getAttribute("body");
            n.appendChild(y);
            if (r) {
                var C = document.createElement("div");
                C.className = "Footer";
                C.innerText = D.getAttribute("footer");
                n.appendChild(C)
            } else {
                var s = document.createElement("div");
                s.className = "Footer";
                s.innerText = h(D, "footer1");
                n.appendChild(s);
                var q = document.createElement("div");
                q.className = "Footer";
                if (D.getAttribute("footer2") != null) {
                    q.innerText = D.getAttribute("footer2")
                } else {
                    q.innerText = h(D, "footer2")
                }
                n.appendChild(q);
                var p = document.createElement("div");
                p.className = "Footer";
                p.innerText = D.getAttribute("footer3");
                p.style.cssText = "text-align: right;";
                n.appendChild(p)
            }
            n.binderid = this.PageBinder.ID;
            n.Position = D.getAttribute("id");
            n.Action = "Document.Annotations.Show";
            n.onclick = onclick_action;
            u.appendChild(n)
        }
    };
    Qva.Mgr.commentlist = function(n, p, o, q) {
        if (!Qva.MgrSplit(this, o, q)) {
            return
        }
        n.AddManager(this);
        this.Element = p
    };
    Qva.Mgr.commentlist.prototype.Paint = function(z, D) {
        this.Touched = true;
        var p = this.Element;
        p.style.display = Qva.MgrGetDisplayFromMode(this, z);
        if (p.style.display == "none") {
            return
        }
        p.innerHTML = "";
        var A = D.getElementsByTagName("element");
        var n = g(p).parents(".NoteBg").prev().find("div a");
        Assert(n.length === 2);
        if (A.length === 0) {
            if (n.length > 0 && n[0]) {
                n[0].removeAttribute("href", "");
                n[1].removeAttribute("href", "");
                n[0].className = "disabled";
                n[1].className = "disabled"
            }
        } else {
            if (n.length > 0 && n[0]) {
                n[0].setAttribute("href", "#comment_first");
                n[1].setAttribute("href", "#comment_last");
                n[0].className = "";
                n[1].className = ""
            }
        }
        function q(G) {
            if (IS_TOUCHENABLED) {
                G.bind("touchstart", function(H) {
                    H.stopPropagation()
                })
            }
        }
        for (var F = 0; F < A.length; ++F) {
            var o = A[F];
            var B = document.createElement("div");
            B.className = "Comment";
            if (o.getAttribute("menu") === "true") {
                var v = document.createElement("img");
                v.style.cssText = "float: right;";
                v.title = "menu";
                v.src = this.PageBinder.PageBinder.BuildBinaryUrl(null, null, "bundled:caption_menu");
                B.appendChild(v);
                v.binderid = this.PageBinder.ID;
                v.Position = "comment:" + o.getAttribute("id");
                v.onclick = function(G) {
                    if (!G) {
                        G = window.event
                    }
                    return Qva.GetBinder(this.binderid).OnContextMenu(G, "Annotations", this.Position)
                };
                q(g(v))
            }
            var E = o.getAttribute("deleted");
            if (E) {
                var s = document.createElement("div");
                s.className = "Body";
                s.style.cssText = "font-style: italic";
                s.innerText = E;
                B.appendChild(s)
            } else {
                var C = document.createElement("span");
                C.style.cssText = "float: left; margin: 0 5px 6px 1px; position: static;";
                C.className = "ui-icon-user";
                B.appendChild(C);
                var y = document.createElement("div");
                y.className = "Header";
                y.innerText = h(o, "h1");
                B.appendChild(y);
                var x = document.createElement("div");
                x.className = "Header";
                x.innerText = o.getAttribute("h2");
                B.appendChild(x);
                var u = o.getAttribute("bookmarkid");
                if (u) {
                    var r = document.createElement("a");
                    r.className = "use-snapshot";
                    r.Bookmark = o.getAttribute("bookmarkid");
                    r.binderid = this.PageBinder.ID;
                    r.onclick = function(G) {
                        Qva.GetBinder(this.binderid).Set("bookmark-apply", "docaction", this.Bookmark, false);
                        return false
                    };
                    q(g(r));
                    B.appendChild(r)
                }
                var w = document.createElement("div");
                w.className = "Body";
                w.innerText = o.getAttribute("body");
                B.appendChild(w)
            }
            p.appendChild(B)
        }
    };
    Qva.Mgr.icon = function(n, r, p, s) {
        var q = r.getAttribute("icon");
        var o = Qva.GetBinder(n.binderid);
        r.src = o.BuildBinaryUrl(null, null, q)
    };
    Qva.Mgr.annotations = function(o, r, n, v, s) {
        var n = Qva.MgrMakeName(n, v);
        this.Element = r;
        var w = this;
        o.OnComplete = function() {
            w.Update()
        };
        var q = n + ".NoteList.Notes";
        this.pageoffset = 0;
        this.totalsize = 0;
        this.visible_notes = 0;
        o.AddManager({Name: q, Paint: function(C, B) {
                w.pageoffset = parseInt(B.getAttribute("pageoffset"), 10);
                w.totalsize = parseInt(B.getAttribute("totalsize"), 10)
            }});
        var y = g(r).find(".Notes button");
        g(y[0]).click(function() {
            if (g(this).hasClass("Disabled")) {
                return
            }
            o.PageBinder.Set(q, "scroll", -w.visible_notes, true)
        });
        g(y[1]).click(function() {
            if (g(this).hasClass("Disabled")) {
                return
            }
            o.PageBinder.Set(q, "scroll", w.visible_notes, true)
        });
        g(r).find(":button").button();
        var p = g(r).closest(".QvFrame");
        o.AddManager({Frame: p, Name: n + ".Height", Paint: function(D, C) {
                var B = parseInt(C.getAttribute("text"), 10);
                Assert(!isNaN(B));
                this.Frame.height(B)
            }});
        g(r).find(".Resizer").bind("mousedown", function(G) {
            if (G.which !== 1) {
                return
            }
            var H = g(r).find('*[data-height="auto"]:visible');
            Assert(H.length === 1);
            var F = p.outerHeight();
            var E;
            if (H.css("box-sizing") === "border-box") {
                E = H.outerHeight()
            } else {
                E = H.height()
            }
            var B = G.pageY;
            function D(J) {
                var I = J.pageY - B;
                if (F + I < 490) {
                    I = 490 - F
                }
                p.height(F + I);
                H.height(E + I)
            }
            function C(J) {
                if (J.which !== 1) {
                    return
                }
                g(document).unbind("mousemove", D);
                g(document).unbind("mouseup", C);
                var I = J.pageY - B;
                if (F + I < 490) {
                    I = 490 - F
                }
                p.height(F + I);
                H.height(E + I);
                o.PageBinder.Set("Document.Annotations", "resize", F + I, true)
            }
            g(document).bind("mousemove", D);
            g(document).bind("mouseup", C)
        });
        if (IS_IE) {
            g(r).find(".text-input").not("textarea").keypress(function(B) {
                if (B.which == 13) {
                    return false
                }
            })
        }
        if (IS_TOUCHENABLED) {
            var A = g(r).find('div[data-height="auto"]').filter(function() {
                return g(this).css("overflow") === "auto"
            }).wrapInner("<div>").children();
            for (var u = 0; u < A.length; ++u) {
                A[u].qvscroll = new QvScroll({attachElement: A[u], horizontal: "disabled", cornerBounce: true});
                try {
                    var z = A[u].parentNode;
                    z.addEventListener("touchstart", Qva.NoAction, false);
                    z.addEventListener("touchend", Qva.NoAction, false)
                } catch (x) {
                }
            }
        }
    };
    Qva.Mgr.annotations.prototype.Update = function() {
        this.UpdateHeight();
        this.UpdateNotesScroll()
    };
    Qva.Mgr.annotations.prototype.UpdateHeight = function() {
        var v = g(this.Element).find('*[data-height="auto"]:visible');
        Assert(v.length <= 1);
        if (v.length !== 1) {
            return
        }
        var x = v.parent();
        var p = x.children(":visible").not(v);
        var q = x.closest(".QvFrame");
        var w = q.height();
        var o = q.children(".QvCaption_Prop").outerHeight();
        var u = w - o - 2;
        var r = 0;
        p.each(function() {
            r += g(this).outerHeight(true)
        });
        var s = 0;
        if (v.css("box-sizing") !== "border-box") {
            s = v.outerHeight(true) - v.height()
        }
        var n = u - r - s;
        v.height(n);
        if (v[0].firstChild && v[0].firstChild.qvscroll) {
            v[0].firstChild.qvscroll.attach()
        }
    };
    Qva.Mgr.annotations.prototype.UpdateNotesScroll = function() {
        var q = g(this.Element).find(".Notes");
        if (!q.is(":visible")) {
            return
        }
        var s = q.children(".NoteList").height();
        var n = q.children(".NoteList").children().children().outerHeight() + 5;
        this.visible_notes = Math.floor(s / n);
        var p = this.pageoffset > 0;
        var o = (this.totalsize - this.pageoffset) * n > s;
        var r = q.children("button");
        g(r[0])[p ? "removeClass" : "addClass"]("Disabled");
        g(r[1])[o ? "removeClass" : "addClass"]("Disabled")
    }
})(window.jQuery);
(function(a, c) {
    function b(j, g, h, k) {
        var l = 0;
        var f = 0;
        while (l < j.length && f < g.length) {
            if (j[l] < g[f]) {
                k.push(j[l]);
                ++l
            } else {
                if (j[l] > g[f]) {
                    h.push(g[f]);
                    ++f
                } else {
                    ++l;
                    ++f
                }
            }
        }
        for (; l < j.length; ++l) {
            k.push(j[l])
        }
        for (; f < g.length; ++f) {
            h.push(g[f])
        }
    }
    function d(f, h) {
        var m = window.document.getElementById(f);
        if (m) {
            var l = m.style.zIndex;
            if (h == l) {
                return
            }
            m.style.zIndex = h
        }
        var j = [f + "_minimized", f + "_minimized_resize", f + "_minimized_move", f + "_frame_resize", f + "_frame_move"];
        for (var g = 0; g < j.length; g++) {
            var k = window.document.getElementById(j[g]);
            if (k) {
                k.style.zIndex = h
            }
        }
    }
    Qva.Collaboration = function(f, g) {
        this.Name = f.DefaultScope + ".ActiveSheet";
        this.Attr = "collobj";
        this.Element = g;
        this.PageBinder = f;
        f.AddManager(this);
        this.Objects = []
    };
    Qva.Collaboration.prototype.Scale = function(h, f, g) {
        var j = parseFloat(h.getAttribute(f));
        if (isNaN(j) || j < 0) {
            j = 100
        }
        if (j < g) {
            j = g
        }
        return j
    };
    Qva.Collaboration.prototype.Paint = function(q, s) {
        this.Touched = true;
        if (this.Element == null) {
            this.Element = document.getElementById("MainContainer")
        }
        if (this.Element == null) {
            return
        }
        this.ZList = [];
        this.PropZList = [];
        var f = [];
        var v = s.getElementsByTagName("object");
        var l = v.length;
        var u = 0;
        Qva.Help.Context = null;
        var o = null;
        for (var g = 0; g < l; ++g) {
            var w = v[g];
            var C = w.getAttribute("name");
            var A = w.getAttribute("objectid");
            if (this.PageBinder.SingleObjectId && A) {
                if (A != this.PageBinder.SingleObjectId) {
                    continue
                }
            }
            if (!C) {
                continue
            }
            var p = {};
            p.id = C;
            p.objectid = A;
            p.mode = w.getAttribute("mode");
            p.left = w.getAttribute("left");
            p.top = w.getAttribute("top");
            p.width = w.getAttribute("width");
            p.height = w.getAttribute("height");
            p.allowmove = w.getAttribute("allowmove");
            p.allowresize = !IS_TOUCHENABLED && w.getAttribute("allowresize");
            if (p.mode == "maximized") {
                p.maximized = true;
                o = C
            } else {
                p.maximized = false
            }
            p.type = w.getAttribute("type");
            p.help = w.getAttribute("help");
            p.extension = w.getAttribute("extension");
            if (Qva.Help.Context == null && p.mode != "hidden") {
                Qva.Help.Context = {Name: p.id, Topic: p.help, SubType: p.extension}
            }
            if (IS_IE6_OR_IE7) {
                var r = parseInt(w.getAttribute("top")) + parseInt(w.getAttribute("height"));
                if (r > u) {
                    u = r
                }
            }
            f.push(C);
            if (w.getAttribute("type") == "TW") {
                if (!this.PageBinder.Members[this.PageBinder.DefaultScope + "." + C] && p.mode == "hidden") {
                    continue
                }
                this.PropZList.push(C)
            } else {
                this.ZList.push(C)
            }
            this.PageBinder.SignalVisibility(p.id, p.mode !== "hidden");
            var h = C;
            C = this.PageBinder.DefaultScope + "." + C;
            var B = this.PageBinder.Members[C];
            if (B) {
                B = B[0]
            }
            if (B) {
                B.Size(p);
                if (B.setAnnotation) {
                    B.setAnnotation(w)
                }
                if (w.getAttribute("type") != "TW") {
                    continue
                }
                var x = w.getAttribute("page") != null;
                if (!!B.HasPage == x) {
                    continue
                }
                this.PageBinder.RemoveObject(h)
            }
            p.create = true;
            p.name = C;
            if (p.type == "TW") {
                p.page = w.getAttribute("page")
            }
            switch (p.type) {
                case"TW":
                    this.CreateToolWindow(p);
                    break;
                default:
                    this.AddObject(p);
                    break
            }
            if (p.type != "TW") {
                this.CreateMinimized(p)
            }
            B = this.PageBinder.Members[C];
            if (B) {
                B = B[0]
            }
            if (B) {
                B.Size(p);
                if (B.setAnnotation) {
                    B.setAnnotation(w)
                }
            }
        }
        if (IS_IE6_OR_IE7) {
            this.Element.style.height = u + 10 + "px"
        }
        f.sort();
        var k = [];
        var z = [];
        b(this.Objects, f, k, z);
        this.Objects = f;
        var j = this.PageBinder.ToolWindowZLevel;
        for (var y = 0; y < z.length; ++y) {
            this.PageBinder.RemoveObject(z[y]);
            j.Remove(z[y]);
            this.PageBinder.RemoveObject(z[y] + ".RE")
        }
        var n = j.SetObjectCount(this.ZList.length, this.PropZList.length);
        for (var y = 0; y < this.ZList.length; y++) {
            var C = this.ZList[y];
            var m = C == o ? j.TopDialog + 100 : this.ZList.length - y;
            m += j.Step;
            d(C, m)
        }
        for (var y = this.PropZList.length - 1; y >= 0; y--) {
            var C = this.PropZList[y];
            j.SetZLevel(C, n)
        }
    };
    Qva.Collaboration.prototype.AddObject = function(f) {
        var g = Qva.Mgr.CreateObject(this.PageBinder, f, true);
        Qva.AddAnnotation(g);
        this.Element.appendChild(g.Element)
    };
    Qva.Collaboration.prototype.CreateToolWindow = function(k) {
        var f = Qva.Mgr.CreateObject(this.PageBinder, k, true);
        f.Element.className += " ToolWindow Qv_" + k.help;
        f.Element.style.cssText += "display:none;";
        if (IS_IE8_OR_BELOW) {
            f.Element.style.left = k.left;
            f.Element.style.top = k.top
        }
        var n = document.createElement("table");
        n.style.cssText = "height:100%; width:100%;";
        if (k.page) {
            f.HasPage = true;
            var o = n.insertRow(-1);
            var m = o.insertCell(-1);
            m.vAlign = "top"
        } else {
            var l = n.insertRow(-1);
            var g = l.insertCell(-1);
            g.vAlign = "top";
            g.innerHTML = "<div class='ToolWindow-Navigation'></div>";
            var o = n.insertRow(-1);
            var m = o.insertCell(-1);
            m.vAlign = "top";
            m.innerHTML = "<div class='ToolWindow-Body'></div>"
        }
        f.ContentElement.appendChild(n);
        Qva.SetContextMenu(f, function(p) {
            return Qva.GetBinder(this.binderid).OnContextMenu(p, this.Name)
        });
        this.Element.appendChild(f.Element);
        new Qva.Mgr.style(f, f.ContentElement, k.name + ".Style");
        if (k.page) {
            var j = this.PageBinder;
            var h = new Qva.Mgr.toolwindowbody(j, null, k.name + ".Body");
            h.TopElement = f.Element;
            this.PageBinder.LoadHtml(k.page, function(p) {
                m.innerHTML = p;
                h.Element = a(m).children().get(0);
                h.Scan();
                h.Paint()
            })
        } else {
            new Qva.Mgr.toolwindownavigation(this.PageBinder, g.firstChild, k.name + ".Navigation");
            new Qva.Mgr.toolwindowbody(this.PageBinder, a(m).children().get(0), k.name + ".Body")
        }
    };
    Qva.Collaboration.prototype.CreateMinimized = function(f) {
        var g = document.createElement("div");
        g.className = "QvFrame";
        g.style.cssText = "vertical-align:middle;text-align:left; display:none;";
        g.id = f.id + "_minimized";
        this.Element.appendChild(g);
        new Qva.Mgr.restore(this.PageBinder, g, f.name + ".RE")
    };
    Qva.Mgr.children = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h;
        h.binderid = f.binderid;
        this.PageBinder = f.PageBinder;
        this.Objects = [];
        this.Managers = [];
        this.InlineStyle = f.InlineStyle;
        this.LeftButton = f.LeftButton;
        this.TableLimit = f.TableLimit;
        this.IsHosted = f.IsHosted;
        this.Enabled = f.GetEnabled();
        this.binderid = f.binderid;
        this.GridElements = {}
    };
    Qva.Mgr.children.prototype.GetEnabled = function() {
        return this.PageBinder.GetEnabled()
    };
    Qva.Mgr.children.prototype.Paint = function(p, u) {
        this.Touched = true;
        var f = [];
        var w = u.getElementsByTagName("object");
        var l = w.length;
        var v = 0;
        var m = [];
        for (var h = 0; h < l; ++h) {
            var x = w[h];
            var B = x.getAttribute("name");
            if (!B) {
                continue
            }
            f.push(B);
            m.push(B);
            var o = {};
            o.id = B;
            o.mode = x.getAttribute("mode");
            o.left = x.getAttribute("left");
            o.top = x.getAttribute("top");
            o.width = x.getAttribute("width");
            o.height = x.getAttribute("height");
            o.allowmove = x.getAttribute("allowmove");
            o.allowresize = x.getAttribute("allowresize");
            o.maximized = o.mode == "maximized";
            if (IS_IE6_OR_IE7) {
                var s = parseInt(x.getAttribute("top")) + parseInt(x.getAttribute("height"));
                if (s > v) {
                    v = s
                }
            }
            var j = B;
            B = this.PageBinder.GetDocumentMgr().DefaultScope + "." + B;
            var A = this.PageBinder.GetDocumentMgr().Members[B];
            if (A) {
                A = A[0]
            }
            if (A) {
                A.Size(o);
                continue
            }
            o.create = true;
            o.name = B;
            o.type = x.getAttribute("type");
            o.extension = x.getAttribute("extension");
            var q = Qva.Mgr.CreateObject(this, o);
            var r = document.createElement("div");
            this.GridElements[B] = r;
            r.appendChild(q.Element);
            this.Element.appendChild(r)
        }
        if (IS_IE6_OR_IE7) {
            this.Element.style.height = v + 10 + "px"
        }
        f.sort();
        var k = [];
        var z = [];
        b(this.Objects, f, k, z);
        this.Objects = f;
        for (var y = 0; y < z.length; ++y) {
            var g = this.GridElements["Document." + z[y]];
            if (g) {
                g.parentNode.removeChild(g)
            }
            this.RemoveObject(z[y])
        }
        for (var y = 0; y < m.length; ++y) {
            var n = this.GridElements["Document." + m[y]];
            a(this.Element).append(n)
        }
    };
    Qva.Mgr.children.prototype.QueuePostPaintMessage = function(f) {
        this.PageBinder.QueuePostPaintMessage(f)
    };
    Qva.Mgr.children.prototype.BuildBinaryUrl = function(j, h, g, f) {
        return this.PageBinder.BuildBinaryUrl(j, h, g, f)
    };
    Qva.Mgr.children.prototype.Set = function(g, h, j, f) {
        this.PageBinder.GetDocumentMgr().Set(g, h, j, f)
    };
    Qva.Mgr.children.prototype.GetDocumentMgr = function() {
        return this.PageBinder.GetDocumentMgr()
    };
    Qva.Mgr.children.prototype.GetUpdates = function(h) {
        for (var f = 0; f < this.Managers.length; ++f) {
            var g = this.Managers[f];
            if (g.GetUpdates) {
                g.GetUpdates(h)
            }
        }
    };
    Qva.Mgr.children.prototype.GetMaximizedRect = function(f) {
        var g = {};
        g.left = "0";
        g.top = "0";
        if (this.Grid) {
            g.width = "" + this.GridElements[f.Name].offsetWidth;
            g.height = "" + this.GridElements[f.Name].offsetHeight
        } else {
            g.width = "" + this.Element.offsetWidth;
            g.height = "" + this.Element.offsetHeight
        }
        return g
    };
    Qva.Mgr.children.prototype.AddManager = function(f) {
        f.PageBinder = this;
        f.Touched = false;
        if (f.SelectedClassName == null) {
            f.SelectedClassName = "QvSelected";
            f.DeselectedClassName = "QvDeselected";
            f.EnabledClassName = "QvOptional";
            f.DisabledClassName = "QvExcluded";
            f.LockedClassName = "QvLocked";
            f.SelectedExcludedClassName = "QvSelectedExcluded";
            f.LockedExcludedClassName = "QvLockedExcluded";
            f.AlternativeClassName = "QvAlternative";
            f.ModeIfNotEnabled = "n"
        }
        this.Managers[this.Managers.length] = f;
        this.PageBinder.GetDocumentMgr().Append(f, f.Name, f.Attr)
    };
    Qva.Mgr.children.prototype.Append = function(j, g, f, h) {
        this.PageBinder.GetDocumentMgr().Append(j, g, f, h)
    };
    Qva.Mgr.children.prototype.RemoveFromManagers = Qva.PageBinding.prototype.RemoveFromManagers;
    Qva.Mgr.children.prototype.RemoveObject = function(f) {
        var g = this.PageBinder.GetDocumentMgr().Members["Document." + f];
        if (g) {
            g = g[0]
        }
        if (g) {
            if (g.Remove) {
                g.Remove()
            }
            this.RemoveFromManagers(g)
        }
        this.PageBinder.GetDocumentMgr().Members["Document." + f] = {};
        this.PageBinder.GetDocumentMgr().Members["Document." + f] = null
    };
    Qva.Mgr.children.prototype.Remove = function() {
        for (var f = 0; f < this.Objects.length; f++) {
            this.RemoveObject(this.Objects[f])
        }
        Qva.RemoveHtml(this.Element);
        this.PageBinder = null;
        this.Objects = {};
        this.Managers = {};
        this.InlineStyle = null;
        this.LeftButton = null;
        this.TableLimit = null;
        this.IsHosted = null;
        this.Enabled = null;
        this.binderid = null;
        this.GridElements = {}
    };
    Qva.Mgr.children.prototype.GetEnabled = function() {
        return this.Enabled
    }
})(jQuery);
(function(b, c) {
    if (!Qva.DragDrop) {
        Qva.DragDrop = new Object({mouseOffset: null, DropTargets: [], DropFrames: [], DropDefault: null, curDrag: null, dragHelper: null, curDrop: null, dragType: null, DragStarted: null})
    }
    Qva.DragDrop.GetDropTarget = function(d, h, f) {
        if (!h) {
            h = Qva.DragDrop.curDrag.Type
        }
        if (f) {
            var j = f.split(".");
            if (j.length >= 2) {
                f = j[0] + "." + j[1]
            }
        }
        for (var g = 0; g < Qva.DragDrop.DropTargets.length; ++g) {
            if (Qva.DragDrop.dragElement && Qva.DragDrop.dragElement.binderid != Qva.DragDrop.DropTargets[g].binderid) {
                continue
            }
            var l = Qva.DragDrop.DropTargets[g].Inside(d, h);
            if (l) {
                return l
            }
        }
        for (var g = 0; g < Qva.DragDrop.DropFrames.length; ++g) {
            var k = Qva.DragDrop.DropFrames[g];
            if (f && k.Name == f) {
                continue
            }
            var l = k.Inside(d, h);
            if (l) {
                return l
            }
        }
        if (Qva.DragDrop.DropDefault) {
            return Qva.DragDrop.DropDefault.Inside(d, h)
        }
        return null
    };
    Qva.DragDrop.Inside = function(g, f) {
        try {
            var j = Qva.GetPageCoords(g);
            var h = parseInt(g.offsetWidth);
            var d = parseInt(g.offsetHeight);
            return(f.x > j.x && f.x < j.x + h && f.y > j.y && f.y < j.y + d)
        } catch (k) {
            return false
        }
    };
    Qva.DragDrop.mouseMove = function(r) {
        r = r || window.event;
        if (r.preventDefault) {
            r.preventDefault()
        } else {
            r.returnValue = false
        }
        if (!Qva.DragDrop.curDrag) {
            Assert(false)
        }
        var x = new Date();
        if (x.getTime() - Qva.MouseDownStartTime < 200) {
            return
        }
        var s = {x: r.clientX, y: r.clientY};
        var y = Qva.DragDrop.dragElement;
        if (!Qva.DragDrop.DragStarted) {
            Qva.DragDrop.DragStarted = true;
            while (Qva.DragDrop.dragHelper.firstChild) {
                Qva.DragDrop.dragHelper.removeChild(Qva.DragDrop.dragHelper.firstChild)
            }
            if (Qva.DragDrop.dragType == "cell") {
                Qva.DragDrop.dragHelper.appendChild(y.cloneNode(true));
                Qva.DragDrop.dragHelper.className = "QvDragRect";
                Qva.DragDrop.dragHelper.style.display = "block";
                Qva.DragDrop.dragHelper.firstChild.dragObj = null
            } else {
                var w = y.cloneNode(true);
                var f = y.getElementsByTagName("select");
                if (f.length > 0) {
                    var q = w.getElementsByTagName("select");
                    for (var u = 0; u < f.length; u++) {
                        q[u].selectedIndex = f[u].selectedIndex
                    }
                }
                var g = w.getElementsByTagName("span");
                for (var u = 0; u < g.length; u++) {
                    g[u].style.cursor = "inherit"
                }
                var v = y;
                while (v && v.nodeName != "TABLE") {
                    v = v.parentNode
                }
                if (v) {
                    var l = v.firstChild;
                    while (l && l.nodeName != "COLGROUP") {
                        l = l.nextSibling
                    }
                }
                var p = document.createElement("tbody");
                var n = document.createElement("table");
                var o = b(y).getPath();
                n.style.width = Qva.ElementAttributesHandler(o, y, "offsetWidth") + "px";
                n.style.height = Qva.ElementAttributesHandler(o, y, "offsetHeight") + "px";
                n.style.tableLayout = "fixed";
                p.appendChild(w);
                if (l) {
                    n.appendChild(l.cloneNode(true))
                }
                n.appendChild(p);
                Qva.DragDrop.dragHelper.appendChild(n);
                Qva.DragDrop.dragHelper.className = "QvDragRect";
                Qva.DragDrop.dragHelper.style.display = "block";
                Qva.DragDrop.dragHelper.style.fontFamily = "arial";
                Qva.DragDrop.dragHelper.style.fontSize = "10pt";
                w.dragObj = null
            }
        }
        Qva.DragDrop.dragHelper.style.top = s.y - Qva.DragDrop.mouseOffset.y + "px";
        Qva.DragDrop.dragHelper.style.left = s.x - Qva.DragDrop.mouseOffset.x + "px";
        var m = Qva.DragDrop.GetDropTarget(s);
        if (Qva.DragDrop.curDrop != m) {
            if (Qva.DragDrop.curDrop && Qva.DragDrop.curDrop.Element) {
                for (var j = Qva.DragDrop.curDrop.Element.firstChild; j != null; j = j.nextSibling) {
                    if (j.nodeName == "TD") {
                        j.className = "";
                        j.style.backgroundImage = ""
                    }
                }
            }
            Qva.DragDrop.curDrop = m;
            Qva.DragDrop.dragHelper.style.cursor = "pointer";
            if (Qva.DragDrop.curDrop) {
                Qva.DragDrop.dragHelper.style.cursor = "";
                var k = Qva.GetBinder(Qva.DragDrop.dragElement.binderid).BuildBinaryUrl(null, null, "dropinsert");
                if (Qva.DragDrop.curDrop.VerticalPosition == "insertafter") {
                    var h = "DropTarget-Bottom"
                } else {
                    if (Qva.DragDrop.curDrop.VerticalPosition == "insertbefore") {
                        var h = "DropTarget-Top"
                    } else {
                        var h = "DropTarget-Open"
                    }
                }
                if (Qva.DragDrop.curDrop.Element) {
                    for (var j = Qva.DragDrop.curDrop.Element.firstChild; j != null; j = j.nextSibling) {
                        if (j.nodeName == "TD") {
                            j.className = h;
                            j.style.backgroundImage = "url(" + k + ")"
                        }
                    }
                } else {
                    Qva.DragDrop.dragHelper.style.cursor = "not-allowed"
                }
            }
        }
        if (!Qva.DragDrop.curDrop) {
            if (Qva.DragDrop.dragType == "row") {
                Qva.DragDrop.dragHelper.style.cursor = "not-allowed"
            }
        }
        return false
    };
    Qva.DragDrop.mouseUp = function(h) {
        if (Qva.DragDrop.curDrag) {
            Qva.DragDrop.dragHelper.style.display = "none";
            if (Qva.DragDrop.curDrop) {
                if (Qva.DragDrop.curDrop.Element) {
                    for (var g = Qva.DragDrop.curDrop.Element.firstChild; g != null; g = g.nextSibling) {
                        if (g.nodeName != "TD") {
                            continue
                        }
                        g.className = "";
                        g.style.backgroundImage = ""
                    }
                    var f = Qva.GetBinder(Qva.DragDrop.curDrop.Element.binderid);
                    if (f.Enabled) {
                        var l = Qva.DragDrop.curDrop.Element;
                        if (typeof(l) != "string") {
                            l = l.TargetName || l.ObjectId || l.Name
                        }
                        if (Qva.DragDrop.curDrop.VerticalPosition) {
                            if (Qva.DragDrop.curDrop.listobject) {
                                Qva.DragDrop.curDrop.listobject.RowCount++
                            }
                            f.Set(Qva.DragDrop.curDrag.Name, Qva.DragDrop.curDrop.VerticalPosition, l, true)
                        } else {
                            h = h || window.event;
                            var d = {x: h.clientX, y: h.clientY};
                            var j = d.y - Qva.DragDrop.mouseOffset.y - document.getElementById("PageContainer").offsetTop;
                            var k = d.x - Qva.DragDrop.mouseOffset.x;
                            l = {target: l, x: k, y: j, drop: Qva.DragDrop.curDrag.Value};
                            f.Set(Qva.DragDrop.curDrag.Name, l)
                        }
                    }
                }
            } else {
                if (Qva.DragDrop.curDrag.DropAt) {
                    h = h || window.event;
                    var d = {x: h.clientX, y: h.clientY};
                    if (!Qva.DragDrop.Inside(Qva.DragDrop.dragElement, d)) {
                        var j = d.y - Qva.DragDrop.mouseOffset.y - document.getElementById("PageContainer").offsetTop;
                        var k = d.x - Qva.DragDrop.mouseOffset.x;
                        var f = Qva.GetBinder(Qva.DragDrop.curDrag.binderid);
                        if (f.Enabled) {
                            f.Set(Qva.DragDrop.curDrag.Name, {target: "Document.ActiveSheet", x: k, y: j, drop: Qva.DragDrop.curDrag.Value})
                        }
                    }
                }
            }
        } else {
            if (Qva.DragDrop.curDrop) {
                Assert(false)
            }
        }
        Qva.DragDrop.curDrop = null;
        Qva.DragDrop.curDrag = null;
        Qva.DragDrop.DragStarted = null;
        Qva.removeEvent(document, "mousemove", Qva.DragDrop.mouseMove);
        Qva.removeEvent(document, "mouseup", Qva.DragDrop.mouseUp)
    };
    Qva.DragDrop.mouseDown = function(j) {
        j = j || window.event;
        var l = j.target || j.srcElement;
        var h = l.nodeName.toUpperCase();
        if (l.disabled || h === "INPUT" || h === "SELECT" || h === "TEXTAREA") {
            return
        }
        if (j.preventDefault) {
            j.preventDefault()
        } else {
            j.returnValue = false
        }
        var k = l.dragObj;
        if (k) {
            Qva.DragDrop.dragType = "cell";
            Qva.DragDrop.dragElement = l
        } else {
            while (l && l.nodeName != "TR") {
                l = l.parentNode
            }
            if (l) {
                var k = l.dragObj;
                if (k) {
                    Qva.DragDrop.dragType = "row";
                    Qva.DragDrop.dragElement = l
                }
            }
        }
        Qva.DragDrop.curDrag = k;
        Qva.DragDrop.DragStarted = null;
        if (k) {
            var f = {x: j.clientX, y: j.clientY};
            var g = Qva.GetPageCoords(l);
            Qva.DragDrop.mouseOffset = {x: f.x - Qva.GetScrollLeft() - g.x, y: f.y - Qva.GetScrollTop() - g.y};
            Qva.addEvent(document, "mousemove", Qva.DragDrop.mouseMove);
            Qva.addEvent(document, "mouseup", Qva.DragDrop.mouseUp);
            var m = new Date();
            Qva.MouseDownStartTime = m.getTime()
        }
        return false
    };
    Qva.DragDrop.Init = function() {
        Qva.DragDrop.dragHelper = document.createElement("DIV");
        Qva.DragDrop.dragHelper.style.cssText = "position:absolute; display:none;";
        Qva.DragDrop.dragHelper.style.zIndex = 666;
        document.body.appendChild(Qva.DragDrop.dragHelper)
    };
    var a = Qva.Start;
    Qva.Start = function() {
        a();
        Qva.DragDrop.Init()
    };
    Qva.Move = {$document: null, StartX: 0, StartY: 0, moveElement: null, MoveStarted: false, old_cursor: null, mouseDown: function(g) {
            var h = g.srcElement;
            var f = h.disabled || (h.nodeName != "INPUT" && h.nodeName != "SELECT");
            if (f) {
                if (!h.moveObj) {
                    while (!h.moveObj) {
                        h = h.parentNode
                    }
                }
                if (h.moveObj) {
                    $document = b(document);
                    old_cursor = document.body.style.cursor;
                    document.body.style.cursor = "move";
                    moveElement = h;
                    MoveStarted = false;
                    StartX = g.pageX;
                    StartY = g.pageY;
                    $document.bind("mousemove.qvmove", Qva.Move.mouseMove);
                    $document.bind("mouseup.qvmove", Qva.Move.mouseUp);
                    var j = new Date();
                    Qva.MouseDownStartTime = j.getTime()
                }
                g.preventDefault();
                Qva.BlurActiveElement();
                $document.disableSelection()
            }
        }, mouseMove: function(g) {
            if (!moveElement) {
                return
            }
            var n = new Date();
            if (n.getTime() - Qva.MouseDownStartTime < 200) {
                return
            }
            if (!MoveStarted) {
                MoveStarted = true;
                var m = moveElement.moveObj.split(":");
                Qva.Move.curMove = [];
                for (var k = 0; k < m.length; k++) {
                    var l = (m[k] != "*") ? document.getElementById(m[k]) : moveElement;
                    Qva.Move.curMove[k] = {Element: l, StartLeft: l.offsetLeft, StartTop: l.offsetTop, ClassName: l.className, zIndex: l.style.zIndex};
                    l.className += " QvMoveRect";
                    l.style.zIndex = 666
                }
            }
            var j = g.pageX - StartX;
            var h = g.pageY - StartY;
            for (var k = 0; k < Qva.Move.curMove.length; k++) {
                var f = Qva.Move.curMove[k].StartLeft + j;
                if (!isNaN(moveElement.xMax)) {
                    f = Math.min(f, moveElement.xMax)
                }
                if (!isNaN(moveElement.xMin)) {
                    f = Math.max(f, moveElement.xMin)
                }
                if (!moveElement.xOnly) {
                    var o = Qva.Move.curMove[k].StartTop + h;
                    if (!isNaN(moveElement.yMin)) {
                        o = Math.max(o, moveElement.yMin)
                    }
                    Qva.Move.curMove[k].Element.style.top = o + "px"
                }
                Qva.Move.curMove[k].Element.style.left = f + "px"
            }
        }, mouseUp: function(d) {
            $document.enableSelection();
            if (MoveStarted) {
                var m = {x: d.pageX, y: d.pageY};
                var f = Qva.DragDrop.GetDropTarget(m, "Object", moveElement.Name);
                var n = Qva.GetBinder(moveElement.binderid);
                if (f && f.Element && f.Element.Name) {
                    n.Set(f.Element.Name, {drop: moveElement.Name, cursor: d.clientX + ":" + d.clientY});
                    for (var j = 0; j < Qva.Move.curMove.length; j++) {
                        Qva.Move.curMove[j].Element.style.left = Qva.Move.curMove[j].StartLeft + "px";
                        Qva.Move.curMove[j].Element.style.top = Qva.Move.curMove[j].StartTop + "px"
                    }
                } else {
                    var h = d.pageX - StartX;
                    var g = d.pageY - StartY;
                    var k = Qva.Move.curMove[0].StartTop + g;
                    var l = Qva.Move.curMove[0].StartLeft + h;
                    if (moveElement.xOnly) {
                        l -= moveElement.xMin;
                        l /= (moveElement.xMax - moveElement.xMin);
                        n.Set(moveElement.Name, "value", Math.round(l * 255), true)
                    } else {
                        if (!isNaN(moveElement.xMin)) {
                            l = Math.max(l, moveElement.xMin)
                        }
                        if (!isNaN(moveElement.yMin)) {
                            k = Math.max(k, moveElement.yMin)
                        }
                        n.Set(moveElement.Name, {moveto: l + ":" + k, cursor: d.clientX + ":" + d.clientY})
                    }
                }
                for (var j = 0; j < Qva.Move.curMove.length; j++) {
                    Qva.Move.curMove[j].Element.className = Qva.Move.curMove[j].ClassName;
                    Qva.Move.curMove[j].Element.style.zIndex = Qva.Move.curMove[j].zIndex
                }
                Qva.Move.curMove = null;
                moveElement = null;
                MoveStarted = false
            }
            document.body.style.cursor = old_cursor;
            $document.unbind(".qvmove")
        }};
    Qva.Resize = {};
    Qva.Resize.mouseDown = function(f, j) {
        if (!f) {
            f = window.event;
            f.returnValue = false
        } else {
            f.preventDefault()
        }
        f.cancelBubble = true;
        var h = f.target || f.srcElement;
        var d = Qva.GetPageCoords(j);
        Qva.Resize.ResizeType = h.ResizeType;
        Qva.Resize.Frame = j;
        Qva.Resize.StartX = f.clientX + Qva.GetScrollLeft();
        Qva.Resize.StartY = f.clientY + Qva.GetScrollTop();
        Qva.Resize.StartLeft = Qva.GetScrollLeft() + d.x - 1;
        Qva.Resize.StartTop = Qva.GetScrollTop() + d.y - 1;
        var g = b(h).getPath();
        Qva.Resize.StartH = Qva.ElementAttributesHandler(g, j, "offsetHeight");
        Qva.Resize.StartW = Qva.ElementAttributesHandler(g, j, "offsetWidth");
        if (!Qva.Resize.SizeRect) {
            Qva.Resize.SizeRect = document.createElement("div");
            Qva.Resize.SizeRect.className = "QvSizeRect";
            Qva.Resize.SizeRect.style.display = "";
            document.body.insertBefore(Qva.Resize.SizeRect, document.body.firstChild)
        } else {
            Qva.Resize.SizeRect.style.display = ""
        }
        Qva.Resize.SizeRect.style.left = this.StartLeft + "px";
        Qva.Resize.SizeRect.style.top = this.StartTop + "px";
        Qva.Resize.SizeRect.style.width = this.StartW + "px";
        Qva.Resize.SizeRect.style.height = this.StartH + "px";
        Qva.Resize.SizeRect.X = null;
        Qva.Resize.SizeRect.Y = null;
        Qva.Resize.SizeRect.W = null;
        Qva.Resize.SizeRect.H = null;
        Qva.Resize.old_cursor = document.body.style.cursor;
        document.body.style.cursor = h.style.cursor;
        Qva.addEvent(document, "mousemove", Qva.Resize.mouseMove);
        Qva.addEvent(document, "mouseup", Qva.Resize.mouseUp)
    };
    Qva.Resize.mouseMove = function(h) {
        if (!Qva.Resize.SizeRect) {
            return
        }
        if (!h) {
            h = window.event;
            h.returnValue = false
        } else {
            h.preventDefault()
        }
        var f = h.clientX + Qva.GetScrollLeft() - Qva.Resize.StartX;
        var d = h.clientY + Qva.GetScrollTop() - Qva.Resize.StartY;
        var g = 0;
        var k = 0;
        if (Qva.Resize.Frame.AvqMgr) {
            g = Qva.Resize.Frame.AvqMgr.MinWidth;
            k = Qva.Resize.Frame.AvqMgr.MinHeight
        }
        if (Qva.Resize.ResizeType.indexOf("t") != -1) {
            var j = Qva.Resize.StartY + Qva.Resize.StartH - k;
            Qva.Resize.SizeRect.Y = Math.min(j, Math.max(k, Qva.Resize.StartTop + d));
            Qva.Resize.SizeRect.H = Math.max(k, Qva.Resize.StartH - d)
        }
        if (Qva.Resize.ResizeType.indexOf("b") != -1) {
            Qva.Resize.SizeRect.H = Math.max(k, Qva.Resize.StartH + d)
        }
        if (Qva.Resize.ResizeType.indexOf("l") != -1) {
            var l = Qva.Resize.StartX + Qva.Resize.StartW - g;
            Qva.Resize.SizeRect.X = Math.min(l, Math.max(g, Qva.Resize.StartLeft + f));
            Qva.Resize.SizeRect.W = Math.max(g, Qva.Resize.StartW - f)
        }
        if (Qva.Resize.ResizeType.indexOf("r") != -1) {
            Qva.Resize.SizeRect.W = Math.max(g, Qva.Resize.StartW + f)
        }
        if (Qva.Resize.SizeRect.Y) {
            Qva.Resize.SizeRect.style.top = Qva.Resize.SizeRect.Y + "px"
        }
        if (Qva.Resize.SizeRect.X) {
            Qva.Resize.SizeRect.style.left = Qva.Resize.SizeRect.X + "px"
        }
        if (Qva.Resize.SizeRect.W) {
            Qva.Resize.SizeRect.style.width = Qva.Resize.SizeRect.W + "px"
        }
        if (Qva.Resize.SizeRect.H) {
            Qva.Resize.SizeRect.style.height = Qva.Resize.SizeRect.H + "px"
        }
    };
    Qva.Resize.mouseUp = function(j) {
        document.body.style.cursor = Qva.Resize.old_cursor;
        var h = Qva.Resize.ResizeType;
        var g = (Qva.Resize.SizeRect.W ? Qva.Resize.SizeRect.W : Qva.Resize.StartW);
        var d = (Qva.Resize.SizeRect.H ? Qva.Resize.SizeRect.H : Qva.Resize.StartH);
        if (Qva.Resize.ResizeType.indexOf("l") != -1) {
            g += Qva.Resize.Frame.rect.width - Qva.Resize.StartW
        }
        if (Qva.Resize.Frame.AvqMgr) {
            g = Math.max(Qva.Resize.Frame.AvqMgr.MinWidth, g)
        }
        if (Qva.Resize.ResizeType.indexOf("t") != -1) {
            d += Qva.Resize.Frame.rect.height - Qva.Resize.StartH
        }
        if (Qva.Resize.Frame.AvqMgr) {
            d = Math.max(Qva.Resize.Frame.AvqMgr.MinHeight, d)
        }
        var k = Qva.Resize.Frame.AvqMgr;
        if (k) {
            k.Set(Qva.Resize.Frame.ObjectId, "resize", h + ":" + g + ":" + d, true)
        } else {
            var f = Qva.GetBinder(Qva.Resize.Frame.binderid);
            f.Set(Qva.Resize.Frame.Name, "resize", h + ":" + g + ":" + d, true)
        }
        Qva.Resize.SizeRect.style.display = "none";
        Qva.Resize.Frame = null;
        Qva.removeEvent(document, "mousemove", Qva.Resize.mouseMove);
        Qva.removeEvent(document, "mouseup", Qva.Resize.mouseUp)
    };
    Qva.DragDrop.resizeColumn = {colIndex: null, frame: null, oldCursor: null, resizeRect: null, startDragX: 0, widthOuter: 0, mouseDown: function(h) {
            if (!h) {
                h = window.event;
                h.returnValue = false
            } else {
                h.preventDefault()
            }
            h.cancelBubble = true;
            var j = h.target || h.srcElement;
            this.oldCursor = document.body.style.cursor;
            document.body.style.cursor = "w-resize";
            var l = Qva.GetAbsolutePageCoords(j.parentNode, true);
            this.frame = j.parentNode;
            this.colIndex = j.columnData.colIndex;
            this.startDragX = h.clientX + Qva.GetScrollLeft();
            this.widthOuter = j.columnData.widthOuter;
            if (this.resizeRect === null) {
                this.resizeRect = document.createElement("div");
                this.resizeRect.className = "QvSizeRect";
                this.resizeRect.style.display = "";
                document.body.insertBefore(this.resizeRect, document.body.firstChild)
            } else {
                this.resizeRect.style.visibility = "visible"
            }
            var f = l.x + j.columnData.outerLeftCoordinate;
            var d = f + j.columnData.widthOuter;
            var k = Math.max(l.x, f);
            var g = d - k;
            this.resizeRect.style.left = k + "px";
            this.resizeRect.style.top = j.columnData.top + "px";
            this.resizeRect.style.height = j.columnData.height + "px";
            this.resizeRect.style.width = g + "px";
            this.resizeRect.startWidth = g;
            this.resizeRect.delta = 0;
            Qva.addEvent(document, "mousemove", this.mouseMove);
            Qva.addEvent(document, "mouseup", this.mouseUp)
        }, mouseMove: function(f) {
            if (!Qva.DragDrop.resizeColumn.resizeRect) {
                return
            }
            if (!f) {
                f = window.event;
                f.returnValue = false
            } else {
                f.preventDefault()
            }
            Qva.DragDrop.resizeColumn.resizeRect.delta = f.clientX + Qva.GetScrollLeft() - Qva.DragDrop.resizeColumn.startDragX;
            var d = Math.max(10, Qva.DragDrop.resizeColumn.resizeRect.startWidth + Qva.DragDrop.resizeColumn.resizeRect.delta);
            Qva.DragDrop.resizeColumn.resizeRect.style.width = d + "px"
        }, mouseUp: function(g) {
            var d = Qva.DragDrop.resizeColumn;
            if (typeof(d.resizeRect.delta) !== "undefined" && d.resizeRect.delta !== 0) {
                var f = Math.max(10, d.widthOuter + d.resizeRect.delta), h = d.frame.AvqMgr;
                h.SetColumnWidth(d.colIndex, f)
            }
            d.resizeRect.style.visibility = "hidden";
            d.frame = null;
            document.body.style.cursor = d.oldCursor;
            Qva.removeEvent(document, "mousemove", d.mouseMove);
            Qva.removeEvent(document, "mouseup", d.mouseUp)
        }};
    Qva.DragDrop.reorder = {source: {x: null, y: null, Orientation: ""}, target: {x: null, y: null, Orientation: ""}, displayRect: null, PosMarker: null, oldCursor: null, startDragX: 0, startDragY: 0, startDragHeaderLeft: 0, startDragHeaderTop: 0, frame: null, lstZoneCoords: null, ColumnWidth: 0, RowHeight: 0, mouseDown: function(r, x, l) {
            var z = r.target || r.srcElement, h, f, o, m, d, k;
            while (z.parentNode.xx === c) {
                z = z.parentNode
            }
            this.frame = z.parentNode.parentNode.parentNode.parentNode;
            o = Qva.GetAbsolutePageCoords(this.frame);
            this.oldCursor = document.body.style.cursor;
            this.source.x = z.parentNode.xx;
            this.source.y = z.parentNode.yy;
            this.target.x = this.source.x;
            this.target.y = this.source.y;
            var p = b(z).getPath();
            this.ColumnWidth = parseInt(Qva.ElementAttributesHandler(p, z, "offsetWidth"));
            this.RowHeight = parseInt(Qva.ElementAttributesHandler(p, z, "offsetHeight"));
            for (var s = 0; s < l.length; s++) {
                var v = l[s];
                if (v.orientation == "horizontal") {
                    if (this.target.y != parseInt(v.y)) {
                        continue
                    }
                    if (this.target.x < parseInt(v.x)) {
                        continue
                    }
                } else {
                    if (this.target.x != parseInt(v.x)) {
                        continue
                    }
                    if (this.target.y < parseInt(v.y)) {
                        continue
                    }
                }
                this.source.Orientation = v.orientation;
                break
            }
            if (this.source.Orientation == "") {
                Assert(false);
                return
            }
            this.target.Orientation = this.source.Orientation;
            var u = Qva.GetAbsolutePageCoords(z, true);
            this.startDragX = r.clientX + Qva.GetScrollLeft();
            this.startDragY = r.clientY + Qva.GetScrollTop();
            this.startDragHeaderLeft = u.x;
            this.startDragHeaderTop = u.y;
            if (this.displayRect === null) {
                this.displayRect = document.createElement("div");
                this.displayRect.className = "QvReorderTable";
                document.body.insertBefore(this.displayRect, document.body.firstChild)
            }
            this.displayRect.style.visibility = "hidden";
            this.displayRect.style.left = u.x + "px";
            this.displayRect.style.top = u.y + "px";
            if (this.target.Orientation == "vertical") {
                this.displayRect.style.height = this.frame.style.height;
                this.displayRect.style.width = this.ColumnWidth + "px"
            } else {
                this.displayRect.style.height = this.RowHeight + "px";
                this.displayRect.style.width = parseInt(this.frame.style.width) - z.parentNode.offsetLeft + "px"
            }
            this.displayRect.delta = 0;
            if (this.PosMarker === null) {
                this.PosMarker = document.createElement("div")
            }
            this.PosMarker.style.visibility = "hidden";
            this.PosMarker.style.top = this.displayRect.style.top;
            this.PosMarker.style.left = this.displayRect.style.left;
            if (this.target.Orientation == "vertical") {
                this.PosMarker.className = "QvReorderColumnPos";
                this.PosMarker.style.height = this.displayRect.style.height;
                this.PosMarker.style.width = ""
            } else {
                this.PosMarker.className = "QvReorderRowPos";
                this.PosMarker.style.height = "";
                this.PosMarker.style.width = this.displayRect.style.width
            }
            document.body.insertBefore(this.PosMarker, document.body.firstChild);
            this.lstZoneCoords = [];
            for (h = 0; h < l.length; ++h) {
                var v = l[h];
                if (!x[v.x]) {
                    continue
                }
                var q = x[v.x].width;
                var g = x[v.x].xPos + o.x;
                var n = v.y * this.RowHeight + o.y;
                if (v.orientation == "vertical") {
                    var w = g + q;
                    var y = g + q * x[v.x].middle;
                    var j
                } else {
                    var j = n + this.RowHeight;
                    var y = n + (j - n) / 2;
                    var w
                }
                this.lstZoneCoords.push({leftCoord: g, rightCoord: w, middleCoord: y, topCoord: n, bottomCoord: j, orientation: v.orientation, x: v.x, y: v.y})
            }
            b(document).bind("mousemove.reorder", this.mouseMove).bind("mouseup.reorder", this.mouseUp)
        }, mouseMove: function(d) {
            var f = Qva.DragDrop.reorder;
            if (!f.displayRect || f.displayRect === null) {
                return
            }
            var k = d.clientX + Qva.GetScrollLeft(), h = d.clientY + Qva.GetScrollTop(), n, g, p = Qva.GetAbsolutePageCoords(f.frame).x, m = p + f.frame.offsetWidth, j = Qva.GetAbsolutePageCoords(f.frame).y, l = j + f.frame.offsetHeight;
            if (Math.abs(f.startDragX - k) < 2 && Math.abs(f.startDragY - h) < 2) {
                return
            }
            d.stopPropagation();
            if (k >= p && k <= m && h >= j && h <= l) {
                for (n = 0, g = f.lstZoneCoords.length; n < g; n++) {
                    var o = {x: f.lstZoneCoords[n].x, y: f.lstZoneCoords[n].y};
                    var q = f.lstZoneCoords[n];
                    if (k >= q.leftCoord && h >= q.topCoord) {
                        if (q.orientation == "vertical" && k <= q.rightCoord) {
                            f.displayRect.style.left = f.startDragHeaderLeft + d.clientX + Qva.GetScrollLeft() - f.startDragX + "px";
                            f.PosMarker.className = "QvReorderColumnPos";
                            if (k >= q.middleCoord) {
                                f.PosMarker.style.left = q.rightCoord + "px";
                                o.x++
                            } else {
                                f.PosMarker.style.left = q.leftCoord + "px"
                            }
                            f.displayRect.style.top = q.topCoord + "px";
                            f.displayRect.style.height = f.frame.style.height;
                            f.displayRect.style.width = f.ColumnWidth + "px";
                            f.PosMarker.style.height = f.displayRect.style.height;
                            f.PosMarker.style.top = f.displayRect.style.top;
                            f.PosMarker.style.width = ""
                        } else {
                            if (q.orientation == "horizontal" && h <= q.bottomCoord) {
                                f.displayRect.style.top = f.startDragHeaderTop + d.clientY + Qva.GetScrollTop() - f.startDragY + "px";
                                f.PosMarker.className = "QvReorderRowPos";
                                if (h >= q.middleCoord) {
                                    f.PosMarker.style.top = q.bottomCoord + "px";
                                    o.y++
                                } else {
                                    f.PosMarker.style.top = f.lstZoneCoords[n].topCoord + "px"
                                }
                                f.displayRect.style.left = q.leftCoord + "px";
                                f.displayRect.style.height = f.RowHeight + "px";
                                f.displayRect.style.width = p + parseInt(f.frame.style.width) - q.leftCoord + "px";
                                f.PosMarker.style.width = f.displayRect.style.width;
                                f.PosMarker.style.left = f.displayRect.style.left;
                                f.PosMarker.style.height = ""
                            } else {
                                continue
                            }
                        }
                        f.target.x = o.x;
                        f.target.y = o.y;
                        f.target.Orientation = q.orientation;
                        break
                    }
                }
                f.displayRect.style.visibility = "visible";
                f.PosMarker.style.visibility = "visible";
                document.body.style.cursor = "move"
            }
        }, mouseUp: function(f) {
            var d = Qva.DragDrop.reorder;
            d.displayRect.style.visibility = "hidden";
            d.PosMarker.style.visibility = "hidden";
            document.body.style.cursor = d.oldCursor;
            b(document).unbind(".reorder");
            params = {};
            params.reorder = "";
            params.source = d.source.Orientation + ":" + d.source.x + ":" + d.source.y;
            params.target = d.target.Orientation + ":" + d.target.x + ":" + d.target.y;
            if (params.source != params.target) {
                var g = d.frame.parentNode.Mgr;
                g.PageBinder.Set(g.Name, params)
            }
        }}
})(jQuery);
var Graphics = {VML: {CreateElement: function(b, a) {
            var c = document.createElement("v:" + b);
            c.unselectable = "on";
            if (a) {
                a.appendChild(c)
            }
            return c
        }, CreateShape: function(f, b, a, d) {
            var c = Graphics.VML.CreateElement("shape", d);
            c.coordsize = b;
            if (a) {
                c.fillcolor = a
            }
            c.path = f;
            return c
        }, CreateArea: function(a, b) {
            var c = Graphics.VML.CreateElement("group", b);
            c.style.width = a[0] + "px";
            c.style.height = a[1] + "px";
            c.coordsize = a.join(",");
            c.style.position = "absolute";
            return c
        }, CreatePolygonObj: function(g, a, f, j, d) {
            var h = "m " + g[0][0] + "," + g[0][1] + " l";
            for (var c = 1; c < g.length; ++c) {
                h += " " + g[c][0] + " " + g[c][1]
            }
            h += " x e";
            var b = Graphics.VML.CreateShape(h, d.join(","), a, f);
            b.style.width = d[0] + "px";
            b.style.height = d[1] + "px";
            b.style.position = "absolute";
            b.style.left = j[0] + "px";
            b.style.top = j[1] + "px";
            return b
        }, CreatePolygon: function(c, a, b) {
            return Graphics.VML.CreatePolygonObj(c, a, b, [0, 0], [b.style.pixelWidth, b.style.pixelHeight])
        }, CreateLine: function(g, f, b, d, c) {
            var a = Graphics.VML.CreateElement("line", d);
            a.from = g.join(",");
            a.to = f.join(",");
            if (b) {
                a.strokecolor = b
            }
            if (c) {
                a.strokeweight = c
            } else {
                a.strokeweight = 1
            }
            return a
        }, CreatePolyLine: function(g, b, d, c) {
            var a = Graphics.VML.CreateElement("polyline", d);
            a.points = g.join(" ");
            if (b) {
                a.strokecolor = b
            }
            var h = Graphics.VML.CreateElement("fill");
            h.on = "false";
            a.appendChild(h);
            if (c) {
                a.strokeweight = c
            } else {
                a.strokeweight = 1
            }
            return a
        }, CreateRect: function(g, c, a, d, b) {
            var f = Graphics.VML.CreateElement("rect", d);
            f.fillcolor = a;
            f.style.left = g[0] + "px";
            f.style.top = g[1] + "px";
            f.style.width = c[0] + "px";
            f.style.height = c[1] + "px";
            if (!b) {
                Graphics.VML.CreateElement("stroke", f).on = "false"
            }
            return f
        }, FixPolygon: function(d, f, c, a) {
            var g = "m " + f[0][0] + "," + f[0][1] + " l";
            for (var b = 1; b < f.length; ++b) {
                g += " " + f[b][0] + " " + f[b][1]
            }
            g += " x e";
            d.path = g;
            d.coordsize = c.join(",");
            d.style.width = c[0] + "px";
            d.style.height = c[1] + "px"
        }, Init: function() {
            if (IE_DOCMODE < 10) {
                if (IE_DOCMODE >= 8) {
                    if (!document.namespaces.v) {
                        document.namespaces.add("v", "urn:schemas-microsoft-com:vml", "#default#VML")
                    }
                } else {
                    if (!document.namespaces.v) {
                        document.namespaces.add("v", "urn:schemas-microsoft-com:vml")
                    }
                }
            }
            if (!Graphics.VML.styleSheet) {
                Graphics.VML.styleSheet = document.createStyleSheet();
                Graphics.VML.styleSheet.cssText = "v\\:*{behavior:url(#default#VML);display: inline-block;}"
            }
        }, styleSheet: null}, Canvas: {CreateArea: function(a, b) {
            var c = document.createElement("canvas");
            c.style.width = a[0] + "px";
            c.style.height = a[1] + "px";
            c.width = a[0];
            c.height = a[1];
            if (b) {
                b.appendChild(c)
            }
            return c
        }, CreatePolygonObj: function(d, a, c, g, b) {
            var f = Graphics.Canvas.CreateArea(b, c);
            f.style.position = "absolute";
            f.style.left = g[0] + "px";
            f.style.top = g[1] + "px";
            Graphics.Canvas.CreatePolygon(d, a, f);
            return f
        }, CreatePolygon: function(f, b, d) {
            var a = d.getContext("2d");
            a.fillStyle = b || "rgb(0,0,0)";
            a.beginPath();
            a.moveTo(f[0][0], f[0][1]);
            for (var c = 1; c < f.length; ++c) {
                a.lineTo(f[c][0], f[c][1])
            }
            a.fill()
        }, CreateLine: function(g, f, b, d, c) {
            var a = d.getContext("2d");
            a.lineWidth = c || 1;
            a.strokeStyle = b || "rgb(0,0,0)";
            a.beginPath();
            a.moveTo(g[0], g[1]);
            a.lineTo(f[0], f[1]);
            a.stroke()
        }, CreatePolyLine: function(g, b, f, d) {
            if (g.length === 0) {
                return
            }
            var a = f.getContext("2d");
            a.lineWidth = d || 1;
            a.strokeStyle = b || "rgb(0,0,0)";
            a.beginPath();
            a.moveTo(g[0][0], g[0][1]);
            for (var c = 1; c < g.length; ++c) {
                a.lineTo(g[c][0], g[c][1])
            }
            a.stroke()
        }, CreateRect: function(g, d, b, f, c) {
            var a = f.getContext("2d");
            if (c) {
                a.strokeStyle = c === true ? "rgb(0,0,0)" : c;
                a.strokeRect(g[0], g[1], d[0], d[1])
            }
            a.fillStyle = b;
            a.fillRect(g[0], g[1], d[0], d[1])
        }, FixPolygon: function(d, f, c, b) {
            d.style.width = c[0] + "px";
            d.style.height = c[1] + "px";
            d.width = c[0];
            d.height = c[1];
            var a = d.getContext("2d");
            a.clearRect(0, 0, c[0], c[1]);
            Graphics.Canvas.CreatePolygon(f, b, d)
        }, Init: function() {
        }}, SVG: {CreateElement: function(c, b) {
            var a = "http://www.w3.org/2000/svg";
            try {
                var d = document.createElementNS(a, c)
            } catch (f) {
                var d = document.createElement(c);
                d.setAttribute("xmlns", a)
            }
            if (b) {
                b.appendChild(d)
            }
            return d
        }, CreateArea: function(a, b) {
            var c = Graphics.SVG.CreateElement("svg", b);
            c.setAttribute("width", a[0] + "px");
            c.setAttribute("height", a[1] + "px");
            c.style.width = a[0] + "px";
            c.style.height = a[1] + "px";
            return c
        }, CreatePolygonObj: function(d, a, c, g, b) {
            var f = Graphics.SVG.CreateArea(b, c);
            f.style.position = "absolute";
            f.style.left = g[0] + "px";
            f.style.top = g[1] + "px";
            Graphics.SVG.CreatePolygon(d, a, f);
            return f
        }, CreatePolygon: function(d, a, c) {
            var b = Graphics.SVG.CreateElement("polygon", c);
            b.setAttribute("points", d.join(","));
            b.setAttribute("fill", a || "black");
            return b
        }, CreateLine: function(g, f, b, d, c) {
            var a = Graphics.SVG.CreateElement("line", d);
            a.setAttribute("x1", g[0] + "px");
            a.setAttribute("y1", g[1] + "px");
            a.setAttribute("x2", f[0] + "px");
            a.setAttribute("y2", f[1] + "px");
            a.setAttribute("stroke", b || "black");
            a.setAttribute("strokeWidth", c);
            return a
        }, CreatePolyLine: function(f, b, d, c) {
            var a = Graphics.SVG.CreateElement("polyline", d);
            a.setAttribute("points", f.join(","));
            a.setAttribute("stroke", b || "black");
            a.setAttribute("strokeWidth", c);
            a.setAttribute("fill", "none");
            return a
        }, CreateRect: function(g, c, a, d, b) {
            var f = Graphics.SVG.CreateElement("rect", d);
            f.setAttribute("x", g[0] + "px");
            f.setAttribute("y", g[1] + "px");
            f.setAttribute("width", c[0] + "px");
            f.setAttribute("height", c[1] + "px");
            f.setAttribute("fill", a || "black");
            if (b) {
                f.setAttribute("stroke", "black")
            }
            return f
        }, FixPolygon: function() {
            Assert(false)
        }, Init: function() {
        }}};
if (IS_IE && IE_DOCMODE < 10) {
    var SelectGraphics = function() {
        return Graphics.VML
    }
} else {
    var SelectGraphics = function(a) {
        if (Graphics[a] && a !== "VML") {
            return Graphics[a]
        }
        return Graphics.Canvas
    }
}
function SelectInitGraphics(a) {
    var b = SelectGraphics(a);
    b.Init();
    return b
}
function MeasureText(b, a) {
    if (!MeasureText.div) {
        MeasureText.div = document.createElement("div");
        MeasureText.div.style.position = "absolute";
        MeasureText.div.style.width = "auto";
        MeasureText.div.style.height = "auto";
        MeasureText.div.style.visibility = "hidden";
        document.body.insertBefore(MeasureText.div, document.body.firstChild)
    }
    MeasureText.div.style.fontSize = a;
    MeasureText.div.innerText = b;
    return{width: MeasureText.div.offsetWidth, height: MeasureText.div.offsetHeight}
}
MeasureText.div = null;
var ModalType = {popup: 0, messagebox: 1};
Qva.Modal = function(a) {
    if (typeof a !== "string") {
        a = null
    }
    this.ScriptPath = a || Qva.QvAjaxZfcPath + "htc/";
    this.HideSelects = false;
    this.DefaultPage = "modal/loading.html";
    this.TabIndexes = [];
    this.PageBinders = [];
    this.PopupMasks = [];
    this.PopupCointainers = [];
    this.PopFrames = [];
    this.TitleBar = [];
    this.TabbableTags = ["A", "BUTTON", "TEXTAREA", "INPUT", "IFRAME"];
    this.PopupIsShown = false;
    this.NumberOfShownWindows = 0;
    this.Type = [];
    Qva.Modal.instance = this
};
Qva.Modal.prototype.ShowEx = function(h, b, g, a, f, d, c) {
    iFrameWidth = g;
    iFrameHeight = a;
    this.NumberOfShownWindows++;
    this.Type[this.NumberOfShownWindows] = f;
    this.PageBinders[this.NumberOfShownWindows] = h;
    this.Init();
    var j = document.getElementById("popCloseBox" + this.NumberOfShownWindows);
    if (j) {
        j.style.display = "block"
    }
    this.PopupIsShown = true;
    this.DisableTabs();
    this.PopupMasks[this.NumberOfShownWindows].style.display = "block";
    this.TitleBar[this.NumberOfShownWindows].style.display = "";
    if (g && a) {
        this.SetSize(g, a)
    }
    if (this.PageBinders[this.NumberOfShownWindows].Session) {
        b += ((b.indexOf("?") == -1) ? "?" : "&") + "session=" + Qva.EncodeComponent(this.PageBinders[this.NumberOfShownWindows].Session)
    }
    if (this.PageBinders[this.NumberOfShownWindows].Ticket) {
        b = Qva.FixUrl(b, "ticket", this.PageBinders[this.NumberOfShownWindows].Ticket)
    }
    if (this.PageBinders[this.NumberOfShownWindows].Host) {
        b = Qva.FixUrl(b, "host", this.PageBinders[this.NumberOfShownWindows].Host)
    }
    if (this.PageBinders[this.NumberOfShownWindows].Unicorn) {
        b = Qva.FixUrl(b, "unicorn", "3")
    }
    if (this.PageBinders[this.NumberOfShownWindows].View != "") {
        b = Qva.FixUrl(b, "view", this.PageBinders[this.NumberOfShownWindows].View)
    }
    if (this.PageBinders[this.NumberOfShownWindows].Remote != "") {
        b = Qva.FixUrl(b, "remote", this.PageBinders[this.NumberOfShownWindows].Remote)
    }
    if (Qva.Benchmark) {
        this.Benchmark = new Qva.Benchmark()
    }
    this.TitleBar[this.NumberOfShownWindows].style.display = d ? "none" : "";
    this.PopFrames[this.NumberOfShownWindows].className = c || "QvModal_Default";
    b = Qva.AddProxyIfAny(b);
    b = Qva.XrfSecure(b);
    this.PopFrames[this.NumberOfShownWindows].contentWindow.location.replace(b);
    if (this.HideSelects == true) {
        this.HideSelectBoxes()
    }
};
Qva.Modal.prototype.Show = function(g, b, f, a, d, c) {
    this.ShowEx(g, b, f, a, ModalType.popup, d, c)
};
Qva.Modal.prototype.SetSize = function(c, a) {
    var b = parseInt(document.getElementById("popupTitleBar" + this.NumberOfShownWindows).offsetHeight, 10);
    this.CenterWin(c, a + b);
    this.PopupCointainers[this.NumberOfShownWindows].style.width = c + "px";
    this.PopupCointainers[this.NumberOfShownWindows].style.height = a + b + "px";
    this.SetMaskSize();
    this.PopFrames[this.NumberOfShownWindows].style.height = a + "px";
    this.PopFrames[this.NumberOfShownWindows].style.width = (isNaN(iFrameWidth) ? c : iFrameWidth) + "px"
};
Qva.Modal.prototype.Init = function() {
    if (this.PopupMasks[this.NumberOfShownWindows] != null) {
        return
    }
    theBody = document.getElementsByTagName("BODY")[0];
    var a = document.createElement("div");
    a.style.zIndex = 99998 * this.NumberOfShownWindows;
    a.className = "popupMask";
    a.style.position = "absolute";
    a.onclick = Qva.CancelBubble;
    var j = document.createElement("div");
    j.style.zIndex = 99999 * this.NumberOfShownWindows;
    j.style.position = "absolute";
    $(j).css("display", "none");
    var d = " ";
    var g = '<div class="PropModalRoundedCorners ToolWindowModal"><div class="QvCaption_Prop" id="popupTitleBar' + this.NumberOfShownWindows + '"><div class="prop-icon-34x34 prop-modal-icon-star" style="float:left;"></div><div class="QvCaption_PropText" id="popupTitle' + this.NumberOfShownWindows + '" style="width:100%"></div><div class="popupControls" id="popupControls' + this.NumberOfShownWindows + '" style="width:15px">' + d + '</div></div><div style="width:100%;height:50%;background-color:transparent;position:absolute;display:none;z-index:9999" id="mousedownfix"></div> <iframe style="background-color:#efefef;" src="' + Qva.AddProxyIfAny(this.ScriptPath + this.DefaultPage) + '" scrolling="auto" frameborder="0" allowtransparency="true" id="popupFrame' + this.NumberOfShownWindows + '" name="popupFrame"></iframe></div>';
    var c = '<div class="PropModalRoundedCorners"><div class="QvCaption_Prop" id="popupTitleBar' + this.NumberOfShownWindows + '"><div class="QvCaption_PropText" id="popupTitle' + this.NumberOfShownWindows + '" style="width:100%"></div><div class="popupControls" id="popupControls' + this.NumberOfShownWindows + '" style="width:15px">' + d + '</div></div><div style="width:100%;height:50%;background-color:transparent;position:absolute;display:none;z-index:9999" id="mousedownfix"></div> <iframe style="background-color:#efefef;" src="' + Qva.AddProxyIfAny(this.ScriptPath + this.DefaultPage) + '" scrolling="auto" frameborder="0" allowtransparency="true" id="popupFrame' + this.NumberOfShownWindows + '" name="popupFrame"></iframe></div>';
    if (!IS_IE6_OR_IE7) {
        j.innerHTML = "" + g
    } else {
        j.innerHTML = "" + c
    }
    theBody.appendChild(a);
    theBody.appendChild(j);
    this.PopupCloseBox = document.getElementById("popCloseBox" + this.NumberOfShownWindows);
    this.PopupMasks[this.NumberOfShownWindows] = a;
    this.PopupCointainers[this.NumberOfShownWindows] = j;
    this.PopFrames[this.NumberOfShownWindows] = document.getElementById("popupFrame" + this.NumberOfShownWindows);
    var h = this.TitleBar[this.NumberOfShownWindows] = document.getElementById("popupTitleBar" + this.NumberOfShownWindows);
    var f = document.getElementById("mousedownfix");
    h.style.zIndex = 202 + 3 * this.NumberOfShownWindows;
    h.onmousedown = function(n) {
        if (!n) {
            n = window.event
        }
        f.style.display = "block";
        var m = Qva.GetOffsets(n, j);
        function l(o) {
            document.onmousemove = null;
            document.onmouseup = null;
            f.style.display = "none";
            return false
        }
        function k(p) {
            if (!p) {
                p = window.event
            }
            var o = {x: p.clientX + Qva.GetScrollLeft(), y: p.clientY + Qva.GetScrollTop()};
            j.style.left = (o.x - m.offsetX) + "px";
            j.style.top = (o.y - m.offsetY) + "px";
            return false
        }
        document.onmousemove = k;
        document.onmouseup = l;
        return false
    };
    if (this.PopupCloseBox) {
        this.PopupCloseBox.onmousedown = Qva.Modal.Close
    }
    var b = parseInt(window.navigator.appVersion.charAt(0), 10);
    if (b <= 6 && window.navigator.userAgent.indexOf("MSIE") > -1) {
        this.HideSelects = true
    }
};
Qva.Modal.Close = function(a) {
    Qva.Modal.instance.Close()
};
Qva.Modal.prototype.DisableTabs = function() {
    if (document.all) {
        var c = 0;
        for (var b = 0; b < this.TabbableTags.length; b++) {
            var d = document.getElementsByTagName(this.TabbableTags[b]);
            for (var a = 0; a < d.length; a++) {
                this.TabIndexes[c] = d[a].tabIndex;
                d[a].tabIndex = "-1";
                c++
            }
        }
    }
};
Qva.Modal.prototype.RestoreTabs = function() {
    if (document.all) {
        var c = 0;
        for (var b = 0; b < this.TabbableTags.length; b++) {
            var d = document.getElementsByTagName(this.TabbableTags[b]);
            for (var a = 0; a < d.length; a++) {
                d[a].tabIndex = this.TabIndexes[c];
                d[a].tabEnabled = true;
                c++
            }
        }
    }
};
Qva.Modal.prototype.CenterWin = function(h, a) {
    if (this.PopupIsShown) {
        if (h == null || isNaN(h)) {
            h = this.PopupCointainers[this.NumberOfShownWindows].offsetWidth
        }
        if (a == null) {
            a = this.PopupCointainers[this.NumberOfShownWindows].offsetHeight
        }
        var f = document.getElementsByTagName("BODY")[0];
        var b = parseInt(Qva.GetScrollTop(), 10);
        var d = parseInt(f.scrollLeft, 10);
        this.SetMaskSize();
        var g = parseInt(document.getElementById("popupTitleBar" + this.NumberOfShownWindows).offsetHeight, 10);
        var c = Qva.GetViewportHeight();
        var j = Qva.GetViewportWidth();
        this.PopupCointainers[this.NumberOfShownWindows].style.top = (b + ((c - (a + g)) / 2)) + g + "px";
        this.PopupCointainers[this.NumberOfShownWindows].style.left = (d + ((j - h) / 2)) + "px";
        this.PopupCointainers[this.NumberOfShownWindows].style.display = "block"
    }
};
Qva.Modal.prototype.SetMaskSize = function() {
    var b = document.getElementsByTagName("BODY")[0];
    var a = Qva.GetViewportHeight();
    var c = Qva.GetViewportWidth();
    if (a > b.scrollHeight) {
        popHeight = a
    } else {
        popHeight = b.scrollHeight
    }
    if (c > b.scrollWidth) {
        popWidth = c
    } else {
        popWidth = b.scrollWidth
    }
};
Qva.Modal.prototype.HideSelectBoxes = function() {
    for (var a = 0; a < document.forms.length; a++) {
        for (var b = 0; b < document.forms[a].length; b++) {
            if (document.forms[a].elements[b].tagName == "SELECT") {
                document.forms[a].elements[b].style.visibility = "hidden"
            }
        }
    }
};
Qva.Modal.prototype.DisplaySelectBoxes = function() {
    for (var a = 0; a < document.forms.length; a++) {
        for (var b = 0; b < document.forms[a].length; b++) {
            if (document.forms[a].elements[b].tagName == "SELECT") {
                document.forms[a].elements[b].style.visibility = "visible"
            }
        }
    }
};
Qva.Modal.prototype.Hide = function() {
    var a = document.getElementsByTagName("BODY")[0];
    a.style.overflow = "";
    this.RestoreTabs();
    if (this.PopupMasks[this.NumberOfShownWindows] == null) {
        return
    }
    this.PopFrames[this.NumberOfShownWindows].contentWindow.location.replace(Qva.AddProxyIfAny(this.ScriptPath + this.DefaultPage));
    $(this.PopupMasks[this.NumberOfShownWindows]).remove();
    $(this.PopupCointainers[this.NumberOfShownWindows]).remove();
    this.PopupMasks[this.NumberOfShownWindows] = null;
    this.PopupCointainers[this.NumberOfShownWindows] = null;
    if (this.HideSelects == true) {
        this.DisplaySelectBoxes()
    }
    this.NumberOfShownWindows--;
    this.PopupIsShown = this.NumberOfShownWindows > 0
};
Qva.Modal.prototype.SetTitle = function(b) {
    try {
        document.getElementById("popupTitle" + this.NumberOfShownWindows).innerText = b
    } catch (a) {
    }
};
Qva.Modal.prototype.Close = function() {
    if (this.Type[this.NumberOfShownWindows] != ModalType.popup) {
        return
    }
    this.CloseEx()
};
Qva.Modal.prototype.CloseEx = function() {
    this.Hide();
    if (this.PageBinders[this.NumberOfShownWindows + 1]) {
        if (this.PageBinders[this.NumberOfShownWindows + 1].LabelClick) {
            this.PageBinders[this.NumberOfShownWindows + 1].Set(".Nothing", "add", "nothing", true)
        } else {
            this.PageBinders[this.NumberOfShownWindows + 1].Refresh()
        }
    }
};
Qva.Modal.prototype.IsOpen = function() {
    return this.NumberOfShownWindows > 0
};
Qva.Scanner = function(a, b) {
    this.DefaultBinder = a;
    this.Errors = new Array();
    if (b) {
        this.NameSpace = b;
        this.Prefix = b + ":";
        this.Attr = b + ":bind"
    } else {
        this.NameSpace = "avq";
        this.Prefix = "avq";
        this.Attr = "avq"
    }
    this.ModeIfNotEnabled = "n";
    Qva.Scanner.instance = this
};
Qva.Scanner.prototype.Start = function() {
    var a = this.DefaultBinder || Qva.GetBinder();
    var b = (a && (a.Autoview != null || a.Kind != null)) ? a.DefaultScope : null;
    this.Scan(document.body, b, a);
    if (this.Errors.length > 0) {
        var c = "Errors:\n" + this.Errors.join("\n");
        this.Errors.length = 0;
        alert(c)
    }
};
Qva.Scanner.prototype.Scan = function(d, k, q) {
    if (!d.getAttribute) {
        return
    }
    var o = d.getAttribute(this.Prefix + "doc");
    if (o != null) {
        o = o.split(":");
        q = Qva.GetBinder(o[0], o[1]);
        k = (q.Autoview != null || q.Kind != null) ? q.DefaultScope : null
    }
    var m = d.getAttribute(this.Prefix + "view");
    if (m != null) {
        q = Qva.GetBinder(m, m);
        k = (q.Autoview != null || q.Kind != null) ? q.DefaultScope : null
    }
    if (k == null && q != null) {
        k = q.DefaultScope
    }
    var j = d.getAttribute(this.Prefix + "scope");
    if (j == null) {
        j = k
    } else {
        if (j.substr(0, 1) == ".") {
            j = k + j
        }
    }
    var n = d.getAttribute(this.Attr);
    if (n != null) {
        if (n.indexOf(":") == -1 && n.indexOf(".") >= 0) {
            n = "edit:" + n
        }
        var g = n.split(":");
        var h = g[0];
        if (h == "edit") {
            var f = d.tagName.toLowerCase();
            if (f == "input") {
                f += d.type.toLowerCase()
            }
            if (Qva.Mgr[f]) {
                h = f
            } else {
                if (f != "span") {
                }
            }
        }
        if (Qva.Mgr[h]) {
            var a = (g.length > 1) ? g[1] : null;
            var c = (g.length > 2) ? g.slice(2).join(":") : null;
            var p = new Qva.Mgr[h](q, d, a, j, c);
            if (p.Name != null) {
                this.PostManager(p)
            } else {
                if (p.Paint) {
                    this.Errors[this.Errors.length] = "Invalid " + this.NameSpace + "-attribute: " + n
                }
            }
        } else {
            this.Errors[this.Errors.length] = "Unknown type: " + h
        }
    }
    if (d.SelfScanning) {
        return
    }
    var l = d.childNodes.length;
    for (var b = 0; b < l; ++b) {
        if (d.childNodes[b]) {
            this.Scan(d.childNodes[b], j, q)
        }
    }
};
Qva.Scanner.prototype.PostManager = function(c) {
    var b = c.Element;
    c.SelectedClassName = b.getAttribute("QvSelected");
    if (c.SelectedClassName == null) {
        c.SelectedClassName = "QvSelected"
    }
    c.DeselectedClassName = b.getAttribute("QvDeselected");
    if (c.DeselectedClassName == null) {
        c.DeselectedClassName = "QvDeselected"
    }
    c.EnabledClassName = b.getAttribute("QvOptional");
    if (c.EnabledClassName == null) {
        c.EnabledClassName = "QvOptional"
    }
    c.DisabledClassName = b.getAttribute("QvExcluded");
    if (c.DisabledClassName == null) {
        c.DisabledClassName = "QvExcluded"
    }
    c.LockedClassName = b.getAttribute("QvLocked");
    if (c.LockedClassName == null) {
        c.LockedClassName = "QvLocked"
    }
    c.SelectedExcludedClassName = b.getAttribute("QvSelectedExcluded");
    if (c.SelectedExcludedClassName == null) {
        c.SelectedExcludedClassName = "QvSelectedExcluded"
    }
    c.LockedExcludedClassName = b.getAttribute("QvLockedExcluded");
    if (c.LockedExcludedClassName == null) {
        c.LockedExcludedClassName = "QvLockedExcluded"
    }
    c.AlternativeClassName = b.getAttribute("QvAlternative");
    if (c.AlternativeClassName == null) {
        c.AlternativeClassName = "QvAlternative"
    }
    c.TextIfNull = c.Element.getAttribute(this.Prefix + "textifnull");
    c.Icon = c.Element.getAttribute(this.Prefix + "icon");
    c.ModeIfNotEnabled = this.ModeIfNotEnabled;
    var a = c.Element.getAttribute(this.Prefix + "ifnotenabled");
    if (a != null) {
        switch (a) {
            case"disabled":
                c.ModeIfNotEnabled = "d";
                break;
            case"hidden":
                c.ModeIfNotEnabled = "h";
                break;
            default:
                this.Errors[this.Errors.length] = "IfNotEnabled is not implemented for " + a;
                break
            }
    }
    var d = c.Element.getAttribute(this.Prefix + "hideif");
    if (d) {
        c.HideIf = new Function("value", "text", "return " + d)
    }
    if (c.PostScan) {
        c.PostScan(this)
    }
};
if (!Qva.Mgr) {
    Qva.Mgr = {}
}
Qva.Mgr.slider = function(a, c, b, d) {
    if (!Qva.MgrSplit(this, b, d)) {
        return
    }
    this.Element = c;
    this.Touched = false;
    a.AddManager(this);
    this.G = SelectInitGraphics()
};
Qva.Mgr.slider.prototype.Lock = Qva.LockDisabled;
Qva.Mgr.slider.prototype.Unlock = Qva.UnlockDisabled;
Qva.Mgr.slider.prototype.Paint = function(f, d) {
    this.ReadOnly = d.getAttribute("readonly") == "true";
    this.Touched = true;
    var b = this.Element;
    b.style.display = Qva.MgrGetDisplayFromMode(this, f);
    if (b.style.display == "none") {
        return
    }
    delete this.Choice;
    for (var g = d.firstChild; g; g = g.nextSibling) {
        if (g.nodeName == "layout") {
            this.Node = g
        } else {
            if (g.nodeName == "choice") {
                if (!this.Choice) {
                    this.Choice = []
                }
                var a = 0;
                for (var c = g.firstChild; c; c = c.nextSibling) {
                    this.Choice[a++] = c.getAttribute("text")
                }
                this.Choice.length = a
            }
        }
    }
    this.PageBinder.QueuePostPaintMessage(this)
};
Qva.Mgr.slider.tooltip = null;
Qva.Mgr.slider.prototype.PostPaint = function() {
    if (this.Element.style.display == "none") {
        return
    }
    var E = this;
    var o = this.Element;
    var ak = this.Node;
    var aD = true;
    var w = ak.getAttribute("orientation") || "horizontal";
    var M = HtmlifyARGB(ak.getAttribute("color")) || "#AABCDD";
    var d = null;
    var aF = null;
    var v = null;
    for (var ao = ak.firstChild; ao; ao = ao.nextSibling) {
        if (d == null && ao.nodeName == "tics") {
            d = ao
        }
        if (aF == null && ao.nodeName == "thumb") {
            aF = ao
        }
        if (v == null && ao.nodeName == "arrows") {
            v = ao
        }
    }
    var q = parseFloat(ak.getAttribute("max"));
    var aE = parseFloat(ak.getAttribute("min"));
    var H = parseFloat(ak.getAttribute("current_min"));
    var ab = parseFloat(ak.getAttribute("current_max"));
    var y = ak.getAttribute("selectionrange") == "multi";
    var Y = ak.getAttribute("selectionvalid") == "true" && !isNaN(H) && !isNaN(ab);
    var O = ak.getAttribute("step");
    if (O) {
        O = parseFloat(O)
    }
    var ar = o.offsetTop;
    var aw = getClientWidth(o);
    var s = o.parentNode;
    var u = s.clientHeight - ar;
    var af = o.style.fontSize;
    var f = w == "horizontal" ? aw : u;
    var h = 19;
    var ad = w == "horizontal" ? "left" : "top";
    var B = w == "horizontal" ? "top" : "left";
    var ai = w == "horizontal" ? "width" : "height";
    var G = w == "horizontal" ? "height" : "width";
    var A = w == "horizontal" ? u - 15 : 12;
    var V = w == "horizontal" ? "center" : "left";
    var ac = w == "horizontal" ? A - 28 : A + 23;
    var aA = w == "horizontal" ? "left" : "top";
    var ax = w == "horizontal" ? "clientX" : "clientY";
    var au = w == "horizontal" ? [[0, 4], [4, 0], [8, 4], [8, 12], [0, 12]] : [[0, 0], [8, 0], [12, 4], [8, 8], [0, 8]];
    var x = w == "horizontal" ? function(k, l) {
        return[k, l]
    } : function(l, k) {
        return[k, l]
    };
    var Q = w == "horizontal" ? -1 : 1;
    var an = A + Q * 10;
    var m = an + Q * 13;
    var F = an + Q * 7;
    var b = 4;
    var P = null;
    var R = null;
    var ag = null;
    var aB = document.createElement("div");
    aB.style.width = aw + "px";
    aB.style.height = u + "px";
    var r = E.G.CreateArea([aw, u], aB);
    var T = E.G.CreateLine(x(h, A), x(f - h, A), M, r, 4);
    if (!T) {
        T = r
    }
    var am = f - 2 * (h + 5);
    var L = q - aE + 1;
    var ah = L > 1 ? am / (L - 1) : 0;
    if (d && ah > 0) {
        var z = HtmlifyARGB(d.getAttribute("color")) || "#A4A4A4";
        function J(aH, l, k) {
            E.G.CreateLine(x(aH, k), x(aH, l), z, r)
        }
        var C = parseInt(d.getAttribute("labels"));
        var aq = parseInt(d.getAttribute("major"));
        if (aq < 2) {
            aq = 0
        }
        var I = parseInt(d.getAttribute("minor"));
        if (I < 0) {
            I = 0
        }
        var K = 0;
        var ay = d.getElementsByTagName("label");
        var al = am / (aq - 1);
        for (var S = 0; S < aq; ++S) {
            var X = ay[K++];
            var az;
            if (X && X.getAttribute("index")) {
                az = Math.round(h + 5 + parseInt(X.getAttribute("index")) * ah)
            } else {
                az = Math.round(h + 5 + S * al)
            }
            if (w == "horizontal") {
                J(az, an + 3, m + 3, z)
            } else {
                J(az, an - 3, m - 3, z)
            }
            if (C > 0 && S % C == 0 && X) {
                var at = X.getAttribute("text");
                var N = MeasureText(at, af);
                var j = {position: "absolute", fontSize: af, overflow: "visible", color: z, fontFamily: o.style.fontFamily, textAlign: V};
                j[ad] = (w == "horizontal" ? Math.round(az - N.width / 2) : Math.floor(az - N.height / 2) + 2) + "px";
                j[B] = (w == "horizontal" ? Math.max(Math.round(ac - N.height / 2), 0) : ac) + "px";
                j.width = N.width + 2 + "px";
                j.height = N.height + "px";
                var g = document.createElement("div");
                for (var U in j) {
                    if (U == "color") {
                        g.style[U] = HtmlifyARGB(j[U])
                    } else {
                        g.style[U] = j[U]
                    }
                }
                g.innerText = at;
                aB.appendChild(g)
            }
            if (S == aq - 1) {
                continue
            }
            var ap = al / (I + 1);
            for (var Z = 1; Z <= I; ++Z) {
                var aa = Math.round(az + Z * ap);
                J(aa, an, F, z)
            }
        }
    }
    if (Qva.Mgr.slider.tooltip === null) {
        Qva.Mgr.slider.tooltip = document.createElement("div");
        Qva.Mgr.slider.tooltip.style.position = "absolute";
        Qva.Mgr.slider.tooltip.style.width = "auto";
        Qva.Mgr.slider.tooltip.style.height = "auto";
        Qva.Mgr.slider.tooltip.style.zIndex = 666;
        Qva.Mgr.slider.tooltip.style.backgroundColor = "#FFFFCC";
        Qva.Mgr.slider.tooltip.style.borderWidth = "1px";
        Qva.Mgr.slider.tooltip.style.borderColor = "black";
        Qva.Mgr.slider.tooltip.style.borderStyle = "solid";
        Qva.Mgr.slider.tooltip.style.padding = "3px";
        document.body.insertBefore(Qva.Mgr.slider.tooltip, document.body.firstChild)
    }
    Qva.Mgr.slider.tooltip.style.visibility = "hidden";
    var c = HtmlifyARGB(aF.getAttribute("color")) || "#3796FF";
    var aC = x(30, A - 6);
    var aG = x(8, 12);
    var aF = E.G.CreatePolygonObj(au, c, aB, aC, aG);
    if (IS_TOUCHENABLED) {
        var D = p(aC, aG)
    }
    aF.style.cursor = "inherit";
    aF.formattooltip = ak.getAttribute("formattooltip") == "true";
    function av(k) {
        if (q == aE) {
            return 0
        }
        return(aF.maxVal - aF.minVal) * (k - aE) / (q - aE) + aF.minVal
    }
    function aj(k) {
        return(k - aF.minVal) * (q - aE) / (aF.maxVal - aF.minVal) + aE
    }
    function n(aJ, k, aH, l) {
        aF._min = aJ;
        aF._max = k;
        var aK = 8;
        var aI = Math.round(av(k) - av(aJ));
        if (aI > aK) {
            W(aJ, aI)
        } else {
            if (aH == "min") {
                W(k, 0);
                if (l) {
                    aF._min = aF._max
                }
            } else {
                W(aJ, 0);
                if (l) {
                    aF._max = aF._min
                }
            }
        }
    }
    function W(aI, l) {
        aF.style[aA] = Math.round(av(aI)) + "px";
        if (l > 0) {
            var aJ = [[4, 0], [8, 4], [l, 4], [l + 4, 0], [l + 4, 12], [l, 8], [8, 8], [4, 12]];
            if (w != "horizontal") {
                for (var aH = 0; aH < aJ.length; ++aH) {
                    var k = aJ[aH][0];
                    aJ[aH][0] = aJ[aH][1];
                    aJ[aH][1] = k
                }
            }
            E.G.FixPolygon(aF, aJ, x(l + 8, 12), c)
        } else {
            E.G.FixPolygon(aF, au, aG, c)
        }
        if (IS_TOUCHENABLED) {
            D.style[aA] = Math.round(av(aI) - 0.5 * (b - 1) * aG[w == "horizontal" ? 0 : 1]) + "px";
            if (l > 0) {
                D.style[ai] = l + 8 + (b - 1) * aG[w == "horizontal" ? 0 : 1] + "px"
            }
        }
    }
    if (y && !this.ReadOnly) {
        P = function(k) {
            if (E.Active) {
                if (!k) {
                    k = window.event
                }
                var aM = IS_TOUCHENABLED ? k.targetTouches[0][ax] : k[ax];
                var aN = 3;
                var aL = Qva.GetPageCoords(aF);
                var aI = w === "horizontal" ? "x" : "y";
                var aH = aF._min == aF._max ? 0 : 8;
                var aO = parseFloat(aF.style[ai]);
                if (IS_TOUCHENABLED) {
                    var aP = 1;
                    try {
                        aP = document.documentElement.clientWidth / window.innerWidth
                    } catch (aJ) {
                    }
                    var aK = parseFloat(D.style[ai]);
                    if (aP > 1) {
                        aN = 0.5 * (aK - aF[w === "horizontal" ? "clientWidth" : "clientHeight"])
                    }
                    aL = Qva.GetPageCoords(D);
                    aO = aK;
                    aH = 0
                }
                if (Math.abs(aL[aI] - aM) < aN) {
                    document.body.style.cursor = w === "horizontal" ? "w-resize" : "n-resize"
                } else {
                    if (Math.abs(aL[aI] + aO - aH - aM) < aN) {
                        document.body.style.cursor = w === "horizontal" ? "e-resize" : "s-resize"
                    } else {
                        document.body.style.cursor = "pointer"
                    }
                }
            }
        };
        ag = function() {
            if (E.Active) {
                document.body.style.cursor = "default"
            }
        }
    }
    aF._updateTooltip = function(l) {
        var aI = Qva.GetAbsolutePageCoords(aF);
        var aH = {};
        if (l) {
            for (var k = 0; k < l.values.length; k++) {
                aH[k] = l.values[k].text
            }
        } else {
            aH = aF.val
        }
        if (y) {
            if (E.Choice) {
                Qva.Mgr.slider.tooltip.innerHTML = "Min: " + (E.Choice[aH[0]] || "?") + "<br/>Max: " + (E.Choice[aH[1]] || "?")
            } else {
                Qva.Mgr.slider.tooltip.innerHTML = "Min: " + aH[0] + "<br/>Max: " + aH[1]
            }
        } else {
            Qva.Mgr.slider.tooltip.innerText = E.Choice ? (E.Choice[aH[0]] || "?") : aH[0]
        }
        if (w == "horizontal") {
            Qva.Mgr.slider.tooltip.style.left = (aI.x - 5) + "px";
            Qva.Mgr.slider.tooltip.style.top = (aI.y - 50) + "px"
        } else {
            Qva.Mgr.slider.tooltip.style.left = (aI.x + 50) + "px";
            Qva.Mgr.slider.tooltip.style.top = (aI.y - 5) + "px"
        }
        Qva.Mgr.slider.tooltip.style.fontFamily = E.Element.style.fontFamily;
        Qva.Mgr.slider.tooltip.style.fontSize = E.Element.style.fontSize;
        Qva.Mgr.slider.tooltip.style.fontWeight = E.Element.style.fontWeight;
        Qva.Mgr.slider.tooltip.style.visibility = "visible"
    };
    aF._setPos = function(l) {
        var aI = [aF._min, aF._max];
        if (O) {
            if (aI[0] >= 0) {
                aI[0] = (aI[0] + O / 2) - ((aI[0] + O / 2) % O)
            } else {
                aI[0] = (aI[0] - O / 2) - ((aI[0] - O / 2) % O)
            }
            if (aI[1] >= 0) {
                aI[1] = (aI[1] + O / 2) - ((aI[1] + O / 2) % O)
            } else {
                aI[1] = (aI[1] - O / 2) - ((aI[1] - O / 2) % O)
            }
        }
        if (l) {
            var aH = aF.lastValue != aI[0] || aF.lastValue != aI[1];
            Qva.Mgr.slider.tooltip.style.visibility = "hidden";
            if (y) {
                aI = aI[0] + ":" + aI[1]
            } else {
                aI = aI[0]
            }
            if (aH) {
                E.PageBinder.Set(E.Name, "value", aI, true)
            }
        } else {
            aI[0] = Math.round(aI[0] * 100) / 100;
            aI[1] = Math.round(aI[1] * 100) / 100;
            if (aF.val && aI[0] == aF.val[0] && aI[1] == aF.val[1]) {
                return
            }
            aF.val = aI;
            if (aF.formattooltip && !E.Choice) {
                var k = E.PageBinder.GetDocumentMgr();
                if (aF.hoverTimout) {
                    aF.hoverTimout = clearTimeout(aF.hoverTimout)
                }
                aF.hoverTimout = setTimeout(function() {
                    if (Qva.IsContextOpen()) {
                        return
                    }
                    if (!k.GetEnabled()) {
                        return
                    }
                    k.SimpleCall("tooltip", E.Name, aF._updateTooltip, {val1: aF.val[0], val2: aF.val[1]})
                }, 200)
            } else {
                aF._updateTooltip()
            }
        }
    };
    aF.setPos = function(aH, l) {
        if (aH < aF.minVal) {
            aH = aF.minVal
        }
        if (aH > aF.maxVal) {
            aH = aF.maxVal
        }
        var k = aj(aH);
        if (!isNaN(k)) {
            n(k, k, "max", l)
        }
        aF._setPos(l)
    };
    if (!this.ReadOnly) {
        R = function(aK) {
            if (!aK) {
                aK = window.event
            }
            switch (document.body.style.cursor) {
                case"w-resize":
                case"n-resize":
                    aF.setPos = function(aN, aL) {
                        var aM = av(aF._max);
                        if (aM < aN) {
                            aN = aM
                        }
                        if (aN < aF.minVal) {
                            aN = aF.minVal
                        }
                        n(aj(aN), aF._max, "min", aL);
                        aF._setPos(aL)
                    };
                    break;
                case"e-resize":
                case"s-resize":
                    var aI = parseFloat(aF.style[ai]) - 8;
                    aF.setPos = function(aN, aL) {
                        aN += aI;
                        var aM = av(aF._min);
                        if (aN < aM) {
                            aN = aM
                        }
                        if (aF.maxVal < aN) {
                            aN = aF.maxVal
                        }
                        n(aF._min, aj(aN), "max", aL);
                        aF._setPos(aL)
                    };
                    break;
                default:
                    var aI = parseFloat(aF.style[ai]) - 8;
                    var l = aF._max - aF._min;
                    aF.setPos = function(aO, aM) {
                        var aN = aF.maxVal - aI;
                        if (aO < aF.minVal) {
                            aO = aF.minVal
                        }
                        if (aO > aN) {
                            aO = aN
                        }
                        var aL = aj(aO);
                        if (!isNaN(aL)) {
                            n(aL, aL + l, "max", aM)
                        }
                        aF._setPos(aM)
                    };
                    break
            }
            var k = parseFloat(aF.style[aA]);
            aF.mouseZero = IS_TOUCHENABLED ? aK.targetTouches[0][ax] : aK[ax];
            aF.mouseZero -= k;
            aF._setPos(false);
            function aH(aL) {
                if (!aL) {
                    aL = window.event
                }
                var aM = IS_TOUCHENABLED ? aL.changedTouches[0][ax] : aL[ax];
                aM -= aF.mouseZero;
                aF.setPos(aM, true);
                if (IS_TOUCHENABLED) {
                    Qva.removeEvent(document, "touchmove", aJ);
                    Qva.removeEvent(document, "touchend", aH)
                } else {
                    Qva.removeEvent(document, "mousemove", aJ);
                    Qva.removeEvent(document, "mouseup", aH)
                }
                E.Active = true
            }
            function aJ(aL) {
                if (!aL) {
                    aL = window.event
                }
                var aM = IS_TOUCHENABLED ? aL.targetTouches[0][ax] : aL[ax];
                aM -= aF.mouseZero;
                aF.setPos(aM)
            }
            E.Active = false;
            if (IS_TOUCHENABLED) {
                Qva.addEvent(document, "touchmove", aJ);
                Qva.addEvent(document, "touchend", aH)
            } else {
                Qva.addEvent(document, "mousemove", aJ);
                Qva.addEvent(document, "mouseup", aH)
            }
            aK.cancelBubble = true;
            return false
        };
        if (IS_TOUCHENABLED) {
            D.ontouchstart = function(k) {
                if (y) {
                    P(k)
                }
                R(k);
                k.cancelBubble = true;
                return false
            }
        } else {
            aF.onmouseover = P;
            aF.onmousedown = R;
            aF.onmousemove = P;
            aF.onmouseout = ag
        }
    }
    aF.minVal = 17 + 3;
    aF.maxVal = parseFloat(aF.parentNode.style[ai]) - parseFloat(aF.style[ai]) - 17 - 3;
    aF.lastValue = H == ab ? H : -1;
    if (Y) {
        n(H, ab, "max", true)
    } else {
        if (!this.ReadOnly) {
            aF.style.visibility = "hidden";
            if (IS_TOUCHENABLED) {
                T.ontouchstart = function(l) {
                    if (!l) {
                        l = window.event
                    }
                    var k = w == "horizontal" ? "x" : "y";
                    var aH = l.targetTouches[0][ax] - (Qva.GetPageCoords(o)[k] + 4);
                    aF.style.visibility = "visible";
                    aF.setPos(aH, false);
                    if (y) {
                        P(l)
                    }
                    R(l);
                    l.cancelBubble = true;
                    return false
                }
            } else {
                T.onmouseover = function(k) {
                    aF.onmouseover = null;
                    aF.onmousedown = function(l) {
                        aF.style.visibility = "visible";
                        aF.onmouseout = null;
                        aF.onmousemove = null;
                        T.onmouseover = null;
                        T.onmousemove = null;
                        T.onmouseout = null;
                        aF.onmousedown = R;
                        aF.onmouseover = P;
                        aF.onmousemove = P;
                        aF.onmouseout = ag;
                        if (y) {
                            document.body.style.cursor = "e-resize"
                        }
                        R(l)
                    };
                    aF.onmouseout = function() {
                        aF.style.visibility = "hidden";
                        aF.onmouseout = null;
                        aF.onmousemove = null;
                        T.onmousemove = null;
                        T.onmouseout = null;
                        Qva.Mgr.slider.tooltip.style.visibility = "hidden"
                    };
                    aF.onmousemove = function(aH) {
                        if (!aH) {
                            aH = window.event
                        }
                        var l = w == "horizontal" ? "x" : "y";
                        var aI = aH[ax] - (Qva.GetPageCoords(o)[l] + 4);
                        aF.setPos(aI, false)
                    };
                    T.onmouseout = function(l) {
                        if (!l) {
                            l = window.event
                        }
                        if (!l.toElement) {
                            Assert(false)
                        }
                        if (l.toElement !== aF) {
                            aF.onmouseout()
                        }
                    };
                    T.onmousemove = aF.onmousemove;
                    aF.onmousemove(k);
                    aF.style.visibility = "visible"
                }
            }
        }
    }
    function p(aJ, aI, aH) {
        var l = document.createElement("div");
        var k = w == "horizontal" ? 0 : 1;
        l.style.position = "absolute";
        l.style.left = aJ[0] - 0.5 * (b - 1) * aI[0] + "px";
        l.style.top = aJ[1] - 0.5 * (b - 1) * aI[1] + "px";
        l.style.height = b * aI[1] + "px";
        l.style.width = b * aI[0] + "px";
        if (aH == "start") {
            l.style[ad] = parseFloat(l.style[ad]) + 0.5 * (b - 1) * aI[k] + "px"
        }
        if (aH == "end") {
            l.style[ad] = parseFloat(l.style[ad]) - 0.5 * (b - 1) * aI[k] + "px"
        }
        aB.appendChild(l);
        return l
    }
    function a(aI, aH) {
        var l = aI == "start" ? 0 : 10;
        var k = aI == "start" ? 10 : 0;
        var aM = [x(l, 0), x(k, 6), x(l, 12)];
        var aJ = x(aI == "start" ? (f - 15) : 5, A - 6);
        var aO = x(10, 12);
        var aL = E.G.CreatePolygonObj(aM, aH, aB, aJ, aO);
        var aK = y ? 1 : (O != null ? O : 1);
        if (aI !== "start") {
            aK = -aK
        }
        if (IS_TOUCHENABLED) {
            var aN = p(aJ, aO, aI);
            aN.onmousedown = function() {
                if (aF._min != -1 && aF._min + aK >= aE && aF._max + aK <= q) {
                    aF._min += aK;
                    aF._max += aK;
                    aF._setPos(true)
                }
            }
        } else {
            aL.onmousedown = function() {
                if (aF._min != -1 && aF._min + aK >= aE && aF._max + aK <= q) {
                    aF._min += aK;
                    aF._max += aK;
                    aF._setPos(true)
                }
            }
        }
    }
    if (v) {
        var ae = HtmlifyARGB(v.getAttribute("color")) || "#0080C0";
        a("start", ae);
        a("end", ae)
    }
    if (aD && o.firstChild) {
        o.replaceChild(aB, o.firstChild)
    } else {
        o.appendChild(aB)
    }
};
Qva.Mgr.slider.prototype.Remove = function() {
    Qva.RemoveHtml(this.Element)
};
(function(c, a) {
    function h(m) {
        if (!m.pressed) {
            return
        }
        m.pressed = false;
        var n = m.action;
        if (m.ObjectId != null) {
            var l = Qva.GetObjectBinder(m);
            var o = {};
            if (typeof(m.val) === "undefined") {
                o.position = m.xx + ":" + m.yy
            } else {
                o.value = m.val
            }
            o.action = "";
            l.Set(m.ObjectId + "." + n, o)
        }
    }
    Qva.PageBinding.prototype.CreateCellIcon = function(x, u, y, p, z) {
        var o = x.getAttribute("name");
        if (z && (o === "EXC" || o === "COC" || o === "ODDC" || o === "CY" || o === "DU" || o === "SEARCH")) {
            return this.CreateCellSpriteIcon(x, z)
        }
        var s = document.createElement("img");
        var n = "cursor: pointer;";
        var v = x.getAttribute("alttext");
        s.alt = v ? v : "";
        var w = x.getAttribute("align");
        s.className = "Qv_CellIcon";
        if (w) {
            s.className += "_" + w
        }
        s.className += " Qv_" + o;
        var r = x.getAttribute("sendsize") === "true";
        if (r) {
            n += "height:" + z + "px; width:" + p + "px; "
        }
        s.style.cssText = n;
        var m = x.getAttribute("url");
        if (m) {
            m = Qva.AddProxyIfAny(m);
            m = Qva.XrfSecure(m);
            s.src = m
        } else {
            var l = x.getAttribute("stamp");
            var q = HtmlifyARGB(x.getAttribute("color"));
            m = this.BuildBinaryUrl(x.getAttribute("path"), l, o, q);
            if (r) {
                if (x.getAttribute("stretchmode")) {
                    u = x.getAttribute("stretchmode")
                }
                m += "&width=" + p + "&height=" + z + "&stretchmode=" + u + "&adjust=" + y;
                m = Qva.AddProxyIfAny(m);
                m = Qva.XrfSecure(m)
            }
            c(s).error(function() {
                if (v) {
                    c(this).replaceWith(c('<div style="' + n + '">').text(v))
                } else {
                    c(this).remove()
                }
            });
            s.src = m
        }
        return s
    };
    Qva.PageBinding.prototype.CreateCellSpriteIcon = function(o, l) {
        var n = o.getAttribute("name");
        var q = o.getAttribute("align");
        var p = document.createElement("div");
        p.style.width = IS_TOUCHENABLED ? "18px" : "14px";
        p.style.height = l + "px";
        p.className = "Qv_CellIcon";
        if (q) {
            p.className += "_" + q
        }
        var m = document.createElement("div");
        m.className = "cell-icon cell-" + n + "-icon";
        m.title = "";
        if (l > 13) {
            m.style.top = (l - 12) / 2 + "px"
        }
        if (IS_TOUCHENABLED) {
            p.style.zIndex = 700
        }
        p.appendChild(m);
        return p
    };
    window.AppendAction = function(n, l, p, r) {
        var o = l.getAttribute("action");
        var q = l.getAttribute("clientaction");
        var m = l.getAttribute("drag");
        if (o || q) {
            n.binderid = p.binderid;
            n.onmousedown = Qva.CancelAction;
            n.onmouseup = Qva.CancelAction;
            if (IS_TOUCHENABLED) {
                n.ontouchstart = Qva.CancelAction;
                n.ontouchend = Qva.CancelAction
            }
            if (o) {
                n.onclick = k;
                n.pressed = false;
                n.action = o
            } else {
                if (q) {
                    n.AvqMgr = p;
                    n.onclick = onclick_ContextClientAction;
                    n.clientaction = q;
                    n.param = l.getAttribute("param")
                }
            }
            n.ObjectId = p.ObjectId;
            n.pos = r;
            if (l.getAttribute("menu") == "true") {
                n.position = o + ":" + r;
                n.oncontextmenu = function(s) {
                    return Qva.GetBinder(this.binderid).OnContextMenu(s, this.ObjectId)
                }
            }
            c(n).removeClass("QvaNoClick")
        } else {
            if (m) {
                n.dragObj = {Name: p.PageName, type: "col"};
                c(n).removeClass("QvaNoClick")
            } else {
                c(n).addClass("QvaNoClick");
                n.ondrag = function() {
                    return false
                };
                n.onmousedown = Qva.NoAction;
                n.onmouseup = Qva.NoAction;
                n.onclick = Qva.NoAction
            }
        }
    };
    function k(l) {
        if (!l) {
            l = window.event
        }
        l.cancelBubble = true;
        this.pressed = true;
        var m = this;
        if (IS_TOUCHENABLED) {
            b(m)
        } else {
            window.setTimeout(function() {
                b(m)
            }, 200)
        }
    }
    function b(m) {
        if (!m.pressed) {
            return
        }
        m.pressed = false;
        var n = m.action;
        var o = {action: "", position: m.pos};
        var l = Qva.GetBinder(m.binderid);
        l.Set(m.ObjectId + "." + n, o)
    }
    Qva.GetScrollBarProperties = function(o, l, m, n) {
        var p = {width: 12, backgroundColor: "#FFF", buttonColor: "#DDD", borderColor: "#fff"};
        if (o) {
            p.width = parseFloat(o)
        }
        if (l) {
            p.buttonColor = l
        }
        if (m) {
            p.backgroundColor = m
        }
        if (n) {
            p.borderColor = n
        }
        return p
    };
    Qva.ScrollBarMgr = function(n, p, s) {
        this.vertical = p;
        this.bar_pos = 0;
        var u = this.w = p ? "width" : "height";
        var q = this.h = p ? "height" : "width";
        function l(x, v) {
            var w = document.createElement("div"), y = document.createElement("span"), z = "";
            w.className = "TouchScrollbar";
            w.style.display = "none";
            w.style.opacity = 1;
            w.style.backgroundColor = "transparent";
            z = v ? p ? "&#9650;" : "&#9668;" : p ? "&#9660;" : "&#9658;";
            y.innerHTML = z;
            y.style.fontFamily = "Monospace";
            y.style.fontSize = "120%";
            y.style.position = "absolute";
            y.style.left = y.style.top = y.style.right = y.style.bottom = "0px";
            w.appendChild(y);
            x.appendChild(w);
            return w
        }
        var r = this.bar = document.createElement("div");
        r.className = "TouchScrollbar";
        r.style.display = "none";
        r.style.opacity = 1;
        r.style.right = "auto";
        r.style.bottom = "auto";
        initTransition(r, "cubic-bezier(0, 0.3, 0.6, 1)");
        r.style.borderRadius = "3px";
        n.Element.appendChild(r);
        s = !IS_TOUCHENABLED;
        this.buttons = s;
        if (s) {
            this.start = l(n.Element, true);
            this.end = l(n.Element, false)
        }
        var o = this.backgroundDivider = document.createElement("div");
        o.className = p ? "Qv_ScrollbarVerticalDivider" : "Qv_ScrollbarHorizontalDivider";
        n.Element.appendChild(o);
        var m = this.background = document.createElement("div");
        m.className = "Qv_ScrollbarBackground";
        m.style.display = "none";
        n.Element.appendChild(m)
    };
    Qva.ScrollBarMgr.prototype.Set = function(q, v, m, p, w, o, u) {
        if (m < 0) {
            return
        }
        var r = m - p;
        var s = this.props.width;
        q += 2;
        v += 2;
        if (this.buttons) {
            this.start.style.left = q + "px";
            this.start.style.top = v + "px";
            this.start.style.display = "";
            this.end.style.left = q + "px";
            this.end.style.top = v + "px";
            if (this.vertical) {
                this.end.style.top = (v + m - s) + "px";
                v += s - 4
            } else {
                this.end.style.left = (q + m - s) + "px";
                q += s - 4
            }
            this.end.style.display = "";
            m -= (s * 2)
        }
        var l = this.bar_height = Math.max(Math.round(m * m / p), 10);
        var n = m - l;
        this.ScrollStep = n / r;
        this.left = this.vertical ? q : q + 2;
        this.top = this.vertical ? v + 2 : v;
        this.visible_height = m;
        this.backgroundDivider.style.left = o + "px";
        this.backgroundDivider.style.top = u + "px";
        this.backgroundDivider.style.display = "block";
        if (!this.vertical) {
            this.backgroundDivider.style.width = w + "px"
        } else {
            this.backgroundDivider.style.height = (w + this.props.width) + "px"
        }
        this.background.style.left = o + "px";
        this.background.style.top = u + "px";
        this.background.style[this.h] = w + "px";
        this.background.style.display = "";
        this.bar.style.top = this.top + "px";
        this.bar.style.left = this.left + "px";
        this.bar.style[this.w] = s - 3 + "px";
        this.bar.style[this.h] = l + "px";
        this.bar.style.display = "";
        this.bar._topOffset = this.top;
        this.bar._leftOffset = this.left;
        this.setTransitionTime("0ms")
    };
    Qva.ScrollBarMgr.prototype.Hide = function() {
        this.bar.style.display = "none";
        this.background.style.display = "none";
        this.backgroundDivider.style.display = "none";
        if (this.paddingelement) {
            this.paddingelement.style.display = "none"
        }
        if (this.buttons) {
            this.start.style.display = "none";
            this.end.style.display = "none"
        }
    };
    Qva.ScrollBarMgr.prototype.EnablePaddingElement = function() {
        var l = this.paddingelement = this.paddingelement || document.createElement("div");
        l.style.position = "absolute";
        l.style.bottom = "0px";
        l.style.right = "0px";
        l.style.width = l.style.height = this.props.width + "px";
        l.style.backgroundColor = this.props.buttonColor;
        this.background.parentNode.appendChild(l)
    };
    Qva.ScrollBarMgr.prototype.Get = function() {
        return 0
    };
    Qva.ScrollBarMgr.prototype.setPosition = function(m) {
        if (this.bar.style.display == "none" || typeof this.bar_pos === "undefined") {
            return
        }
        var l = Math.round(this.bar_pos = m * this.ScrollStep);
        if (this.vertical) {
            translate(this.bar, 0, l)
        } else {
            translate(this.bar, l, 0)
        }
    };
    Qva.ScrollBarMgr.prototype.setProperties = function(l) {
        this.props = l;
        var m = l.width - 3;
        function n(o) {
            var p = m / 4 + "px";
            o.style.width = m + "px";
            o.style.height = m + "px";
            o.style.color = l.buttonColor;
            o.style.lineHeight = m + "px";
            o.style.fontSize = m + "px";
            o.style.textAlign = "center";
            o.firstChild.style.display = "block";
            o.firstChild.style.width = m + "px";
            o.firstChild.style.height = m + "px";
            o.firstChild.style.lineHeight = "0.9";
            o.firstChild.style.color = l.buttonColor;
            if (this.vertical) {
            } else {
            }
        }
        if (this.buttons) {
            n(this.start);
            n(this.end)
        }
        if (!this.bar.style.width) {
            this.bar.style.width = m + "px";
            this.bar.style.height = m + "px"
        }
        if (!this.vertical) {
            this.backgroundDivider.style.borderTopColor = l.borderColor
        } else {
            this.backgroundDivider.style.borderLeftColor = l.borderColor
        }
        this.bar.style.backgroundColor = l.buttonColor;
        this.background.style[this.w] = l.width + "px";
        this.background.style.backgroundColor = l.backgroundColor;
        if (this.paddingelement) {
            this.EnablePaddingElement()
        }
    };
    Qva.ScrollBarMgr.prototype.setTransitionTime = function(l) {
        setDuration(this.bar, l)
    };
    Qva.ScrollBarMgr.prototype.bindEvents = function(l) {
        this.eventsBound = true;
        this.actions = l
    };
    Qva.ScrollBarMgr.prototype.addEvents = function() {
        var s = this;
        var m = this.vertical ? "offsetY" : "offsetX";
        function w(y) {
            return Qva.GetOffsets(y, s.background.parentNode)[m]
        }
        var n;
        var r, u;
        var p = 600;
        function o(y) {
            if (!y) {
                y = window.event
            }
            c(document).enableSelection();
            Qva.removeEvent(document.body, "mousemove", l);
            Qva.removeEvent(document.body, "mouseup", o);
            var z = (w(y) - n) / s.ScrollStep;
            s.actions.scroll_end(z)
        }
        function l(y) {
            if (!y) {
                y = window.event
            }
            var z = (w(y) - n) / s.ScrollStep;
            s.actions.scroll(z)
        }
        function v() {
            s.actions.step(r);
            u = setTimeout(v, p)
        }
        function q(y) {
            if (!y) {
                y = window.event
            }
            if (u) {
                clearTimeout(u)
            }
            u = null;
            Qva.removeEvent(document.body, "mouseup", q)
        }
        var x = this.vertical ? "top" : "left";
        this.background.onmousedown = function(y) {
            if (!y) {
                y = window.event
            }
            if (y.preventDefault) {
                y.preventDefault()
            }
            y.returnValue = false;
            var z = n = w(y);
            if (z < s[x]) {
                r = 1;
                Qva.addEvent(document.body, "mouseup", q);
                v()
            } else {
                if (z > s[x] + s.visible_height) {
                    r = -1;
                    Qva.addEvent(document.body, "mouseup", q);
                    v()
                } else {
                    if (z < s[x] + s.bar_pos) {
                        r = 5;
                        Qva.addEvent(document.body, "mouseup", q);
                        v()
                    } else {
                        if (z > s[x] + s.bar_pos + s.bar_height) {
                            r = -5;
                            Qva.addEvent(document.body, "mouseup", q);
                            v()
                        } else {
                            c(document).disableSelection();
                            Qva.addEvent(document.body, "mousemove", l);
                            Qva.addEvent(document.body, "mouseup", o)
                        }
                    }
                }
            }
            setTimeout(function() {
                s.background.parentNode.scrollTop = 0
            }, 50);
            return false
        };
        this.background.parentNode.scroll = "no";
        if (IS_IE6_OR_IE7) {
            setInterval(function() {
                if (s.background && s.background.parentNode && s.background.parentNode.scrollTop) {
                    s.background.parentNode.scrollTop = 0
                }
            }, 10)
        }
        if (!IS_TOUCHENABLED) {
            this.bar.onmousedown = this.background.onmousedown;
            this.start.onmousedown = this.background.onmousedown;
            this.end.onmousedown = this.background.onmousedown;
            this.bar.onclick = Qva.CancelBubble;
            this.start.onclick = Qva.CancelBubble;
            this.end.onclick = Qva.CancelBubble;
            this.background.onclick = Qva.CancelBubble
        }
    };
    Qva.AddScroll = function(m) {
        var l = m.Element;
        m.YScroll = new Qva.ScrollBarMgr(m, true, IS_TOUCHENABLED);
        m.XScroll = new Qva.ScrollBarMgr(m, false, IS_TOUCHENABLED);
        m.YScroll.addEvents();
        m.XScroll.addEvents();
        Qva.AddMouseScroll(m)
    };
    Qva.AddMouseScroll = function(n) {
        var m = n.Element;
        function l(o) {
            if (!o) {
                o = window.event
            }
            var p;
            if (o.wheelDelta) {
                p = o.wheelDelta / 120;
                if (window.opera) {
                    p = -p
                }
            } else {
                if (o.detail) {
                    p = -o.detail / 3
                }
            }
            if (!p) {
                return
            }
            if (n.actions) {
                n.actions.step(3 * p)
            }
            if (o.preventDefault) {
                o.preventDefault()
            }
            o.returnValue = false
        }
        if (m.addEventListener) {
            m.addEventListener("DOMMouseScroll", l, false)
        }
        m.onmousewheel = l
    };
    Qva.UpdateScroll = function(l) {
        l.ScrollProperties = Qva.GetScrollBarProperties(l.PageBinder.ScrollWidth, l.PageBinder.ScrollButtonColor, l.PageBinder.ScrollBkgColor, l.PageBinder.BorderColor);
        if (l.YScroll) {
            l.YScroll.setProperties(l.ScrollProperties)
        }
        if (l.XScroll) {
            l.XScroll.setProperties(l.ScrollProperties)
        }
    };
    window.translate = null;
    window.setDuration = null;
    window.initTransition = null;
    (function() {
        var l = document.createElement("p");
        if (typeof l.style.webkitTransform !== "undefined") {
            window.translate = function(n, m, o) {
                m = Math.round(m);
                o = Math.round(o);
                n.style.webkitTransform = "translate3d(" + m + "px, " + o + "px, 0)"
            };
            window.setDuration = function(m, n) {
                m.style.webkitTransitionDuration = n
            };
            window.initTransition = function(m, n) {
                m.style.webkitTransitionTimingFunction = n;
                m.style.webkitTransitionProperty = "-webkit-transform"
            }
        } else {
            if (IS_GECKO) {
                window.translate = function(n, m, o) {
                    m = Math.round(m);
                    o = Math.round(o);
                    n.style.MozTransform = "translate(" + m + "px, " + o + "px)"
                };
                window.setDuration = function(m, n) {
                    m.style.MozTransitionDuration = n
                };
                window.initTransition = function(m, n) {
                    m.style.MozTransitionTimingFunction = n;
                    m.style.MozTransitionProperty = "-moz-transform"
                }
            }
        }
        if (!translate) {
            window.translate = function(n, m, o) {
                if (n._leftOffset === a) {
                    n._leftOffset = c(n).position().left
                }
                if (n._topOffset === a) {
                    n._topOffset = c(n).position().top
                }
                n.style.left = (m + n._leftOffset) + "px";
                n.style.top = (o + n._topOffset) + "px"
            }
        }
        if (!setDuration) {
            window.setDuration = function() {
            }
        }
        if (!initTransition) {
            window.initTransition = function() {
            }
        }
        l = null
    })();
    window.ObjectifyARGB = function(n) {
        var m = 0, p = 0, o = 0, l = 0;
        if (n && n.length == 9) {
            m = parseInt(n.substr(1, 2), 16);
            p = parseInt(n.substr(3, 2), 16);
            o = parseInt(n.substr(5, 2), 16);
            l = parseInt(n.substr(7, 2), 16)
        }
        return{A: m, R: p, G: o, B: l, css: HtmlifyARGB(n)}
    };
    Qva.MeasureText = function(o, l, q, n) {
        if (!this.MeasuredTexts) {
            this.MeasuredTexts = {}
        }
        if (this.MeasuredTexts[l]) {
            if (this.MeasuredTexts[l][q]) {
                if (this.MeasuredTexts[l][q][o]) {
                    if (n && this.MeasuredTexts[l][q][o][n]) {
                        return this.MeasuredTexts[l][q][o][n]
                    } else {
                        if (!n && this.MeasuredTexts[l][q][o].def) {
                            return this.MeasuredTexts[l][q][o].def
                        }
                    }
                }
            }
        }
        var p = Qva.Measure_div;
        if (!p) {
            p = document.createElement("div");
            p.style.position = "absolute";
            p.style.width = "auto";
            p.style.height = "auto";
            p.style.visibility = "hidden";
            document.body.insertBefore(p, document.body.firstChild);
            Qva.Measure_div = p
        }
        if (n) {
            p.style.width = n + "px"
        } else {
            p.style.width = "auto"
        }
        c(p).css("font-family", l);
        c(p).css("font-size", q);
        p.innerText = o;
        var m = {width: p.offsetWidth, height: p.offsetHeight};
        if (!this.MeasuredTexts[l]) {
            this.MeasuredTexts[l] = {}
        }
        if (!this.MeasuredTexts[l][q]) {
            this.MeasuredTexts[l][q] = {}
        }
        if (!this.MeasuredTexts[l][q][o]) {
            this.MeasuredTexts[l][q][o] = {}
        }
        if (n && !this.MeasuredTexts[l][q][o][n]) {
            this.MeasuredTexts[l][q][o][n] = m
        } else {
            if (!n) {
                this.MeasuredTexts[l][q][o].def = m
            }
        }
        return m
    };
    Qva.MeasureText.TextSample = "gGfjl";
    Qva.MeasureFontHeight = function(l, m) {
        return Qva.MeasureText(Qva.MeasureText.TextSample, l, m).height
    };
    if (!Qva.Mgr) {
        Qva.Mgr = {}
    }
    Qva.Mgr.grid = function(l, n, m, o) {
        this.SearchName = this.Name = Qva.MgrMakeName(m, o);
        this.ObjectId = l.Element.id;
        this.LeftButton = l.LeftButton;
        this.Element = n;
        this.Cols = [];
        this.Body = {position: "Body"};
        this.Headers = {position: "Head"};
        this.Footers = {position: "Foot"};
        this.Selection = {};
        this.binderid = l.binderid;
        l.AddManager(this);
        n.Mgr = this;
        n.style.position = "relative";
        n.style.overflow = "hidden";
        n.style.cursor = "Default";
        this.Content = document.createElement("div");
        this.Content.className = "testclass";
        n.appendChild(this.Content);
        Qva.AddScroll(this)
    };
    Qva.Mgr.grid.prototype.Paint = function(m, G, s, R) {
        this.isCurrentSelections = G.getAttributeNode("type").value === "CS";
        if (G.getAttribute("fullwidth")) {
            this.PageBinder.FullWidth = G.getAttribute("fullwidth")
        }
        Qva.UpdateScroll(this);
        this.Touched = true;
        var v = this.Element;
        function aa(x) {
            for (var y = 0; y < G.childNodes.length; ++y) {
                if (G.childNodes[y].tagName == "value" && G.childNodes[y].getAttribute("name") == x) {
                    return G.childNodes[y]
                }
            }
            return null
        }
        var Y = aa("Body");
        if (Y) {
            v.style.display = Y.getAttribute("mode") == "enabled" ? "" : "none"
        }
        if (v.style.display == "none") {
            return
        }
        var W = G.getElementsByTagName("style");
        if (W.length > 0) {
            this.Style = [];
            W = W[0].getElementsByTagName("style");
            for (var l = 0; l < W.length; l++) {
                this.Style[l] = new this._StyleObject(W[l])
            }
        }
        W = G.getElementsByTagName("borderstyle");
        if (W.length > 0) {
            this.BorderStyle = [];
            W = W[0].getElementsByTagName("borderstyle");
            for (l = 0; l < W.length; l++) {
                var ac = this.BorderStyle[l] = new this._BorderStyleObject(W[l])
            }
        }
        var Z = aa("Style");
        if (Z) {
            var C = Z.getAttribute("fontfamily");
            var B = Z.getAttribute("fontsize") + "pt";
            this.fontfamily = C;
            this.fontsize = B;
            this.TextHeight = Qva.MeasureText("�g", C, B).height
        }
        var X = G.getElementsByTagName("dropzones");
        if (X.length > 0) {
            this.DropZones = [];
            for (var u = X[0].firstChild; u; u = u.nextSibling) {
                var q = {};
                ObjectifyXmlAttributes(q, u);
                this.DropZones[this.DropZones.length] = q
            }
        }
        function z(x) {
            var y = G.getAttribute(x);
            if (!y) {
                return{x: 0, y: 0}
            }
            var ad = y.split(":");
            return{x: parseInt(ad[0]), y: parseInt(ad[1])}
        }
        if (G.getAttribute("totalsize") != null) {
            this.ChunkOffset = z("pageoffset");
            this.ChunkSize = z("pagesize");
            this.TotalSize = z("totalsize")
        } else {
            this.ChunkOffset = {x: 0, y: 0};
            for (var N = 0; aa("C" + N) != null; ++N) {
            }
            if (N == 1 && aa("C2") != null) {
                ++N
            }
            var L = aa("C0").getElementsByTagName("element").length;
            this.TotalSize = this.ChunkSize = {x: N, y: L}
        }
        if (G.getAttribute("scrollposition") != null) {
            this.ScrollPosition = z("scrollposition")
        } else {
            this.ScrollPosition = {x: 0, y: 0}
        }
        R = this.ChunkOffset.x != 0 || this.ChunkOffset.y != 0;
        if (!R) {
            this.Cols = [];
            this.Body.Lines = [];
            this.Headers.Lines = [];
            this.Headers.Heights = [];
            this.Footers.Lines = [];
            this.YScroll.Scrolled = false;
            this.XScroll.Scrolled = false;
            this.LastSize = null
        }
        this.sizetodata = G.getAttribute("sizetodata") === "true";
        var J = this.ChunkOffset.x;
        var ab = Math.min(this.ChunkOffset.x + this.ChunkSize.x, this.TotalSize.x);
        var S = this.PageBinder.GetMaxClientWidth() / Math.max(1, ab - J);
        var E = this.PageBinder.PageBinder.isSmallDevices;
        for (var U = J; U < ab; ++U) {
            var A = aa("C" + U);
            if (!A && U == 1) {
                A = aa("C2")
            }
            if (!A) {
                continue
            }
            var Q = parseInt(A.getAttribute("width"));
            if (isNaN(Q) || Q < 0) {
                Q = S
            }
            if (!this.Cols[U]) {
                this.Cols[U] = {}
            }
            this.Cols[U].width = Q * this.PageBinder.FontAspectRatio;
            this.Cols[U].allowresize = A.getAttribute("allowresize") != "false";
            var o = 0;
            var K = 0;
            var P = A.getElementsByTagName("element");
            for (var r = 0; r < P.length; ++r) {
                var H = P[r];
                var O = H.getAttribute("position");
                var M = r;
                var I;
                if (O === "top") {
                    o++;
                    I = this.Headers.Lines
                } else {
                    if (O === "bottom") {
                        M -= o;
                        K++;
                        I = this.Footers.Lines
                    } else {
                        M -= o;
                        M -= K;
                        M += this.ChunkOffset.y;
                        I = this.Body.Lines
                    }
                }
                if (I[M] == null) {
                    I[M] = []
                }
                var n = I[M];
                n[U] = new this._CellObject(H)
            }
        }
        if (this.Headers.Lines.length === 0 && this.Footers.Lines.length === 0 && this.Body.Lines.length === 0) {
            this.TotalSize = {x: 0, y: 0}
        }
        this.Footers.rowHeight = this.Footers.Lines.length > 0 ? this.Footers.Lines[0][0].rowspan * this.TextHeight : 0;
        this.Body.rowHeight = this.Body.Lines.length > 0 ? this.Body.Lines[0][0].rowspan * this.TextHeight : 0;
        this.Headers.height = 0;
        for (var V = 0; V < this.Headers.Lines.length; ++V) {
            if (this.Headers.Lines[V][0].vertical) {
                this.Headers.Heights[V] = this.TextHeight;
                for (var T = 0; T < this.Headers.Lines[V].length; T++) {
                    var p = Qva.MeasureText(this.Headers.Lines[V][T].val, this.fontfamily, this.fontsize).width + 8;
                    this.Headers.Heights[V] = Math.max(this.Headers.Heights[V], p)
                }
                this.Headers.height += this.Headers.Heights[V]
            } else {
                this.Headers.height += this.Headers.Lines[V][0].rowspan * this.TextHeight
            }
        }
        this.Footers.height = this.Footers.Lines.length * this.Footers.rowHeight;
        var D = this.TotalSize.x === 0 ? 0 : parseInt(G.getAttribute("fixed_cols"));
        var w = this.TotalSize.x === 0 ? 0 : parseInt(G.getAttribute("fixed_cols_right"));
        if (isNaN(D)) {
            D = 0
        }
        if (isNaN(w)) {
            w = 0
        }
        if (this.Body.Lines.length > 0) {
            D = Math.min(D, this.Body.Lines[0].length)
        }
        var F = (this.fixed_cols_left != null && this.fixed_cols_left !== D) || (this.fixed_cols_right != null && this.fixed_cols_right !== w);
        if (F) {
            this.LastSize = null
        }
        this.fixed_cols_left = D;
        this.fixed_cols_right = w;
        this._UpdateLimits();
        this.PageBinder.QueuePostPaintMessage(this);
        this.PageBinder[this.PageBinder.oldShow ? "oldShow" : "Show"]()
    };
    Qva.Mgr.grid.prototype._UpdateLimits = function() {
        var n, p, s = 0, o = 0, q = 0, m = this.fixed_cols_left + this.fixed_cols_right;
        n = p = this.Headers.height + this.Footers.height;
        n += this.Body.rowHeight;
        p += this.TotalSize.y * this.Body.rowHeight;
        for (var r = 0; r < this.TotalSize.x; ++r) {
            if (!this.Cols[r]) {
                q = Infinity;
                break
            }
            var l = this.Cols[r].width;
            if (r < m) {
                o += l
            } else {
                s = Math.max(s, l)
            }
            q += l
        }
        s += o;
        this.fixed_width = o;
        this.limits = {min_width: s, max_width: q, min_height: n, max_height: p};
        this.PageBinder.MinWidth = s;
        this.PageBinder.MinHeight = n
    };
    Qva.Mgr.grid.prototype._LoadCells = function(m, r) {
        if (m.count === 0 || r.count === 0) {
            return false
        }
        var u = m.start;
        var n = u + m.count - 1;
        var q = r.start;
        var w = Math.min(q + r.count - 1, this.TotalSize.x - 1);
        var o = m.part;
        var p = this;
        function v(x, y) {
            if (o.Lines[y] && o.Lines[y][x]) {
                return false
            }
            p.PageBinder.PartialLoad("Document." + p.ObjectId, {x: Math.floor(x / p.ChunkSize.x) * p.ChunkSize.x, y: Math.floor(y / p.ChunkSize.y) * p.ChunkSize.y});
            return true
        }
        if (v(q, u)) {
            return true
        }
        if (v(q, n)) {
            return true
        }
        if (v(w, u)) {
            return true
        }
        if (v(w, n)) {
            return true
        }
        for (var l = u + 40; l < n; ++l) {
            for (var s = q + 40; s < w; ++s) {
                if (v(s, l)) {
                    return true
                }
            }
        }
        return false
    };
    Qva.Mgr.grid.prototype._PaintCell_Borders = function(y, s, o, A, B, l) {
        var n = 0;
        for (var C = 0; C < B; ++C) {
            var u = 0;
            for (var D = 0; D < l; ++D) {
                var r = y.getCell(o + C, A + D);
                if (!r) {
                    continue
                }
                var q = y.getWidth(A + D);
                var v = y.getHeight(o + C);
                var p = document.createElement("div");
                p.style.position = "absolute";
                if (D == 0) {
                    var w = y.getCell(o + C, A + D - 1);
                    if (w) {
                        q -= this._MakeBorder(p, r, w, "Left", "Right", function(E) {
                            return Math.ceil(E / 2) - 1
                        })
                    } else {
                        if (y.left_border) {
                            q -= this._MakeBorder(p, r, r, "Left", "Left", function(E) {
                                return E
                            })
                        }
                    }
                }
                if (D == l - 1) {
                    var x = y.getCell(o + C, A + D + 1);
                    if (x) {
                        q -= this._MakeBorder(p, r, x, "Right", "Left", function(E) {
                            return Math.floor(E / 2) + 1
                        })
                    } else {
                        if (y.right_border) {
                            q -= this._MakeBorder(p, r, r, "Right", "Right", function(E) {
                                return E
                            })
                        }
                    }
                }
                if (C == 0) {
                    var m = y.getCell(o + C - 1, A + D);
                    if (m) {
                        v -= this._MakeBorder(p, r, m, "Top", "Bottom", function(E) {
                            return Math.ceil(E / 2) - 1
                        })
                    } else {
                        if (y.top_border) {
                            v -= this._MakeBorder(p, r, r, "Top", "Top", function(E) {
                                return E
                            })
                        }
                    }
                }
                if (C == B - 1) {
                    var z = y.getCell(o + C + 1, A + D);
                    if (z) {
                        v -= this._MakeBorder(p, r, z, "Bottom", "Top", function(E) {
                            return Math.floor(E / 2) + 1
                        })
                    } else {
                        if (y.bottom_border) {
                            v -= this._MakeBorder(p, r, r, "Bottom", "Bottom", function(E) {
                                return E
                            })
                        }
                    }
                }
                p.style.left = u + "px";
                p.style.top = n + "px";
                p.style.width = q >= 0 ? q + "px" : "0px";
                p.style.height = v >= 0 ? v + "px" : "0px";
                p.position = s.position;
                p.binderid = this.binderid;
                p.ObjectId = this.ObjectId;
                p.setAttribute("unselectable", "on");
                s.insertBefore(p, s.firstChild);
                u += y.getWidth(A + D)
            }
            n += y.getHeight(o + C)
        }
    };
    Qva.Mgr.grid.prototype._PaintCell_Content = function(m, q, z, D, A, C, O, s, N, Q) {
        var x = document.createElement("div"), p = false;
        x.xx = N;
        x.yy = s;
        if (m.title == null) {
            m.title = ""
        }
        x.title = m.title;
        x.style.cssText = this._SetCellStyle(m, m.state != null, false);
        x.style.cursor = "pointer";
        x.style.position = "absolute";
        x.style.overflow = "hidden";
        x.style.overflow = "hidden";
        x.style.left = q >= 0 ? q + "px" : "0px";
        x.style.top = z >= 0 ? z + "px" : "0px";
        x.style.width = D >= 0 ? D + "px" : "0px";
        x.style.height = A >= 0 ? A + "px" : "0px";
        x.binderid = this.binderid;
        x.ObjectId = this.ObjectId;
        x.onclick = Qva.CancelAction;
        if (m.dblclick) {
            if (IS_TOUCHENABLED) {
                x.clickselect = true;
                x.ontouchend = Qva.Mgr.grid.DblClick
            } else {
                x.ondblclick = Qva.Mgr.grid.DblClick
            }
        }
        if (m.dragable) {
            var E = this;
            c(x).bind("mousedown.reorder", function(R) {
                var S = E.makeColMap();
                Qva.DragDrop.reorder.mouseDown(R, S, E.DropZones)
            })
        }
        if (m.selecttype == null) {
            var F = m.action;
            if (F) {
                x.onclick = Qva.Mgr.grid.Click;
                x.pos = N + ":" + s;
                x.action = F
            }
        } else {
            if (m.selecttype == "input") {
                x.value = m.intval;
                x.inputname = this.Name + ".V" + s;
                if (IS_TOUCHENABLED) {
                    x.ontouchend = function(R) {
                        R.preventDefault();
                        R.stopPropagation();
                        Qva.OpenPopupInput(this, true);
                        return false
                    };
                    x.input = true;
                    var o = document.createElement("input");
                    o.style.cssText = this._SetCellStyle(m, false, false);
                    o.style.cssText += "line-height:0 !important;";
                    o.style.width = D + "px";
                    o.style.height = A + "px";
                    o.style.zIndex = 666;
                    o.style.position = "absolute";
                    o.style.border = "none";
                    o.style.backgroundColor = "transparent";
                    o.style.padding = "1px 0px 1px 0px";
                    o.style.fontFamily = "Arial";
                    o.style.fontSize = "8pt";
                    o.inputname = x.inputname;
                    o.binderid = x.binderid;
                    o.val = N + ":" + s;
                    o.value = m.intval;
                    o.onchange = function() {
                        Qva.GetBinder(this.binderid).Set(this.inputname, "text", this.value, true)
                    };
                    x.appendChild(o);
                    p = true
                } else {
                    x.onclick = function(R) {
                        if (!R) {
                            R = window.event
                        }
                        R.cancelBubble = true;
                        Qva.OpenPopupInput(this, true);
                        return false
                    }
                }
            } else {
                if (!IS_TOUCHENABLED) {
                    x.onmousedown = Qva.Mgr.grid.MouseDown;
                    x.onmousemove = Qva.Mgr.grid.MouseMove
                }
                if (m.selecttype == "multi") {
                    x.multiselect = true
                } else {
                    x.singleselect = true
                }
                x.selectsource = m.selectsource
            }
        }
        D = Math.max(D - 4, 0);
        var r = document.createElement("div");
        if (A > C && !this.isCurrentSelections && !m.vertical) {
            this.scroll_fix_divs.push({offset: z, max: (A - C), div: r});
            initTransition(r, "cubic-bezier(0, 0.3, 0.6, 1)");
            r.style.position = "relative";
            A = C
        }
        var H = this.Style[m.style];
        var n = 2;
        r.style.padding = "0 " + n + "px";
        r.style.width = D + "px";
        r.style.height = A + "px";
        r.className += " injected";
        x.appendChild(r);
        if (H) {
            var l = document.createElement("div");
            if (!IS_IE6_OR_IE7) {
                r.style.display = "table-cell";
                r.style.verticalAlign = m.label ? H.LabelVertAdjust : H.VertAdjust
            }
            l.style.width = D + "px";
            r.appendChild(l);
            if (m.vertical) {
                var K = m.label ? H.LabelVertAdjust : H.VertAdjust;
                l.style.width = Math.min(A, D) + "px";
                if (IS_IE8_OR_BELOW) {
                    l.className = "QvVertical_LT_IE9";
                    l.style.width = (A - n * 2) + "px";
                    l.style.left = Math.ceil(D / 2 - this.TextHeight / 2) + "px";
                    if (IS_IE6_OR_IE7) {
                        l.style.top = 0 + "px"
                    } else {
                        l.style.top = -1 * Math.ceil(A / 2 - this.TextHeight / 2) + "px";
                        if (K === "top") {
                            l.style.top = 0 + "px"
                        } else {
                            if (K === "bottom") {
                                l.style.top = -1 * A + this.TextHeight + "px"
                            } else {
                                l.style.top = -1 * Math.ceil(A / 2 - this.TextHeight / 2) + "px"
                            }
                        }
                    }
                } else {
                    l.className = "QvVertical";
                    r.style.verticalAlign = "middle";
                    l.style.verticalAlign = "middle";
                    var y = 4, B = A - y;
                    l.style.width = (B - n * 2) + "px";
                    l.style.left = -1 * Math.ceil(B / 2 - D / 2) + "px"
                }
                if (K === "top") {
                    l.style.textAlign = "right"
                } else {
                    if (K === "bottom") {
                        l.style.textAlign = "left"
                    } else {
                        l.style.textAlign = "center"
                    }
                }
            }
            r = l
        }
        A -= 1;
        var H = this.Style[m.style];
        var P = m.label ? H.LabelAdjust : (m.isnum ? H.NumAdjust : H.TextAdjust);
        var w = H.StretchMode;
        var u = null;
        try {
            m.icons.length
        } catch (J) {
            m.icons = []
        }
        for (var G = 0; G < m.icons.length; G++) {
            var I = m.icons[G];
            var M = this._appendCellIcon(I, N, s + (Q === "Body" ? this.Headers.Lines.length : 0), w, P, D, A);
            M.style.maxWidth = D >= 0 ? D + "px" : "0px";
            M.style.maxHeight = A >= 0 ? A + "px" : "0px";
            if (m.vertical) {
                M.className += " QvVerticalIcon";
                if (M.children[0]) {
                    M.children[0].style.top = 0
                }
                if (M.nodeName.toLowerCase() !== "img") {
                    M.style.height = this.TextHeight + "px";
                    M.style.maxHeight = this.TextHeight + "px"
                }
            }
            r.appendChild(M)
        }
        if (m.state) {
            x.className = "Qv" + m.state
        }
        if (m.val) {
            r.setAttribute("unselectable", "on");
            r.title = m.title;
            if (m.url) {
                var v = document.createElement("a");
                v.href = m.url;
                v.target = "_blank";
                u = v;
                r.appendChild(v);
                x.onmousedown = Qva.CancelAction;
                x.onmousemove = Qva.CancelAction;
                if (IS_TOUCHENABLED) {
                    x.ontouchstart = Qva.CancelAction;
                    x.ontouchmove = Qva.CancelAction
                }
                r.onclick = Qva.CancelAction;
                r.onmousedown = Qva.CancelAction;
                r.onmousemove = Qva.CancelAction;
                if (IS_TOUCHENABLED) {
                    r.ontouchstart = Qva.CancelAction;
                    r.ontouchmove = Qva.CancelAction
                }
                r.style.cursor = "Default";
                var v = document.createElement("a");
                v.href = m.url;
                v.target = "_blank";
                v.appendChild(x);
                v.style.position = "absolute";
                x = v
            } else {
                if (m.icons.length > 0) {
                    var L = document.createElement("div");
                    L.style.overflow = "hidden";
                    L.position = x.position;
                    L.binderid = this.binderid;
                    L.ObjectId = this.ObjectId;
                    L.title = m.title;
                    r.appendChild(L);
                    u = L
                } else {
                    u = r
                }
            }
            if (IS_TOUCHENABLED && p) {
                u.style.display = "none"
            }
            if (u && O === 1 && m.rowspan === 1) {
                if (this.TotalSize.x == 1 && this.TotalSize.y == 1) {
                    x.style.overflow = ""
                }
                r.style.whiteSpace = "pre";
                r.style.overflow = "hidden";
                r.style.wordWrap = "normal";
                c(u).html(Qva.ConvertToBr(m.val))
            } else {
                if (u) {
                    u = c(u);
                    u.html(m.val.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\r?\n/g, "<br/>"));
                    u.addClass("multiline")
                }
            }
        }
        r.position = x.position;
        r.binderid = this.binderid;
        r.ObjectId = this.ObjectId;
        return x
    };
    Qva.Mgr.grid.prototype.getCurrentScroll = function() {
        return this.scroll_obj ? this.scroll_obj.getCurrentScroll() : {x: 0, y: 0}
    };
    Qva.Mgr.grid.prototype.makeColMap = function() {
        var n, s, p, q, o, m = this.fixed_cols_left + this.fixed_cols_right, l = this.getCurrentScroll().x, r = {};
        s = 0;
        for (n = 0; n < this.fixed_cols_left; ++n) {
            q = this._getColWidth(n);
            r[n] = {xPos: s, width: q, middle: 0.5};
            s += q
        }
        s = this.fixed_cols_left_width + this.body_width;
        for (n = this.fixed_cols_left; n < this.fixed_cols_left + this.fixed_cols_right; ++n) {
            q = this._getColWidth(n);
            r[n] = {xPos: s, width: q, middle: 0.5};
            s += q
        }
        s = this.fixed_cols_left_width;
        p = this.fixed_cols_left_width + this.body_width;
        for (n = m; s < p; ++n) {
            q = this._getColWidth(n);
            if (q < l) {
                l -= q
            } else {
                o = 0.5;
                if (l > 0) {
                    q -= l;
                    l = 0;
                    o = 0
                }
                if (s + q > p) {
                    q = p - s;
                    o = o === 0 ? 0.5 : 1
                }
                r[n] = {xPos: s, width: q, middle: o};
                s += q
            }
        }
        return r
    };
    Qva.Mgr.grid.prototype._PostPaintCells2 = function(z, H, M, ab, C) {
        if (C.count === 0 && ab.count === 0) {
            return
        }
        var B, l, s, E = ab.part, Y = E.position;
        var T = (function(w) {
            function ae(af) {
                return E.Lines[af]
            }
            return{getCell: function(ah, ag) {
                    var af = ae(ah);
                    return af && af[ag]
                }, getWidth: function(af) {
                    return w._getColWidth(af)
                }, getHeight: function(af) {
                    if (w.isCurrentSelections && this.getCell(af, 1)) {
                        return ab.getHeight(af) * this.getCell(af, 1).rowspan
                    }
                    return ab.getHeight(af)
                }, left_border: false, right_border: false, top_border: (Y === "Foot"), bottom_border: (Y === "Head")}
        }(this));
        var W = ab.start;
        var ad = W + ab.count;
        var K = C.start;
        var U = K + C.count;
        var v = M;
        var G = false;
        for (B = W; B < ad; v += T.getHeight(B), ++B) {
            var y = E.Lines[B];
            s = H;
            for (l = K; l < U; s += T.getWidth(l), ++l) {
                var q = this.fixed_cols_left + this.fixed_cols_right;
                if (!y) {
                    if (Y !== "Body") {
                        continue
                    }
                    this.PageBinder.PartialLoad("Document." + this.ObjectId, {x: Math.floor(l / this.ChunkSize.x) * this.ChunkSize.x, y: Math.floor(B / this.ChunkSize.y) * this.ChunkSize.y});
                    return true
                }
                if (!y[l]) {
                    if (!G) {
                        this.PageBinder.PartialLoad("Document." + this.ObjectId, {x: Math.floor(l / this.ChunkSize.x) * this.ChunkSize.x, y: Math.floor(B / this.ChunkSize.y) * this.ChunkSize.y});
                        G = true
                    }
                    continue
                }
                var Q = T.getCell(B, l);
                Assert(y[l] === Q);
                var I = 1;
                var J = 1;
                var m = T.getWidth(l);
                var o = T.getHeight(B);
                var S;
                if (l > K && T.getCell(B, l - 1) && (R = T.getCell(B, l - 1).multirect) && R.x + 1 < R.width) {
                    continue
                }
                if (B > W && T.getCell(B - 1, l) && (R = T.getCell(B - 1, l).multirect) && R.y + 1 < R.height) {
                    continue
                }
                if (Q.multirect) {
                    if (Q.multirect.x > 0 && l > K) {
                        continue
                    }
                    if (Q.multirect.y > 0 && B > W) {
                        continue
                    }
                    var x = l - Q.multirect.x;
                    var L = B - Q.multirect.y;
                    if (!E.Painted[L]) {
                        E.Painted[L] = []
                    }
                    var P = E.Painted[L];
                    var D = P[x];
                    var Z = D && D.multirect;
                    if (Z) {
                        var F = Z.left > 0 && T.getCell(B, x + Z.left - 1);
                        var V = Z.top > 0 && T.getCell(L + Z.top - 1, l);
                        var p = Z.right < Q.multirect.width && T.getCell(B, x + Z.right + 1);
                        var N = Z.bottom < Q.multirect.height && T.getCell(L + Z.bottom + 1, l);
                        if (!F && !V && !p && !N) {
                            continue
                        }
                    }
                    var n = l;
                    var A = B;
                    var r = s;
                    var u = v;
                    for (; x < n && T.getCell(A, n - 1); ++I, --n) {
                        var X = T.getWidth(n - 1);
                        m += X;
                        r -= X
                    }
                    for (; L < A && T.getCell(A - 1, n); ++J, --A) {
                        var aa = T.getHeight(A - 1);
                        o += aa;
                        u -= aa
                    }
                    for (; n - x + I < Q.multirect.width && T.getCell(A, n + I); ++I) {
                        m += T.getWidth(n + I)
                    }
                    for (; A - L + J < Q.multirect.height && T.getCell(A + J, n); ++J) {
                        o += T.getHeight(A + J)
                    }
                    var R = {left: n - x, top: A - L, right: n - x + I, bottom: A - L + J};
                    if (D) {
                        if (Z) {
                            if (Z.left <= R.left && Z.top <= R.top && Z.right >= R.right && Z.bottom >= R.bottom) {
                                continue
                            }
                        }
                        c(P[x]).remove();
                        for (var O = 0; O < this.scroll_fix_divs.length; ++O) {
                            if (this.scroll_fix_divs[O].div.parentNode === P[x]) {
                                this.scroll_fix_divs.splice(O, 1);
                                break
                            }
                        }
                    }
                    var ac = P[x] = this._PaintCell_Content(Q, r, u, m, o, ab.height, J, B, l, Y);
                    ac.position = l + ":" + B + ":" + Y;
                    ac.multirect = R;
                    this._PaintCell_Borders(T, ac.tagName === "A" ? ac.firstChild : ac, A, n, J, I)
                } else {
                    if (!E.Painted[B]) {
                        E.Painted[B] = []
                    }
                    var P = E.Painted[B];
                    if (P[l]) {
                        continue
                    }
                    var ac = P[l] = this._PaintCell_Content(Q, s, v, m, o, ab.height, J, B, l, Y);
                    ac.position = l + ":" + B + ":" + Y;
                    this._PaintCell_Borders(T, ac.tagName === "A" ? ac.firstChild : ac, B, l, J, I)
                }
                z.appendChild(ac);
                ac.setAttribute("unselectable", "on")
            }
        }
    };
    Qva.Mgr.grid.prototype._CheckSize = function(p, u) {
        var o = this.PageBinder.GetMaxClientWidth();
        var l = this.PageBinder.GetContentMaxHeight();
        var q, s;
        if ((this.LastSize && this.LastSize.width == o && this.LastSize.height == l)) {
            q = this.LastSize.r;
            s = false
        } else {
            q = this._UpdateSize(o, l);
            this.LastSize = {width: o, height: l, r: q};
            s = true
        }
        var n = q.dx;
        var m = q.dy;
        this.Element.style.width = (this.PageBinder.GetMaxClientWidth() - n) + "px";
        if (this.Element.className.indexOf("QvListbox") == -1 || (c(this.Element).find(".Qv_ScrollbarHorizontalDivider") && c(this.Element).find(".Qv_ScrollbarHorizontalDivider").css("display") != "none")) {
            this.Element.style.height = (this.PageBinder.GetContentMaxHeight() - m) + "px"
        }
        this.PageBinder.SetObjectWidth(n);
        this.PageBinder.SetObjectHeight(m, null, true);
        return{width: q.width, height: q.height, changed: s}
    };
    function f(l, m, n) {
        if (Math.max(l.width, m.min_width) >= m.max_width && Math.max(l.height, m.min_height) >= m.max_height) {
            return{horizontal: false, vertical: false}
        } else {
            if (Math.max(l.width - n, m.min_width) >= m.max_width) {
                return{horizontal: false, vertical: true}
            } else {
                if (Math.max(l.height - n, m.min_height) >= m.max_height) {
                    return{horizontal: true, vertical: false}
                } else {
                    return{horizontal: true, vertical: true}
                }
            }
        }
    }
    function g(l, n, m, p) {
        var o = {};
        o.width = Math.max(l.width - m.x, n.min_width);
        o.height = Math.max(l.height - m.y, n.min_height);
        if (p) {
            o.width = Math.min(o.width, n.max_width);
            o.height = Math.min(o.height, n.max_height)
        }
        o.dx = l.width - (o.width + m.x);
        o.dy = l.height - (o.height + m.y);
        return o
    }
    Qva.Mgr.grid.prototype._UpdateSize = function(n, s) {
        var r = this.ScrollProperties;
        if (this.limits.min_width > n && this.PageBinder.Maximized) {
            this.limits.min_width = 0;
            if (this.fixed_width > n) {
                this.fixed_cols_left = 0;
                this.fixed_cols_right = 0
            }
        }
        if (this.ExtraRows) {
            this.limits.max_height += this.ExtraRows * this.Body.rowHeight
        }
        var m = this.limits;
        var u = {width: n, height: s};
        var l = f(u, m, r.width);
        var o = {x: l.vertical ? r.width : 0, y: l.horizontal ? r.width : 0};
        var q = this.TotalSize.x === 0 && this.TotalSize.y === 0;
        var p = g(u, m, o, this.sizetodata && !q);
        this._UpdateBodySize(p.width, p.height);
        this._UpdateScrollbars(l, p.width, p.height);
        this._UpdateMaxVisibleRows();
        this._UpdateMaxVisibleCols();
        this._UpdateFixedRowsAndCols();
        return p
    };
    Qva.Mgr.grid.prototype._UpdateFixedRowsAndCols = function() {
        var l = this;
        this.left_cols = {start: 0, count: this.fixed_cols_left};
        this.right_cols = {start: this.fixed_cols_left, count: this.fixed_cols_right};
        this.top_rows = {start: 0, count: this.Headers.Lines.length, part: this.Headers, height: this.Headers.height, getHeight: function(m) {
                if (l.Headers.Lines[m][0].vertical) {
                    return l.Headers.Heights[m]
                }
                return l.Headers.Lines[m][0].rowspan * l.TextHeight
            }};
        this.bottom_rows = {start: 0, count: this.Footers.Lines.length, part: this.Footers, height: this.Footers.height, getHeight: function() {
                return l.Footers.rowHeight
            }}
    };
    Qva.Mgr.grid.prototype._UpdateBodySize = function(l, s) {
        var n = this.fixed_cols_left, u = this.fixed_cols_right, r = n + u, o = 0, p = 0, q;
        for (q = 0; q < n; ++q) {
            o += this.Cols[q].width
        }
        for (; q < r; ++q) {
            p += this.Cols[q].width
        }
        var m = o + p;
        this.fixed_cols_left_width = o;
        this.fixed_cols_right_width = p;
        this.body_width = l - m;
        this.body_height = s - this.Headers.height - this.Footers.height
    };
    Qva.Mgr.grid.prototype._UpdateScrollbars = function(l, n, x) {
        var m = 0, r = false;
        if (this.PageBinder.FullWidth != a) {
            m = this.PageBinder.FullWidth - this.fixed_cols_left_width
        } else {
        }
        var s = this.ScrollProperties, v = this.fixed_cols_left + this.fixed_cols_right;
        if (l.vertical) {
            var w = this.body_height;
            var p = this.TotalSize.y * this.Body.rowHeight;
            if (this.ExtraRows) {
                p += this.ExtraRows * this.Body.rowHeight
            }
            this.YScroll.Set(n, this.Headers.height, w, p, x, n, 0);
            this.y_max_scroll = Math.max(0, p - w)
        } else {
            this.y_max_scroll = 0;
            this.YScroll.Hide()
        }
        if (l.horizontal) {
            var o = this.body_width;
            if (r) {
                var q = 0;
                for (var u = v; u < this.TotalSize.x && this.Cols[u]; ++u) {
                    q += this.Cols[u].width
                }
                q += (this.TotalSize.x - u) * this.Cols[this.Cols.length - 1].width;
                this.XScroll.Set(this.fixed_cols_left_width, x, o, q, n + s.width, 0, x);
                this.x_max_scroll = Math.max(0, q - o)
            } else {
                this.XScroll.Set(this.fixed_cols_left_width, x, o, m, n + s.width, 0, x);
                this.x_max_scroll = Math.max(0, m - o)
            }
        } else {
            this.x_max_scroll = 0;
            this.XScroll.Hide()
        }
    };
    Qva.Mgr.grid.prototype._UpdateMaxVisibleRows = function() {
        if (this.y_max_scroll > 0) {
            this.max_visible_rows = Math.ceil(this.body_height / this.Body.rowHeight)
        } else {
            this.max_visible_rows = this.TotalSize.y
        }
    };
    Qva.Mgr.grid.prototype._UpdateMaxVisibleCols = function() {
        if (this.x_max_scroll == 0) {
            this.max_visible_cols = this.TotalSize.x;
            return
        }
        var n = 0;
        var m = 0;
        var p = 0;
        var o = 0;
        for (var l = 0; l < this.Cols.length; ++l) {
            m += this._getColWidth(l);
            ++o;
            if (o > n) {
                n = o
            }
            while (m > this.body_width) {
                m -= this._getColWidth(p);
                ++p;
                --o
            }
        }
        this.max_visible_cols = n
    };
    Qva.Mgr.grid.prototype._getColWidth = function(l) {
        return this.Cols.length > 0 ? (this.Cols[l] || this.Cols[this.Cols.length - 1]).width : 10
    };
    Qva.Mgr.grid.prototype.IsVisible = function() {
        return this.Element.style.display !== "none"
    };
    Qva.Mgr.grid.prototype.PostPaint = function() {
        if (!this.IsVisible()) {
            return
        }
        if (this.ScrollPosition.y === 0 && this.isCurrentSelections) {
            this.ExtraRows = 0;
            for (var C = 0; C < this.TotalSize.y; ++C) {
                if (this.Body.Lines[C][1]) {
                    var D = this.Element.style.fontFamily;
                    var o = this.Element.style.fontSize;
                    var q = (function A(H, F, G) {
                        if (H === "") {
                            return 1
                        }
                        return Math.ceil(Qva.MeasureText(H, D, o, F).height / G)
                    })(this.Body.Lines[C][1].val, this.Cols[1].width, this.Body.rowHeight) - 1;
                    if (q === 0) {
                        continue
                    }
                    this.ExtraRows += q;
                    this.Body.Lines[C][1].rowspan = (q + 1);
                    this.Body.Lines[C][0].rowspan = (q + 1)
                }
            }
        }
        var w = this._CheckSize();
        if (this.TotalSize.x === 0 && this.TotalSize.y === 0) {
            var y = document.createElement("div");
            this.Element.replaceChild(y, this.Content);
            this.Content = y;
            return
        }
        var z = w.width;
        var x = w.height;
        var r = w.changed;
        if (r) {
            if (this.scroll_obj) {
                this.scroll_obj.Remove()
            }
            this.scroll_obj = null
        }
        this._UpdateMaxVisibleCols();
        var l = this._GetGridScroll();
        var v = this._GetCurrentBody(l);
        var n = {start: v.col_start, count: v.col_count};
        var u = this;
        var m = {start: v.row_start, count: v.row_count, part: this.Body, height: this.body_height, getHeight: function() {
                return u.Body.rowHeight
            }};
        if (this._LoadCells(m, this.left_cols)) {
            if (r) {
                this.LastSize = null
            }
            return
        }
        if (this._LoadCells(m, n)) {
            if (r) {
                this.LastSize = null
            }
            return
        }
        if (r) {
            var B = this._CreateContent(z, x);
            this.Body.Painted = [];
            this.Headers.Painted = [];
            this.Footers.Painted = [];
            this.scroll_fix_divs = [];
            this.ColumnResizers = [];
            this._PaintFixedCells(x);
            this._PaintScrollCells(v, n, m, x);
            Assert(!this.scroll_obj);
            this._makeScrollObj(d(this));
            var E = this.getCurrentScroll();
            this.scroll_obj.setPosition(-E.x, -E.y);
            this.scroll_obj.setTransitionTime("0ms");
            if (IS_TOUCHENABLED) {
                this._addTouchScroll(B)
            } else {
                this._addMouseScroll()
            }
            this.Element.replaceChild(B, this.Content);
            Qva.RemoveHtml(this.Content);
            this.Content = B;
            if (this.ScrollPosition.x !== 0 || this.ScrollPosition.y !== 0) {
                if (this.ScrollPosition.x !== 0 && this.XScroll.actions) {
                    this.XScroll.actions.step(-this.ScrollPosition.x)
                }
                if (this.ScrollPosition.y !== 0 && this.YScroll.actions) {
                    this.YScroll.actions.step(-this.ScrollPosition.y)
                }
                this.PageBinder.QueuePostPaintMessage(this)
            } else {
                this.PageBinder.SetScrollPos(this.ScrollPosition)
            }
        } else {
            this._PaintScrollCells(v, n, m, x);
            var E = this.getCurrentScroll();
            this.setPosition_scroll_fix_divs(-E.x, -E.y);
            if (this.ScrollPosition && (this.ScrollPosition.x !== l.col || this.ScrollPosition.y !== l.row)) {
                if (this.SendPosition) {
                    this.SendPosition = clearTimeout(this.SendPosition)
                }
                var s = this.PageBinder;
                var p = {x: l.col, y: l.row};
                this.SendPosition = setTimeout(function() {
                    if (!s.GetEnabled()) {
                        return
                    }
                    s.SetScrollPos(p)
                }, 500)
            }
        }
        Qva.SetEllipsisOnMultiLineElement(this.Content)
    };
    Qva.Mgr.grid.prototype._CreateContent = function(n, B) {
        var u = document.createElement("div");
        u.style.position = "relative";
        u.style.overflow = "hidden";
        u.style.width = n + "px";
        u.style.height = B + "px";
        var C = [this.fixed_cols_left_width, this.body_width, this.fixed_cols_right_width];
        var o = [this.Headers.height, this.body_height, this.Footers.height];
        if (this.parts) {
            for (var A in this.parts) {
                Qva.RemoveHtml(this.parts[A])
            }
        }
        var q = this.parts = {};
        var p = 0;
        for (var z = 0; z < C.length; ++z) {
            var s = C[z];
            var w = 0;
            for (var v = 0; v < o.length; ++v) {
                var r = o[v];
                var m = document.createElement("div");
                m.style.position = "absolute";
                m.style.overflow = "hidden";
                m.style.left = p + "px";
                m.style.top = w + "px";
                m.style.width = s + "px";
                m.style.height = r + "px";
                var l = q[z + ":" + v] = document.createElement("div");
                l.style.position = "relative";
                l.style.height = v == 1 ? (this.TotalSize.y * this.Body.rowHeight + "px") : "100%";
                if (z == 1 || v == 1) {
                    initTransition(l, "cubic-bezier(0, 0.3, 0.6, 1)")
                }
                m.appendChild(l);
                u.appendChild(m);
                l.AvqMgr = this.PageBinder;
                w += r
            }
            p += s
        }
        return u
    };
    Qva.Mgr.grid.prototype._PaintFixedCells = function(l) {
        this._PostPaintCells2(this.parts["0:0"], 0, 0, this.top_rows, this.left_cols);
        this._PostPaintCells2(this.parts["0:2"], 0, 0, this.bottom_rows, this.left_cols);
        this._PostPaintCells2(this.parts["2:0"], 0, 0, this.top_rows, this.right_cols);
        this._PostPaintCells2(this.parts["2:2"], 0, 0, this.bottom_rows, this.right_cols);
        if (!IS_TOUCHENABLED) {
            this._AddColumnResizers(0, l, 0, this.left_cols);
            this._AddColumnResizers(2, l, 0, this.right_cols)
        }
    };
    Qva.Mgr.grid.prototype._PaintScrollCells = function(m, o, n, l) {
        this._PostPaintCells2(this.parts["0:1"], 0, m.y_offset, n, this.left_cols);
        this._PostPaintCells2(this.parts["2:1"], 0, m.y_offset, n, this.right_cols);
        this._PostPaintCells2(this.parts["1:0"], m.x_offset, 0, this.top_rows, o);
        this._PostPaintCells2(this.parts["1:2"], m.x_offset, 0, this.bottom_rows, o);
        this._PostPaintCells2(this.parts["1:1"], m.x_offset, m.y_offset, n, o);
        if (!IS_TOUCHENABLED) {
            this._AddColumnResizers(1, l, m.x_offset, o)
        }
    };
    Qva.Mgr.grid.prototype._AddColumnResizers = function(m, q, o, p) {
        var s = p.start;
        var w = s + p.count;
        var u = Qva.GetAbsolutePageCoords(this.Element).y;
        function n(B, y, A, C, x) {
            var z = document.createElement("div");
            z.className = (y === w - 1) ? "QvColumnResizer QvColumnResizerLast" : "QvColumnResizer";
            z.style.height = x + "px";
            z.style.top = "0px";
            z.style.zIndex = 3;
            z.title = "Resize column";
            z.columnData = C;
            z.style.left = A + "px";
            z.onmousedown = function(D) {
                Qva.DragDrop.resizeColumn.mouseDown(D)
            };
            B.appendChild(z);
            return z
        }
        for (cix = s; cix < w; o += this._getColWidth(cix), ++cix) {
            var l = this._getColWidth(cix);
            var v = o + l;
            if (!this.Cols[cix] || !this.Cols[cix].allowresize || this.ColumnResizers[cix]) {
                continue
            }
            var r = {};
            r.top = u;
            r.height = q;
            r.widthOuter = l;
            r.colIndex = cix;
            r.outerRightCoordinate = v;
            r.outerLeftCoordinate = r.outerRightCoordinate - r.widthOuter;
            n(this.parts[m + ":0"], cix, v, r, this.Headers.height);
            n(this.parts[m + ":1"], cix, v, r, this.body_height);
            n(this.parts[m + ":2"], cix, v, r, this.Footers.height);
            this.ColumnResizers[cix] = true
        }
    };
    Qva.Mgr.grid.prototype._GetGridScroll = function() {
        var l = this.fixed_cols_left + this.fixed_cols_right, n = this.getCurrentScroll();
        var m = this.TotalSize.y === 0 ? 0 : Math.floor(n.y / this.Body.rowHeight);
        m = Math.max(0, Math.min(this.TotalSize.y - 1, m));
        var o = l;
        while (true) {
            n.x -= this._getColWidth(o);
            if (n.x < 0) {
                break
            }
            ++o
        }
        o = Math.max(0, Math.min(this.TotalSize.x - 1, o));
        o -= l;
        return{row: m, col: o}
    };
    Qva.Mgr.grid.prototype._GetCurrentBody = function(w) {
        var q = 1, p = 1, x = this.fixed_cols_left + this.fixed_cols_right;
        var o = Math.max(0, w.row - q);
        var m = Math.min(this.TotalSize.y, w.row + this.max_visible_rows + q);
        var u = Math.max(x, w.col + x - p);
        var y = Math.min(this.TotalSize.x, w.col + x + this.max_visible_cols + p);
        var s = m - o;
        var l = o * this.Body.rowHeight;
        var n = y - u;
        var r = 0;
        for (var v = x; v < u; ++v) {
            r += this._getColWidth(v)
        }
        return{x_offset: r, row_start: o, row_count: s, y_offset: l, col_start: u, col_count: n}
    };
    Qva.Mgr.grid.prototype._find_x_left = function(l) {
        for (var m = 0; (m < this.fixed_cols_left - 1) && (l >= this.Cols[m].width); ++m) {
            l -= this.Cols[m].width
        }
        return{cix: m, x: l, width: this.Cols[m].width}
    };
    Qva.Mgr.grid.prototype._find_x_center = function(l) {
        var m = this.fixed_cols_left + this.fixed_cols_right;
        for (cix = m; (cix < this.TotalSize.x - 1) && (l >= this._getColWidth(cix)); ++cix) {
            l -= this._getColWidth(cix)
        }
        return{cix: cix, x: l, width: this._getColWidth(cix)}
    };
    Qva.Mgr.grid.prototype._find_x_right = function(l) {
        var m = this.fixed_cols_left + this.fixed_cols_right;
        for (cix = this.fixed_cols_left; (cix < m - 1) && (l >= this.Cols[cix].width); ++cix) {
            l -= this.Cols[cix].width
        }
        return{cix: cix, x: l, width: this.Cols[cix].width}
    };
    Qva.Mgr.grid.prototype._find_y_top = function(m) {
        var l;
        l.TODO();
        return{rix: rix, y: m, height: null}
    };
    Qva.Mgr.grid.prototype._find_y_center = function(m) {
        var l = Math.max(0, Math.min(this.TotalSize.y - 1, Math.floor(m / this.Body.rowHeight)));
        m -= l * this.Body.rowHeight;
        return{rix: l, y: m, height: this.Body.rowHeight}
    };
    Qva.Mgr.grid.prototype._find_x_bottom = function(m) {
        var l;
        l.TODO();
        return{rix: rix, y: m, height: null}
    };
    Qva.Mgr.grid.multiselect = function(o, u, n) {
        this.f_close = n;
        this.mgr = u;
        for (var p = 0; p < 3; ++p) {
            for (var r = 0; r < 3; ++r) {
                if (u.parts[r + ":" + p] == o.parentNode) {
                    this.part_x = r;
                    this.part_y = p
                }
            }
        }
        this.selection = {x: o.xx, y: o.yy, width: 1, height: 1};
        this.part = this.part_y == 1 ? u.Body : (this.part_y == 0 ? u.Headers : u.Footers);
        var s = this.part.Painted[o.yy][o.xx];
        this.rect = {left: s.offsetLeft, top: s.offsetTop, right: (s.offsetLeft + s.offsetWidth), bottom: (s.offsetTop + s.offsetHeight)};
        var m = this.selection_div = document.createElement("div");
        m.className = "TouchSelectionRect";
        m.style.border = "2px solid green";
        m.style.position = "absolute";
        m.style.left = "0px";
        m.style.top = "0px";
        m.style.webkitTransitionTimingFunction = "ease-in-out";
        m.style.zIndex = 50;
        m.style.webkitTransitionDuration = "0s";
        m.style.webkitTransitionProperty = "all";
        m.style.display = "";
        this._positionSelectionDiv(this.rect);
        o.parentNode.appendChild(m);
        this.move_x = [];
        this.move_y = [];
        var l = Qva.GetBinder(u.binderid).isSmallDevices;
        if (!this.menu) {
            this.menu = new Qva.Touch.SelectionMenu({SmallDevices: l, AddPointerElem: true, Buttons: [{Fn: this._makeSelection, Scope: this, CssClass: "img_accept_tick", Text: "Select", Style: {"float": "left"}}, {Fn: this._close, Scope: this, CssClass: "img_cancel_cross", Text: "Cancel", Style: {"float": "right"}}], Style: {position: "absolute", visibility: "hidden"}});
            if (!l) {
                document.documentElement.appendChild(this.menu.Element)
            }
        }
        var q = Qva.Touch.GetCoordinatesForElem(this.mgr.PageBinder.Element), r = q.x + (this.mgr.PageBinder.Element.offsetWidth - this.menu.Element.offsetWidth) / 2, p = q.y - this.menu.Element.clientHeight;
        this.menu.Show(r, p)
    };
    Qva.Mgr.grid.multiselect.prototype._makeSelection = function() {
        var l = "" + this.selection.x + ":" + this.selection.y + ":" + this.selection.width + ":" + this.selection.height;
        if (this.part_y == 0) {
            l += ":Head"
        }
        if (this.part_y == 2) {
            l += ":Foot"
        }
        this.mgr.PageBinder.Set(this.mgr.ObjectId, "rect", l, true);
        this._close()
    };
    Qva.Mgr.grid.multiselect.prototype._close = function() {
        c(this.selection_div).remove();
        this.menu.Hide();
        this.f_close()
    };
    Qva.Mgr.grid.multiselect.prototype._positionSelectionDiv = function(l) {
        this.selection_div.style.webkitTransform = "translate3d(" + (l.left + 0) + "px, " + (l.top + 0) + "px, 0)";
        this.selection_div.style.width = (l.right - l.left - 4) + "px";
        this.selection_div.style.height = (l.bottom - l.top - 4) + "px"
    };
    Qva.Mgr.grid.multiselect.prototype._isMoving = function() {
        return this.move_x.length > 0 || this.move_y.length > 0
    };
    Qva.Mgr.grid.multiselect.prototype._find_x = function(l) {
        if (this.part_x == 0) {
            return this.mgr._find_x_left(l)
        } else {
            if (this.part_x == 1) {
                return this.mgr._find_x_center(l)
            } else {
                if (this.part_x == 2) {
                    return this.mgr._find_x_right(l)
                }
            }
        }
    };
    Qva.Mgr.grid.multiselect.prototype._find_y = function(l) {
        if (this.part_y == 0) {
            return this.mgr._find_y_top(l)
        } else {
            if (this.part_y == 1) {
                return this.mgr._find_y_center(l)
            } else {
                if (this.part_y == 2) {
                    return this.mgr._find_y_bottom(l)
                }
            }
        }
    };
    Qva.Mgr.grid.multiselect.prototype._fix_min_rect = function(l) {
        if (l.right - l.left < 10) {
            if (this.move_x[0] == "left") {
                l.left = l.right - 10
            } else {
                l.right = l.left + 10
            }
        }
        if (l.bottom - l.top < 10) {
            if (this.move_y[0] == "top") {
                l.top = l.bottom - 10
            } else {
                l.bottom = l.top + 10
            }
        }
    };
    Qva.Mgr.grid.multiselect.prototype.touchStart = function(r, o) {
        var w = Qva.GetAbsolutePageCoords(this.selection_div.parentNode, true);
        var B = r - w.x;
        var z = o - w.y;
        var A = this.rect;
        this.move_x = [];
        this.move_y = [];
        var u = B - A.left;
        var s = A.right - B;
        var v = z - A.top;
        var l = A.bottom - z;
        var m = 50;
        var q = (A.right - A.left < 3 * m) ? 0 : m;
        var n = (A.bottom - A.top < 3 * m) ? 0 : m;
        var p = -m;
        if (u > q && s > q && v > n && l > n) {
            this.move_x = ["left", "right"];
            this.move_y = ["top", "bottom"]
        } else {
            if (u > p && s > p && v > p && l > p) {
                if (u <= q && u > p) {
                    this.move_x.push("left")
                }
                if (s <= q && s > p) {
                    this.move_x.push("right")
                }
                if (v <= n && v > p) {
                    this.move_y.push("top")
                }
                if (l <= n && l > p) {
                    this.move_y.push("bottom")
                }
            }
        }
    };
    Qva.Mgr.grid.multiselect.prototype.touchMove = function(m, l) {
        if (!this._isMoving()) {
            return false
        }
        var o = {left: this.rect.left, top: this.rect.top, right: this.rect.right, bottom: this.rect.bottom};
        for (var n = 0; n < this.move_x.length; ++n) {
            o[this.move_x[n]] += m
        }
        for (var n = 0; n < this.move_y.length; ++n) {
            o[this.move_y[n]] += l
        }
        this._fix_min_rect(o);
        this.selection_div.style.webkitTransitionDuration = "0ms";
        this._positionSelectionDiv(o);
        return true
    };
    Qva.Mgr.grid.multiselect.prototype.touchEnd = function(u, s) {
        if (!this._isMoving()) {
            return false
        }
        for (var o = 0; o < this.move_x.length; ++o) {
            this.rect[this.move_x[o]] += u
        }
        for (var o = 0; o < this.move_y.length; ++o) {
            this.rect[this.move_y[o]] += s
        }
        this._fix_min_rect(this.rect);
        function p(v) {
            if (v.width > 2 * v.x) {
                return -v.x
            } else {
                ++v.cix;
                return v.width - v.x
            }
        }
        var m = this._find_x(this.rect.left);
        var r = this._find_x(this.rect.right);
        if (m.cix == r.cix) {
            this.rect.left -= m.x;
            this.rect.right += r.width - r.x;
            ++r.cix
        } else {
            if (m.cix + 1 == r.cix) {
                if (m.width - m.x < r.x) {
                    this.rect.left += p(m);
                    this.rect.right += r.width - r.x;
                    ++r.cix
                } else {
                    this.rect.left -= m.x;
                    this.rect.right += p(r)
                }
            } else {
                this.rect.left += p(m);
                this.rect.right += p(r)
            }
        }
        function n(v) {
            if (v.height > 2 * v.y) {
                return -v.y
            } else {
                ++v.rix;
                return v.height - v.y
            }
        }
        var q = this._find_y(this.rect.top);
        var l = this._find_y(this.rect.bottom);
        if (q.rix == l.rix) {
            this.rect.top -= q.y;
            this.rect.bottom += l.height - l.y;
            ++l.rix
        } else {
            if (q.rix + 1 == l.rix) {
                if (q.height - q.y < l.y) {
                    this.rect.top += n(q);
                    this.rect.bottom += l.height - l.y;
                    ++l.rix
                } else {
                    this.rect.top -= q.y;
                    this.rect.bottom += n(l)
                }
            } else {
                this.rect.top += n(q);
                this.rect.bottom += n(l)
            }
        }
        this.selection.x = m.cix;
        this.selection.y = q.rix;
        this.selection.width = r.cix - m.cix;
        this.selection.height = l.rix - q.rix;
        this.selection_div.style.webkitTransitionDuration = "500ms";
        this._positionSelectionDiv(this.rect);
        return true
    };
    function d(l) {
        return{setPosition: function(m, n) {
                m = Math.round(m);
                n = Math.round(n);
                translate(l.parts["1:1"], m, n);
                translate(l.parts["0:1"], 0, n);
                translate(l.parts["2:1"], 0, n);
                translate(l.parts["1:0"], m, 0);
                translate(l.parts["1:2"], m, 0);
                l.setPosition_scroll_fix_divs(m, n)
            }, setTransitionTime: function(m) {
                setDuration(l.parts["1:1"], m);
                setDuration(l.parts["0:1"], m);
                setDuration(l.parts["2:1"], m);
                setDuration(l.parts["1:0"], m);
                setDuration(l.parts["1:2"], m);
                l.setTransitionTime_scroll_fix_divs(m)
            }, getPosition: function() {
                var n = window.getComputedStyle(l.parts["1:1"]).webkitTransform;
                if (n == "none") {
                    return{x: 0, y: 0}
                }
                var m = new WebKitCSSMatrix(n);
                return{x: m.e, y: m.f}
            }}
    }
    Qva.Mgr.grid.prototype.setPosition_scroll_fix_divs = function(l, o) {
        for (var m = 0; m < this.scroll_fix_divs.length; ++m) {
            var n = Math.min(Math.max(0, -(o + this.scroll_fix_divs[m].offset)), this.scroll_fix_divs[m].max);
            translate(this.scroll_fix_divs[m].div, 0, n)
        }
    };
    Qva.Mgr.grid.prototype.setTransitionTime_scroll_fix_divs = function(m) {
        for (var l = 0; l < this.scroll_fix_divs.length; ++l) {
            setDuration(this.scroll_fix_divs[l].div, m)
        }
    };
    Qva.Mgr.grid.prototype._makeScrollObj = function(l) {
        var p = this;
        var o = 0;
        var n = 0;
        function m(r, s) {
            r = Math.round(r);
            s = Math.round(s);
            l.setPosition(r, s);
            p.XScroll.setPosition(r);
            p.YScroll.setPosition(s);
            o = r;
            n = s
        }
        function q(r) {
            l.setTransitionTime(r);
            p.XScroll.setTransitionTime(r);
            p.YScroll.setTransitionTime(r)
        }
        this.scroll_obj = {getCurrentScroll: function() {
                return{x: -o, y: -n}
            }, setPosition: m, setTransitionTime: q, getPosition: function() {
                return l.getPosition()
            }, Remove: function() {
                p = null;
                l = null
            }}
    };
    Qva.Mgr.grid.prototype._addTouchScroll = function(G) {
        var v = this;
        var y = this.fixed_cols_left + this.fixed_cols_right;
        var M = this.x_max_scroll;
        var A = this.y_max_scroll;
        var K, J, B, L, o, E, C, u, N, F, s, x;
        E = C = 0;
        L = [];
        this.scroll_obj.Remove = function() {
            if (x) {
                x._close()
            }
            Assert(!x)
        };
        function r(O) {
            if (-O < 0) {
                return 0
            }
            if (-O > M) {
                return -M
            }
            return O
        }
        function p(O) {
            if (-O < 0) {
                return 0
            }
            if (-O > A) {
                return -A
            }
            return O
        }
        var D = false;
        function n() {
            v.PageBinder.QueuePostPaintMessage(v)
        }
        function m(O, P) {
            v.scroll_obj.setPosition(O, P)
        }
        function z(O) {
            v.scroll_obj.setTransitionTime(O)
        }
        function l(Q) {
            if (Q.touches.length > Q.changedTouches.length) {
                return true
            }
            if (!v.PageBinder.IsValid()) {
                Q.preventDefault();
                return false
            }
            K = Q.changedTouches[0].clientX;
            J = Q.changedTouches[0].clientY;
            B = Q.timeStamp;
            o = Q.changedTouches[0].identifier;
            L = [];
            u = false;
            if (x) {
                x.touchStart(K, J);
                Q.preventDefault();
                return false
            }
            var O = v.scroll_obj.getPosition();
            if (O.x != E || O.y != C) {
                E = O.x;
                C = O.y
            }
            m(E, C);
            z("0ms");
            n();
            N = null;
            var P = Q.changedTouches[0].target.parentNode;
            if (Q.changedTouches[0].target.action || P.action) {
            } else {
                if (Q.changedTouches[0].target.input || P.input) {
                    return true
                } else {
                    if (P.clickselect) {
                        return true
                    } else {
                        if (P.singleselect) {
                            N = {position: P.position, x: P.xx, y: P.yy, part: v.Body};
                            if (j(N.position) === "Head") {
                                N.part = v.Headers
                            }
                            if (j(N.position) === "Foot") {
                                N.part = v.Footers
                            }
                            N.timeout = setTimeout(function() {
                                N.timeout = null;
                                v._IndicateSelection(N.part, N.y, N.x, true)
                            }, 100)
                        } else {
                            if (P.multiselect) {
                                F = setTimeout(function() {
                                    o = null;
                                    x = new Qva.Mgr.grid.multiselect(P, v, function() {
                                        x = null
                                    })
                                }, 500)
                            }
                        }
                    }
                }
            }
            Q.preventDefault();
            return false
        }
        function H(P) {
            if (o == null) {
                return null
            }
            for (var O = 0; O < P.changedTouches.length; ++O) {
                if (P.changedTouches[O].identifier == o) {
                    return P.changedTouches[O]
                }
            }
            return null
        }
        function w(R) {
            var S = H(R);
            if (!S) {
                return false
            }
            var P = S.clientX - K;
            var O = S.clientY - J;
            var Q = R.timeStamp - B;
            L.push({dx: P, dy: O, dt: Q});
            if (!u && (Math.abs(P) + Math.abs(O) > 3)) {
                u = true
            }
            if (u && F) {
                clearTimeout(F);
                F = null
            }
            if (u && N) {
                if (N.timeout) {
                    clearTimeout(N.timeout);
                    N.timeout = null
                } else {
                    v._IndicateSelection(N.part, N.y, N.x, false)
                }
                N = null
            }
            return true
        }
        function I(R) {
            if (!v.PageBinder.IsValid()) {
                return true
            }
            if (!w(R)) {
                return true
            }
            R.stopPropagation();
            R.preventDefault();
            if (N) {
                return false
            }
            var Q = L[L.length - 1];
            if (x && x.touchMove(Q.dx, Q.dy)) {
                return false
            }
            if (!u) {
                return false
            }
            var P = Q.dx + E;
            var O = Q.dy + C;
            if (M === 0) {
                P = 0
            }
            if (-P < 0) {
                P = P / 3
            }
            if (-P > M) {
                P = (P + M) / 3 - M
            }
            if (A === 0) {
                O = 0
            }
            if (-O < 0) {
                O = O / 3
            }
            if (-O > A) {
                O = (O + A) / 3 - A
            }
            m(P, O);
            z("0ms");
            n()
        }
        function q(T) {
            if (!w(T)) {
                return true
            }
            T.stopPropagation();
            T.preventDefault();
            if (F) {
                clearTimeout(F);
                F = null
            }
            o = null;
            if (N) {
                if (N.timeout) {
                    clearTimeout(N.timeout);
                    N.timeout = null
                }
                v._IndicateSelection(N.part, N.y, N.x, false);
                var V = "" + (N.x - v.fixed_cols_right) + ":" + N.y + ":1:1";
                if (j(N.position) === "Head") {
                    V += ":Head"
                }
                v.PageBinder.Set(v.ObjectId, "rect", V, true);
                return
            }
            var R = L[L.length - 1];
            if (x && x.touchEnd(R.dx, R.dy)) {
                return false
            }
            if (!u) {
                var S = T.changedTouches[0].target;
                if (!S.action) {
                    S = S.parentNode
                }
                if (!S.action) {
                    S = S.parentNode
                }
                if (S.action) {
                    var U = {};
                    U.position = S.pos;
                    U.action = "";
                    v.PageBinder.Set(v.ObjectId + "." + S.action, U);
                    return false
                }
            }
            var R = L[L.length - 1];
            for (var Q = L.length - 1; Q > 0 && R.dt - L[Q - 1].dt < 100; --Q) {
            }
            var P = 2 * R.dx - L[Q].dx + E;
            var O = 2 * R.dy - L[Q].dy + C;
            if (-P < 0) {
                P = 0
            }
            if (-P > M) {
                P = -M
            }
            O = -Math.round(-O / v.Body.rowHeight) * v.Body.rowHeight;
            if (-O < 0) {
                O = 0
            }
            if (-O > A) {
                O = -A
            }
            E = P;
            C = O;
            L = [];
            z("500ms");
            m(P, O);
            n()
        }
        if (IS_TOUCHENABLED) {
            G.addEventListener("touchstart", l, false);
            G.addEventListener("touchmove", I, false);
            G.addEventListener("touchend", q, false)
        }
        setTimeout(function() {
            z("0ms");
            m(0, 0)
        }, 1000)
    };
    Qva.Mgr.grid.prototype._addMouseScroll = function() {
        var v = this;
        var u = this.x_max_scroll;
        var r = this.y_max_scroll;
        var p = 0;
        var n = 0;
        function B(C) {
            if (-C < 0) {
                return 0
            }
            if (-C > v.x_max_scroll) {
                return -v.x_max_scroll
            }
            return C
        }
        function z(C) {
            if (-C < 0) {
                return 0
            }
            if (-C > v.y_max_scroll) {
                return -v.y_max_scroll
            }
            return C
        }
        function w() {
            v.PageBinder.QueuePostPaintMessage(v)
        }
        function y(C, D) {
            v.scroll_obj.setPosition(C, D)
        }
        function m(C) {
            v.scroll_obj.setTransitionTime(C)
        }
        function q(C) {
            C = Math.round(C / v.Body.rowHeight) * v.Body.rowHeight;
            return z(C)
        }
        function A(E, D) {
            var C = Math.round(E / v.Body.rowHeight) * v.Body.rowHeight;
            if (Math.abs(C - E) < D) {
                E = C
            }
            return z(E)
        }
        function s(C) {
            var D = v._find_x_center(-C);
            if (D.width > 2 * D.x) {
                return B(-(-C - D.x))
            } else {
                return B(-(-C + D.width - D.x))
            }
        }
        function o(C, D) {
            var E = v._find_x_center(-C);
            if (E.x < D) {
                return B(C + E.x)
            } else {
                if (E.width - E.x < D) {
                    return B(C - E.width + E.x)
                } else {
                    return B(C)
                }
            }
        }
        var l = {step: function(E) {
                var H = v._find_x_center(-p);
                if (H.x > 0 && E > 0) {
                    p -= v._getColWidth(C);
                    H.cix++
                }
                p += H.x;
                var F = E > 0 ? 1 : -1;
                var G = Math.min(H.cix, H.cix + E);
                var D = Math.max(H.cix, H.cix + E);
                for (var C = G; C < D; ++C) {
                    p = p + F * v._getColWidth(C)
                }
                p = B(p);
                m("500ms");
                y(p, n);
                w()
            }, scroll: function(D) {
                var C = o(D + p, 5);
                y(C, n);
                m("0ms");
                w()
            }, scroll_end: function(C) {
                p = B(C + p);
                m("500ms");
                y(p, n);
                w()
            }};
        var x = {step: function(C) {
                if (C > 0) {
                    n = z((Math.floor(n / v.Body.rowHeight) + C) * v.Body.rowHeight)
                } else {
                    n = z((Math.ceil(n / v.Body.rowHeight) + C) * v.Body.rowHeight)
                }
                m("500ms");
                y(p, n);
                w()
            }, scroll: function(C) {
                var D = A(C + n, 5);
                y(p, D);
                m("0ms");
                w()
            }, scroll_end: function(C) {
                n = z(C + n);
                m("500ms");
                y(p, n);
                w()
            }};
        if (!this.eventsBound) {
            this.XScroll.bindEvents(l);
            this.YScroll.bindEvents(x);
            this.actions = r > 0 ? x : l
        }
    };
    Qva.Mgr.grid.prototype.Remove = function() {
        if (this.scroll_obj) {
            this.scroll_obj.Remove()
        }
        Qva.RemoveHtml(this.Content);
        Qva.RemoveHtml(this.Element);
        if (this.parts) {
            for (var l in this.parts) {
                Qva.RemoveHtml(this.parts[l])
            }
        }
        this.Content = null;
        this.SearchName = null;
        this.ObjectId = null;
        this.LeftButton = null;
        this.Element = null;
        this.Cols = null;
        this.Body = null;
        this.Headers = null;
        this.Footers = null;
        this.Selection = null
    };
    Qva.Mgr.grid.prototype._CombineColors = function(m, l) {
        if (m.A === 0 && l.A === 0) {
            return"Transparent"
        }
        if (m.A === 0) {
            return l.css
        }
        if (l.A === 0) {
            return m.css
        }
        if (m.R + m.G + m.B > l.R + l.G + l.B) {
            return l.css
        }
        return m.css
    };
    Qva.Mgr.grid.prototype._CombineBorders = function(n, m) {
        var p = Math.max(n.width, m.width);
        var l = this._CombineColors(n.color, m.color);
        var o = n.style === "double" || m.style === "double" ? "double" : n.style === "solid" || m.style === "solid" ? "solid" : "none";
        return{width: p, color: l, style: o}
    };
    Qva.Mgr.grid.prototype._MakeBorder = function(l, w, o, r, p, q) {
        var m = this.Style[w.style].BorderStyle;
        if (this.BorderStyle.length - 1 < m) {
            return 0
        }
        var v = this.BorderStyle[m][r];
        if (!this.Style[o.style]) {
            Assert(false)
        }
        var u = this.BorderStyle[this.Style[o.style].BorderStyle][p];
        var n = this._CombineBorders(v, u);
        if (n.style === "solid") {
            var s = q(n.width);
            l.style["border" + r] = "solid " + s + "px " + n.color;
            return s
        } else {
            if (n.style === "double") {
                l.style["border" + r] = "solid 3px " + n.color;
                return(r === "Left" || r === "Top") ? 4 : 5
            } else {
                Assert(n.style === "none");
                return 0
            }
        }
    };
    Qva.Mgr.grid.prototype._StyleObject = function(n) {
        var o = n.getAttribute("bgcolor");
        this.BgColorRGB = HtmlifyARGB(o);
        this.BgColorCSSExpr = Qva.Hex2CSSExpression(o);
        this.Color = HtmlifyARGB(n.getAttribute("color"));
        this.NumAdjust = n.getAttribute("numadjust");
        this.TextAdjust = n.getAttribute("textadjust");
        this.VertAdjust = n.getAttribute("vertadjust");
        this.LabelAdjust = n.getAttribute("labeladjust");
        this.LabelVertAdjust = n.getAttribute("labelvertadjust");
        this.BorderStyle = n.getAttribute("borderstyle");
        var l = n.getAttribute("fontstyle");
        this.FontStyle = l;
        this.FontWeight = n.getAttribute("fontweight");
        this.TextDecoration = n.getAttribute("textdecoration");
        this.SizeMod = n.getAttribute("sizemod");
        var m = n.getAttribute("stretchmode");
        if (m) {
            this.StretchMode = m
        }
    };
    Qva.Mgr.grid.prototype._BorderStyleObject = function(m) {
        function l(o) {
            var n = m.getAttribute(o).split(" ");
            if (n[0] === "none") {
                return{width: 0, style: "none", color: ObjectifyARGB(null)}
            }
            var p = parseInt(n[1]);
            return{width: p, style: n[0], color: ObjectifyARGB(n[2])}
        }
        this.Top = l("top");
        this.Right = l("right");
        this.Bottom = l("bottom");
        this.Left = l("left")
    };
    Qva.Mgr.grid.prototype._CellObject = function(n) {
        this.val = n.getAttribute("text");
        this.title = n.getAttribute("title") || this.val;
        if (n.getAttribute("value")) {
            this.intval = n.getAttribute("value")
        }
        if (n.getAttribute("state")) {
            this.state = n.getAttribute("state")
        }
        this.dblclick = !!n.getAttribute("dblclick");
        this.mode = n.getAttribute("mode");
        this.disabled = this.mode == "disabled";
        this.style = n.getAttribute("style") ? n.getAttribute("style") : "0";
        this.isnum = n.getAttribute("isnum") == "true";
        this.label = n.getAttribute("label") == "true";
        this.icons = n.getElementsByTagName("icon");
        this.subcell = n.getAttribute("subcell");
        this.first = n.getAttribute("first");
        this.colspan = parseInt(n.getAttribute("colspan"));
        if (isNaN(this.colspan)) {
            this.colspan = 1
        }
        this.action = n.getAttribute("action");
        this.url = n.getAttribute("url");
        if (n.getAttribute("position")) {
            this.position = n.getAttribute("position")
        }
        var m = n.getAttribute("selecttype");
        if (m) {
            this.selecttype = m;
            this.selectsource = n.getAttribute("selectsource") == "true";
            if (this.action) {
                Assert(false)
            }
        }
        this.input = n.getAttribute("input") == "true";
        this.dragable = n.getAttribute("dragable") == "true";
        this.vertical = n.getAttribute("vertical") == "true";
        var o = n.getAttribute("rowspan");
        if (o) {
            this.rowspan = parseInt(o)
        } else {
            this.rowspan = 1
        }
        var l = n.getAttribute("multirect");
        if (l) {
            l = l.split(":");
            Assert(l.length === 4);
            this.multirect = {x: parseInt(l[0], 10), y: parseInt(l[1], 10), width: parseInt(l[2], 10), height: parseInt(l[3], 10)}
        }
    };
    Qva.Mgr.grid.prototype._SetCellStyle = function(o, l, n) {
        if (!o.style) {
            return""
        }
        var m = this.Style[o.style];
        if (!m) {
            return""
        }
        var p = "";
        if (n) {
            if (m.BgColorCSSExpr) {
                p += "; background-color:" + m.BgColorCSSExpr
            } else {
                if (m.BgColorRGB) {
                    p += "; background-color:" + m.BgColorRGB
                }
            }
            p += "; color:" + m.BgColorRGB
        } else {
            if (!l) {
                if (m.BgColorCSSExpr) {
                    p += "; background-color:" + m.BgColorCSSExpr
                } else {
                    if (m.BgColorRGB) {
                        p += "; background-color:" + m.BgColorRGB
                    }
                }
                p += "; color:" + m.Color
            } else {
                p += "; background-color:";
                p += "; color:"
            }
        }
        p += "; text-align:" + (o.label ? m.LabelAdjust : (o.isnum ? m.NumAdjust : m.TextAdjust));
        p += "; font-style:" + m.FontStyle;
        p += "; font-weight:" + m.FontWeight;
        p += "; text-decoration:" + m.TextDecoration;
        switch (m.SizeMod) {
            case"2":
                p += "; font-size:large";
                break;
            case"1":
                p += "; font-size:larger";
                break;
            case"-1":
                p += "; font-size:smaller";
                break;
            case"-2":
                p += "; font-size:small";
                break
        }
        return p
    };
    Qva.Mgr.grid.prototype._appendCellIcon = function(q, m, r, o, s, p, l) {
        var n = this.PageBinder.GetDocumentMgr().CreateCellIcon(q, o, s, p, l);
        AppendAction(n, q, this, m + ":" + r);
        return n
    };
    Qva.Mgr.grid.getMgr = function(m) {
        var l = m.parentNode;
        while (l && !l.Mgr) {
            l = l.parentNode
        }
        return l ? l.Mgr : null
    };
    Qva.Mgr.grid.DblClick = function(l) {
        this.pressed = false;
        if (!l) {
            l = window.event
        }
        var m = Qva.Mgr.grid.getMgr(this);
        if (!m.PageBinder.GetEnabled()) {
            return
        }
        m.PageBinder.Set(m.ObjectId, "dblclick", this.xx + ":" + this.yy, true)
    };
    Qva.Mgr.grid.Click = function(l) {
        if (!l) {
            l = window.event
        }
        l.cancelBubble = true;
        this.pressed = true;
        var m = this;
        window.setTimeout(function() {
            h(m)
        }, 200)
    };
    Qva.Mgr.grid.MouseDown = function(l) {
        if (this.disabled) {
            return
        }
        if (!l) {
            l = window.event
        }
        var m = Qva.Mgr.grid.getMgr(this);
        if (l.button != m.LeftButton) {
            return
        }
        if (!m.PageBinder.IsValid()) {
            return
        }
        Qva.Mgr.grid.SelectMgr = m;
        m.Selection.Start = m.Selection.End = this;
        m.Selection.SelectSource = this.selectsource;
        Qva.addEvent(document.body, "mouseup", Qva.Mgr.grid.MouseUp);
        m._IndicateCellsToSelect();
        if (l.preventDefault) {
            l.preventDefault()
        } else {
            l.returnValue = false
        }
        Qva.BlurActiveElement();
        c(document).disableSelection()
    };
    Qva.Mgr.grid.MouseMove = function(l) {
        if (this.disabled) {
            return
        }
        if (!l) {
            l = window.event
        }
        var m = Qva.Mgr.grid.getMgr(this);
        if (Qva.Mgr.grid.SelectMgr != m) {
            return
        }
        if (m.Selection.SelectSource != this.selectsource) {
            return
        }
        if (!m.PageBinder.IsValid()) {
            return
        }
        m.Selection.End = this;
        if (this.singleselect) {
            m.Selection.Start = m.Selection.End
        }
        m._IndicateCellsToSelect()
    };
    function j(l) {
        var m = l.split(":");
        if (m.length < 3) {
            return""
        }
        return m[2]
    }
    Qva.Mgr.grid.MouseUp = function(o) {
        c(document).enableSelection();
        Qva.removeEvent(document.body, "mouseup", Qva.Mgr.grid.MouseUp);
        if (!o) {
            o = window.event
        }
        var p = Qva.Mgr.grid.SelectMgr;
        Qva.Mgr.grid.SelectMgr = null;
        p._ClearCellsToSelect();
        if (j(p.Selection.Start.position) === j(p.Selection.End.position)) {
            var m = Math.min(p.Selection.Start.xx, p.Selection.End.xx);
            m -= p.fixed_cols_right;
            var r = Math.min(p.Selection.Start.yy, p.Selection.End.yy);
            var n = Math.abs(p.Selection.Start.xx - p.Selection.End.xx) + 1;
            var l = Math.abs(p.Selection.Start.yy - p.Selection.End.yy) + 1;
            var q = "" + m + ":" + r + ":" + n + ":" + l;
            if (j(p.Selection.Start.position) === "Head") {
                q += ":Head"
            }
            p.PageBinder.Set(p.ObjectId, "rect", q, true)
        } else {
            alert("error")
        }
    };
    Qva.Mgr.grid.prototype._IndicateCellsToSelect = function() {
        if (this.ObjectId != Qva.SearchableObject) {
            SetSearchableAndActives(this.ObjectId, [this.ObjectId])
        }
        var n = Math.min(this.Selection.Start.xx, this.Selection.End.xx);
        var p = Math.min(this.Selection.Start.yy, this.Selection.End.yy);
        var u = Math.max(this.Selection.Start.xx, this.Selection.End.xx);
        var l = Math.max(this.Selection.Start.yy, this.Selection.End.yy);
        var q = {left: n, top: p, right: u, bottom: l};
        if (!this.Selection.Old) {
            this.Selection.Old = q
        }
        n = Math.min(n, this.Selection.Old.left);
        p = Math.min(p, this.Selection.Old.top);
        u = Math.max(u, this.Selection.Old.right);
        l = Math.max(l, this.Selection.Old.bottom);
        this.Selection.Old = q;
        var m = this.Body;
        if (j(this.Selection.Start.position) === "Head") {
            m = this.Headers
        }
        if (j(this.Selection.Start.position) === "Foot") {
            m = this.Footers
        }
        for (var s = n; s <= u; ++s) {
            for (var o = p; o <= l; ++o) {
                var r = q.left <= s && s <= q.right && q.top <= o && o <= q.bottom;
                this._IndicateSelection(m, o, s, r)
            }
        }
    };
    Qva.Mgr.grid.prototype._IndicateSelection = function(p, s, n, m) {
        if (p.Painted[s][n].selectsource) {
            for (var o = 0; o < p.Painted[s].length; o++) {
                var q = s;
                var l = null;
                while (q >= 0 && l == null) {
                    l = p.Painted[q--][o]
                }
                if (!l) {
                    continue
                }
                if (!l.selectsource && (l.singleselect || l.multiselect)) {
                    this._SetCellSelected(l, m ? this.SelectedClassName : "", !m)
                }
            }
            for (var r = 0; r < p.Painted.length; r++) {
                var l = p.Painted[r] && p.Painted[r][n];
                if (!l) {
                    continue
                }
                if (!l.selectsource && (l.singleselect || l.multiselect)) {
                    this._SetCellSelected(l, m ? this.SelectedClassName : "", !m)
                }
            }
            if (p != this.Headers) {
                for (var r = 0; r < this.Headers.Painted.length; r++) {
                    var l = this.Headers.Painted[r][n];
                    if (!l) {
                        continue
                    }
                    if (!l.selectsource && (l.singleselect || l.multiselect)) {
                        this._SetCellSelected(l, m ? this.SelectedClassName : "", !m)
                    }
                }
            }
        } else {
            this._SetCellSelected(p.Painted[s][n], m ? this.SelectedClassName : "", !m)
        }
    };
    Qva.Mgr.grid.prototype._ClearCellsToSelect = function() {
        if (!this.Selection.Old) {
            return
        }
        var q = this.Selection.Old.left;
        var p = this.Selection.Old.top;
        var o = this.Selection.Old.right;
        var m = this.Selection.Old.bottom;
        this.Selection.Old = null;
        var n = this.Body;
        if (j(this.Selection.Start.position) === "Head") {
            n = this.Headers
        }
        if (j(this.Selection.Start.position) === "Foot") {
            n = this.Footers
        }
        for (var l = q; l <= o; ++l) {
            for (var r = p; r <= m; ++r) {
                this._IndicateSelection(n, r, l, false)
            }
        }
    };
    Qva.Mgr.grid.prototype._SetCellSelected = function(l, m, n) {
        if (!l) {
            return
        }
        if (n) {
            if (l.origcolor != "") {
                l.style.color = l.origcolor;
                l.origcolor = ""
            }
            if (l.origbackgroundColor != "") {
                l.style.backgroundColor = l.origbackgroundColor;
                l.origbackgroundColor = ""
            }
        } else {
            if (l.style.color != "") {
                l.origcolor = l.style.color;
                l.style.color = ""
            }
            if (l.style.backgroundColor != "") {
                l.origbackgroundColor = l.style.backgroundColor;
                l.style.backgroundColor = ""
            }
        }
        if (l.className != m) {
            l.className = m
        }
    };
    Qva.Mgr.grid.prototype.GetCell = function(n, o) {
        var m = this.Headers.Lines.length;
        var l;
        if (o < m) {
            return this.Headers.Painted[o][n]
        } else {
            return this.Body.Painted[o - m][n]
        }
    };
    Qva.Mgr.grid.prototype.GetCellRect = function(n, o) {
        var m = this.Headers.Lines.length;
        var l = this.GetCell(n, o);
        if (!l) {
            var l = this.GetCell(n - 1, o);
            var p = Qva.GetAbsolutePageCoords(l);
            return{left: p.x + l.offsetWidth, width: this.Element.offsetWidth - l.offsetWidth, top: p.y, height: l.offsetHeight}
        } else {
            var p = Qva.GetAbsolutePageCoords(l);
            return{left: p.x, width: l.offsetWidth, top: p.y, height: l.offsetHeight}
        }
    }
})(jQuery);
(function(c, d) {
    if (!Qva.Mgr) {
        Qva.Mgr = {}
    }
    Qva.PageBinding.prototype.CreateTransientListBox = function(f) {
        var g = {};
        g.name = f;
        g.id = "DS";
        var h = Qva.Mgr.CreateObject(this, g);
        h.Element.className += " DS";
        h.Element.style.cssText = "z-index: 666; display: none; left: 10pt; top: 10pt; width: 10pt; height: 800pt; position:absolute;";
        new Qva.Mgr.transientpos(h, h.Element, f);
        new Qva.Mgr.closetransient(h, h.Element, f, "", h.CreateListBox());
        document.body.appendChild(h.Element)
    };
    function b(g, o, k) {
        if (k && k.length > 0) {
            var l = 0;
            var m = 0;
            while (o != "") {
                var j = k[m++];
                if (j) {
                    var f = parseInt(j.getAttribute("pos"));
                    var h = parseInt(j.getAttribute("count"));
                    if (f > l) {
                        var n = document.createElement("span");
                        n.innerText = o.substr(0, f - l);
                        o = o.substr(f - l);
                        l = f;
                        g.appendChild(n)
                    }
                    var n = document.createElement("span");
                    n.innerText = o.substr(0, h);
                    o = o.substr(h);
                    l += h;
                    n.className = "qvHighLighted";
                    g.appendChild(n)
                } else {
                    var n = document.createElement("span");
                    n.innerText = o;
                    g.appendChild(n);
                    o = ""
                }
            }
        } else {
            g.appendChild(document.createTextNode(o))
        }
    }
    Qva.Mgr.closetransient = function(f, j, h, k, g) {
        if (!Qva.MgrSplit(this, h, k)) {
            return
        }
        f.AddManager(this);
        this.Listbox = g;
        c(j).bind("mousedown.transientpos touchstart.transientpos mousewheel.transientpos", function(l) {
            l.stopPropagation()
        })
    };
    Qva.Mgr.closetransient.prototype.Paint = function(j, g) {
        c(document).unbind(".transientpos");
        if (j == "h") {
            return
        }
        var k = this;
        c(document).one("mousedown.transientpos touchstart.transientpos mousewheel.transientpos", function(l) {
            k.Listbox.HideTransientListbox()
        });
        var h = document.getElementById(g.getAttribute("owner"));
        var f = h && h.AvqMgr && h.AvqMgr.GetSearchMgr();
        if (!f || !f.GetCellRect) {
            this.Listbox.HideTransientListbox();
            return
        }
    };
    Qva.Mgr.transientpos = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h
    };
    Qva.Mgr.transientpos.prototype.Paint = function(m, h, f) {
        var j = this.Element;
        j.style.display = Qva.MgrGetDisplayFromMode(this, m);
        if (j.style.display == "none") {
            return
        }
        var o = document.getElementById(h.getAttribute("owner"));
        var l = o && o.AvqMgr && o.AvqMgr.GetSearchMgr();
        if (l && l.GetCellRect) {
            var p = parseInt(h.getAttribute("row"));
            var g = parseInt(h.getAttribute("col"));
            var k = h.getAttribute("position");
            var n = l.GetCellRect(g, p);
            if (k == "offset") {
                n.left -= 15
            } else {
                if (k == "cut") {
                    n.width -= 15
                } else {
                    if (k == "below") {
                        n.top += n.height
                    } else {
                        if (k == "right") {
                            n.left += n.width
                        } else {
                            Assert(k == "")
                        }
                    }
                }
            }
            n.height = Qva.GetViewportHeight();
            n.height -= (n.top - Qva.GetScrollTop());
            if (n.height > 80) {
                n.height -= 40
            }
            n.width = Math.max(n.width, 50);
            n.mode = m;
            n.allowmove = false;
            n.allowresize = false;
            n.maximized = false;
            this.PageBinder.BorderWidth = parseInt(c(this.Element).css("border-left-width"));
            this.PageBinder.Size(n)
        }
    };
    Qva.Mgr.listbox = function(f, h, g, j, k) {
        this.SearchName = this.Name = Qva.MgrMakeName(g, j);
        this.binderid = f.binderid;
        this.ObjectId = f.Element.id;
        this.LeftButton = f.LeftButton;
        this.Element = h;
        h.Mgr = this;
        f.AddManager(this);
        this.DocumentBinder = k;
        this.SelectionManager = new Qva.ListBoxSelectionManager(this);
        this.Selections = {Selected: []};
        h.style.position = "relative";
        h.style.overflow = "hidden";
        h.style.cursor = "Default";
        this.Content = document.createElement("div");
        h.appendChild(this.Content);
        Qva.AddScroll(this)
    };
    Qva.Mgr.listbox.prototype.Remove = function() {
        c(this.Content).html("").remove();
        c(this.Element).html("").remove()
    };
    Qva.Mgr.listbox.prototype.GetCellRect = function(f, j) {
        Assert(f == -1 && j == -1);
        var h = this.PageBinder.Element;
        var k = Qva.GetAbsolutePageCoords(h);
        var g = c(h).getPath();
        return{left: k.x, width: Qva.ElementAttributesHandler(g, h, "offsetWidth"), top: k.y, height: Qva.ElementAttributesHandler(g, h, "offsetHeight")}
    };
    Qva.Mgr.listbox.prototype.IsSupportingKeyUpAndDown = function() {
        return true
    };
    Qva.Mgr.listbox.prototype.AddSelectionStyle = function(j) {
        var k = parseInt(j.getAttribute("style"));
        var g = HtmlifyARGB(j.getAttribute("color"));
        if (g != null) {
            g = g.replace("#", "")
        }
        this.HideAndModeSymbols = false;
        this.AutoCtrl = false;
        this.HasSelectedExcluded = false;
        switch (k) {
            case 1:
                this.TextIndent = 17;
                if (this.OnlyoneSelected) {
                    this.AltClass = "_RADIO_" + g;
                    this.PageBinder.GetDocumentMgr().LoadRadioStyle(g)
                } else {
                    this.AltClass = "_CHECK_" + g;
                    this.PageBinder.GetDocumentMgr().LoadCheckStyle(g);
                    this.AutoCtrl = true;
                    this.HasSelectedExcluded = true
                }
                break;
            case 2:
                var l = this.Lines[this.Lines.length - 1];
                var h = Math.min((l ? l.rowspan : 1) * this.TextHeight, 40);
                this.TextIndent = (h / 2) + 4;
                this.AltClass = "_CORNERTAG_" + h + "_" + g;
                this.PageBinder.GetDocumentMgr().LoadCornertagStyle(h, g);
                this.HideAndModeSymbols = true;
                break;
            case 3:
                this.TextIndent = 16;
                this.AltClass = "_Led_" + g;
                this.PageBinder.GetDocumentMgr().LoadLedStyle(g);
                break;
            case 7:
                this.TextIndent = 16;
                this.AltClass = "_LED_CHECK_" + g;
                this.PageBinder.GetDocumentMgr().LoadLedCheckStyle(g);
                if (!this.OnlyoneSelected) {
                    this.AutoCtrl = true
                }
                this.HasSelectedExcluded = true;
                break;
            case -1:
            case 0:
            default:
                this.TextIndent = 2;
                this.AltClass = "";
                break
        }
        this.AltClass_OnBorder = !!this.AltClass;
        var f = j.getAttribute("semantic") == "true";
        if (f) {
            this.AltClass = "_Semantic"
        }
    };
    Qva.Mgr.listbox.prototype.Paint = function(x, A, J, h) {
        this.Touched = true;
        var l = this.Element;
        var f = A.getAttribute("owner");
        if (f) {
            var r = parseInt(A.getAttribute("row"));
            var o = parseInt(A.getAttribute("col"));
            var I = A.getAttribute("position");
            if (this.Owner && (this.Owner != f || this.Row != r || this.Col != o || this.Position != I)) {
                if (this.Content) {
                    this.Content.innerHTML = ""
                }
            }
            this.Owner = f;
            this.Row = r;
            this.Col = o;
            this.Position = I
        }
        Qva.UpdateScroll(this);
        function C(y) {
            for (var K = 0; K < A.childNodes.length; ++K) {
                if (A.childNodes[K].tagName == "value" && A.childNodes[K].getAttribute("name") == y) {
                    return A.childNodes[K]
                }
            }
            return null
        }
        var j = C("Body");
        if (j) {
            l.style.display = j.getAttribute("mode") == "enabled" ? "" : "none"
        }
        if (l.style.display == "none") {
            return
        }
        var q = A.getElementsByTagName("style");
        if (q.length > 0) {
            this.Style = [];
            q = q[0].getElementsByTagName("style");
            for (var z = 0; z < q.length; z++) {
                this.Style[z] = new this._StyleObject(q[z])
            }
        }
        q = A.getElementsByTagName("borderstyle");
        if (q.length > 0) {
            this.BorderStyle = [];
            q = q[0].getElementsByTagName("borderstyle");
            for (z = 0; z < q.length; z++) {
                var D = this.BorderStyle[z] = new this._BorderStyleObject(q[z])
            }
        }
        var F = C("Style");
        if (F) {
            var G = this.fontfamily = F.getAttribute("fontfamily");
            var E = this.fontsize = F.getAttribute("fontsize") + "pt";
            this.TextHeight = Qva.MeasureText("�g", G, E).height;
            var v = A.getAttribute("longest");
            this.TextLength = Qva.MeasureText(v, G, E).width + 4
        }
        this.readOnly = A.getAttribute("readonly") === "true";
        this.disabled = A.getAttribute("mode") === "disabled";
        this.orderByCol = A.getAttribute("order") === "col";
        this.fixedCols = parseInt(A.getAttribute("columns"));
        if (isNaN(this.fixedCols)) {
            this.fixedCols = null
        }
        this.maxrows = parseInt(A.getAttribute("maxrows"));
        if (isNaN(this.maxrows)) {
            this.maxrows = null
        }
        function B(y) {
            var K = A.getAttribute(y);
            if (!K) {
                return 0
            }
            var L = K.split(":");
            return parseInt(L[1])
        }
        function g(y) {
            var K = A.getAttribute(y);
            if (!K) {
                return{x: 0, y: 0}
            }
            var L = K.split(":");
            return{x: parseInt(L[0]), y: parseInt(L[1])}
        }
        if (A.getAttribute("totalsize") != null) {
            this.ChunkOffset = B("pageoffset");
            this.ChunkSize = B("pagesize");
            this.TotalSize = B("totalsize")
        } else {
            this.ChunkOffset = 0;
            var s = C("C0").getElementsByTagName("element").length;
            this.TotalSize = this.ChunkSize = s
        }
        h = this.ChunkOffset !== 0;
        if (!h) {
            this.Lines = [];
            this.YScroll.Scrolled = false;
            this.XScroll.Scrolled = false;
            this.LastSize = null
        }
        if (A.getAttribute("scrollposition") != null) {
            this.ScrollPosition = g("scrollposition")
        } else {
            this.ScrollPosition = {x: 0, y: 0}
        }
        this.andmode = A.getAttribute("andmode") == "true";
        this.CurrentPhase = 0;
        this.suppresshorizontalscroll = A.getAttribute("suppresshorizontalscroll") === "true";
        this.sizetodata = A.getAttribute("sizetodata") === "true";
        this.PageBinder.Searchable = A.getAttribute("searchable") == "true";
        var p = C("C0");
        if (p) {
            var w = p.getElementsByTagName("element");
            for (var n = 0; n < w.length; ++n) {
                var k = w[n];
                var m = n + this.ChunkOffset;
                if (this.Lines[m] == null) {
                    this.Lines[m] = []
                }
                this.Lines[m] = new this._CellObject(k)
            }
            var u = this.Lines[this.Lines.length - 1];
            this.rowHeight = u ? u.rowspan * this.TextHeight : 0;
            if (this.PageBinder.PageBinder.isSmallDevices && this.ObjectId === "DS") {
                this.rowHeight += 32
            }
            this.singleselect = u && u.selecttype == "single"
        }
        this.PageBinder.QueuePostPaintMessage(this);
        this.OnlyoneSelected = A.getAttribute("onlyoneselected") == "true";
        var H = A.getElementsByTagName("selectionstyle");
        if (H.length > 0) {
            this.AddSelectionStyle(H[0])
        }
    };
    Qva.Mgr.listbox.prototype._appendCellIcon = function(k, m, h, l, j, f) {
        var g = this.PageBinder.GetDocumentMgr().CreateCellIcon(k, h, l, j, f);
        AppendAction(g, k, this, m);
        return g
    };
    Qva.Mgr.listbox.prototype._CheckSize = Qva.Mgr.grid.prototype._CheckSize;
    Qva.Mgr.listbox.prototype._UpdateSize = function(A, x) {
        var r = this.ScrollProperties;
        var M = Math.floor(x / this.rowHeight) * this.rowHeight;
        var F = this.orderByCol && this.TextLength * 2 <= A;
        var O = this.fixedCols;
        var N = this.maxrows;
        var J = true;
        var q, g, I;
        var n = false;
        if (F) {
            function G(P) {
                var Q = this.rowHeight >= 0 ? Math.floor(P / this.rowHeight) : 1;
                if (Q > this.TotalSize) {
                    Q = this.TotalSize
                }
                if (N != null && N < Q) {
                    Q = N
                }
                if (Q < 1) {
                    Q = 1
                }
                return Q
            }
            q = G.call(this, x);
            g = Math.ceil(this.TotalSize / q);
            n = !this.suppresshorizontalscroll && g == 1 && Math.floor(A / g) < this.TextLength;
            if (O != null && O < g || A < g * this.TextLength || n) {
                I = (O != null) ? O : Math.floor(A / this.TextLength);
                if (I < g) {
                    x -= r.width
                }
                q = G.call(this, x);
                g = Math.ceil(this.TotalSize / q)
            } else {
                I = g
            }
        } else {
            function l(Q) {
                var P;
                if (O != null) {
                    P = O
                } else {
                    P = Math.floor(Q / this.TextLength)
                }
                if (P > this.TotalSize) {
                    P = this.TotalSize
                }
                if (P < 1) {
                    P = 1
                }
                return P
            }
            g = l.call(this, A);
            q = Math.ceil(this.TotalSize / g);
            n = !this.suppresshorizontalscroll && g == 1 && Math.floor(A / g) < this.TextLength;
            if (n) {
                x -= r.width
            }
            if (Math.max(x, this.rowHeight) < q * this.rowHeight || this.maxrows != null && this.maxrows < q) {
                A -= r.width;
                g = l.call(this, A);
                q = Math.ceil(this.TotalSize / g)
            }
            if (!n && !this.suppresshorizontalscroll && g == 1 && Math.floor(A / g) < this.TextLength) {
                n = true;
                x -= r.width
            }
            I = g
        }
        if (I < 1) {
            I = 1
        }
        var B = this.colwidth = Math.floor(A / I);
        var u = A - I * B;
        if (I == g && !n) {
            Assert(u < I);
            this.col_extra = u;
            u = 0
        } else {
            this.col_extra = 0;
            A = I * B
        }
        var h = this.Element;
        var y = c(h).parent().parent().getPath();
        if (Qva.CheckElementCache(y)) {
            var L = Qva.ElementCacheHandler();
            var o = L.length;
            var j = o - 1;
            if (L[j][4] == "complete") {
                j++
            }
            var w = L[j];
            var C = w[3];
            var D = isNaN(C.BorderWidth) ? 0 : C.BorderWidth
        }
        var H = Math.floor((x) / this.rowHeight);
        if (N != null && N < H) {
            H = N
        }
        var s = 0;
        if (this.Lines.length === 0) {
            s = x;
            x = 0
        } else {
            if (x < this.rowHeight) {
                s = x - this.rowHeight;
                x = this.rowHeight;
                H = 1
            } else {
                if (this.sizetodata) {
                    var M = H * this.rowHeight;
                    if (M > q * this.rowHeight) {
                        M = q * this.rowHeight
                    }
                    s = x - M;
                    x = M
                }
            }
        }
        var E = parseInt(c(this.Element).parent().parent().children(".QvCaption").css("borderBottomWidth")) + parseInt(c(this.Element).parent().parent().children(".QvCaption").css("borderTopWidth"));
        if (!E) {
            E = 0
        }
        var f = parseInt(c(this.Element).parent().parent().css("borderBottomWidth")) + parseInt(c(this.Element).parent().parent().css("borderTopWidth"));
        if (!f) {
            f = 0
        }
        var z = parseInt(c(this.Element).parent().parent().children(".QvCaption").css("height"));
        if (!z) {
            z = 0
        }
        if (I < g) {
            this.XScroll.Set(0, x, A, g * B, A, 0, x)
        } else {
            if (n) {
                this.colwidth = this.TextLength;
                this.XScroll.Set(0, x, A, this.TextLength, A, 0, x);
                this.x_max_scroll = this.colwidth - A
            } else {
                this.XScroll.Hide();
                J = false
            }
        }
        if (H < q) {
            this.YScroll.Set(A, 0, x, q * this.rowHeight, x, A, 0);
            if (J) {
                this.YScroll.EnablePaddingElement()
            }
        } else {
            this.YScroll.Hide();
            J = false
        }
        var k = I < g || H < q;
        var K = 0;
        if (g > I && !IS_MOBILE) {
            K = 11
        }
        var v = 0;
        if (IS_IE8_OR_BELOW) {
            v = -1
        }
        if (IS_IE6_OR_IE7) {
            v = f - 1
        }
        var p = x + z + E + f + K - v;
        c(this.Element).parent().parent().css("height", p);
        c(this.Element).parent().css("height", x + K);
        c(this.Element).parent().css("width", A);
        c(this.Element).css("height", x);
        if (c(this.Element).parent() && c(this.Element).parent().parent() && c(this.Element).parent().parent().children()[0] && c(this.Element).parent().parent().children()[0].className == "ResizeFrame") {
            Qva.Mgr.CreateAndUpdateResizeHandles(c(this.Element).parent().parent()[0], f / 2, false, true)
        }
        if (IS_IE8_OR_BELOW) {
            this.PageBinder.BackgroundMgr.PostPaint2()
        }
        if (this.has_any_scrollbar !== k) {
            this.PageBinder.GetDocumentMgr()._Send("set", this.Name, true, {scrollbar: (k ? "true" : "false")});
            this.has_any_scrollbar = k
        }
        this.OrderByColumn = F;
        this.single_col_scroll = n;
        this.visible_cols = I;
        this.columns = g;
        this.visible_rows = H;
        this.rows = q;
        var m = this;
        this._makeScrollObj({setPosition: function(P, Q) {
                translate(m.Content, P, Q)
            }, setTransitionTime: function(P) {
                setDuration(m.Content, P)
            }, getPosition: function() {
                var Q = window.getComputedStyle(m.Content).webkitTransform;
                if (Q == "none") {
                    return{x: 0, y: 0}
                }
                var P = new WebKitCSSMatrix(Q);
                return{x: P.e, y: P.f}
            }});
        if (IS_TOUCHENABLED) {
        } else {
            this._addMouseScroll(A, x)
        }
        return{dx: u, dy: s, width: A, height: x}
    };
    Qva.Mgr.listbox.prototype._makeScrollObj = Qva.Mgr.grid.prototype._makeScrollObj;
    Qva.Mgr.listbox.prototype._addMouseScroll = function(f, u) {
        var p = this;
        function q() {
            p.PageBinder.QueuePostPaintMessage(p)
        }
        function s(z, A) {
            p.scroll_obj.setPosition(z, A)
        }
        function h(x) {
            p.scroll_obj.setTransitionTime(x)
        }
        var k = 0;
        var j = 0;
        var o = Math.max(0, this.columns * this.colwidth - f);
        function w(y) {
            if (-y < 0) {
                return 0
            }
            if (-y > o) {
                return -o
            }
            return y
        }
        function n(y) {
            y = !p.single_col_scroll ? Math.round(y / p.colwidth) * p.colwidth : y;
            return w(y)
        }
        var m = Math.max(0, this.rows * this.rowHeight - u);
        function v(x) {
            if (-x < 0) {
                return 0
            }
            if (-x > m) {
                return -m
            }
            return x
        }
        function l(x) {
            x = Math.round(x / p.rowHeight) * p.rowHeight;
            return v(x)
        }
        var g = {step: function(y, x) {
                k = w(k + y * p.colwidth);
                h((x ? 0 : 500) + "ms");
                s(k, j);
                q()
            }, scroll: function(z) {
                var y = n(z + k);
                s(y, j);
                h("0ms");
                q()
            }, scroll_end: function(x) {
                k = n(x + k);
                h("500ms");
                s(k, j);
                q()
            }};
        var r = {step: function(y, x) {
                j = l(j + y * p.rowHeight);
                h((x ? 0 : 500) + "ms");
                s(k, j);
                q()
            }, scroll: function(x) {
                var z = l(x + j);
                s(k, z);
                h("0ms");
                q()
            }, scroll_end: function(x) {
                j = l(x + j);
                h("500ms");
                s(k, j);
                q()
            }};
        this.XScroll.bindEvents(g);
        this.YScroll.bindEvents(r);
        this.actions = m > 0 ? r : g
    };
    Qva.Mgr.listbox.prototype.HideTransientListbox = function() {
        if (this.Content) {
            this.Content.innerHTML = ""
        }
        this.PageBinder.Element.style.display = "none";
        this.Selections = {Selected: []};
        if (IS_TOUCHENABLED && Qva.Touch.Listbox.SelectMenu) {
            Qva.Touch.Listbox.SelectMenu.Hide(true)
        }
        this.DocumentBinder.Set(this.Name, "closetransient", "ok", false)
    };
    Qva.Mgr.listbox.prototype.PostPaint = function() {
        var f = this.Element;
        if (f.style.display == "none") {
            return
        }
        var u = this._CheckSize(false, true);
        var A = u.width;
        var v = u.height;
        var l = u.changed;
        c(f).parent().css("height", v);
        if (this.Lines.length == 0) {
            return
        }
        var L = {x: 0, y: 0};
        if (this.scroll_obj) {
            L = this.scroll_obj.getCurrentScroll()
        }
        var n = this.single_col_scroll ? this.TextLength : this.colwidth;
        var E = Math.max(0, Math.floor(L.x / n));
        var j = Math.max(0, Math.floor(L.y / this.rowHeight));
        var H = Math.min(this.visible_cols + 1, this.columns - E);
        var G = Math.min(this.visible_rows + 1, this.rows - j);
        if (H === 0 || G === 0) {
            return
        }
        var I = [];
        var r = [];
        var F;
        var w = c(f).parent().parent().getPath();
        if (Qva.CheckElementCache(w)) {
            var J = Qva.ElementCacheHandler();
            var p = J.length;
            var h = p - 1;
            if (J[h][4] == "complete") {
                h++
            }
            var s = J[h];
            var z = s[1];
            var B = s[3];
            var D = isNaN(B.BorderWidth) ? 0 : B.BorderWidth
        }
        for (F = 0; F < H; ++F) {
            var K = F + E;
            I.push({offset: ((this.OrderByColumn ? this.rows : 1) * K), xPos: (this.colwidth * K), width: (n + (F < this.col_extra ? 1 : 0))})
        }
        for (F = 0; F < G; ++F) {
            var k = F + j;
            r.push({offset: ((this.OrderByColumn ? 1 : this.columns) * k), yPos: (this.rowHeight * k), height: this.rowHeight})
        }
        this.Visible = {Start: I[0].offset + r[0].offset, End: Math.min(I[I.length - 1].offset + r[r.length - 1].offset, this.TotalSize - 1)};
        function g(x) {
            var y = {ie: 1342177, moz: 17889999, chrome: 33500000};
            if (IS_IE) {
                return Math.min(x, y.ie)
            }
            if (IS_GECKO) {
                return Math.min(x, y.moz)
            }
            if (IS_CHROME) {
                return Math.min(x, y.chrome)
            }
            return x
        }
        if (l) {
            this.Painted = [];
            var C = document.createElement("div");
            C.style.position = "relative";
            C.style.overflow = "hidden";
            C.style.width = (this.columns * n + this.col_extra) + "px";
            C.style.height = g(this.rows * this.rowHeight) + "px";
            this._PaintCells(C, r, I, A);
            f.replaceChild(C, this.Content);
            c(this.Content).find("div").each(function() {
                c(this).unbind()
            });
            this.Content = C;
            if (this.ScrollPosition.x !== 0 || this.ScrollPosition.y !== 0) {
                if (this.ScrollPosition.x !== 0 && this.XScroll.actions) {
                    this.XScroll.actions.step(-this.ScrollPosition.x)
                }
                if (this.ScrollPosition.y !== 0 && this.YScroll.actions) {
                    this.YScroll.actions.step(-this.ScrollPosition.y)
                }
                this.PageBinder.QueuePostPaintMessage(this)
            } else {
                this.PageBinder.SetScrollPos(this.ScrollPosition)
            }
        } else {
            this._PaintCells(this.Content, r, I, A);
            var q = E * this.rows;
            var o = j * this.columns;
            if (this.ScrollPosition && (this.ScrollPosition.y != o || this.ScrollPosition.x != q)) {
                if (this.SendPosition) {
                    this.SendPosition = clearTimeout(this.SendPosition)
                }
                var m = this.PageBinder;
                this.SendPosition = setTimeout(function() {
                    if (!m.GetEnabled()) {
                        return
                    }
                    m.SetScrollPos({x: q, y: o})
                }, 500)
            }
        }
        c(this.Content).parent().css("visibility", "visible");
        Qva.SetEllipsisOnMultiLineElement(this.Content);
        if (this.Selections.mouseDown || this.Selections.Selected.length > 0) {
            this._IndicateCellsToSelect()
        }
        return
    };
    Qva.Mgr.listbox.prototype._PaintCells = function(K, C, P, q) {
        var r, p;
        for (p = 0; p < C.length; ++p) {
            for (r = 0; r < P.length; ++r) {
                var m = C[p].offset + P[r].offset;
                if (m >= this.TotalSize) {
                    continue
                }
                if (!this.Lines[m]) {
                    this.PageBinder.PartialLoad("Document." + this.ObjectId, {x: 0, y: Math.floor(m / this.ChunkSize) * this.ChunkSize});
                    return false
                }
                var f = this.Lines[m];
                var R = P[r].xOffset || 0;
                var o = C[p].yOffset || 0;
                var j = P[r].xPos + R;
                var G = C[p].yPos + o;
                var J = f.rowspan === 1 || P.length > 1 ? P[r].width - R : q - R;
                var H = C[p].height - o;
                if (this.Painted[m]) {
                    continue
                }
                var F = this.Painted[m] = document.createElement("div");
                var s = P[r].width;
                var I = C[p].height;
                var n = document.createElement("div");
                n.style.position = "absolute";
                n.style.zIndex = 1;
                s -= this._MakeBorder(n, "Left", "Right", function(x) {
                    return Math.ceil(x / 2) - 1
                });
                s -= this._MakeBorder(n, "Right", "Left", function(x) {
                    return Math.floor(x / 2) + 1
                });
                I -= this._MakeBorder(n, "Top", "Bottom", function(x) {
                    return Math.ceil(x / 2) - 1
                });
                I -= this._MakeBorder(n, "Bottom", "Top", function(x) {
                    return Math.floor(x / 2) + 1
                });
                n.style.left = (-R) + "px";
                n.style.top = (-o) + "px";
                n.style.width = s + "px";
                n.style.height = I + "px";
                n.setAttribute("unselectable", "on");
                F.appendChild(n);
                F.style.cssText = this._SetCellStyle(f, false, false);
                F.style.cursor = "pointer";
                F.style.position = "absolute";
                F.style.overflow = "hidden";
                F.style.overflow = "hidden";
                F.style.left = j + "px";
                F.style.top = G + "px";
                F.style.width = J + "px";
                F.style.height = H + "px";
                F.setAttribute("unselectable", "on");
                F.title = f.title;
                F.offset = m;
                F.value = f.intval;
                F.onclick = Qva.CancelAction;
                if (f.selecttype != null) {
                    this.SelectionManager.AddEvents(F);
                    F.selectsource = f.selectsource
                }
                var l = document.createElement("div");
                l.style.padding = "0";
                l.style.width = J + "px";
                l.style.height = H + "px";
                l.setAttribute("unselectable", "on");
                l.title = f.title;
                l.style.whiteSpace = f.rowspan === 1 ? "pre" : (IS_IE ? "" : "pre-wrap");
                F.appendChild(l);
                var M = this.Style[0];
                var E = M.StretchMode;
                var Q = f.isnum ? M.NumAdjust : M.TextAdjust;
                F.className = "Qv" + f.state + this.AltClass;
                if (this.AltClass_OnBorder) {
                    n.className = "Qv" + f.state + this.AltClass
                }
                var k = J;
                var L = 0;
                for (var S = 0; S < f.subcontent.length; S++) {
                    var B = f.subcontent[S];
                    var z = parseInt(B.getAttribute("width"));
                    if (!isNaN(z)) {
                        k -= z
                    }
                    var h = parseInt(B.getAttribute("percentwidth"));
                    if (!isNaN(h)) {
                        L += h
                    }
                }
                function g(w) {
                    var x = document.createElement("div");
                    x.position = F.position;
                    x.binderid = this.PageBinder.ID;
                    x.ObjectId = this.ObjectId;
                    x.style.width = w + "px";
                    x.style.cssFloat = "left";
                    x.style.styleFloat = "left";
                    x.setAttribute("unselectable", "on");
                    if (f.rowspan === 1) {
                        x.style.height = H + "px";
                        x.style.overflow = "hidden";
                        x.style.wordWrap = "normal"
                    } else {
                        c(x).addClass("multiline")
                    }
                    x.style.whiteSpace = f.rowspan === 1 ? "pre" : (IS_IE ? "" : "pre-wrap");
                    l.appendChild(x);
                    return x
                }
                if (f.val) {
                    k -= this.TextIndent;
                    k -= 2;
                    g.call(this, this.TextIndent)
                }
                var v = 14;
                if (f.level) {
                    var u = f.level * v;
                    k -= u;
                    if (f.expandcollapse_icon) {
                        u -= v
                    }
                    g.call(this, u);
                    if (f.expandcollapse_icon) {
                        var O = g.call(this, v);
                        var N = this._appendCellIcon(f.expandcollapse_icon, f.intval, E, Q, v, H);
                        N.style.top = ((H - v) / 2) + "px";
                        N.style.zIndex = 1;
                        O.appendChild(N)
                    }
                    k -= 2;
                    g.call(this, 2)
                }
                if (this.andmode && !this.HideAndModeSymbols) {
                    var A = 12;
                    k -= A;
                    var O = g.call(this, A);
                    var D = Qva.Mgr.listbox.AndModeSymbol(f.state);
                    O.appendChild(document.createTextNode(D));
                    F.AndModeSymbol = O
                }
                if (f.input_icon) {
                    k -= v
                }
                var z = parseInt(k * Math.max(0, 100 - L) / 100);
                if (z > 0) {
                    if (f.led_icon) {
                        z -= v
                    }
                    var O = g.call(this, z);
                    if (f.val) {
                        b(O, f.val, f.parts)
                    } else {
                        if (f.main_icon) {
                            var N = this._appendCellIcon(f.main_icon, f.intval, E, Q, z, H);
                            N.style.top = "0";
                            O.appendChild(N)
                        }
                    }
                    if (f.led_icon) {
                        var O = g.call(this, v);
                        var N = this._appendCellIcon(f.led_icon, f.intval, E, Q);
                        N.style.top = ((H - v) / 2) + "px";
                        O.appendChild(N)
                    }
                }
                for (var S = 0; S < f.subcontent.length; S++) {
                    var B = f.subcontent[S];
                    var z = parseInt(B.getAttribute("width"));
                    if (isNaN(z)) {
                        z = parseInt(k * parseInt(B.getAttribute("percentwidth")) / 100)
                    }
                    if (z <= 0) {
                        continue
                    }
                    var O = g.call(this, z);
                    if (B.getAttribute("name")) {
                        var N = this.PageBinder.GetDocumentMgr().CreateCellIcon(B, E, Q, z, H);
                        AppendAction(N, B, this, f.intval);
                        O.appendChild(N)
                    } else {
                        O.appendChild(document.createTextNode(B.getAttribute("text") || "  "));
                        if (B.getAttribute("align")) {
                            O.style.textAlign = B.getAttribute("align")
                        }
                    }
                }
                if (f.input_icon) {
                    var O = g.call(this, v);
                    var N = this._appendCellIcon(f.input_icon, f.intval, E, Q);
                    N.style.top = ((H - v) / 2) + "px";
                    N.style.zIndex = 1;
                    O.appendChild(N)
                }
                K.appendChild(F);
                F = null;
                l = null;
                n = null
            }
        }
        l = null;
        n = null;
        F = null
    };
    Qva.Mgr.listbox.AndModeSymbol = function(f) {
        if (f == "Selected") {
            return"&"
        } else {
            if (f == "Deselected") {
                return"!"
            } else {
                return" "
            }
        }
    };
    Qva.Mgr.listbox.prototype.StartPhaseShift = function(f) {
        var g = this;
        if (this.phase_timout) {
            return
        }
        this.phase_timout = setTimeout(function() {
            g.NextPhase()
        }, f)
    };
    Qva.Mgr.listbox.prototype.NextPhase = function() {
        this.CurrentPhase = (this.CurrentPhase + 1) % 3;
        this._IndicateCellsToSelect();
        this.phase_timout = null;
        this.StartPhaseShift(1100)
    };
    Qva.Mgr.listbox.prototype.EndPhaseShift = function() {
        if (this.phase_timout) {
            clearTimeout(this.phase_timout);
            this.phase_timout = null
        }
    };
    Qva.ListBoxSelection = {CurrentMgr: null, ParentCoords: {}, Start: function(j, g, h) {
            j.Selections.Start = j.Selections.End = g.offset;
            j.Selections.SelectSource = g.selectsource;
            j.Selections.mouseDown = true;
            j.Selections.ctrl = !j.OnlyoneSelected && h;
            var k = c(j.Element);
            var f = k.offset();
            this.ParentCoords = {top: f.top, left: f.left, right: (f.left + k.width()), bottom: (f.top + k.height())};
            this.CurrentMgr = j
        }, End: function(f) {
            this.CurrentMgr._EndSelect(f);
            this.CurrentMgr = null;
            this.ParentCoords = {}
        }};
    Qva.ListBoxSelectionManager = function(g) {
        var j = c(document);
        if (window.parent && window.parent != window) {
            try {
                var k = c(window.parent.document)
            } catch (h) {
            }
        }
        var f = this;
        this.AddEvents = function(m) {
            var l = c(m);
            l.bind("mousedown.listbox", f.MouseDown);
            l.bind("mousemove.listbox", f.MouseMove)
        };
        this.MouseDown = function(l) {
            if (this.disabled) {
                return
            }
            if (l.button != g.LeftButton) {
                return
            }
            if (!g.PageBinder.GetEnabled()) {
                return
            }
            if (Qva.ListBoxSelection.CurrentMgr != null && Qva.ListBoxSelection.CurrentMgr != g) {
                return
            }
            Qva.ListBoxSelection.Start(g, this, ctrlKeyPressed(l));
            j.unbind(".listboxselect");
            j.bind("mousemove.listboxselect.mouseselect", f.MouseMove_Document);
            j.bind("mouseup.listboxselect.mouseselect", f.MouseUp);
            if (!g.OnlyoneSelected) {
                j.bind("keyup.listboxselect", f.KeyChange);
                j.bind("keydown.listboxselect", f.KeyChange);
                if (k) {
                    k.bind("keyup.listboxselect", f.KeyChange);
                    k.bind("keydown.listboxselect", f.KeyChange)
                }
            }
            g._IndicateCellsToSelect();
            if (g.andmode) {
                g.StartPhaseShift(2500)
            }
            l.preventDefault();
            Qva.BlurActiveElement();
            c(document).disableSelection()
        };
        this.MouseMove = function(l) {
            if (Qva.ListBoxSelection.CurrentMgr != g) {
                return
            }
            if (!g.PageBinder.GetEnabled()) {
                return
            }
            if (!g.Selections.mouseDown) {
                return
            }
            g.Selections.End = this.offset;
            if (g.singleselect) {
                g.Selections.Start = g.Selections.End
            }
            g.Selections.ctrl = !g.OnlyoneSelected && ctrlKeyPressed(l);
            g._IndicateCellsToSelect()
        };
        this.MouseUp = function(l) {
            j.enableSelection();
            g.Selections.ctrl = !g.OnlyoneSelected && ctrlKeyPressed(l);
            g.Selections.mouseDown = false;
            g._SaveCurrentSelection();
            if (g.Selections.ctrl) {
                j.unbind(".mouseselect");
                return
            }
            j.unbind(".listboxselect");
            if (k) {
                k.unbind(".listboxselect")
            }
            Qva.ListBoxSelection.End(false)
        };
        this.KeyChange = function(l) {
            var m = ctrlKeyPressed(l);
            if (g.Selections.ctrl == m) {
                return
            }
            if (m || g.Selections.mouseDown) {
                g.Selections.ctrl = m;
                g._IndicateCellsToSelect()
            } else {
                j.unbind(".listboxselect");
                if (k) {
                    k.unbind(".listboxselect")
                }
                Qva.ListBoxSelection.End(true)
            }
        };
        this.MouseMove_Document = function(n) {
            if (!g) {
                return
            }
            if (!g.Selections.mouseDown) {
                return
            }
            if (!g.has_any_scrollbar) {
                return
            }
            if (g.Selections.scrollTime && new Date().getTime() - g.Selections.scrollTime < 400) {
                return
            }
            var m = g.visible_cols < g.columns;
            var l = g.visible_rows < g.rows;
            if (m && n.pageX < Qva.ListBoxSelection.ParentCoords.left) {
                if (g.Selections.End >= g.rows) {
                    g.Selections.End -= g.rows;
                    g.XScroll.actions.step(3, true);
                    g.Selections.scrollTime = new Date().getTime()
                }
            } else {
                if (m && n.pageX > Qva.ListBoxSelection.ParentCoords.right) {
                    if (g.Selections.End < g.columns * g.rows - g.rows) {
                        if (g.Selections.End < g.TotalSize - g.rows) {
                            g.Selections.End += g.rows
                        }
                        g.XScroll.actions.step(-3, true);
                        g.Selections.scrollTime = new Date().getTime()
                    }
                } else {
                    if (l && n.pageY < Qva.ListBoxSelection.ParentCoords.top) {
                        if (g.Selections.End >= g.columns) {
                            g.Selections.End -= g.columns;
                            g.YScroll.actions.step(3, true);
                            g.Selections.scrollTime = new Date().getTime()
                        }
                    } else {
                        if (l && n.pageY > Qva.ListBoxSelection.ParentCoords.bottom) {
                            if (g.Selections.End < g.columns * g.rows - g.columns) {
                                if (g.Selections.End < g.TotalSize - g.columns) {
                                    g.Selections.End += g.columns
                                }
                                g.YScroll.actions.step(-3, true);
                                g.Selections.scrollTime = new Date().getTime()
                            }
                        }
                    }
                }
            }
        }
    };
    Qva.Mgr.listbox.prototype._Select = function(j) {
        var k = Math.min(this.Selections.Start, this.Selections.End);
        var g = Math.max(this.Selections.Start, this.Selections.End);
        var f = (this.Selections.mouseDown && k <= j && j <= g) || false;
        var h = this.Selections.Selected[j] || false;
        return f !== h
    };
    Qva.Mgr.listbox.prototype._SaveCurrentSelection = function() {
        var h = Math.min(this.Selections.Start, this.Selections.End);
        var f = Math.max(this.Selections.Start, this.Selections.End);
        for (var g = h; g <= f; ++g) {
            if (this.Selections.Selected[g]) {
                delete this.Selections.Selected[g]
            } else {
                this.Selections.Selected[g] = true
            }
        }
    };
    Qva.Mgr.listbox.prototype._EndSelect = function(f) {
        var g = "";
        for (var k in this.Selections.Selected) {
            if (isNaN(k)) {
                continue
            }
            var j = this.Lines[k].intval;
            if (isNaN(j)) {
                continue
            }
            if (g != "") {
                g += ","
            }
            g += j
        }
        this.Selections = {Selected: []};
        if (g != "") {
            var h = {};
            h.select = g;
            h.toggle = f ? "true" : "false";
            if (this.andmode) {
                h.phase = this.CurrentPhase
            }
            this.PageBinder.Set(this.ObjectId, h)
        } else {
            if (!f) {
                this.PageBinder.Set(this.ObjectId + ".CD", "action", "", true)
            }
        }
        if (this.andmode) {
            this.EndPhaseShift()
        }
        this.CurrentPhase = 0
    };
    Qva.Mgr.listbox.prototype._IndicateCellsToSelect = function() {
        var f = this.Selections.ctrl || this.AutoCtrl;
        if (this.ObjectId != Qva.SearchableObject) {
            SetSearchableAndActives(this.ObjectId, [this.ObjectId])
        }
        for (var k = this.Visible.Start; k <= this.Visible.End; ++k) {
            if (!this.Lines[k]) {
                continue
            }
            var p = this._Select(k);
            var l = this.Lines[k].state == "Selected";
            var g = this.Lines[k].state == "Deselected";
            var m = this.Lines[k].state == "Excluded";
            var o = this.Lines[k].state == "Optional";
            var h = this.Lines[k].state == "SelectedExcluded";
            var n;
            if (this.Lines[k].expandcollapse_icon) {
                n = this.DisabledClassName
            } else {
                if (p) {
                    if (this.andmode) {
                        switch (this.CurrentPhase) {
                            case 0:
                                if (f && (l || g)) {
                                    n = this.EnabledClassName
                                } else {
                                    if (f && m) {
                                        n = this.DeselectedClassName
                                    } else {
                                        n = this.SelectedClassName
                                    }
                                }
                                break;
                            case 1:
                                if (f && (g || m)) {
                                    n = this.SelectedClassName
                                } else {
                                    if (g) {
                                        n = this.EnabledClassName
                                    } else {
                                        n = this.DeselectedClassName
                                    }
                                }
                                break;
                            case 2:
                                n = "Qv" + this.Lines[k].state;
                                break;
                            default:
                                Assert(false);
                                break
                            }
                    } else {
                        if (f && (l || g)) {
                            n = this.EnabledClassName
                        } else {
                            if (this.HasSelectedExcluded && f && h) {
                                n = this.DisabledClassName
                            } else {
                                n = this.SelectedClassName
                            }
                        }
                    }
                } else {
                    if (!f && (l || g)) {
                        n = this.EnabledClassName
                    } else {
                        n = "Qv" + this.Lines[k].state
                    }
                }
            }
            if (this.Painted[k].AndModeSymbol) {
                var j = Qva.Mgr.listbox.AndModeSymbol(n.substr(2));
                this.Painted[k].AndModeSymbol.innerText = j
            }
            this.Painted[k].className = n + this.AltClass;
            if (this.AltClass_OnBorder) {
                this.Painted[k].firstChild.className = n + this.AltClass
            }
        }
    };
    Qva.Mgr.listbox.prototype._CombineColors = function(g, f) {
        if (g.A === 0 && f.A === 0) {
            return"Transparent"
        }
        if (g.A === 0) {
            return f.css
        }
        if (f.A === 0) {
            return g.css
        }
        if (g.R + g.G + g.B > f.R + f.G + f.B) {
            return f.css
        }
        return g.css
    };
    Qva.Mgr.listbox.prototype._CombineBorders = function(h, g) {
        var k = Math.max(h.width, g.width);
        var f = this._CombineColors(h.color, g.color);
        var j = h.style === "double" || g.style === "double" ? "double" : h.style === "solid" || g.style === "solid" ? "solid" : "none";
        return{width: k, color: f, style: j}
    };
    Qva.Mgr.listbox.prototype._MakeBorder = function(o, m, g, n) {
        var l = this.BorderStyle[this.Style[0].BorderStyle][m];
        var h = this.BorderStyle[this.Style[0].BorderStyle][g];
        var k = this._CombineBorders(l, h);
        if (k.style === "solid") {
            var j = n(k.width);
            o.style["border" + m] = "solid " + j + "px " + k.color;
            return j
        } else {
            if (k.style === "double") {
                o.style["border" + m] = "solid 3px " + k.color;
                return n(9)
            } else {
                Assert(k.style === "none");
                return 0
            }
        }
    };
    Qva.Mgr.listbox.prototype._StyleObject = function(h) {
        var j = h.getAttribute("bgcolor");
        this.BgColorRGB = HtmlifyARGB(j);
        this.BgColorCSSExpr = Qva.Hex2CSSExpression(j);
        this.Color = HtmlifyARGB(h.getAttribute("color"));
        this.NumAdjust = h.getAttribute("numadjust");
        this.TextAdjust = h.getAttribute("textadjust");
        this.BorderStyle = h.getAttribute("borderstyle");
        var f = h.getAttribute("fontstyle");
        this.FontStyle = f;
        this.FontWeight = h.getAttribute("fontweight");
        this.TextDecoration = h.getAttribute("textdecoration");
        this.SizeMod = h.getAttribute("sizemod");
        var g = h.getAttribute("stretchmode");
        if (g) {
            this.StretchMode = g
        }
    };
    Qva.Mgr.listbox.prototype._BorderStyleObject = function(g) {
        function f(j) {
            var h = g.getAttribute(j).split(" ");
            if (h[0] === "none") {
                return{width: 0, style: "none", color: ObjectifyARGB(null)}
            }
            var k = parseInt(h[1]);
            return{width: k, style: h[0], color: ObjectifyARGB(h[2])}
        }
        this.Top = f("top");
        this.Right = f("right");
        this.Bottom = f("bottom");
        this.Left = f("left")
    };
    Qva.Mgr.listbox.prototype._CellObject = function(k) {
        this.val = k.getAttribute("text");
        this.title = k.getAttribute("title") || this.val;
        this.intval = k.getAttribute("value");
        this.selected = k.getAttribute("selected") == "yes";
        this.level = parseInt(k.getAttribute("level"));
        if (!isNaN(this.level)) {
            ++this.level
        }
        this.parts = k.getElementsByTagName("range");
        if (k.getAttribute("state")) {
            this.state = k.getAttribute("state")
        }
        this.isnum = k.getAttribute("isnum") == "true";
        var h = this.icons = k.getElementsByTagName("icon");
        for (var g = 0; g < h.length; ++g) {
            var j = h[g];
            var f = j.getAttribute("name");
            if (j.getAttribute("sendsize") === "true") {
                this.main_icon = j
            } else {
                if (f == "EXC" || f == "COC") {
                    this.expandcollapse_icon = j
                } else {
                    if (f == "LED") {
                        this.led_icon = j
                    } else {
                        if (f == "IC") {
                            this.input_icon = j
                        }
                    }
                }
            }
        }
        this.icons = [];
        this.subcontent = c(k).find("subcontent");
        this.selecttype = k.getAttribute("selecttype");
        var l = k.getAttribute("rowspan");
        if (l) {
            this.rowspan = parseInt(l)
        } else {
            this.rowspan = 1
        }
    };
    Qva.Mgr.listbox.prototype._SetCellStyle = function(j, f, h) {
        var g = this.Style[0];
        if (!g) {
            return""
        }
        var k = "";
        if (h) {
            if (g.BgColorCSSExpr) {
                k += "; background-color:" + g.BgColorCSSExpr
            } else {
                if (g.BgColorRGB) {
                    k += "; background-color:" + g.BgColorRGB
                }
            }
            k += "; color:" + g.BgColorRGB
        } else {
            if (!f) {
                if (g.BgColorCSSExpr) {
                    k += "; background-color:" + g.BgColorCSSExpr
                } else {
                    if (g.BgColorRGB) {
                        k += "; background-color:" + g.BgColorRGB
                    }
                }
                k += "; color:" + g.Color
            } else {
                k += "; background-color:";
                k += "; color:"
            }
        }
        k += "; text-align:" + (j.label ? g.LabelAdjust : (j.isnum ? g.NumAdjust : g.TextAdjust));
        k += "; font-style:" + g.FontStyle;
        k += "; font-weight:" + g.FontWeight;
        k += "; text-decoration:" + g.TextDecoration;
        switch (g.SizeMod) {
            case"2":
                k += "; font-size:large";
                break;
            case"1":
                k += "; font-size:larger";
                break;
            case"-1":
                k += "; font-size:smaller";
                break;
            case"-2":
                k += "; font-size:small";
                break
        }
        return k
    };
    Qva.LoadDefaultStyles = function() {
        var m = Qva.QvStyles = {};
        for (var f = 0; f < document.styleSheets.length; f++) {
            var l;
            try {
                l = document.styleSheets[f].rules ? document.styleSheets[f].rules : document.styleSheets[f].cssRules
            } catch (k) {
                continue
            }
            if (!l) {
                continue
            }
            var j = {};
            for (var h = 0; h < l.length; h++) {
                var g = l[h];
                switch (g.selectorText) {
                    case".QvSelected":
                        j.QvSelected = g;
                        break;
                    case".QvExcluded":
                        j.QvExcluded = g;
                        break;
                    case".QvOptional":
                        j.QvOptional = g;
                        break;
                    case".QvLocked":
                        j.QvLocked = g;
                        break;
                    case".QvDeselected":
                        j.QvDeselected = g;
                        break;
                    case".QvAlternative":
                        j.QvAlternative = g;
                        break;
                    case".QvSelectedExcluded":
                        j.QvSelectedExcluded = g;
                        break;
                    case".QvLockedExcluded":
                        j.QvLockedExcluded = g;
                        break
                    }
            }
            if (j.QvSelected) {
                m.stylesheet = document.styleSheets[f];
                m["default"] = j;
                m.alt = {QvSelected: {style: {color: "#363636", backgroundColor: "#00ff00"}}, QvExcluded: {style: {color: "#a4a4a4", backgroundColor: "#a4a4a4"}}, QvOptional: {style: {color: "#363636", backgroundColor: "#ffffff"}}, QvLocked: {style: {color: "#363636", backgroundColor: "#000080"}}, QvDeselected: {style: {color: "#363636", backgroundColor: "#ff0000"}}, QvAlternative: {style: {color: "#363636", backgroundColor: "#ffffff"}}, QvSelectedExcluded: {style: {color: "#a4a4a4", backgroundColor: "#a4a4a4"}}, QvLockedExcluded: {style: {color: "#a4a4a4", backgroundColor: "#a4a4a4"}}}
            }
        }
    };
    function a(h, f) {
        if (h.addRule) {
            h.addRule(f, "dummy: none;");
            return h.rules[h.rules.length - 1]
        } else {
            var g = h.insertRule(f + " { }", h.cssRules.length);
            return h.cssRules[g]
        }
    }
    Qva.PageBinding.prototype.LoadLedStyle = function(h) {
        if (!Qva.QvStyles) {
            Qva.LoadDefaultStyles()
        }
        if (Qva.QvStyles["Led_" + h]) {
            return
        }
        Qva.QvStyles["Led_" + h] = true;
        var g = ["Locked", "Selected", "Optional", "Deselected", "Alternative", "Excluded", "SelectedExcluded", "LockedExcluded"];
        var f = {SelectedExcluded: true, Excluded: true, LockedExcluded: true};
        for (var k = 0; k < g.length; ++k) {
            var m = g[k];
            var n = Qva.QvStyles.alt["Qv" + m];
            var l = a(Qva.QvStyles.stylesheet, ".Qv" + m + "_Led_" + h);
            if (!IS_IE && f[m]) {
                l.style.color = Qva.Hex2RGBA("#96" + h)
            } else {
                l.style.color = "#" + h
            }
            var j = this.BuildBinaryUrl(null, null, "LED", n.style.backgroundColor);
            l.style.backgroundImage = "url(" + j + ")";
            l.style.backgroundRepeat = "no-repeat";
            l.style.backgroundPosition = "3px center"
        }
    };
    Qva.PageBinding.prototype.LoadLedCheckStyle = function(k) {
        if (!Qva.QvStyles) {
            Qva.LoadDefaultStyles()
        }
        if (Qva.QvStyles["LED_CHECK_" + k]) {
            return
        }
        Qva.QvStyles["LED_CHECK_" + k] = true;
        var j = {Selected: true, SelectedExcluded: true, Locked: true, LockedExcluded: true};
        var o = ["Locked", "Selected", "Optional", "Deselected", "Alternative", "Excluded", "SelectedExcluded", "LockedExcluded"];
        var m = {SelectedExcluded: true, Excluded: true, LockedExcluded: true};
        for (var l = 0; l < o.length; ++l) {
            var g = o[l];
            var n = Qva.QvStyles.alt["Qv" + g];
            var h = a(Qva.QvStyles.stylesheet, ".Qv" + g + "_LED_CHECK_" + k);
            if (!IS_IE && m[g]) {
                h.style.color = Qva.Hex2RGBA("#96" + k)
            } else {
                h.style.color = "#" + k
            }
            var f = this.BuildBinaryUrl(null, null, "LED", n.style.backgroundColor);
            if (j[g]) {
                f += "&check=true"
            }
            h.style.backgroundImage = "url(" + f + ")";
            h.style.backgroundRepeat = "no-repeat";
            h.style.backgroundPosition = "3px center"
        }
    };
    Qva.PageBinding.prototype.LoadCornertagStyle = function(o, j) {
        if (!Qva.QvStyles) {
            Qva.LoadDefaultStyles()
        }
        if (Qva.QvStyles["CORNERTAG_" + o + "_" + j]) {
            return
        }
        Qva.QvStyles["CORNERTAG_" + o + "_" + j] = true;
        var n = ["Locked", "Selected", "Optional", "Deselected", "Alternative", "Excluded", "SelectedExcluded", "LockedExcluded"];
        var l = {SelectedExcluded: true, Excluded: true, LockedExcluded: true};
        for (var k = 0; k < n.length; ++k) {
            var g = n[k];
            var m = Qva.QvStyles.alt["Qv" + g];
            var h = a(Qva.QvStyles.stylesheet, ".Qv" + g + "_CORNERTAG_" + o + "_" + j);
            if (!IS_IE && l[g]) {
                h.style.color = Qva.Hex2RGBA("#96" + j)
            } else {
                h.style.color = "#" + j
            }
            var f = this.BuildBinaryUrl(null, null, "CORNERTAG", m.style.backgroundColor) + "&width=" + o + "&height=" + o;
            h.style.backgroundImage = "url(" + f + ")";
            h.style.backgroundRepeat = "no-repeat"
        }
    };
    Qva.PageBinding.prototype.LoadCheckStyle = function(h) {
        if (!Qva.QvStyles) {
            Qva.LoadDefaultStyles()
        }
        if (Qva.QvStyles["CHECK_" + h]) {
            return
        }
        Qva.QvStyles["CHECK_" + h] = true;
        var g = ["Locked", "Selected", "Optional", "Deselected", "Alternative", "Excluded", "SelectedExcluded", "LockedExcluded"];
        var f = {SelectedExcluded: true, Excluded: true, LockedExcluded: true};
        for (var k = 0; k < g.length; ++k) {
            var m = g[k];
            var n = Qva.QvStyles.alt["Qv" + m];
            var l = a(Qva.QvStyles.stylesheet, ".Qv" + m + "_CHECK_" + h);
            if (!IS_IE && f[m]) {
                l.style.color = Qva.Hex2RGBA("#96" + h)
            } else {
                l.style.color = "#" + h
            }
            var j = this.BuildBinaryUrl(null, null, "CHECK", null) + "&width=16&height=16&state=" + k;
            l.style.backgroundImage = "url(" + j + ")";
            l.style.backgroundRepeat = "no-repeat";
            l.style.backgroundPosition = "1px center"
        }
    };
    Qva.PageBinding.prototype.LoadRadioStyle = function(h) {
        if (!Qva.QvStyles) {
            Qva.LoadDefaultStyles()
        }
        if (Qva.QvStyles["RADIO_" + h]) {
            return
        }
        Qva.QvStyles["RADIO_" + h] = true;
        var g = ["Locked", "Selected", "Optional", "Deselected", "Alternative", "Excluded", "SelectedExcluded", "LockedExcluded"];
        var f = {SelectedExcluded: true, Excluded: true, LockedExcluded: true};
        for (var k = 0; k < g.length; ++k) {
            var m = g[k];
            var n = Qva.QvStyles.alt["Qv" + m];
            var l = a(Qva.QvStyles.stylesheet, ".Qv" + m + "_RADIO_" + h);
            if (!IS_IE && f[m]) {
                l.style.color = Qva.Hex2RGBA("#96" + h)
            } else {
                l.style.color = "#" + h
            }
            var j = this.BuildBinaryUrl(null, null, "CHECK", null) + "&width=16&height=16&radio=true&state=" + k;
            l.style.backgroundImage = "url(" + j + ")";
            l.style.backgroundRepeat = "no-repeat";
            l.style.backgroundPosition = "1px center"
        }
    }
})(jQuery);
(function(a, b) {
    Qva.Mgr.tabrow2 = function(c, f, d, g) {
        if (!Qva.MgrSplit(this, d, g)) {
            return
        }
        c.AddManager(this);
        this.Element = f;
        f.Name = this.Name;
        this.binderid = c.binderid;
        Qva.DragDrop.DropFrames[Qva.DragDrop.DropFrames.length] = this;
        if (f.className.indexOf("use-new-tabrow") >= 0) {
            this.PageBinder.PaintTabrow = Qva.tabrow3
        }
    };
    Qva.Mgr.tabrow2.prototype.Inside = function(k, h) {
        var j = this.Element;
        var g = Qva.GetPageCoords(j);
        var f = parseInt(j.offsetWidth);
        var c = parseInt(j.offsetHeight);
        if (k.x > g.x && k.x < g.x + f && k.y > g.y && k.y < g.y + c) {
            if (h == "Object") {
                var d = j.firstChild.firstChild;
                if (d.tagName != "LI") {
                    d = a(j).find(".qvtr-tabs").children()[0]
                }
                for (; d; d = d.nextSibling) {
                    if (d.tagName != "LI") {
                        continue
                    }
                    g = Qva.GetAbsolutePageCoords(d, true);
                    g.x -= Qva.GetScrollLeft();
                    g.y -= Qva.GetScrollTop();
                    f = parseInt(d.offsetWidth);
                    c = parseInt(d.offsetHeight);
                    if (k.x > g.x && k.x < g.x + f && k.y > g.y && k.y < g.y + c) {
                        d.Name = this.Name + "." + d.id;
                        return{Element: d, Dialog: "Drop.qvpp"}
                    }
                }
            }
            return{Element: null}
        }
        return null
    };
    Qva.Mgr.tabrow2.prototype.Paint = function(f, d, c) {
        this.Touched = true;
        this.Layout = {};
        Qva.ObjectifyXML(this.Layout, d);
        this.PageBinder.QueuePostPaintMessage(this)
    };
    Qva.Mgr.tabrow2.prototype.PostPaint = function() {
        if (this.Layout.visible) {
            this.Element.style.display = "";
            if (this.PageBinder.PaintTabrow) {
                this.PostPaintCustom = this.PageBinder.PaintTabrow;
                this.PostPaintCustom()
            } else {
                this.PostPaintDefault()
            }
        } else {
            this.Element.style.display = "none"
        }
    };
    Qva.Mgr.tabrow2.prototype.PostPaintDefault = function() {
        var c = this.Element;
        var h = c.getElementsByTagName("ul")[0];
        if (!h) {
            h = document.createElement("ul");
            c.appendChild(h)
        }
        var g = this.Layout.value;
        var l = h.getElementsByTagName("li");
        for (var s = 0; s < Math.max(g.length, l.length); s++) {
            var f = g[s];
            var p = l[s];
            if (!f && !p) {
                continue
            }
            var q;
            var u;
            if (!p) {
                p = document.createElement("li");
                h.appendChild(p)
            }
            p.innerHTML = "";
            if (!f || !f.visible) {
                p.style.display = "none";
                continue
            }
            p.style.display = "";
            q = document.createElement("a");
            u = document.createElement("span");
            SetElementStyle(u, "fontWeight", this.Layout.fontweight);
            SetElementStyle(u, "fontFamily", this.Layout.fontfamily);
            SetElementStyle(u, "fontSize", this.Layout.fontsize, "pt");
            SetElementStyle(u, "fontStyle", this.Layout.fontstyle);
            SetElementStyle(u, "textDecoration", this.Layout.textdecoration);
            if (IS_TOUCHENABLED) {
                u.style.fontSize = "22px"
            }
            Qva.ApplyColorDataToElement(f, q, false, true);
            q.appendChild(u);
            p.appendChild(q);
            var m = f.name;
            p.id = m;
            var o = f.selected === "true";
            p.className = o ? "selectedtab" : "";
            var k = f.text;
            if (f.icon && f.icon.length >= 1) {
                k += " "
            }
            var j = document.createTextNode(k);
            u.appendChild(j);
            if (f.icon && f.icon.length > 0) {
                var n = f.icon[0].stamp;
                var w = f.icon[0].name;
                var r = HtmlifyARGB(f.icon[0].color);
                var d = Qva.GetBinder(this.binderid).BuildBinaryUrl(f.icon[0].path, n, w, r);
                var v = document.createElement("img");
                v.alt = "";
                v.src = d;
                u.appendChild(v)
            }
            if (f.action) {
                p.onclick = onclick_action;
                p.Action = this.Name + "." + m
            }
        }
    };
    Qva.bindChangeTab = function(c, d) {
        a(c).bind("click", {binder: d}, function(f) {
            f.data.binder.ToolWindowZLevel.RemoveTopDialog()
        })
    };
    Qva.tabrow3 = function() {
        var f = '<div class="qvtr-tabs-wrap">   <ul class="qvtr-tabs"></ul></div><ul class="qvtr-more">   <li class="qvtr-expand">       <a href="#"><span>&#9660;</span></a>      <ul></ul>   </li>   <li class="qvtr-scrolls">       <a href="#" class="qvtr-scroll-left"><span>&#9668;</span></a>      <a href="#" class="qvtr-scroll-right"><span>&#9658;</span></a>   </li>   <li><a href="#" class="qvtr-add-sheet"><span>&#x002B;</span></a></li></ul>', y = "original", r = false, m = a(this.Element), j = m.data("qvscroll"), c = true;
        if (this.Layout.mode === "enabled") {
            m.show()
        } else {
            m.hide()
        }
        if (!m.is(".shadetabs3")) {
            m.removeClass("use-new-tabrow shadetabs shadetabs2").addClass("shadetabs3 theme-" + y).html(f);
            c = false;
            j = new QvScroll({attachElement: m.find(".qvtr-tabs")[0], vertical: "disabled", startAttached: false, cornerBounce: false});
            m.data("qvscroll", j)
        }
        if (this.PageBinder.OfflineRecorder) {
            this.PageBinder.OfflineRecorder.SetSheets(this.Layout.value, this.Name)
        }
        var w = m.find(".qvtr-tabs"), g = a(".qvtr-expand > a"), l = g.next(), o = this.Layout.value, p, u, x, d, h = {}, q = false, z = false, k = {tabClick: function(C) {
                var B = a(this).closest("li");
                B.addClass("selectedtab").siblings().removeClass("selectedtab");
                if (!r) {
                    j.setPositionByElement(B[0], null, false, !q);
                    q = false
                }
                C && C.preventDefault()
            }, scrollClick: function(B) {
                var C = this.className.indexOf("-left") >= 0;
                j.setPositionByStep(C ? -1 : 1);
                return false
            }, expandBtnClick: function(C) {
                if (l.is(":visible")) {
                    l.hide()
                } else {
                    l.css("zIndex", 2000);
                    l.html("");
                    var B = 0;
                    a("li:visible", w).each(function() {
                        var E = a("<li>").attr("title", a(this).text()).text(a(this).text()).css("cursor", "pointer").css("padding", "2px").append(a(this).find("img").css("margin-left", "5px"));
                        if (a(this).hasClass("selectedtab")) {
                            E.css("background-color", "#E0E0E0")
                        }
                        l.append(E);
                        var D = parseInt(a(this).css("width"));
                        if (parseInt(a(this).css("width")) > B) {
                            B = D
                        }
                    });
                    l.width(B);
                    l.show()
                }
                return false
            }, expandListClick: function(C) {
                C.preventDefault();
                var B = w.find("li").eq(a(this).index());
                k.tabClick.call(B[0], C);
                onclick_action.call(B[0], C);
                k.expandBtnClick(C)
            }, updateView: function() {
                w.width(99999);
                var C = w.parent().next().outerWidth(), B = (function() {
                    var E = w.find("li:visible:last");
                    if (E.position() != null) {
                        return E.position().left + E.outerWidth() + 40
                    }
                }()), D = a("li[rel].selectedtab");
                w.width(B);
                j.setOptions({contentWidth: B + C}).attach().calculateScrollValues();
                j.visibleWidth -= C;
                if (j.visibleWidth > B) {
                    r = true;
                    m.find(".qvtr-scrolls,.qvtr-expand").hide();
                    if (D.length) {
                        j.reset()
                    }
                    j.detach()
                } else {
                    m.find(".qvtr-scrolls,.qvtr-expand").show();
                    if (D.length) {
                        j.setPositionByElement(D[0], null, false, !q)
                    }
                }
            }};
        if (o) {
            for (u = 0; u < o.length; u += 1) {
                x = o[u];
                var A = x.name.replace(/\\/g, "").replace(/ /g, "");
                d = a("li[rel=" + A + "]").removeClass("has-filter");
                z = !d.length;
                if (z) {
                    var s = a("<span></span>").text(x.text);
                    d = a('<li><a href="javascript:;"></a></li>').attr({id: x.name, rel: A}).click(onclick_action);
                    d.find("a").append(s);
                    Qva.bindChangeTab(d, this.PageBinder);
                    d[0].Action = this.Name + "." + x.name
                } else {
                    d.children("a").children("span").text(x.text)
                }
                var v = d.children("a").children("span")[0];
                SetElementStyle(v, "fontWeight", this.Layout.fontweight);
                SetElementStyle(v, "fontFamily", this.Layout.fontfamily);
                SetElementStyle(v, "fontSize", this.Layout.fontsize, "pt");
                SetElementStyle(v, "fontStyle", this.Layout.fontstyle);
                SetElementStyle(v, "textDecoration", this.Layout.textdecoration);
                d.children("a").css({color: HtmlifyARGB(x.color), background: HtmlifyARGB(x.bkgcolor)});
                if (x.selected === "true") {
                    if (this.PageBinder.OfflineRecorder) {
                        this.PageBinder.OfflineRecorder.SetInitialSheet(u)
                    }
                    p = d[0]
                }
                if (x.icon && x.icon.length) {
                    a("<img>").attr({alt: "", src: Qva.GetBinder(this.binderid).BuildBinaryUrl(x.icon[0].path, x.icon[0].stamp, x.icon[0].name, HtmlifyARGB(x.icon[0].color))}).addClass("icon").appendTo(d.children("a").children("span"))
                }
                d[x.visible ? "show" : "hide"]();
                h[d[0].getAttribute("rel")] = true;
                if (z) {
                    if (u === 0 && a("li", w).length === 0) {
                        w.append(d)
                    } else {
                        if (u === 0 && a("li", w).length > 0) {
                            d.insertBefore(a("li", w)[0])
                        } else {
                            d.insertAfter(a("li", w)[u - 1])
                        }
                    }
                }
            }
        }
        w.children().each(function() {
            if (!h[this.getAttribute("rel")]) {
                a(this).remove();
                q = true
            }
        });
        k.updateView();
        p && k.tabClick.call(p, null);
        if (!c) {
            var n = j.isTouch ? "touchend" : "click";
            n = "click";
            a(window).bind("resize orientationchange", function() {
                q = true;
                k.updateView()
            });
            m.delegate(".qvtr-tabs li a", n, k.tabClick).delegate(".qvtr-scroll-left, .qvtr-scroll-right", n, k.scrollClick).delegate(".qvtr-expand > a", n, k.expandBtnClick).delegate(".qvtr-expand > ul li", n, k.expandListClick);
            if (this.Layout.addsheet === "enabled" && !IS_TOUCHENABLED) {
                m.find(".qvtr-add-sheet").click(function() {
                    onclick_action.call(this);
                    return false
                })[0].Action = "Document.StandardActions.ADDSHEET"
            } else {
                m.find(".qvtr-add-sheet").hide()
            }
        }
    }
})(jQuery);
(function(b, c) {
    if (!Qva.Mgr) {
        Qva.Mgr = {}
    }
    Qva.Mgr.toolwindowtable = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h;
        this.binderid = f.binderid;
        this.BaseName = f.Name
    };
    Qva.Mgr.toolwindowtable.prototype.Inside = function(n, m) {
        for (var j = 0; j < this.DropTargets.length; ++j) {
            var h = this.DropTargets[j];
            if (!h.dropObj) {
                continue
            }
            if (h.dropObj.Type != m) {
                continue
            }
            var l = Qva.GetPageCoords(h);
            var k = parseInt(h.offsetWidth);
            var g = parseInt(h.offsetHeight);
            if (n.x > l.x && n.x < l.x + k && n.y > l.y && n.y < l.y + g) {
                if (n.y < l.y + 0.37 * g) {
                    var f = "insertbefore"
                } else {
                    if (n.y > l.y + 0.7 * g) {
                        var f = "insertafter"
                    } else {
                        var f = "dragto"
                    }
                }
                if ((h.dropObj.DropOn && f == "dragto") || (h.dropObj.InsertAfter && f == "insertafter") || (h.dropObj.InsertBefore && f == "insertbefore")) {
                    return{Element: h, VerticalPosition: f}
                }
            }
        }
        return null
    };
    Qva.Tooltip = null;
    Qva.ShowTooltip = function(k, f) {
        if (!f.Tooltip) {
            return
        }
        if (!Qva.Tooltip) {
            Qva.Tooltip = document.createElement("div");
            Qva.Tooltip.className = "QvHover";
            Qva.Tooltip.style.display = "none";
            Qva.Tooltip.style.position = "absolute";
            Qva.Tooltip.style.backgroundColor = "#FFFFCC";
            Qva.Tooltip.style.border = "solid 1px black";
            Qva.Tooltip.style.padding = "1px 3px 2px 3px";
            document.body.appendChild(Qva.Tooltip)
        }
        Qva.Tooltip.innerHTML = "";
        var g = f.Tooltip;
        for (var j = 0; j < g.length; j++) {
            var l = document.createElement("span");
            l.innerText = g[j];
            Qva.Tooltip.appendChild(l);
            var h = document.createElement("br");
            Qva.Tooltip.appendChild(h)
        }
        if (!k) {
            k = window.event
        }
        Qva.Tooltip.style.left = (k.clientX + Qva.GetScrollLeft() + 5) + "px";
        Qva.Tooltip.style.top = (k.clientY + Qva.GetScrollTop() + 25) + "px";
        Qva.Tooltip.style.zIndex = Qva.GetzIndex(f);
        Qva.Tooltip.style.display = ""
    };
    Qva.HideTooltip = function() {
        if (Qva.Tooltip) {
            Qva.Tooltip.style.display = "none"
        }
    };
    Qva.Mgr.toolwindowtable.prototype.Paint = function(y, Y) {
        this.Touched = true;
        this.DropTargets = [];
        var L = this.Element;
        var F = 0;
        var r = L.firstChild;
        while (r.firstChild) {
            r.removeChild(r.firstChild)
        }
        for (var A = Y.firstChild; A != null; A = A.nextSibling) {
            if (A.nodeName != "column") {
                continue
            }
            var v = document.createElement("col");
            v.width = parseInt(A.getAttribute("width"));
            r.appendChild(v)
        }
        for (var A = Y.firstChild; A != null; A = A.nextSibling) {
            if (A.nodeName != "row") {
                continue
            }
            var H = (F < L.rows.length) ? L.rows[F] : L.insertRow(-1);
            ++F;
            switch (A.getAttribute("class")) {
                case"header":
                    H.className = "ToolProperty-Header";
                    break;
                case"navigation":
                    H.className = "ToolProperty-Navigation";
                    break;
                case"warning":
                    H.className = "ToolProperty-Warning";
                    break;
                default:
                    H.className = "";
                    break
            }
            var g = 0;
            for (var o = A.firstChild; o != null; o = o.nextSibling) {
                var aj = o.getAttribute("name");
                if (aj) {
                    aj = this.BaseName + "." + aj
                }
                var af = o.getAttribute("expression");
                var V = (g < H.cells.length) ? H.cells[g] : H.insertCell(-1);
                ++g;
                var G = o.getAttribute("indent");
                if (G) {
                    G = 12 * parseInt(G);
                    V.style.paddingLeft = G + "pt"
                } else {
                    V.style.paddingLeft = ""
                }
                var ag = o.getAttribute("label");
                switch (o.getAttribute("class")) {
                    case"highlight":
                        V.className = "ToolProperty-Highlight";
                        break
                }
                var K = o.getAttribute("colspan");
                if (K) {
                    V.colSpan = parseInt(K)
                } else {
                    V.colSpan = 1
                }
                var ac = o.getElementsByTagName("tooltip");
                var S = ac.length;
                if (S > 0) {
                    var E = [];
                    for (var P = 0; P < S; ++P) {
                        E.push(ac[P].getAttribute("text"))
                    }
                    V.Tooltip = E;
                    V.onmouseover = function(an) {
                        Qva.ShowTooltip(an, this)
                    };
                    V.onmouseout = function() {
                        Qva.HideTooltip()
                    }
                } else {
                    V.Tooltip = null
                }
                switch (o.nodeName) {
                    case"title":
                        V.innerText = o.getAttribute("text");
                        break;
                    case"link":
                        V.innerText = o.getAttribute("text");
                        V.binderid = this.binderid;
                        V.Name = aj;
                        V.className = "ToolProperty-Link";
                        V.onclick = function() {
                            var an = Qva.GetBinder(this.binderid);
                            if (!an.Enabled) {
                                return
                            }
                            an.Set(this.Name, "action", "", true)
                        };
                        break;
                    case"literal":
                        V.innerHTML = "<span></span>";
                        V.className = "ToolProperty-Literal";
                        V.firstChild.innerText = o.getAttribute("text");
                        break;
                    case"text":
                    case"numeric":
                        var C = null;
                        if (G) {
                            V.style.paddingLeft = G + "pt"
                        }
                        if (ag) {
                            V.innerHTML = "<span></span> <input />";
                            V.firstChild.innerText = ag;
                            V.firstChild.className = "ToolProperty-Label"
                        } else {
                            var z = o.getAttribute("range");
                            if (z == "percent") {
                                V.innerHTML = "<table cellspacing='0' cellpadding='0' width1='100%' ><tr><td width='30pt' >0%</td><td width='134px'><span style='position:absolute;'><hr style='margin:0pt;position:absolute;width:128px;' /><button style='top:-4px;position:absolute;width:4px;height:9px;background-color:lightgrey;border:solid 1px darkgray'></button></span></td><td width='36pt' align='right'>100%</td></tr></table>";
                                C = V.lastChild.rows[0].cells[1].firstChild.lastChild
                            } else {
                                var ad = parseInt(o.getAttribute("size"));
                                if (af) {
                                    V.innerHTML = "<input style='width:80%'/><button>...</button>";
                                    C = V.firstChild;
                                    var s = V.lastChild;
                                    s.binderid = this.binderid;
                                    s.Name = aj;
                                    s.disabled = o.getAttribute("mode") != "enabled";
                                    s.Value = o.getAttribute("value");
                                    s.ExpressionType = af;
                                    s.onclick = function() {
                                        Qva.ExpressionDialog(this, this.Value)
                                    }
                                } else {
                                    if (!isNaN(ad)) {
                                        V.innerHTML = "<textarea rows='" + ad + "'></textarea>"
                                    } else {
                                        V.innerHTML = "<input/>"
                                    }
                                }
                            }
                            V.className = "ToolProperty-TextInput"
                        }
                        if (C == null) {
                            C = V.lastChild
                        }
                        if (o.nodeName == "numeric" && C.tagName == "INPUT") {
                            C.style.width = "24pt";
                            C.style.textAlign = "right"
                        }
                        C.Name = aj;
                        if (C.tagName != "BUTTON") {
                            C.binderid = this.binderid;
                            C.readOnly = o.getAttribute("mode") != "enabled";
                            if (C.readOnly) {
                                C.style.color = "silver"
                            }
                            C.value = o.getAttribute("value");
                            C.onclick = Qva.CancelBubble;
                            C.onchange = function() {
                                var an = Qva.GetBinder(this.binderid);
                                if (!an.Enabled) {
                                    return
                                }
                                an.Set(this.Name, "value", this.value, true)
                            }
                        } else {
                            var X = parseInt(o.getAttribute("value"));
                            X = isNaN(X) ? 0 : X / 2;
                            C.style.left = X + "px";
                            C.binderid = this.binderid;
                            C.moveObj = "*";
                            C.xOnly = true;
                            C.xMin = parseInt(o.getAttribute("min")) / 2;
                            C.xMax = parseInt(o.getAttribute("max")) / 2;
                            C.disabled = o.getAttribute("mode") != "enabled";
                            C.style.cursor = C.disabled ? "" : "pointer";
                            b(C).bind("mousedown", Qva.Move.mouseDown)
                        }
                        break;
                    case"check":
                        if (G) {
                            V.style.paddingLeft = G + "pt"
                        }
                        V.innerHTML = "<input type='checkbox'/> <span></span>";
                        V.lastChild.innerText = ag;
                        V.lastChild.className = "ToolProperty-Label";
                        var C = V.firstChild;
                        C.checked = o.getAttribute("value") == "1";
                        C.disabled = o.getAttribute("mode") != "enabled";
                        C.Name = aj;
                        C.binderid = this.binderid;
                        C.onclick = function() {
                            var an = Qva.GetBinder(this.binderid);
                            if (!an.Enabled) {
                                return
                            }
                            an.Set(this.Name, "value", this.checked ? "1" : "0", true)
                        };
                        break;
                    case"icon":
                        V.innerHTML = "<img />";
                        V.className = "ToolProperty-IconCell";
                        var x = V.firstChild;
                        x.className = "ToolProperty-Icon";
                        x.disabled = o.getAttribute("mode") != "enabled";
                        if (o.getAttribute("menu") == "true") {
                            x.position = aj
                        }
                        var ae = null;
                        var Z = o.getAttribute("image");
                        if (o.getAttribute("type") == "radio") {
                            ae = o.getAttribute("stamp");
                            Z += "." + o.getAttribute("value")
                        }
                        x.src = Qva.GetBinder(this.binderid).BuildBinaryUrl(o.getAttribute("path"), ae, Z + (x.disabled ? ".DISABLED" : ""));
                        x.title = ag;
                        V.binderid = this.binderid;
                        V.Name = aj;
                        x.dragAccept = o.getAttribute("accept");
                        if (x.dragAccept) {
                            this.DropTargets[this.DropTargets.length] = x
                        }
                        var ah = true;
                        var ak = true;
                        switch (o.getAttribute("type")) {
                            case"drag":
                                x.dragObj = {Name: aj, Type: o.getAttribute("content"), Value: o.getAttribute("value")};
                                if (o.getAttribute("dropat") != null) {
                                    x.dragObj.DropAt = true
                                }
                                x.binderid = this.binderid;
                                x.Name = aj;
                                x.onmousedown = Qva.DragDrop.mouseDown;
                                break;
                            case"drop":
                                x.binderid = this.binderid;
                                x.Name = aj;
                                break;
                            case"action":
                                V.Value = o.getAttribute("value");
                                break;
                            case"radio":
                                ak = false;
                                V.Value = o.getAttribute("value");
                                if (o.getAttribute("selected") == "true") {
                                    V.className = "ToolProperty-IconSelected"
                                } else {
                                    V.className = "ToolProperty-IconUnselected"
                                }
                                break;
                            case null:
                                ah = false;
                                break;
                            default:
                                ah = false;
                                break
                        }
                        if (ah) {
                            if (!x.disabled) {
                                if (ak) {
                                    x.onmouseover = function() {
                                        this.className = "prop-dyn-sortable-item-highlighted"
                                    };
                                    x.onmouseout = function() {
                                        this.className = ""
                                    }
                                }
                                V.onclick = function() {
                                    var an = Qva.GetBinder(this.binderid);
                                    if (!an.Enabled) {
                                        return
                                    }
                                    if (this.Value != null) {
                                        an.Set(this.Name, "value", this.Value, true)
                                    } else {
                                        an.Set(this.Name, "action", "", true)
                                    }
                                }
                            }
                        }
                        break;
                    case"select":
                    case"combo":
                        var C;
                        var s = null;
                        if (ag) {
                            if (af) {
                                V.innerHTML = "<span></span> <select ></select><button>...</button>";
                                s = V.lastChild;
                                C = s.previousSibling
                            } else {
                                V.innerHTML = "<span></span> <select ></select>";
                                C = V.lastChild
                            }
                            V.firstChild.innerText = ag;
                            V.firstChild.className = "ToolProperty-Label"
                        } else {
                            if (af) {
                                V.innerHTML = "<select style='width:80%'></select><button>...</button>";
                                s = V.lastChild
                            } else {
                                V.innerHTML = "<select style='width:100%'></select>"
                            }
                            C = V.firstChild
                        }
                        if (s) {
                            s.binderid = this.binderid;
                            s.Name = aj;
                            s.disabled = o.getAttribute("mode") != "enabled";
                            s.Value = o.getAttribute("value");
                            s.ExpressionType = af;
                            s.onclick = function() {
                                Qva.ExpressionDialog(this, this.Value)
                            }
                        }
                        C.disabled = o.getAttribute("mode") != "enabled";
                        C.Name = aj;
                        C.binderid = this.binderid;
                        C.onclick = Qva.CancelBubble;
                        C.onchange = function() {
                            if (this.selectedIndex < 0) {
                                return
                            }
                            var an = Qva.GetBinder(this.binderid);
                            if (!an.Enabled) {
                                return
                            }
                            var ao = this.options[this.selectedIndex];
                            an.Set(this.Name, "value", ao.value, true)
                        };
                        var h = o.getElementsByTagName("option");
                        var W = h.length;
                        C.options.length = W;
                        var D = o.getAttribute("value");
                        var q = false;
                        for (var P = 0; P < W; ++P) {
                            var N = h[P];
                            var I = C.options[P];
                            I.text = N.getAttribute("text");
                            I.value = N.getAttribute("value");
                            if (I.value == D) {
                                I.selected = true;
                                q = true
                            }
                        }
                        if (!q) {
                            C.options.length = W + 1;
                            var N = h[W];
                            var I = C.options[W];
                            I.text = o.getAttribute("text");
                            I.value = D;
                            I.selected = true
                        }
                        if (o.nodeName == "combo") {
                            var R = C;
                            setTimeout(function() {
                                Qva.Mgr.toolwindowtable.CreateCombobox(R)
                            }, 0)
                        }
                        break;
                    case"img-select":
                    case"txt-select":
                        var U = "";
                        if (ag) {
                            U += "<span></span> "
                        }
                        if (o.nodeName == "img-select") {
                            U += '<img class="ToolProperty-ImgSelect" >'
                        } else {
                            U += '<input class="ToolProperty-TxtSelect" />'
                        }
                        U += "<button></button>";
                        V.innerHTML = U;
                        if (ag) {
                            V.firstChild.innerText = ag;
                            V.firstChild.className = "ToolProperty-Label"
                        }
                        var C = V.lastChild;
                        C.disabled = o.getAttribute("mode") != "enabled";
                        C.Name = aj;
                        C.binderid = this.binderid;
                        C.style.backgroundImage = "url(/qvajaxzfc/qvsviewclient.aspx?datamode=binary&public=only&name=menu" + ((o.getAttribute("mode") != "enabled") ? ".DISABLED" : "") + ")";
                        C.className = "ToolProperty-TxtSelectMenu";
                        var f = C.previousSibling;
                        if (o.nodeName == "img-select") {
                            f.src = "/qvajaxzfc/qvsviewclient.aspx?datamode=binary&public=only&name=bundled:" + o.getAttribute("image")
                        } else {
                            f.value = o.getAttribute("text");
                            f.style.width = "78%";
                            f.Name = aj;
                            f.binderid = this.binderid;
                            f.readOnly = o.getAttribute("mode") != "enabled";
                            if (f.readOnly) {
                                f.style.color = "silver"
                            }
                            if (!f.readOnly) {
                                f.onchange = function() {
                                    var an = Qva.GetBinder(this.binderid);
                                    if (!an.Enabled) {
                                        return
                                    }
                                    an.Set(this.Name, "value", this.value, true)
                                }
                            }
                        }
                        break;
                    case"color":
                        V.disabled = o.getAttribute("mode") != "enabled";
                        V.Name = aj;
                        V.binderid = this.binderid;
                        V.onclick = function() {
                            var an = Qva.GetBinder(this.binderid);
                            if (!an.Enabled) {
                                return
                            }
                            an.Set(this.Name, "value", this.Color, true)
                        };
                        if (ag) {
                            V.title = ag
                        }
                        var T = o.getAttribute("selected") == "1";
                        V.innerHTML = "<div>&nbsp</div>";
                        V.Color = o.getAttribute("value");
                        V.firstChild.className = "ToolProperty-Color";
                        V.firstChild.style.backgroundColor = o.getAttribute("value");
                        V.style.backgroundColor = T ? "Highlight" : "Transparent";
                        break
                }
                var u = o.getAttribute("warning");
                if (u) {
                    var x = document.createElement("IMG");
                    x.src = Qva.GetBinder(this.binderid).BuildBinaryUrl(o.getAttribute("path"), null, "warning");
                    x.title = u;
                    x.style.paddingLeft = "2pt";
                    V.appendChild(x);
                    V.title = u
                }
            }
            while (g < H.cells.length) {
                H.deleteCell(g)
            }
            var ab = A.getAttribute("accept");
            var w = (A.getAttribute("type") == "drag") && A.getAttribute("content");
            if (w || ab) {
                var p = A.getAttribute("name");
                if (p) {
                    p = this.BaseName + "." + p
                }
                H.binderid = this.binderid;
                H.Name = p;
                if (ab) {
                    var n = A.getAttribute("at").split(";");
                    var j = false;
                    var Q = false;
                    var l = false;
                    for (var B = 0; B < n.length; B++) {
                        if (n[B] == "on") {
                            j = true
                        }
                        if (n[B] == "before") {
                            Q = true
                        }
                        if (n[B] == "after") {
                            l = true
                        }
                    }
                    H.dropObj = {Name: p, Type: ab, DropOn: j, InsertAfter: l, InsertBefore: Q};
                    this.DropTargets[this.DropTargets.length] = H;
                    var M = Qva.getFrameObjForElement(this.Element);
                    var aa = false;
                    var O = ab.split(";");
                    for (var m in Qva.DragDrop.DropFrames) {
                        if (Qva.DragDrop.DropFrames[m].Name === M.Name) {
                            aa = true;
                            var J = Qva.DragDrop.DropFrames[m].DropTypes;
                            for (var am in O) {
                                var k = false;
                                for (var al in J) {
                                    if (J[al] === O[am]) {
                                        k = true;
                                        break
                                    }
                                }
                                if (!k) {
                                    J[J.length] = O[am]
                                }
                            }
                            break
                        }
                    }
                    if (!aa) {
                        M.DropTypes = ab.split(";");
                        Qva.DragDrop.DropFrames.push(M)
                    }
                }
                if (w) {
                    var ai = A.getAttribute("content");
                    if (A.getAttribute("label")) {
                        H.title = A.getAttribute("label")
                    }
                    H.dragObj = {Name: p, Type: ai};
                    H.onmouseover = function() {
                        if (this.className.indexOf("DragTarget") == -1) {
                            this.className += " DragTarget"
                        }
                    };
                    H.onmouseout = function() {
                        this.className = this.className.replace("DragTarget", "");
                        this.className = this.className.replace(/^\s+|\s+$/g, "")
                    };
                    H.onmousedown = Qva.DragDrop.mouseDown
                }
            }
        }
        while (F < L.rows.length) {
            L.deleteRow(F)
        }
    };
    Qva.Mgr.toolwindowbody = function(f, j, g, h) {
        if (!Qva.MgrSplit(this, g, null)) {
            return
        }
        f.AddManager(this);
        this.binderid = f.binderid;
        this.Element = j;
        var k = this;
        b(this.Element).click(function(l) {
            Qva.HideContextMenu(true)
        });
        this.Managers = {};
        this.UIParent = h;
        this.DocumentBinder = f;
        while (this.DocumentBinder && !this.DocumentBinder.LoadHtml) {
            this.DocumentBinder = this.DocumentBinder.PageBinder
        }
        Qva.DragDrop.DropTargets[Qva.DragDrop.DropTargets.length] = this
    };
    Qva.Mgr.toolwindowbody.prototype.Abort = function() {
        this.SingleName = null
    };
    Qva.Mgr.toolwindowbody.prototype.Close = function(h) {
        if (!this.SingleName) {
            return
        }
        var g = this.Managers[this.SingleName][0].Element.value;
        if (g == this.SingleInitalText) {
            return
        }
        var f = Qva.GetBinder(this.binderid);
        if (!f.Enabled) {
            return
        }
        this.SingleInitalText = g;
        f.Set(this.SingleName, "value", g, true)
    };
    Qva.Mgr.toolwindowbody.prototype.SetSingleMode = function(f, h) {
        this.SingleName = f;
        this.SingleInitalText = h;
        var g = this.Managers[this.SingleName][0];
        g.Element.value = h;
        g.Element.onchange = function() {
        }
    };
    Qva.Mgr.toolwindowbody.prototype.ScanAndPaint = function(f, h) {
        this.IsPage = true;
        this.SubName = f;
        var j = h || this.Element;
        var g = new Qva.Scanner(this);
        g.Scan(j, f || this.Name, this);
        this.PaintOnlyNew = true;
        this.Paint();
        this.PaintOnlyNew = false
    };
    Qva.Mgr.toolwindowbody.prototype.Scan = function(f, h) {
        this.IsPage = true;
        this.SubName = f;
        var j = h || this.Element;
        var g = new Qva.Scanner(this);
        g.Scan(j, f || this.Name, this)
    };
    Qva.Mgr.toolwindowbody.prototype.Inside = function(m, h) {
        for (var g in this.Managers) {
            var k = this.Managers[g];
            for (var f = 0; f < k.length; ++f) {
                var j = k[f];
                if (!j.Inside) {
                    continue
                }
                var l = j.Inside(m, h);
                if (l != null) {
                    return l
                }
            }
        }
        return null
    };
    Qva.Mgr.toolwindowbody.prototype.PaintTree = function(h, l) {
        for (var n = h.firstChild; n != null; n = n.nextSibling) {
            var g = n.getAttribute("name");
            var m = n.getAttribute("mode");
            switch (m) {
                case"hidden":
                    m = "h";
                    break;
                case"enabled":
                    m = "e";
                    break;
                default:
                    m = "d";
                    break
            }
            var k = this.Managers[l + "." + g];
            if (k) {
                for (var f = 0; f < k.length; ++f) {
                    var j = k[f];
                    if (j.ToBeDeleted) {
                        k.splice(f, 1);
                        j = k[f]
                    }
                    if (!this.PaintOnlyNew || !j.Old) {
                        j.Paint(m, n, g)
                    }
                    j.Old = true
                }
            }
            this.PaintTree(n, l + "." + g)
        }
    };
    Qva.Mgr.toolwindowbody.prototype.Paint = function(o, k, p) {
        this.Touched = true;
        if (!this.Element) {
            this.node = k;
            this.prefix = p;
            this.mode = o;
            return
        } else {
            if (!k) {
                if (!this.node) {
                    return
                }
                k = this.node;
                p = this.prefix;
                o = this.mode
            } else {
                this.node = k;
                this.prefix = p;
                this.mode = o
            }
        }
        if (k.getAttribute("isDropDialog")) {
            Qva.dropDialog.showAt(k.getAttribute("x"), k.getAttribute("y"))
        }
        if (this.IsPage) {
            if (o == "h") {
                Qva.dropDialog.element.style.display = "none";
                Qva.dropDialog.hidden = true;
                return
            }
            var q = this.Managers["$"];
            if (q) {
                for (var l = 0; l < q.length; ++l) {
                    var u = q[l];
                    if (!this.PaintOnlyNew || !u.Old) {
                        u.Paint("e", k, "$")
                    }
                    u.Old = true
                }
            }
            this.PaintTree(k, p);
            if (this.OnComplete) {
                this.OnComplete(k)
            }
            if (this.Tabs) {
                this.Tabs.drawFoldoutScrollShadow(0)
            }
            return
        }
        var n = k.getAttribute("value");
        if (n != this.Selected) {
            this.Managers = {};
            this.Element.innerHTML = "<table width='95%'></table>";
            var v = this.Element.firstChild;
            v.cellpadding = 0;
            v.cellspacing = 0;
            for (var g = k.firstChild; g != null; g = g.nextSibling) {
                if (g.nodeName != "property") {
                    continue
                }
                var w = v.insertRow(-1);
                var s = w.insertCell(-1);
                var f = g.getAttribute("name");
                var h = g.getAttribute("indent");
                if (h) {
                    h = 12 * parseInt(h)
                }
                s.innerHTML = "<table width='98%'><colgroup></colgroup></table>";
                s.colSpan = 2;
                var u = new Qva.Mgr.toolwindowtable(this, s.firstChild, "." + f, this.Name)
            }
            this.Body = v.tBodies[0];
            this.Selected = n
        }
        for (var g = k.firstChild; g != null; g = g.nextSibling) {
            if (g.nodeName != "property") {
                continue
            }
            var f = this.Name + "." + g.getAttribute("name");
            var q = this.Managers[f];
            if (q != null) {
                var o = "d";
                switch (g.getAttribute("mode")) {
                    case"hidden":
                        o = "h";
                        break;
                    case"enabled":
                        o = "e";
                        break
                }
                var j = q.length;
                for (var r = 0; r < j; ++r) {
                    var u = q[r];
                    var m = o;
                    if (o != "n" && u.HideIf && u.HideIf(g.getAttribute("value"), g.getAttribute("text"))) {
                        m = "n"
                    }
                    if (!this.PaintOnlyNew || !u.Old) {
                        u.Paint(m, g, f)
                    }
                    u.Old = true
                }
            }
        }
    };
    Qva.Mgr.toolwindowbody.prototype.Append = function() {
    };
    Qva.Mgr.toolwindowbody.prototype.AddManager = function(g) {
        g.PageBinder = this;
        g.Touched = false;
        var f = this.Managers[g.Name];
        if (f == null) {
            f = [];
            this.Managers[g.Name] = f
        }
        f.push(g)
    };
    Qva.Mgr.toolwindowbody.prototype.RemoveFromManagers = function(h) {
        var g = this.Managers[h.Name];
        for (var f = 0; f < g.length; ++f) {
            if (g[f] == h) {
                h.ToBeDeleted = true;
                break
            }
        }
    };
    Qva.Mgr.toolwindownavigation = function(f, h, g, j) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        f.AddManager(this);
        this.Element = h;
        this.binderid = f.binderid;
        this.Managers = {}
    };
    Qva.Mgr.toolwindownavigation.prototype.Paint = function(k, h) {
        this.Touched = true;
        var f = this.Element;
        if (k == "h") {
            f.style.display = "none";
            return
        }
        f.style.display = "";
        while (f.firstChild) {
            f.removeChild(f.firstChild)
        }
        f.innerHTML = "";
        var n = h.getElementsByTagName("option");
        var m = n.length;
        for (var j = 0; j < m; ++j) {
            if (j > 0) {
                var o = document.createElement("span");
                o.innerText = " > ";
                f.appendChild(o)
            }
            var l = n[j];
            var g = document.createElement("span");
            if (j < m - 1) {
                g.className = "Navigation-Link";
                g.binderid = this.binderid;
                g.Name = this.Name;
                g.Link = l.getAttribute("value");
                g.onclick = function() {
                    var p = Qva.GetBinder(this.binderid);
                    if (!p.Enabled) {
                        return
                    }
                    p.Set(this.Name, "value", this.Link, true)
                }
            }
            g.innerText = l.getAttribute("text");
            f.appendChild(g)
        }
    };
    Qva.Mgr.toolwindowtable.CreateCombobox = function(g) {
        var f = document.createElement("input");
        f.style.border = "none";
        f.style.marginTop = "2px";
        f.style.marginLeft = "4px";
        f.style.position = "absolute";
        f.style.height = Math.max(parseInt(g.offsetHeight) - 6, 0) + "px";
        f.style.left = parseInt(g.parentNode.offsetLeft) + "px";
        f.style.width = Math.max(parseInt(g.offsetWidth) - 21, 0) + "px";
        if (g.selectedIndex >= 0) {
            f.value = g.options[g.selectedIndex].text
        }
        g.parentNode.appendChild(f);
        f.Name = g.Name;
        f.binderid = g.binderid;
        if (g.disabled) {
            f.disabled = true
        } else {
            f.onchange = function() {
                var h = Qva.GetBinder(this.binderid);
                if (!h.Enabled) {
                    return
                }
                h.Set(this.Name, "text", this.value, true)
            }
        }
    };
    Qva.ToggleToolPane = function(g) {
        var h = g.parentNode.rows[g.rowIndex + 1];
        var f = g.cells[0].firstChild;
        if (f.tagName != "IMG") {
            f = f.nextSibling
        }
        if (h.style.display == "none") {
            f.src = "collapse.png";
            h.style.display = ""
        } else {
            f.src = "expand.png";
            h.style.display = "none"
        }
    };
    Qva.SelectToolPane = function(o, l) {
        var q = o.parentNode;
        var g = q.parentNode.parentNode;
        var h = q.rowIndex;
        if (l && q.cells[1]) {
            var m = q.cells[1].firstChild;
            if (m.tagName != "IMG") {
                m = m.nextSibling
            }
            m.src = m.src.replace((m.src.indexOf("unpinned") != -1) ? "unpinned" : "pinned", (m.src.indexOf("unpinned") != -1) ? "pinned" : "unpinned")
        }
        for (var f = 0; f < g.rows.length; f++) {
            m = g.rows[f].cells[1];
            if (m) {
                m = m.firstChild
            }
            if (m && m.tagName != "IMG") {
                m = m.nextSibling
            }
            if (!m) {
                continue
            }
            var p = true;
            var n = f + 1;
            while (p) {
                var j = g.rows[n++];
                if (!j) {
                    p = false;
                    continue
                }
                var k = j.cells[1];
                if (k) {
                    k = k.firstChild
                }
                if (k && k.tagName != "IMG") {
                    k = k.nextSibling
                }
                if (k) {
                    p = false;
                    continue
                }
                if (f == h || (m && m.src.indexOf("unpinned") == -1)) {
                    j.style.display = ""
                } else {
                    j.style.display = "none"
                }
            }
        }
    };
    Qva.SelectToolTab = function(h) {
        var n = h.parentNode;
        var f = 1;
        var m = -1;
        for (var g = n.firstChild; g; g = g.nextSibling) {
            if (g.tagName != "A") {
                continue
            }
            ++f;
            if (g != h) {
                g.className = ""
            }
            if (g == h) {
                m = f
            }
        }
        h.className = "selectedtab";
        var j = n.parentNode.parentNode.parentNode.parentNode;
        for (var k = 2; k < j.rows.length; ++k) {
            var l = j.rows[k];
            if (k == m) {
                l.style.display = ""
            } else {
                l.style.display = "none"
            }
        }
    };
    Qva.Mgr.img = function(f, h, g, j) {
        this.Name = g ? Qva.MgrMakeName(g, j) : "$";
        f.AddManager(this);
        this.Element = h;
        h.binderid = f.binderid;
        h.Name = this.Name
    };
    Qva.Mgr.img.prototype.Paint = function(m, l) {
        this.Touched = true;
        var j = this.Element;
        j.style.display = Qva.MgrGetDisplayFromMode(this, m);
        var h = (m == "e");
        var k = j.getAttribute("icon");
        if (k) {
            var f = Qva.GetBinder(j.binderid);
            if (!h) {
                k += ".DISABLED"
            }
            var g = f.BuildBinaryUrl(l.getAttribute("path"), null, k);
            j.src = g
        }
    };
    Qva.Mgr.radio = function(f, h, g, j, k) {
        this.Name = Qva.MgrMakeName(g, j);
        f.AddManager(this);
        this.Element = h;
        h.binderid = f.binderid;
        h.Name = this.Name;
        h.onclick = Qva.Mgr.radio.OnClick;
        h.setAttribute("unselected-class", h.className)
    };
    Qva.Mgr.radio.OnClick = function() {
        var f = Qva.GetBinder(this.binderid);
        f.Set(this.Name, "value", this.getAttribute("value"), true)
    };
    Qva.Mgr.radio.prototype.Paint = function(l, g) {
        this.Touched = true;
        var j = this.Element;
        j.style.display = Qva.MgrGetDisplayFromMode(this, l);
        var m = (l == "e");
        var o = j.getAttribute("value");
        if (m) {
            var q = g.getElementsByTagName("option");
            if (q.length > 0) {
                m = false;
                for (var h = 0; h < q.length; ++h) {
                    var k = q[h];
                    if (k.getAttribute("value") != o) {
                        continue
                    }
                    if (k.getAttribute("mode") == "enabled") {
                        m = true
                    }
                    break
                }
            }
        }
        j.disabled = !m;
        var n = j.getAttribute("icon");
        if (n) {
            var p = Qva.GetBinder(j.binderid);
            if (!m) {
                n += ".DISABLED"
            }
            var f = p.BuildBinaryUrl(g.getAttribute("path"), null, n);
            j.src = f
        }
        j.className = (o == g.getAttribute("value")) ? j.getAttribute("selected-class") : j.getAttribute("unselected-class")
    };
    Qva.Mgr.color = function(f, h, g, j, m) {
        this.Name = Qva.MgrMakeName(g, j);
        f.AddManager(this);
        this.Element = h;
        h.binderid = f.binderid;
        h.Name = this.Name;
        h.setAttribute("value", m);
        var l = document.createElement("div");
        h.appendChild(l);
        l.innerText = " ";
        l.className = "ToolProperty-Color";
        try {
            l.style.backgroundColor = m
        } catch (k) {
            alert("Invalid color:" + m)
        }
    };
    Qva.Mgr.color.OnClick = function() {
        var f = Qva.GetBinder(this.binderid);
        f.Set(this.Name, "value", this.getAttribute("value"), true)
    };
    Qva.Mgr.color.prototype.Paint = function(k, h) {
        this.Touched = true;
        var g = this.Element;
        g.style.display = Qva.MgrGetDisplayFromMode(this, k);
        var f = (k == "e");
        var j = g.getAttribute("value");
        g.disabled = !f;
        g.style.backgroundColor = (j == h.getAttribute("text")) ? "highlight" : "";
        if (f) {
            g.onclick = Qva.Mgr.color.OnClick
        } else {
            g.onclick = function() {
            }
        }
    };
    Qva.Mgr.resize = function(f, h, g, j) {
        this.Name = "$";
        f.AddManager(this);
        this.Element = h
    };
    Qva.Mgr.resize.prototype.Paint = function(h, g) {
        this.Touched = true;
        var f = this.Element
    };
    Qva.Mgr.ulList = function(f, h, g, j, k) {
    };
    function d(g, f, k) {
        for (var h = 0; h < g.length; h++) {
            var l = b(g[h]);
            if (l.hasClass("prop-dyn-dynamic-dropdown")) {
                return
            }
            if (k) {
                l.removeClass("prop-dyn-clear-border-background");
                if (g.length == 1) {
                    l.focus()
                }
            } else {
                l.addClass("prop-dyn-clear-border-background")
            }
        }
        for (var h = 0; h < f.length; h++) {
            var j = b(f[h]);
            if (k) {
                j.removeClass("prop-dyn-hidden")
            } else {
                j.addClass("prop-dyn-hidden")
            }
        }
    }
    function a(h, j, f) {
        var g = b(h.children(".prop-dyn-sortable-item-handle").children(":eq(0)")[0]);
        if (j) {
            h.removeClass("ui-state-default").addClass("prop-dyn-sortable-item-highlighted");
            if (!f) {
                g.removeClass("prop-sortable-list-arrow").addClass("prop-sortable-list-arrow-highlighted");
                h.find("[name='sortable-list-item-close-button']").removeClass("prop-dyn-hidden")
            } else {
                g.removeClass("prop-sortable-list-arrow-highlighted").addClass("prop-sortable-list-arrow");
                h.find("[name='sortable-list-item-close-button']").addClass("prop-dyn-hidden")
            }
        } else {
            h.removeClass("prop-dyn-sortable-item-highlighted").addClass("ui-state-default");
            g.removeClass("prop-sortable-list-arrow-highlighted").addClass("prop-sortable-list-arrow");
            h.find("[name='sortable-list-item-close-button']").addClass("prop-dyn-hidden")
        }
        d(h.find("input"), h.find("[propicontype='expression']"), j && !f)
    }
    Qva.Mgr.list = function(f, w, A, s, u) {
        this.Name = Qva.MgrMakeName(A, s);
        f.AddManager(this);
        this.Element = w;
        w.binderid = f.binderid;
        w.Name = this.Name;
        var v = this;
        var p = false;
        var n;
        var z = false;
        var x;
        if (w.tagName.toUpperCase() == "UL") {
            Qva.DragDrop.DropTargets[Qva.DragDrop.DropTargets.length] = this;
            var g = b(w);
            var r = this;
            g.bind("mousedown", function(C) {
                var B = b(C.srcElement).closest("li")[0];
                if (!B) {
                    return
                }
                g.children("li").each(function() {
                    var D = b(this);
                    d(D.find("input"), D.find("[propicontype='expression']"), false)
                });
                r.SetActiveItem(B)
            });
            b(document).bind("mousedown", function(C) {
                var B = b(C.srcElement).closest("li")[0];
                g.children("li").each(function() {
                    if (this == B) {
                        return
                    }
                    var D = b(this);
                    d(D.find("input"), D.find("[propicontype='expression']"), false)
                })
            });
            if (w.Name.match(/(.Expression)$/i)) {
                var y = b(w.children[0]).find("div[avq^='prop_editexpression']");
                this.ExtraIndex = (y && y.length > 0) ? parseInt(y.attr("avq").split(".")[1]) : null
            }
            var l = w.getAttribute("istoolwindow");
            this.ActiveItem = null;
            if (f.ListController) {
                this.ListController = f.ListController
            }
            this.StyleActiveItem = function(D) {
                for (var B = 0; B < g.children().length; B++) {
                    var E = g.children()[B];
                    var C = b(E);
                    if (l) {
                        C.addClass("ui-state-default");
                        C.mouseover(function() {
                            b(this).addClass("prop-dyn-sortable-item-highlighted")
                        });
                        C.mouseout(function() {
                            if (!g.sortable("option", "disabled")) {
                                b(this).removeClass("prop-dyn-sortable-item-highlighted")
                            }
                        })
                    } else {
                        a(C, E.Index == D, g.sortable("option", "disabled"))
                    }
                }
            };
            this.InitActiveItem = function(C) {
                var B = false;
                if (this.ActiveItem) {
                    if (this.ActiveItem.Index < this.RowCount) {
                        return
                    }
                    B = true
                }
                this.ActiveItem = {Name: C.Name, AvqDialog: C.AvqDialog, binderid: C.binderid, Index: C.Index};
                if (this.ListController) {
                    if (this.ListController.SetActiveListItemAndFoldout && C.AvqDialog) {
                        if (B) {
                            this.ListController.SetActiveListItemAndFoldout(this)
                        }
                    } else {
                        if (this.ListController.SetActiveListItem) {
                            this.ListController.SetActiveListItem(this)
                        }
                    }
                } else {
                    this.SetActiveItem(this.ActiveItem)
                }
            };
            this.SetActiveItem = function(D, C) {
                var E = {Name: D.Name, AvqDialog: D.AvqDialog, binderid: D.binderid, Index: D.Index};
                if (D.tagName == "LI") {
                    b(w).scrollTop(D.offsetTop)
                }
                if (C && this.ListController && this.ListController.GetActiveFoldOut && D.AvqDialog) {
                    var B = this.ListController.GetActiveFoldOut();
                    if (B.Name) {
                        if (B.AvqDialog == this.ActiveItem.AvqDialog) {
                            this.StyleActiveItem(this.ActiveItem.Index)
                        } else {
                            this.StyleActiveItem(-1)
                        }
                        return
                    }
                }
                this.ActiveItem = E;
                this.StyleActiveItem(this.ActiveItem.Index);
                if (this.ListController) {
                    if (this.ListController.SetActiveListItemAndFoldout && D.AvqDialog) {
                        this.ListController.SetActiveListItemAndFoldout(this)
                    } else {
                        if (this.ListController.SetActiveListItem) {
                            this.ListController.SetActiveListItem(this)
                        }
                    }
                }
            };
            this.ClearActiveItem = function(B) {
                if (g.children().length > 0) {
                    this.StyleActiveItem(-1)
                } else {
                    if (!B) {
                        if (this.ActiveItem) {
                            if (this.ListController) {
                                if (this.ListController.SetActiveListItemAndFoldout && this.ActiveItem.AvqDialog) {
                                    this.ActiveItem = null;
                                    this.ListController.SetActiveListItemAndFoldout(this)
                                } else {
                                    if (this.ListController.SetActiveListItem) {
                                        this.ActiveItem = null;
                                        this.ListController.SetActiveListItem(this)
                                    }
                                }
                            } else {
                                this.ActiveItem = null
                            }
                        } else {
                            if (this.ListController) {
                                if (this.ListController.SetActiveListItemAndFoldout) {
                                    this.ListController.SetActiveListItemAndFoldout(this)
                                } else {
                                    if (this.ListController.SetActiveListItem) {
                                        this.ListController.SetActiveListItem(this)
                                    }
                                }
                            }
                        }
                    }
                }
            };
            w.Object = this;
            var h = w;
            var o;
            b(w).mousedown(function(B) {
                o = Math.round((B.pageX - b(h).offset().left) + B.pageX)
            });
            g.sortable({disable: true, handle: ".prop-dyn-sortable-item-handle", helper: "clone", start: function(B, C) {
                }, update: function(H, I) {
                    var F = I.item.parent();
                    if (this.Name != F[0].Name) {
                        r.Paint();
                        return
                    }
                    var E = [];
                    var C = Qva.GetBinder(I.item[0].binderid);
                    if (!C.Enabled) {
                        return
                    }
                    F.children("li").each(function() {
                        E.push(this.Name)
                    });
                    var G = I.item[0].Name;
                    var D = jQuery.inArray(G, E);
                    var B;
                    if (this.Object.ExtraIndex != null && this.Object.ExtraIndex >= 0) {
                        B = "." + this.Object.ExtraIndex + ".Remove"
                    } else {
                        B = ".Remove"
                    }
                    if (E.length == 1) {
                        C.Set(E[D] + B, "insertafter", F[0].Name.concat(".Add"), true)
                    } else {
                        if (E[D - 1] == null && E[D + 1] != null) {
                            C.Set(E[D] + B, "insertbefore", E[D + 1] + B, true)
                        } else {
                            if (E[D - 1] != null && E[D + 1] != null) {
                                C.Set(E[D] + B, "insertbefore", E[D + 1] + B, true)
                            } else {
                                if (E[D + 1] == null) {
                                    C.Set(E[D] + B, "insertafter", E[D - 1] + B, true)
                                } else {
                                }
                            }
                        }
                    }
                    v.ActiveItem = {AvqDialog: I.item[0].AvqDialog, Index: D, Name: F[0].Name.concat(".").concat(D), binderid: I.item[0].binderid};
                    if (F[0].Name.match(/(.Chart.Dimension)$/i)) {
                        v.keepDropDownClosed = true
                    }
                }, sort: function(E, F) {
                    var C = b(h);
                    var D = {top: Math.round(C.offset().top), right: Math.round(C.width() + C.offset().left), bottom: Math.round(C.offset().top + C.height()), left: Math.round(C.offset().left)};
                    if ((E.originalEvent.clientX > D.left) && (E.originalEvent.clientX < o)) {
                        F.helper.css("left", D.left)
                    }
                    if (g.sortable("option", "axis") == "y") {
                        if (F.helper.offset().top <= D.top) {
                            F.helper.css("top", D.top)
                        }
                        if ((F.helper.offset().top + F.helper.height()) >= D.bottom) {
                            F.helper.css("top", (D.bottom - F.helper.height()))
                        }
                    } else {
                        if (E.originalEvent.clientY > D.top && F.helper.offset().top < D.top) {
                            F.helper.css("top", D.top)
                        }
                        if (E.originalEvent.clientY < D.bottom && ((F.helper.offset().top + F.helper.height()) > D.bottom)) {
                            F.helper.css("top", (D.bottom - F.helper.height()))
                        }
                    }
                    var B = {top: Math.round(F.helper.offset().top), right: Math.round(F.helper.offset().left + F.helper.width()), bottom: Math.round(F.helper.offset().top + F.helper.height()), left: Math.round(F.helper.offset().left)};
                    if (B.bottom >= D.bottom && (B.top <= D.bottom && B.left >= D.left && B.left <= D.right)) {
                        h.scrollTop = h.scrollTop + 10
                    } else {
                        if (B.top - 1 <= D.top && (B.bottom >= D.top && B.left >= D.left && B.left <= D.right)) {
                            h.scrollTop = h.scrollTop - 10
                        }
                    }
                }, scroll: true, containment: "body", appendTo: "body"});
            var m = w.getElementsByTagName("li")[0];
            this.Li = m.innerHTML.replace(/avqcol/gi, "avq");
            this.LiAttr = [];
            for (var q = 0; q < m.attributes.length; q++) {
                this.LiAttr[this.LiAttr.length] = {name: m.attributes[q].name, value: m.attributes[q].value}
            }
            if (IS_IE && IE_DOCMODE < 8) {
                this.LiAttr[this.LiAttr.length] = {name: "class", value: m.className}
            }
            w.innerHTML = "";
            this.Managers = {};
            this.Paint = Qva.Mgr.ulList.prototype.Paint
        } else {
            var k = w.getElementsByTagName("tr")[0].getElementsByTagName("td");
            this.Cells = [];
            for (var j = 0; j < k.length; ++j) {
                this.Cells[j] = k[j].innerHTML.replace("avqcol=", "avq=")
            }
            w.deleteRow(0);
            this.Managers = {}
        }
    };
    Qva.Mgr.list.prototype.Inside = function(j, h) {
        if (h != this.Accept) {
            return null
        }
        var f = b(this.Element);
        var g = f.offset();
        if (j.x > g.left && j.x < g.left + f.width() && j.y > g.top && j.y < g.top + f.height()) {
            return{Element: {Name: this.Name + ".Add"}, VerticalPosition: "insertafter", listobject: this}
        }
        return null
    };
    Qva.Mgr.ulList.prototype.Paint = function(p, j, q) {
        if (!j) {
            p = this.mode;
            j = this.node;
            q = this.prefix
        } else {
            this.mode = p;
            this.node = j;
            this.prefix = q
        }
        this.Touched = true;
        var m = this.Element;
        var r = m.getElementsByTagName("li");
        b(this.Element).children("li").each(function() {
            var y = b(this);
            y.children(".prop-dyn-dynamic-dropdown-wrapper").children(".prop-dyn-dynamic-dropdown").dynamicdropdown("destroy")
        });
        m.style.display = Qva.MgrGetDisplayFromMode(this, p);
        this.Accept = j.getAttribute("accept");
        var o = parseInt(j.getAttribute("value"));
        if (isNaN(o)) {
            return
        }
        var l = false;
        if (!isNaN(this.RowCount) && o > this.RowCount) {
            l = true
        }
        this.RowCount = o;
        var x = Qva.GetBinder(m.binderid);
        while (0 < r.length) {
            var f = r.length - 1;
            m.removeChild(r[f]);
            this.RemoveManagers(this.Name + "." + f)
        }
        var n = (j.getAttribute("mode") == "disabled") ? true : false;
        var w = b(m);
        w.sortable("option", "disabled", n);
        if (this.Accept && this.Accept.length > 0) {
            if (!w.sortable("option", "connectWith")) {
                w.attr("data-list-type", this.Accept);
                w.sortable("option", "connectWith", "[data-list-type='" + this.Accept + "']")
            }
        } else {
            if (!w.sortable("option", "axis")) {
                w.sortable("option", "axis", "y")
            }
        }
        if (this.RowCount == 0) {
            this.ClearActiveItem()
        } else {
            while (this.RowCount > r.length) {
                var f = r.length;
                var k = new Qva.Scanner(this);
                var v = document.createElement("li");
                var h = this.LiAttr.length;
                if (IS_IE && IE_DOCMODE < 8) {
                    h--;
                    v.className = this.LiAttr[this.LiAttr.length - 1].value
                }
                for (var u = 0; u < h; u++) {
                    switch (this.LiAttr[u].name) {
                        case"class":
                            v.setAttribute(this.LiAttr[u].name, this.LiAttr[u].value);
                            break;
                        case"name":
                            v.setAttribute(this.LiAttr[u].name, this.LiAttr[u].value);
                            break;
                        case"avq":
                            v.setAttribute(this.LiAttr[u].name, this.LiAttr[u].value);
                            break
                        }
                }
                v.innerHTML = this.Li;
                v.Name = this.Name;
                v.Index = f;
                v.binderid = m.binderid;
                m.appendChild(v);
                if (b(m).height() < (b(v).height() * this.RowCount)) {
                    var s = 310;
                    b(v).width(s)
                }
                k.Scan(v, v.Name + "." + f, this);
                var g = v.Name.substr(v.Name.lastIndexOf(".") + 1);
                if (isNaN(g)) {
                    v.Name += "." + f
                }
                if (l && f == this.RowCount - 1 && !this.keepDropDownClosed) {
                    this.SetActiveItem(v);
                    b(v).find("span[propicontype='tool']").attr("newrow", "true");
                    b(v).find(".prop-dyn-dynamic-dropdown").attr("newrow", "true")
                } else {
                    if (f == 0) {
                        this.InitActiveItem(v)
                    }
                }
            }
            this.SetActiveItem(this.ActiveItem, true);
            delete this.keepDropDownClosed
        }
        if (n) {
            b(m).children("li").each(function() {
                b(this).find("*").each(function() {
                    if (this.closeDynamicDropdown) {
                        this.closeDynamicDropdown()
                    }
                    var y = b(this);
                    if (y.hasClass("prop-dyn-dynamic-dropdown")) {
                        y.dynamicdropdown("option", "disabled", true);
                        y.attr("readonly", true)
                    }
                    if (this.tagName == "INPUT") {
                        b(this).addClass("prop-dyn-dimmed");
                        if (IS_IE && IE_VERSION < 9) {
                            this.onselectstart = function() {
                                this.blur();
                                return false
                            }
                        } else {
                            this.onmousedown = function() {
                                this.blur();
                                return false
                            }
                        }
                    }
                    y.unbind()
                })
            });
            b(m).prev().children(".prop-icon-24x24:eq(0)").addClass("prop-dyn-transparency")
        }
        this.PaintChildren(j, ".")
    };
    Qva.Mgr.list.prototype.Paint = function(l, h, m) {
        this.Touched = true;
        var k = this.Element;
        k.style.display = Qva.MgrGetDisplayFromMode(this, l);
        var n = parseInt(h.getAttribute("value"));
        if (isNaN(n)) {
            return
        }
        var p = Qva.GetBinder(k.binderid);
        if (this.Element.tagName.toUpperCase() == "UL") {
            return
        }
        while (n < k.rows.length) {
            var f = k.rows.length - 1;
            k.deleteRow(f);
            this.RemoveManagers(this.Name + "." + f)
        }
        while (n > k.rows.length) {
            var f = k.rows.length;
            var q = k.insertRow(-1);
            for (var g = 0; g < this.Cells.length; ++g) {
                var o = q.insertCell(-1);
                o.innerHTML = this.Cells[g]
            }
            var j = new Qva.Scanner(this);
            j.Scan(q, this.Name + "." + f, this)
        }
        this.PaintChildren(h, ".")
    };
    Qva.Mgr.list.prototype.PaintChildren = function(j, h) {
        for (var n = j.firstChild; n != null; n = n.nextSibling) {
            var g = n.getAttribute("name");
            if (g == null) {
                continue
            }
            var m = n.getAttribute("mode");
            switch (m) {
                case"hidden":
                    m = "h";
                    break;
                case"enabled":
                    m = "e";
                    break;
                default:
                    m = "d";
                    break
            }
            var l = this.Managers[this.Name + h + g];
            if (l) {
                for (var f = 0; f < l.length; ++f) {
                    var k = l[f];
                    k.Paint(m, n, g)
                }
            }
            this.PaintChildren(n, h + g + ".")
        }
    };
    Qva.Mgr.list.prototype.Append = function() {
    };
    Qva.Mgr.list.prototype.AddManager = function(g) {
        g.PageBinder = this;
        g.Touched = false;
        var f = this.Managers[g.Name];
        if (f == null) {
            f = [];
            this.Managers[g.Name] = f
        }
        f.push(g)
    };
    Qva.Mgr.list.prototype.RemoveManagers = function(g) {
        for (var f in this.Managers) {
            if (f.indexOf(g) != 0) {
                continue
            }
            this.Managers[f] = null
        }
    };
    Qva.Mgr.ulList.prototype.RemoveManagers = Qva.Mgr.list.prototype.RemoveManagers;
    Qva.Mgr.ulList.prototype.AddManager = Qva.Mgr.list.prototype.AddManager;
    Qva.Mgr.row = function(g, j, f, l, h) {
        if (!Qva.MgrSplit(this, f, l)) {
            return
        }
        this.Attr = "mode";
        g.AddManager(this);
        this.Element = j;
        g.Append(this, this.Name, "value");
        this.row = j;
        while (this.row.tagName != "TR") {
            this.row = this.row.parentNode
        }
        var k = false;
        if (h) {
            if (h == "drag") {
                k = true
            } else {
                if (h.substr(0, 4) == "drag") {
                    k = true
                }
            }
        }
        if (k) {
            this.dragObj = {Name: this.Name, Drag: j}
        }
        var n = b(this.row);
        this.$cloakables = b(n.children().find("[proptype='cloakable']"));
        var m = this;
        var o = this.row;
        n.bind("mouseenter", function(p) {
            if (!o.disabled) {
                n.addClass("prop-dyn-sortable-item-highlighted")
            }
            Qva.ShowTooltip(p, o);
            m.$cloakables.removeClass("prop-hidden")
        });
        n.bind("mouseleave", function(p) {
            if (!o.disabled) {
                n.removeClass("prop-dyn-sortable-item-highlighted")
            }
            Qva.HideTooltip();
            m.$cloakables.addClass("prop-hidden")
        });
        this.binder = Qva.GetBinder(g.ID);
        o.binderid = g.ID;
        o.Name = this.Name
    };
    Qva.Mgr.row.prototype.Paint = function(m, k) {
        this.Touched = true;
        var l = this.Element;
        var s = b(l);
        var v = this.row;
        v.disabled = (m != "e");
        if (!v.disabled) {
            this.row.dragObj = this.dragObj
        }
        v.style.display = Qva.MgrGetDisplayFromMode(this, m);
        var u = this.binder;
        var p = k.getAttribute("icon");
        if (!p) {
            p = l.getAttribute("icon")
        }
        if (p) {
            var g = (p.split(":")[0]).toLowerCase();
            switch (g) {
                case"web":
                    var o = (p.split(":")[1]).toLowerCase();
                    s.addClass("prop-nso-" + o).addClass("prop-left");
                    break;
                case"addbm":
                    var h = u.BuildBinaryUrl(k.getAttribute("path"), null, p);
                    s.attr("src", h);
                    break;
                case"extension":
                    if (!s.children().is("img")) {
                        s.append(b('<img src="' + u.BuildBinaryUrl(k.getAttribute("path"), null, p) + '">'))
                    }
                    break
                }
        }
        var n = k.getElementsByTagName("tooltip");
        var r = n.length;
        if (r > 0) {
            var f = [];
            for (var j = 0; j < r; ++j) {
                f.push(n[j].getAttribute("text"))
            }
            v.Tooltip = f
        } else {
            v.Tooltip = null
        }
        this.$cloakables.addClass("prop-hidden");
        for (var q = 0; q < v.cells.length; ++q) {
            cell = v.cells[q];
            if (q <= v.cells.length) {
                if (v.dragObj) {
                    cell.onmousedown = Qva.DragDrop.mouseDown
                } else {
                    cell.onclick = function() {
                        if (v.disabled) {
                            return
                        }
                        if (!u.Enabled) {
                            return
                        }
                        u.Set(v.Name, "value", v.Value, true)
                    }
                }
            }
        }
        if (v.dragObj) {
            v.dragObj.Type = k.getAttribute("content");
            v.dragObj.Value = k.getAttribute("value")
        } else {
            v.Value = k.getAttribute("value")
        }
    };
    Qva.Mgr.listRow = function(f, h, g, j, l) {
        if (!Qva.MgrSplit(this, g, j)) {
            return
        }
        this.Attr = "mode";
        f.AddManager(this);
        this.Element = h;
        f.Append(this, this.Name, "value");
        var k = h;
        k.onclick = function() {
            if (k.disabled) {
                return
            }
            var m = Qva.GetBinder(k.binderid);
            if (!m.Enabled) {
                return
            }
            m.Set(k.Name, "value", k.Value, true)
        };
        k.binderid = f.binderid;
        k.Name = this.Name
    };
    Qva.Mgr.listRow.prototype.Paint = function(l, j) {
        this.Touched = true;
        var k = this.Element;
        var q = k;
        q.disabled = (l != "e");
        q.style.display = Qva.MgrGetDisplayFromMode(this, l);
        var n = j.getAttribute("icon");
        if (!n) {
            n = k.getAttribute("icon")
        }
        if (n) {
            var p = Qva.GetBinder(k.binderid);
            if (q.disabled) {
                n += ".DISABLED"
            }
            var g = p.BuildBinaryUrl(j.getAttribute("path"), null, n);
            k.src = g
        }
        var m = j.getElementsByTagName("tooltip");
        var o = m.length;
        if (o > 0) {
            var f = [];
            for (var h = 0; h < o; ++h) {
                f.push(m[h].getAttribute("text"))
            }
            q.Tooltip = f
        } else {
            q.Tooltip = null
        }
        if (q.dragObj) {
            q.dragObj.Type = j.getAttribute("content");
            q.dragObj.Value = j.getAttribute("value")
        } else {
            q.Value = j.getAttribute("value")
        }
    };
    Qva.dropDialog = {hidden: false, x: 0, y: 0, element: null, create: function(j) {
            if (document.body === null || (document.body !== null && typeof(document.body.binderid) === "undefined")) {
                return
            }
            var n = Qva.GetBinder(document.body.binderid);
            if (Qva.dropDialog.element === null) {
                Qva.dropDialog.element = document.createElement("div");
                Qva.dropDialog.element.style.position = "absolute";
                Qva.dropDialog.element.style.zIndex = 666;
                Qva.dropDialog.element.className = "contextdialog";
                Qva.dropDialog.element.onclick = Qva.CancelBubble;
                document.body.appendChild(Qva.dropDialog.element);
                if (IS_TOUCHENABLED) {
                    b(Qva.dropDialog.element).bind("touchend", function(q) {
                        q.stopPropagation()
                    })
                }
            }
            var k = document.createElement("div");
            Qva.dropDialog.element.appendChild(k);
            b(k.parentNode).removeClass("contextdialog").addClass("contextdialog-tool-window").addClass("popup-tool-window_container").addClass("popup-shadow");
            var h = document.createElement("div");
            b(h).addClass("ngdia-popup-toolwindow-subdialog-header").addClass("popup-tool-window_span-14");
            var p = document.createElement("div");
            var f = document.createElement("span");
            p.setAttribute("avq", "text:Document.ContextDialog.Title");
            b(p).addClass("popup-tool-window_clear").addClass("popup-tool-window_span-8");
            b(f).addClass("prop-icon-24x24").addClass("prop-contextdialog-icon-close").addClass("popup-grid_right").addClass("popup-grid_last");
            b(f).click(Qva.dropDialog.hide);
            h.appendChild(f);
            var p = document.createElement("span");
            p.setAttribute("avq", "text:Document.ContextDialog.Title");
            h.appendChild(p);
            k.appendChild(h);
            var o = document.createElement("br");
            b(o).css("clear", "both");
            k.appendChild(o);
            var m = document.createElement("div");
            var l = document.createElement("ul");
            b(l).attr("avq", "list:Document.ContextDialog.Option").attr("istoolwindow", "true").addClass("popup-tool-window-ul");
            l.innerHTML = '<li class="popup-tool-window-ul-li" avq="listRow:.Name"><span avq="text:.Name"></span></li>';
            b(m).append(l);
            k.appendChild(m);
            Qva.dropDialogMgr = new Qva.Mgr.toolwindowbody(n, Qva.dropDialog.element, "Document.ContextDialog");
            Qva.dropDialogMgr.Scan(document.body.Name);
            Qva.dropDialogMgr.Element.style.display = j ? "none" : "";
            try {
                Qva.dropDialog.element.focus()
            } catch (g) {
            }
        }, show: function() {
            Qva.dropDialog.element.style.display = ""
        }, showAt: function(f, g) {
            Qva.dropDialog.x = f;
            Qva.dropDialog.y = g;
            Qva.dropDialog.element.style.left = f + "px";
            Qva.dropDialog.element.style.top = g + "px";
            Qva.dropDialog.show()
        }, hide: function() {
            Qva.dropDialog.element.style.display = "none";
            Qva.dropDialog.hidden = true;
            Qva.GetObjectBinder(Qva.dropDialog.element).Set(Qva.dropDialogMgr.Name, "action", "close", true)
        }};
    QvaExpressionEditor = {Insert: function(m, g) {
            if (!g) {
                return
            }
            var j = g.parentNode.parentNode.firstChild;
            while (j && j.tagName != "TEXTAREA") {
                if (!j.tagName) {
                    j = j.nextSibling
                } else {
                    j = j.firstChild
                }
            }
            if (!j) {
                Assert(false);
                return
            }
            if (j.setSelectionRange) {
                var k = j.ieselstart ? j.ieselstart : j.selectionStart;
                var l = j.ieselend ? j.ieselend : j.selectionEnd;
                var f = k + m.length;
                if (m[m.length - 1] == ")") {
                    --f
                }
                j.value = j.value.substring(0, k) + m + j.value.substring(k, l) + j.value.substring(l, j.value.length);
                j.setSelectionRange(f, f);
                j.focus()
            } else {
                if (document.selection && document.selection.createRange) {
                    j.focus();
                    var h = j.ierange ? j.ierange : document.selection.createRange();
                    h.text = m + h.text;
                    if (m.charAt(m.length - 1) == ")") {
                        h.moveStart("character", -1);
                        h.moveEnd("character", -1);
                        h.select()
                    }
                }
            }
            Qva.ActiveObjectsCloak = true
        }, Update: function(g) {
            var f = g.target || g.srcElement;
            var h = f.options[f.selectedIndex].value;
            if (!h) {
                h = f.options[f.selectedIndex].text
            }
            this.Insert(h, f);
            if (g.preventDefault) {
                g.preventDefault()
            } else {
                g.returnValue = false
            }
            f.selectedIndex = 0;
            return false
        }}
})(jQuery);
(function(a, b) {
    Qva.Touch = {GetCoordinatesForElem: function(c) {
            var d = {x: 0, y: 0};
            d = a(c).offset();
            d = {x: d.left, y: d.top};
            return d
        }, EventListenerExists: typeof(document.addEventListener) !== "undefined", SelectionPopup: null, Restore: {AddTouchSupport: function(c) {
                c.Touch = {FingerMoved: false};
                function f(g) {
                    c.Touch.FingerMoved = true
                }
                function d(g) {
                    g.preventDefault();
                    g.stopPropagation();
                    this.ontouchmove = null;
                    this.ontouchend = null;
                    Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Restore.TouchEnd. FingerMoved:" + c.Touch.FingerMoved, Qva.ConsoleLog.SeverityTypes.Verbose);
                    if (!c.Touch.FingerMoved) {
                        c.Restore()
                    }
                }
                c.Element.ontouchstart = function(g) {
                    g.preventDefault();
                    g.stopPropagation();
                    this.ontouchmove = f;
                    this.ontouchend = d;
                    c.Touch.FingerMoved = false
                };
                Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Added touch support for RestoreObj:" + c.Name, Qva.ConsoleLog.SeverityTypes.Verbose)
            }}, Listbox: {AddTouchSupport: function(g) {
                var f = function(l, k) {
                    return Math.max(0, Math.min(l.rows - l.visible_rows, Math.round(-k / l.rowHeight)))
                };
                var c = function(r) {
                    var n = this.Touch, l = isNaN(n.TotalScrollX) ? 0 : n.TotalScrollX, p = isNaN(n.TotalScrollY) ? 0 : n.TotalScrollY, o = this.children[0].Mgr, q = r.target;
                    Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Listbox[" + n.Mgr.Name + "].touchStart", Qva.ConsoleLog.SeverityTypes.Normal);
                    if (r.touches.length > r.changedTouches.length) {
                        return true
                    }
                    if (Qva.Touch.Listbox.SelectMenu && Qva.Touch.Listbox.SelectMenu.Visible && Qva.Touch.Listbox.SelectMenu.ListboxObject !== n) {
                        Qva.Touch.Listbox.SelectMenu.Hide(true)
                    }
                    if (Qva.Touch.SelectionPopup) {
                        Qva.Touch.SelectionPopup.Hide()
                    }
                    var k = o.scroll_obj.getPosition();
                    if (k.x !== l || k.y !== p) {
                        n.TotalScrollX = k.x;
                        n.TotalScrollY = k.y;
                        o.scroll_obj.setTransitionTime("0ms");
                        o.scroll_obj.setPosition(n.TotalScrollX, n.TotalScrollY)
                    } else {
                        if (r.target.className.indexOf("Qv_CellIcon") < 0) {
                            r.stopPropagation();
                            r.preventDefault();
                            n.CellSelectable = (q.parentNode.offset != b && o.Lines[q.parentNode.offset] && o.Lines[q.parentNode.offset].selecttype);
                            if (!n.MultiSelectMode && !o.readOnly && !o.disabled && n.CellSelectable) {
                                n.SelectRow = setTimeout(function() {
                                    n.MultiSelectModeInitializing = true;
                                    Qva.Touch.Listbox.PreSelectMulti({row: q, lb: n, contentElem: this});
                                    n.MultiSelectMode = true
                                }, 500)
                            }
                        }
                    }
                    n.TouchStartX = r.changedTouches ? r.changedTouches[0].clientX : r.clientX;
                    n.TouchStartY = r.changedTouches ? r.changedTouches[0].clientY : r.clientY;
                    n.TouchIdentifier = r.changedTouches ? r.changedTouches[0].identifier : "i";
                    n.TouchPointList = [];
                    if (Qva.Touch.EventListenerExists) {
                        this.addEventListener("touchmove", h, true);
                        this.addEventListener("touchend", d, true)
                    } else {
                        this.ontouchmove = h;
                        this.ontouchend = d
                    }
                    n.FingerMoved = false;
                    n.TouchStartTime = r.timeStamp;
                    return true
                };
                var j = function(q, p) {
                    var n = 0, k = q.changedTouches.length;
                    for (; n < k; ++n) {
                        if (q.changedTouches[n].identifier == p.TouchIdentifier) {
                            break
                        }
                    }
                    if (n >= q.changedTouches.length) {
                        return false
                    }
                    var m = q.changedTouches[n].clientX - p.TouchStartX;
                    var l = q.changedTouches[n].clientY - p.TouchStartY;
                    var o = q.timeStamp - p.TouchStartTime;
                    p.TouchPointList.push({dx: m, dy: l, dt: o});
                    return true
                };
                var h = function(v) {
                    var u = this.Touch, w = isNaN(u.TotalScrollX) ? 0 : u.TotalScrollX, p = isNaN(u.TotalScrollY) ? 0 : u.TotalScrollY, o = "", y = this.children[0].Mgr, s = 0, r = 0, x = null, q = 0, n = 0, z = 0, l = 0;
                    if (!j(v, u)) {
                        return true
                    }
                    x = u.TouchPointList[u.TouchPointList.length - 1];
                    l = Math.abs(x.dx);
                    z = Math.abs(x.dy);
                    if (z < 3) {
                        p += x.dy
                    }
                    if (l < 3) {
                        w += x.dx
                    }
                    if (z < 3 && l < 3) {
                        return true
                    }
                    s = x.dx + w;
                    r = x.dy + p;
                    clearTimeout(u.SelectRow);
                    u.FingerMoved = true;
                    v.stopPropagation();
                    v.preventDefault();
                    if (y.single_col_scroll) {
                        var m = y.x_max_scroll
                    } else {
                        if (y.columns <= y.visible_cols) {
                            s = 0
                        }
                        var m = Math.max(0, (y.columns - y.visible_cols) * y.colwidth)
                    }
                    if (-s < 0) {
                        s = s / 3
                    }
                    if (-s > m) {
                        s = (s + m) / 3 - m
                    }
                    if (y.rows <= y.visible_rows) {
                        r = 0
                    }
                    var k = Math.max(0, (y.rows - y.visible_rows) * y.rowHeight);
                    if (-r < 0) {
                        r = r / 3
                    }
                    if (-r > k) {
                        r = (r + k) / 3 - k
                    }
                    u.TmpScrollX = s;
                    u.TmpScrollY = r;
                    y.scroll_obj.setTransitionTime("0ms");
                    y.scroll_obj.setPosition(s, r);
                    y.PageBinder.QueuePostPaintMessage(y);
                    return false
                };
                var d = function(v) {
                    var s = this.Touch, w = isNaN(s.TotalScrollX) ? 0 : s.TotalScrollX, n = isNaN(s.TotalScrollY) ? 0 : s.TotalScrollY, y = this.children[0].Mgr, x = null, q = 0, p = 0, o = 0, l = 0, r = 0, m = {}, u = v.target;
                    Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Listbox[" + s.Mgr.Name + "].touchEnd. FingerMoved:" + s.FingerMoved + " :: target row offset:" + u.parentNode.offset, Qva.ConsoleLog.SeverityTypes.Normal);
                    clearTimeout(s.SelectRow);
                    if (!j(v, s)) {
                        return true
                    }
                    x = s.TouchPointList[s.TouchPointList.length - 1];
                    for (r = s.TouchPointList.length - 1; r > 0 && x.dt - s.TouchPointList[r - 1].dt < 200; --r) {
                    }
                    q = (x.dx - s.TouchPointList[r].dx) + x.dx + w;
                    p = (x.dy - s.TouchPointList[r].dy) + x.dy + n;
                    o = f(y, p);
                    p = y.rowHeight * -o;
                    if (y.single_col_scroll) {
                        var k = y.x_max_scroll;
                        if (-q < 0) {
                            q = 0
                        }
                        if (-q > k) {
                            q = -k
                        }
                    } else {
                        l = Math.max(0, Math.min(y.columns - y.visible_cols, Math.round(-q / y.colwidth)));
                        q = y.colwidth * -l
                    }
                    y.scroll_obj.setTransitionTime("800ms");
                    y.scroll_obj.setPosition(q, p);
                    y.PageBinder.QueuePostPaintMessage(y);
                    s.TotalScrollX = q;
                    s.TotalScrollY = p;
                    if (v.target.className.indexOf("Qv_CellIcon") < 0) {
                        v.stopPropagation();
                        v.preventDefault();
                        if (!s.FingerMoved && !y.readOnly && !y.disabled && s.CellSelectable) {
                            if (s.MultiSelectMode && !s.MultiSelectModeInitializing) {
                                Qva.Touch.Listbox.PreSelectMulti({row: u, lb: s, contentElem: this})
                            } else {
                                if (!s.MultiSelectMode) {
                                    Qva.Touch.Listbox.PreSelectSingle({row: u, lb: s});
                                    s.ResetScroll()
                                }
                            }
                        }
                    }
                    s.MultiSelectModeInitializing = false;
                    if (Qva.Touch.EventListenerExists) {
                        this.removeEventListener("touchmove", h, false);
                        this.removeEventListener("touchend", d, false)
                    } else {
                        this.ontouchmove = null;
                        this.ontouchend = null
                    }
                    return true
                };
                g.Touch = {ElementToScroll: g.children[0].children[0], Scrollbar: new Qva.Touch.Scrollbar(g), Mgr: g.children[0].Mgr, MultiSelectMode: false, TouchStartX: 0, TouchStartY: 0, TouchStartTime: 0, TmpScrollX: 0, TmpScrollY: 0, TotalScrollY: 0, TotalScrollX: 0, FingerMoved: false, ToggleSelect: false, ResetScroll: function() {
                        this.TotalScrollX = 0;
                        this.TotalScrollY = 0;
                        this.Mgr.scroll_obj.setTransitionTime("0ms");
                        this.Mgr.scroll_obj.setPosition(0, 0)
                    }};
                g.Touch.ElementToScroll.style.webkitTransform = "translate3d(0px, 0px, 0)";
                g.Touch.ElementToScroll.style.webkitTransitionTimingFunction = "cubic-bezier(0,0,0.25,1)";
                g.Touch.ElementToScroll.style.webkitTransitionProperty = "-webkit-transform";
                g.addEventListener("touchstart", c, true);
                g.Touch.Mgr.Remove = function() {
                    if (Qva.Touch.Listbox.SelectMenu && Qva.Touch.Listbox.SelectMenu.Visible && Qva.Touch.Listbox.SelectMenu.ListboxObject === g.Touch) {
                        Qva.Touch.Listbox.SelectMenu.Hide(true)
                    }
                }
            }}, Chart: {DelayBeforePopup: 500, Pinch: false, AddTouchSupport: function(g) {
                function c() {
                    if (g.fingerDown) {
                        clearTimeout(g.fingerDown);
                        delete (g.fingerDown);
                        Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("clear", Qva.ConsoleLog.SeverityTypes.Normal)
                    }
                }
                function d(j) {
                    var h = j.targetTouches ? j.targetTouches[0].pageX : j.pageX, k = j.targetTouches ? j.targetTouches[0].pageY : j.pageY;
                    Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Chart.touchStart:" + g.Name, Qva.ConsoleLog.SeverityTypes.Normal);
                    if (Qva.Touch.Listbox.SelectMenu && Qva.Touch.Listbox.SelectMenu.Visible) {
                        Qva.Touch.Listbox.SelectMenu.Hide(true)
                    }
                    if (!g.IsSelectable) {
                        return true
                    }
                    if (j.touches.length !== 1) {
                        Qva.Touch.Chart.Pinch = true;
                        return true
                    }
                    if (IS_ANDROID && Qva.Touch.Chart.Pinch === true) {
                        Qva.Touch.Chart.Pinch = false;
                        return true
                    }
                    g.fingerDown = setTimeout(function() {
                        Qva.Touch.SelectionPopup.Show(g, h, k);
                        c()
                    }, Qva.Touch.Chart.DelayBeforePopup);
                    if (Qva.Touch.EventListenerExists) {
                        g.Element.addEventListener("touchend", f, false)
                    } else {
                        g.Element.ontouchend = f
                    }
                    if (IS_ANDROID) {
                        j.preventDefault()
                    }
                    return true
                }
                function f(h) {
                    Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Chart.touchEnd", Qva.ConsoleLog.SeverityTypes.Verbose);
                    c();
                    if (h.targetTouches.length > 0) {
                        return false
                    }
                    if (Qva.Touch.EventListenerExists) {
                        g.Element.removeEventListener("touchend", f, false)
                    } else {
                        g.Element.ontouchend = null
                    }
                    return false
                }
                g.Element.className += " Suppress-Callout";
                g.Element.ontouchstart = d;
                g.Remove = function() {
                    if (Qva.Touch.SelectionPopup && Qva.Touch.SelectionPopup.ChartElement == this.Element) {
                        Qva.Touch.SelectionPopup.Hide()
                    }
                };
                if (Qva.Touch.SelectionPopup === null) {
                    Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Hover object has been created...", Qva.ConsoleLog.SeverityTypes.Normal);
                    Qva.Touch.SelectionPopup = new Qva.Touch.HoverObject(Qva.GetBinder(g.PageBinder.binderid).isSmallDevices)
                }
            }}};
    Qva.Touch.HoverObject = function(c) {
        Resizer = function(h, g, f, d) {
            var j = document.createElement("div");
            j.className = "Touch-ResizeHandle-Inner";
            this.Element = document.createElement("div");
            this.Element.className = "Touch-ResizeHandle-Outer";
            this.Element.appendChild(j);
            this.Element.ObjRef = this;
            if (d) {
                this.OnResize = d
            }
            if (f) {
                this.BeforeResize = f
            }
            this.SetPosition(h, g);
            this.Element.ontouchstart = this.TouchStart
        };
        Resizer.prototype = {Element: null, OnResize: null, BeforeResize: null, TouchCoord: {x: 0, y: 0}, TouchStart: function(d) {
                Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Resizer.touchStart fired", Qva.ConsoleLog.SeverityTypes.Verbose);
                this.ontouchmove = this.ObjRef.TouchMove;
                this.ontouchend = this.ObjRef.TouchEnd;
                this.ObjRef.TouchCoord.x = d.targetTouches ? d.targetTouches[0].clientX : d.clientX;
                this.ObjRef.TouchCoord.y = d.targetTouches ? d.targetTouches[0].clientY : d.clientY;
                if (this.ObjRef.BeforeResize.fn) {
                    this.ObjRef.BeforeResize.fn.apply(this.ObjRef.BeforeResize.scope || this, [d])
                }
                d.stopPropagation();
                d.preventDefault()
            }, TouchMove: function(h) {
                Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Resizer.touchMove fired", Qva.ConsoleLog.SeverityTypes.Verbose);
                var j = h.targetTouches ? h.targetTouches[0].clientX : h.clientX, g = h.targetTouches ? h.targetTouches[0].clientY : h.clientY, d = this.ObjRef.TouchCoord.x - j, f = this.ObjRef.TouchCoord.y - g;
                this.ObjRef.TouchCoord.x -= d;
                this.ObjRef.TouchCoord.y -= f;
                if (this.ObjRef.OnResize.fn) {
                    this.ObjRef.OnResize.fn.apply(this.ObjRef.OnResize.scope, [h, {width: d, height: f}])
                }
                h.stopPropagation();
                h.preventDefault()
            }, TouchEnd: function(d) {
                Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Resizer.touchEnd fired", Qva.ConsoleLog.SeverityTypes.Verbose);
                this.ontouchmove = null;
                this.ontouchend = null;
                d.stopPropagation();
                d.preventDefault()
            }, SetPosition: function(d, f) {
                this.Element.style.left = d - 7 + "px";
                this.Element.style.top = f - 7 + "px"
            }};
        SelectionRect = function(g, f, h, j, d) {
            this.Element = document.createElement("div");
            this.Element.className = "TouchSelectionRect img_move_arrows";
            this.Element.style.border = "2px solid green";
            this.Size.defaultWidth = g;
            this.Size.defaultHeight = f;
            this.Element.ObjRef = this;
            this.Element.OnMove = j;
            this.Element.BeforeMove = h;
            this.Element.AfterMove = d;
            this.SetSize(g, f);
            this.Element.ontouchstart = this.TouchStart;
            return this
        };
        SelectionRect.prototype = {Element: {BeforeMove: {fn: null, scope: null}, OnMove: {fn: null, scope: null}, AfterMove: {fn: null, scope: null}, ObjRef: null}, StartTouch: {x: 0, y: 0}, Size: {defaultWidth: 0, defaultHeight: 0, currentWidth: 0, currentHeight: 0}, TouchStart: function(d) {
                Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("SelectionRect.touchStart fired", Qva.ConsoleLog.SeverityTypes.Verbose);
                this.ObjRef.StartTouch.x = d.targetTouches ? d.targetTouches[0].clientX : d.clientX;
                this.ObjRef.StartTouch.y = d.targetTouches ? d.targetTouches[0].clientY : d.clientY;
                this.ontouchmove = this.ObjRef.TouchMove;
                this.ontouchend = this.ObjRef.TouchEnd;
                if (this.BeforeMove.fn) {
                    this.BeforeMove.fn.apply(this.BeforeMove.scope || this, [d, this.ObjRef.StartTouch])
                }
                d.stopPropagation();
                d.preventDefault()
            }, TouchMove: function(j) {
                Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("SelectionRect.touchMove fired", Qva.ConsoleLog.SeverityTypes.Verbose);
                var k = this.ObjRef.StartTouch, h = j.targetTouches ? j.targetTouches[0].clientX : j.clientX, g = j.targetTouches ? j.targetTouches[0].clientY : j.clientY, f = k.x - h, d = k.y - g;
                if (this.OnMove.fn) {
                    this.OnMove.fn.apply(this.OnMove.scope, [j, {x: f, y: d}])
                }
                j.stopPropagation();
                j.preventDefault()
            }, TouchEnd: function(d) {
                Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("SelectionRect.touchEnd fired", Qva.ConsoleLog.SeverityTypes.Verbose);
                d.returnValue = false;
                this.ontouchmove = null;
                this.ontouchend = null;
                if (this.AfterMove.fn) {
                    this.AfterMove.fn.apply(this.AfterMove.scope, [d])
                }
            }, SetSize: function(f, d) {
                this.Size.currentWidth = f;
                this.Size.currentHeight = d;
                this.Element.style.width = f + "px";
                this.Element.style.height = d + "px"
            }, ResetSize: function() {
                this.SetSize(this.Size.defaultWidth, this.Size.defaultHeight)
            }};
        this.IsSmallDevices = c;
        this.Element = document.createElement("div");
        this.Element.HoverRef = this;
        this.Element.className = "Suppress-Callout";
        this.Element.style.position = "absolute";
        this.Element.style.display = "none";
        this.Element.style.zIndex = 999;
        this.Element.IsSelectionPopup = true;
        this.MenuObj = new Qva.Touch.SelectionMenu({SmallDevices: c, AddPointerElem: true, Buttons: [{Fn: this.MakeSelection, Scope: this, CssClass: "img_accept_tick", Text: "Select", Style: {"float": "left"}}, {Fn: this.Hide, Scope: this, CssClass: "img_cancel_cross", Text: "Cancel", Style: {"float": "right"}}], Style: {"margin-left": c ? "0px" : "-15px", display: c ? "none" : ""}});
        if (!c) {
            this.Element.appendChild(this.MenuObj.Element)
        }
        this.SelectionObj = new SelectionRect(this.Size.width, this.Size.height, {fn: this.BeforeMove, scope: this}, {fn: this.OnMove, scope: this}, {fn: this.AfterMove, scope: this});
        this.Element.appendChild(this.SelectionObj.Element);
        this.ResizerObj = new Resizer(this.Size.width, this.Size.height, {fn: this.BeforeResize, scope: this}, {fn: this.OnResize, scope: this});
        this.Element.appendChild(this.ResizerObj.Element);
        document.body.appendChild(this.Element)
    };
    Qva.Touch.HoverObject.prototype = {Element: null, IsSmallDevices: false, ChartElement: null, MenuObj: null, SelectionObj: null, ResizerObj: null, MinWidth: 15, MinHeight: 15, Size: {width: 100, height: 80}, CurrentPos: {left: 0, top: 0}, Limits: {maxWidth: 0, maxHeight: 0, xMin: 0, xMax: 0, yMin: 0, yMax: 0, dragLeft: 0, dragRight: 0, dragTop: 0, dragBottom: 0}, DefineLimits: function() {
            var d = this.IsSmallDevices ? {x: 0, y: Qva.Touch.GetCoordinatesForElem(this.ChartElement).y} : Qva.Touch.GetCoordinatesForElem(this.ChartElement), f = Qva.Touch.GetCoordinatesForElem(this.SelectionObj.Element), k = this.IsSmallDevices ? 0 : getClientHeight(this.MenuObj.Element), h = getClientWidth(this.ChartElement), g = getClientHeight(this.ChartElement), c = getClientWidth(this.SelectionObj.Element), j = getClientHeight(this.SelectionObj.Element);
            this.Limits.xMin = d.x;
            this.Limits.xMax = d.x + h - c;
            this.Limits.yMin = d.y - k;
            this.Limits.yMax = this.IsSmallDevices ? d.y + g : d.y + g - j - k;
            this.Limits.maxWidth = d.x + h - f.x;
            this.Limits.maxHeight = d.y + g - f.y;
            this.Limits.dragLeft = f.x - d.x;
            this.Limits.dragRight = f.x - (d.x + h - c);
            this.Limits.dragTop = f.y - d.y;
            this.Limits.dragBottom = f.y - (d.y + g - j)
        }, Show: function(f, d, h) {
            Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Show popup", Qva.ConsoleLog.SeverityTypes.Normal);
            this.Chart = f;
            this.ChartElement = f.Element;
            if (!f.Element) {
                Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("No chart element", Qva.ConsoleLog.SeverityTypes.Normal)
            }
            this.Element.style.display = "";
            this.Element.style.webkitTransform = "translate3d(0px, 0px, 0)";
            this.DefineLimits();
            var c = d - (this.Size.width / 2), g = h - getClientHeight(this.MenuObj.Element) - (this.Size.height / 2);
            c = Math.max(c, this.Limits.xMin);
            c = Math.min(c, this.Limits.xMax);
            g = Math.max(g, this.Limits.yMin);
            g = Math.min(g, this.Limits.yMax);
            this.Element.style.left = c + "px";
            this.Element.style.top = g + "px";
            this.CurrentPos.left = c;
            this.CurrentPos.top = g;
            this.SelectionObj.ResetSize(this.Size.width, this.Size.height);
            this.ResizerObj.SetPosition(this.Size.width, this.Size.height);
            if (this.IsSmallDevices) {
                this.MenuObj.Element.style.display = ""
            }
        }, Hide: function() {
            Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("HoverObject.Hide", Qva.ConsoleLog.SeverityTypes.Normal);
            this.Element.style.display = "none";
            if (this.IsSmallDevices) {
                this.MenuObj.Element.style.display = "none"
            }
        }, MakeSelection: function() {
            var l = Qva.GetObjectBinder(this.ChartElement), c = this.IsSmallDevices ? {x: 0, y: Qva.Touch.GetCoordinatesForElem(this.ChartElement).y} : Qva.Touch.GetCoordinatesForElem(this.ChartElement), h = Qva.Touch.GetCoordinatesForElem(this.SelectionObj.Element), g = h.x - c.x, k = h.y - c.y, d = getClientWidth(this.SelectionObj.Element), m = getClientHeight(this.SelectionObj.Element), f = g + ":" + k + ":" + d + ":" + m + ":" + getClientWidth(this.ChartElement) + ":" + getClientHeight(this.ChartElement);
            Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Make selection. rect: " + f, Qva.ConsoleLog.SeverityTypes.Normal);
            var j = [];
            j[0] = {left: g, top: k, width: d, height: m};
            this.Chart.HandleSelection(j);
            this.Hide()
        }, BeforeMove: function(d, c) {
            Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("BeforeMove fired", Qva.ConsoleLog.SeverityTypes.Normal);
            this.DefineLimits()
        }, OnMove: function(d, c) {
            c.x = Math.min(c.x, this.Limits.dragLeft);
            c.x = Math.max(c.x, this.Limits.dragRight);
            c.y = Math.min(c.y, this.Limits.dragTop);
            c.y = Math.max(c.y, this.Limits.dragBottom);
            this.Element.style.webkitTransform = "translate3d(" + -c.x + "px, " + -c.y + "px, 0)"
        }, AfterMove: function(f) {
            var d = this.Element.style.webkitTransform, c = parseInt(d.substring(d.indexOf("(") + 1, d.indexOf("px")), 10), g = parseInt(d.substring(d.indexOf(",") + 1, d.lastIndexOf("px")), 10);
            Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("AfterMove fired", Qva.ConsoleLog.SeverityTypes.Normal);
            this.CurrentPos.left += c;
            this.CurrentPos.top += g;
            this.Element.style.webkitTransform = "translate3d(0px, 0px, 0)";
            this.Element.style.left = this.CurrentPos.left + "px";
            this.Element.style.top = this.CurrentPos.top + "px"
        }, BeforeResize: function(c) {
            Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("BeforeResize fired", Qva.ConsoleLog.SeverityTypes.Normal);
            this.DefineLimits()
        }, OnResize: function(j, f) {
            var d = Math.max(this.SelectionObj.Size.currentWidth - f.width, this.MinWidth), g = Math.min(this.Limits.maxWidth, d), h = Math.max(this.SelectionObj.Size.currentHeight - f.height, this.MinHeight), c = Math.min(this.Limits.maxHeight, h);
            this.SelectionObj.SetSize(g, c);
            this.ResizerObj.SetPosition(g, c)
        }};
    Qva.Touch.Scrollbar = function(d, c) {
        this.Element = document.createElement("div");
        this.Element.className = "TouchScrollbar";
        this.Id = d;
        this.Visible = false;
        return this
    };
    Qva.Touch.Scrollbar.prototype = {Element: null, Id: "", ScrollStep: 0, Visible: false, Show: function(d, f) {
            var g = Math.max(Math.round(d * d / f, 10)), c = d - g;
            this.ScrollStep = c / (d - f);
            this.Element.style.height = g + "px";
            this.Element.style["-webkit-transition-duration"] = "100ms";
            this.Element.style.opacity = 1;
            this.Visible = true;
            Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Scrollbar[" + this.Id + "].Show. VisibleAreaH: " + d + " :: scrollH: " + f + " :: ScrollbarHeight: " + g + " :: ScrollStep: " + this.ScrollStep, Qva.ConsoleLog.SeverityTypes.Verbose)
        }, Reposition: function(d) {
            var c = d * this.ScrollStep;
            this.Element.style.webkitTransform = "translate(0px, " + c + "px)";
            Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Scrollbar[" + this.Id + "].Reposition: yVal: " + d + " :: scrollstep: " + this.ScrollStep + " :: newVal: " + c, Qva.ConsoleLog.SeverityTypes.Verbose)
        }, Hide: function() {
            this.Element.style["-webkit-transition-duration"] = "600ms";
            this.Element.style.opacity = 0;
            this.Visible = false;
            Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("Scrollbar[" + this.Id + "].Hide", Qva.ConsoleLog.SeverityTypes.Verbose)
        }};
    Qva.Touch.Listbox.PreSelectSingle = function(c) {
        c.lb.Mgr.Selections.ctrl = false;
        c.lb.Mgr.Selections.Start = c.lb.Mgr.Selections.End = c.row.parentNode.offset;
        c.lb.Mgr._SaveCurrentSelection();
        c.lb.Mgr._IndicateCellsToSelect();
        c.lb.Mgr._EndSelect(false)
    };
    Qva.Touch.Listbox.PreSelectMulti = function(c) {
        var d = c.lb.Mgr, f = c.row.parentNode.offset;
        if (!c.lb.MultiSelectMode) {
            if (!Qva.Touch.Listbox.SelectMenu) {
                Qva.Touch.Listbox.SelectMenu = new Qva.Touch.Listbox.SelectionMenu(Qva.GetBinder(d.binderid).isSmallDevices)
            }
            if (Qva.Touch.Listbox.SelectMenu.Visible) {
                Qva.Touch.Listbox.SelectMenu.Hide(true)
            }
            Qva.Touch.Listbox.SelectMenu.Show(c.lb);
            c.lb.ToggleSelect = true;
            Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("PreSelectMulti - show menu", Qva.ConsoleLog.SeverityTypes.Verbose)
        } else {
            if (d.ObjectId.indexOf("Fields.") === 0) {
                c.lb.ToggleSelect = true
            }
        }
        if (c.lb.MultiSelectModeInitializing && c.row.parentNode.className.indexOf("QvSelected") !== -1) {
            return
        }
        d.Selections.ctrl = c.lb.ToggleSelect;
        d.Selections.Start = d.Selections.End = f;
        d._SaveCurrentSelection();
        d._IndicateCellsToSelect();
        Qva.Debug.UseConsolelog && Qva.ConsoleLog.Log("PreSelectMulti - selected row with offset: " + f + " :: toggle: " + c.lb.ToggleSelect, Qva.ConsoleLog.SeverityTypes.Verbose)
    };
    Qva.Touch.SelectionMenu = function(h) {
        if (h.SmallDevices) {
            var k = document.getElementById("single-object-view").getElementsByTagName("header")[0], f = document.createElement("div"), m = h.Buttons.length, j = 0, p = null;
            f.className = "object-selection-menu";
            for (; j < m; j++) {
                p = document.createElement("div");
                p.className = "button";
                if (j === 0) {
                    p.className += " button-primary"
                }
                p.touchEnd = {fn: h.Buttons[j].Fn, scope: h.Buttons[j].Scope}, p.onclick = function(r) {
                    var q = this.touchEnd;
                    q.fn.apply(q.scope, [r]);
                    return false
                }, p.appendChild(document.createTextNode(h.Buttons[j].Text));
                for (var l in h.Buttons[j].Style) {
                    p.style[l] = h.Buttons[j].Style[l]
                }
                f.appendChild(p)
            }
            k.appendChild(f);
            this.Element = f;
            this.IsSmallDevices = true
        } else {
            var d = null, p = null, c = null, g = null, o = null, n = this, m = h.Buttons.length, j = 0;
            this.Element = document.createElement("div");
            this.Element.className = "TouchSelectionMenu";
            d = document.createElement("div");
            d.className = "TouchSelectionMenu-Panel";
            this.Element.appendChild(d);
            for (; j < m; j++) {
                p = document.createElement("div");
                p.className = "TouchSelectionMenu-Button-Background TouchSelectionMenu-Button-Background-Default";
                p.style.marginLeft = (j == 0 ? 0 : 4) + "px";
                p.ontouchstart = this.OnBtnTouchStart(this, h.Buttons[j]);
                d.appendChild(p);
                c = document.createElement("div");
                c.className = "TouchSelectionMenu-Gloss";
                p.appendChild(c);
                g = document.createElement("div");
                g.className = "TouchSelectionMenu-Button " + h.Buttons[j].CssClass;
                p.appendChild(g)
            }
            this.Buttons = m;
            if (h.AddPointerElem) {
                o = document.createElement("div");
                o.className = "TouchSelectionMenu-Pointer-Down";
                o.style.marginLeft = "30px";
                o.style.marginTop = "-1px";
                this.Element.appendChild(o)
            }
        }
        for (var l in h.Style) {
            this.Element.style[l] = h.Style[l]
        }
        return this
    };
    Qva.Touch.SelectionMenu.prototype = {Element: null, IsSmallDevices: false, Show: function(c, d) {
            if (!this.IsSmallDevices) {
                this.Element.style.left = c + "px";
                this.Element.style.top = d + "px"
            }
            this.Element.style.visibility = "visible"
        }, Hide: function() {
            this.Element.style.visibility = "hidden"
        }, IsTapInsideBtn: function(d, k, f) {
            var j = Qva.Touch.GetCoordinatesForElem(f), c = getClientWidth(f) / 2, h = j.x + c, g = j.y + c;
            return(Math.pow((d - h), 2) + Math.pow((k - g), 2) < Math.pow(c, 2))
        }, ToggleButtonState: function(d, c) {
            if (c) {
                d.className = d.className.replace(" TouchSelectionMenu-Button-Background-Default", " TouchSelectionMenu-Button-Background-Pressed");
                d.firstChild.style.display = "none"
            } else {
                d.className = d.className.replace(" TouchSelectionMenu-Button-Background-Pressed", " TouchSelectionMenu-Button-Background-Default");
                d.firstChild.style.display = ""
            }
        }, OnBtnTouchStart: function(c, d) {
            return function(f) {
                if (f.touches.length == 1 && c.IsTapInsideBtn(f.touches[0].pageX, f.touches[0].pageY, this)) {
                    c.ToggleButtonState(this, true);
                    this.ontouchmove = function(g) {
                        var h = g.changedTouches[0];
                        if (!c.IsTapInsideBtn(h.clientX, h.clientY, this)) {
                            this.ontouchend = null;
                            this.ontouchmove = null;
                            c.ToggleButtonState(this, false)
                        }
                    };
                    this.ontouchend = function(g) {
                        this.ontouchmove = null;
                        this.ontouchend = null;
                        setTimeout(function(h) {
                            return function() {
                                c.ToggleButtonState(h, false);
                                setTimeout(function() {
                                    d.Fn.apply(d.Scope, [g])
                                }, 200)
                            }
                        }(this), 100);
                        g.stopPropagation();
                        g.preventDefault()
                    };
                    f.stopPropagation();
                    f.preventDefault()
                }
            }
        }};
    Qva.Touch.Extend = function(f, c) {
        for (var d in c.prototype) {
            if (!(d in f.prototype)) {
                f.prototype[d] = c.prototype[d]
            }
        }
        return f
    };
    Qva.Touch.Listbox.SelectionMenu = function(d) {
        var c = {SmallDevices: d, AddPointerElem: false, Buttons: [{Fn: this.Select, Text: "Select", Scope: this, CssClass: "img_accept_tick", Style: {"float": "left"}}, {Fn: this.Clear, Text: "Clear", Scope: this, CssClass: "img_clear_eraser", Style: {display: "inline-block"}}, {Fn: this.Hide, Text: "Cancel", Scope: this, CssClass: "img_cancel_cross", Style: {"float": "right"}}], Style: {position: "absolute", display: "none"}};
        Qva.Touch.SelectionMenu.call(this, c);
        if (!d) {
            document.documentElement.appendChild(Qva.Touch.SelectionMenu.call(this, c).Element)
        }
    };
    Qva.Touch.Listbox.SelectionMenu.prototype = {Visible: false, ListboxObject: null, Show: function(d) {
            this.ListboxObject = d;
            this.Visible = true;
            this.Element.style.display = "";
            if (!this.IsSmallDevices) {
                var g = d.Mgr.PageBinder.Element, c = Qva.Touch.GetCoordinatesForElem(g), j = document.getElementById("PageContainer"), k = 0, h = document.getElementById("TouchSelectionMenu-PointerElem");
                if (!h) {
                    h = document.createElement("div");
                    h.id = "TouchSelectionMenu-PointerElem";
                    this.Element.appendChild(h)
                }
                if (this.Buttons == 3) {
                    var f = a(this.Element).children(".TouchSelectionMenu-Panel");
                    f.css("minWidth", f.css("maxWidth"))
                }
                if (parseInt(c.x + g.clientWidth + this.Element.clientWidth, 10) < j.clientWidth) {
                    left = c.x + g.clientWidth + "px";
                    h.className = "TouchSelectionMenu-Pointer-Left";
                    h.style.marginLeft = -h.offsetWidth + 1 + "px";
                    this.Element.style.marginLeft = h.offsetWidth + "px"
                } else {
                    left = Math.max(c.x - this.Element.clientWidth, 0) + "px";
                    h.className = "TouchSelectionMenu-Pointer-Right";
                    h.style.marginLeft = this.Element.clientWidth - 1 + "px";
                    this.Element.style.marginLeft = -h.offsetWidth + "px"
                }
                h.style.marginTop = (-this.Element.clientHeight / 2) - (h.offsetHeight / 2) + "px";
                this.Element.style.top = c.y + 10 + "px";
                this.Element.style.left = left
            }
        }, Hide: function(c) {
            this.Element.style.display = "none";
            this.ListboxObject.MultiSelectMode = false;
            this.ListboxObject.Mgr.Selections = {Selected: []};
            this.ListboxObject.Mgr._IndicateCellsToSelect();
            if (c) {
                this.ListboxObject.Mgr.PageBinder.QueuePostPaintMessage(this.ListboxObject.Mgr)
            }
            this.ListboxObject.ResetScroll();
            this.Visible = false
        }, Select: function() {
            this.ListboxObject.Mgr._EndSelect(this.ListboxObject.ToggleSelect);
            this.ListboxObject.ResetScroll();
            this.Hide(false)
        }, Clear: function() {
            this.ListboxObject.Mgr.Selections.ctrl = this.ListboxObject.ToggleSelect = false;
            this.ListboxObject.Mgr.Selections = {Selected: []};
            this.ListboxObject.Mgr._IndicateCellsToSelect()
        }};
    Qva.Touch.Extend(Qva.Touch.Listbox.SelectionMenu, Qva.Touch.SelectionMenu)
})(jQuery);
(function(a) {
    var b = "placeholder" in document.createElement("input");
    a.fn.placeholder = function() {
        return b ? this : this.each(function() {
            var f = a(this).siblings(".html5-placeholder").remove().end(), j = f[0].id || "placeholder" + +new Date, g = f.val(), h = f.position(), d = a("<label/>").addClass("html5-placeholder");
            function c(k) {
                (k.type == "focus" || document.activeElement === this) && d.hide();
                k.type == "blur" && f.val() === "" && d.show()
            }
            f.prop("id", j).bind("focus blur keyup", c);
            d.css({display: g == "" ? "block" : "none", color: "#999", position: "absolute", top: h.top, left: h.left, marginTop: f.css("margin-top"), overflow: "hidden", cursor: "text", fontFamily: f.css("font-family"), fontSize: Math.ceil(parseFloat(f.css("font-size"))), fontWeight: f.css("font-weight")}).attr("for", j).text(f.attr("placeholder")).insertAfter(f);
            c.call(f[0], {})
        })
    };
    Qva.Mgr.inputsearch = function(f, h, c, k, g) {
        var m = this;
        if (!Qva.MgrSplit(this, c, k)) {
            return
        }
        var d = a(h), j = 300, l = null;
        a.extend(m, {Element: h, Condition: g, SearchName: m.Name});
        a.extend(h, {Name: m.Name, binderid: f.binderid, Attr: m.Attr, SearchMgr: m});
        d.bind("keydown", function(s) {
            var n = this.SearchMgr, p = n.SearchName, o = n.PageBinder || Qva.GetBinder(this.binderid), r = s.which, q = r === 13, u = q ? "accept" : "abort";
            if (this.value == "" || this.value === this.getAttribute("placeholder")) {
                if (n.SearchMode === 0) {
                    this.value = "**"
                } else {
                    if (n.SearchMode === 1) {
                        this.value = "~"
                    } else {
                        this.value = ""
                    }
                }
                Qva.SetCursor(this)
            }
            if (r === 27 || q) {
                if (o.GetEnabled()) {
                    if (q) {
                        o.Set(p, "search", h.value, false)
                    }
                    o.Set(p, "closesearch", u, true)
                } else {
                    Qva.PendingSearchKey = u;
                    Qva.PendingSearchKeyName = mgr.SearchName
                }
                o.GlobalSearchObject = ""
            }
        }).bind("keyup", function(o) {
            var n = o.which, p = [13, 27, 37, 39];
            if (this.searchcol == null && a.inArray(n, p) === -1) {
                if (l) {
                    l = clearTimeout(l)
                }
                l = setTimeout(function() {
                    Qva.Search(h.SearchMgr, h, n)
                }, j)
            }
        }).bind("focus", function() {
            var n = this.SearchMgr, o = n.PageBinder, p = n.Name.replace(".Input", "");
            if (this.value == "") {
                o.Set(p, "click", "", true)
            }
            o.GlobalSearchObject = p
        }).bind("blur", function() {
            this.value = ""
        }).bind("click", function() {
            return false
        });
        f.AddManager(this)
    };
    Qva.Mgr.inputsearch.prototype.Paint = function(g, f) {
        var d = a(this.Element);
        this.Touched = true;
        var c = f.getAttribute("defaulttext");
        this.DefaultText = c != null ? c : this.DefaultText != null ? this.DefaultText : "Search";
        this.SearchMode = +f.getAttribute("searchmode");
        if (d.css("display") == "hidden") {
            return
        }
        d.prop({readOnly: g != "e", disabled: false}).css({display: Qva.MgrGetDisplayFromMode(this, g), width: d.parent().width() - d.prev().outerWidth(true) - 8, marginTop: -(d.height() / 2)});
        if (!IS_IE10_IE7MODE) {
            d.attr("placeholder", this.DefaultText).placeholder()
        }
        if (!f.getAttribute("searching") != "true") {
            this.PageBinder.GlobalSearchObject = this.Name.replace(".Input", "")
        }
    };
    Qva.Mgr.inputsearch.prototype.GetCellRect = function(c, g) {
        var d = a(this.Element), f = d.offset();
        return a.extend(f, {width: d.width(), height: d.height()})
    }
}(jQuery));
(function(c, d) {
    var f = 0, a = {};
    c(window).resize(function() {
        var h, g;
        for (h in a) {
            g = a[h];
            if (g.isAttached) {
                g.calculateScrollValues()
            }
        }
    });
    var b = window.QvScroll = function(g) {
        return new b.Core(g)
    };
    b.eventTypes = (function() {
        var g = {};
        try {
            document.createEvent("TouchEvent");
            g = {EVT_START: "touchstart", EVT_MOVE: "touchmove", EVT_END: "touchend"}
        } catch (h) {
            g = {EVT_START: "mousedown", EVT_MOVE: "mousemove", EVT_END: "mouseup", EVT_SCROLL: "mousewheel DOMMouseScroll"}
        }
        return g
    }());
    (function() {
        var g = "", k = document.createElement("div"), j = ["webkit", "ie", "Moz", "ms", "o"], h = j.length;
        while (h--) {
            if (typeof k.style[j[h] + "Transform"] !== "undefined") {
                g = j[h];
                break
            }
        }
        k.style[g + "Transform"] = "translate3d(0,0,0)";
        b.vendorPrefix = g;
        b.hasTranslate3d = k.style[g + "Transform"].indexOf("translate3d") >= 0
    }());
    b.parseEvent = function(g, h) {
        return g.originalEvent[h] && g.originalEvent[h][0] || g
    };
    b.parseWheelScroll = function(g) {
        var j = g.originalEvent, h = {step: 0, stepX: 0, stepY: 0, axis: "vertical"};
        h.step = (typeof j.wheelDelta === "undefined" ? -j.detail : j.wheelDelta) > 0 ? 1 : -1;
        if (j.axis === 1 || j.wheelDeltaY === 0) {
            h.axis = "horizontal";
            h.stepX = h.step
        } else {
            h.stepY = h.step
        }
        return h
    };
    b.animate = function(m, o, n, h, p) {
        var k = c(m), g = b.vendorPrefix, l = (g === "Moz" ? "" : g) + "TransitionEnd", j = b.hasTranslate3d ? "translate3d(" + o + "px, " + n + "px, 0)" : "translate(" + o + "px," + n + "px)";
        h = typeof h === "undefined" ? 100 : h;
        if (g !== "") {
            k.unbind(l).bind(l, p).css(g + "TransitionDuration", h + "ms")[0].style[g + "Transform"] = j
        } else {
            k.stop(true).animate({top: n, left: o}, h, "linear", p)
        }
        return this
    };
    b.Core = function(g) {
        this.isTouch = b.eventTypes.EVT_START === "touchstart";
        this.isAttached = false;
        this.visibleWidth = 0;
        this.visibleHeight = 0;
        this.overflowWidth = 0;
        this.overflowHeight = 0;
        this.totalWidth = 0;
        this.totalHeight = 0;
        this.positions = {};
        this.expandoId = f++;
        this.setOptions(g)
    };
    b.Core.prototype = {attach: function() {
            var h = this.options, k = this.applyOffset({x: h.startPositionX, y: h.startPositionY});
            h.parentElement = h.parentElement || h.attachElement.parentNode;
            h.scrollElement = h.scrollElement || h.parentElement;
            if (h.attachElement.style[b.vendorPrefix + "Transform"] === "") {
                var g = {TransitionProperty: "-" + b.vendorPrefix + "-transform", TransformOrigin: "0 0", Transform: "translate3d(0, 0, 0)", TransitionTimingFunction: "cubic-bezier(0.33, 0.66, 0.66, 1)", TransitionDuration: "0ms"};
                for (var j in g) {
                    h.attachElement.style[b.vendorPrefix + j] = g[j]
                }
            }
            if (!this.isAttached) {
                this.isAttached = true;
                h.attachElement.style.position = "relative";
                if (h.bindEvents) {
                    this.attachEvents()
                }
                this.calculateScrollValues().calculateSteps();
                if (h.indicators.enabled) {
                    h.indicators.coreInstance = this;
                    h.indicatorInstance = new b.Indicators(h.indicators)
                }
                a[this.expandoId] = this
            }
            if (h.indicatorInstance && !h.indicatorInstance.isAttached) {
                h.indicatorInstance.attach()
            }
            return this
        }, attachEvents: function() {
            var m = this, j = c(this.options.parentElement), p = c(document), g = b.eventTypes, n = this.positions, r = false, q = {x: 0, y: 0, timeStamp: null};
            function o(s) {
                p.addClass("unselectable");
                s = b.parseEvent(s, "touches");
                var u = m.applyOffset({x: 0, y: 0});
                n.startX = -u.x + s.pageX;
                n.startY = -u.y + s.pageY;
                r = false;
                return true
            }
            function l(x, v) {
                x = b.parseEvent(x, "changedTouches");
                var u = -(n.startX - x.pageX), s = -(n.startY - x.pageY), w = 0, z = 0, y = 0;
                if (+new Date() - q.timeStamp > 250) {
                    q.x = x.pageX;
                    q.y = x.pageY;
                    q.timeStamp = +new Date()
                }
                if (v) {
                    w = +new Date() - q.timeStamp;
                    z = m.calculateMomentum(x.pageX - q.x, w);
                    y = m.calculateMomentum(x.pageY - q.y, w);
                    u += z.distance;
                    s += y.distance
                }
                m.setPosition(u, s, v ? 200 : 0, !!v, function(B) {
                    var A = m.options.cornerModifier;
                    if (m.options.cornerBounce && !v) {
                        B.deltas.x += B.deltas.relX / A;
                        B.deltas.y += B.deltas.relY / A
                    }
                    return !r
                });
                if (m.options.cancelEvents && (m.options.horizontal != "disabled" || m.options.vertical != "disabled")) {
                    return false
                }
            }
            function h(s) {
                p.removeClass("unselectable");
                l.call(this, s, true);
                r = true;
                return true
            }
            function k(u) {
                var s = b.parseWheelScroll(u);
                m.setPositionByStep(-s.stepX, -s.stepY);
                if (m.options.cancelEvents) {
                    return false
                }
            }
            if (!this.isTouch) {
                j.bind(g.EVT_SCROLL + ".qvscroll", k)
            } else {
                j.bind(g.EVT_START + ".qvscroll", o);
                j.bind(g.EVT_MOVE + ".qvscroll", l);
                j.bind(g.EVT_END + ".qvscroll", h)
            }
            this.startEvt = o;
            return this
        }, detach: function() {
            var g = this.options;
            this.isAttached = false;
            c(g.parentElement).unbind(".qvscroll");
            if (g.indicatorInstance) {
                g.indicatorInstance.detach()
            }
            delete a[this.expandoId];
            return this
        }, applyOffset: function(l) {
            var k = c(this.options.attachElement), h = k.position(), g = h.left, m = h.top, j = k[0].style.MozTransform;
            if (j && j.indexOf("translate(") >= 0) {
                j = j.split("(")[1].split(", ");
                g = parseFloat(j[0]);
                m = parseFloat(j[1])
            }
            l.x = l.x + g;
            l.y = l.y + m;
            return l
        }, setPosition: function(r, q, h, j, u) {
            var n = this, v = -this.overflowWidth, s = -this.overflowHeight, g = this.options, p = this.positions, o = c(g.attachElement), k = o.position(), w = {deltas: {}, animationSpeed: h == d ? g.animationSpeed : h}, m, l;
            if (r > 0) {
                w.deltas.x = 0
            } else {
                if (r < v) {
                    w.deltas.x = v
                } else {
                    w.deltas.x = r
                }
            }
            if (q > 0) {
                w.deltas.y = 0
            } else {
                if (q < s) {
                    w.deltas.y = s
                } else {
                    w.deltas.y = q
                }
            }
            w.deltas.relX = r - k.left;
            w.deltas.relY = q - k.top;
            if (typeof u === "function" && u.call(this, w) === false) {
                return this
            }
            if (g.vertical === "disabled" || g.horizontal === "locked") {
                w.deltas.y = 0
            }
            if (g.horizontal === "disabled") {
                w.deltas.x = 0
            }
            p.offsetX = w.deltas.x;
            p.offsetY = w.deltas.y;
            m = -w.deltas.x / this.overflowWidth || 0;
            l = -w.deltas.y / this.overflowHeight || 0;
            o.trigger("qvscrollstart", [w.animationSpeed, m * 100, l * 100]);
            b.animate(g.attachElement, w.deltas.x, w.deltas.y, w.animationSpeed, function(x) {
                o.trigger(!j ? "qvscrollupdate" : "qvscrollstop", [w.animationSpeed, m * 100, l * 100])
            });
            return this
        }, setPositionByStep: function(l, j, n, m) {
            var h = l * -this.options.stepPerScrollX, g = j * -this.options.stepPerScrollY, k = {x: h, y: g};
            if (!m) {
                this.applyOffset(k)
            }
            this.setPosition(k.x, k.y, n, true);
            return this
        }, setPositionByPercent: function(j, g, l) {
            var k = j / -100 * this.overflowWidth, h = g / -100 * this.overflowHeight;
            this.setPosition(k, h, l, true);
            return this
        }, setPositionByElement: function(o, m, n, r) {
            var l = c(o), h = l.outerWidth(), s = l.outerHeight(), p = l.position(), g = l.offset(), k = g.left >= 0 && g.left + l.outerWidth() < this.visibleWidth, j = g.top >= 0 && g.top + l.outerHeight() < this.visibleHeight, q = !(r && k);
            if (q) {
                if (n) {
                    p.left -= this.visibleWidth / 2 - h / 2;
                    p.top -= this.visibleHeight / 2 - s / 2
                }
                this.setPosition(-p.left, -p.top, m, true)
            }
            return this
        }, setOptions: function(g) {
            var g = this.options = c.extend(true, {}, this.defaults, this.options || {}, g);
            if (g.startAttached) {
                this.attach()
            }
            return this
        }, reset: function() {
            c(this.options.attachElement).stop(true).removeAttr("style");
            return this
        }, calculateScrollValues: function() {
            var k = this.options;
            if (!this.isAttached || !k.parentElement.parentNode) {
                this.detach();
                return this
            }
            var j = k.parentElement, g = k.contentWidth === "auto" ? j.scrollWidth : k.contentWidth, h = k.contentHeight === "auto" ? j.scrollHeight : k.contentHeight;
            this.visibleWidth = j.clientWidth || j.parentNode.clientWidth;
            this.visibleHeight = j.clientHeight || j.parentNode.clientHeight;
            this.overflowWidth = g - this.visibleWidth;
            this.overflowHeight = h - this.visibleHeight;
            this.totalWidth = g;
            this.totalHeight = h;
            if (this.indicatorInstance) {
                this.indicatorInstance.calculate()
            }
            return this
        }, calculateSteps: function() {
            var g = this.options;
            if (g.stepPerScrollX === 0) {
                g.stepPerScrollX = Math.round(this.visibleWidth / 4)
            }
            if (g.stepPerScrollY === 0) {
                g.stepPerScrollY = parseFloat(g.attachElement.style.lineHeight) || Math.round(this.visibleHeight / 3)
            }
            return this
        }, calculateMomentum: function(m, l) {
            var j = 0.0022, k = Math.abs(m) / l || 0, h = (k * k) / (j * 2), g = k / j;
            h = m < 0 ? -h : h;
            return{distance: Math.round(h), duration: Math.round(g)}
        }, defaults: {startAttached: true, stepPerScrollX: 0, stepPerScrollY: 0, animationSpeed: 400, cornerBounce: true, cornerModifier: 3.5, bindEvents: true, cancelEvents: false, indicators: {enabled: false}, horizontal: "auto", vertical: "auto", lockAxis: "", contentWidth: "auto", contentHeight: "auto", attachElement: null, parentElement: null}};
    b.Indicators = function(k) {
        var j = this, h, g;
        k = j.options = c.extend({}, j.defaults, k);
        if (!k.coreInstance) {
            throw new Error("No core instance given when trying to instantiate QvScroll indicators")
        }
        h = c(k.coreInstance.options.parentElement).append('<div class="qvsi qvsi-vertical"><div class="qvsi-indicator"/></div><div class="qvsi qvsi-horizontal"><div class="qvsi-indicator"/></div>');
        g = c(k.coreInstance.options.attachElement);
        c.extend(j, {expandoId: b.Indicators.expando++, coreOptions: k.coreInstance.options, attElem: h, evtElem: g, vWrap: h.find(".qvsi-vertical"), vIndicator: h.find(".qvsi-indicator:eq(0)"), hWrap: h.find(".qvsi-horizontal"), hIndicator: h.find(".qvsi-indicator:eq(1)")});
        this.calculate().attach()
    };
    b.Indicators.expando = 0;
    b.Indicators.prototype = {calculate: function() {
            var g = this, j = g.options.coreInstance, h = g.coreOptions;
            g.vWrap[h.vertical === "disabled" || j.overflowHeight <= 0 ? "hide" : "show"]();
            g.hWrap[h.horizontal === "disabled" || j.overflowWidth === 0 ? "hide" : "show"]();
            g.vIndicator.height(j.visibleHeight - j.overflowHeight);
            g.hIndicator.width(j.visibleWidth - j.overflowWidth);
            return g
        }, addEvents: function() {
            var g = this;
            g.evtElem.bind("qvscrollstart qvscrollupdate qvscrollstop", c.proxy(g._update, g));
            g.vWrap.bind("mousedown.qvscroll" + g.expandoId, c.proxy(g._dragStartStop, g));
            c(document).bind("mousemove.qvscroll" + g.expandoId, c.proxy(g._dragMove, g)).bind("mouseup.qvscroll" + g.expandoId, c.proxy(g._dragStartStop, g))
        }, _update: function(h, n, m, l) {
            function k(q, p, s) {
                var r = parseFloat(p.css("margin-" + (s === "width" ? "left" : "top"))) * 2;
                return q[s]() - p[s]() - r
            }
            var j = this, o = k(j.vWrap, j.vIndicator, "height") * l / 100, g = k(j.hWrap, j.hIndicator, "width") * m / 100;
            b.animate(j.vIndicator, 0, o, n, function() {
            });
            b.animate(j.hIndicator, g, 0, n, function() {
            })
        }, _dragStartStop: function(g) {
            var h = this;
            if (g.type === "mousedown" && c(g.target).is(".qvsi-indicator")) {
                h.indicatorDragging = {position: h.options.coreInstance.applyOffset({x: 0, y: 0}), pageX: g.pageX, pageY: g.pageY}
            } else {
                h.indicatorDragging = null
            }
        }, _dragMove: function(g) {
            var h = this, j = h.indicatorDragging, l, k;
            if (j) {
                l = -(-j.position.x + g.pageX - j.pageX);
                k = -(-j.position.y + g.pageY - j.pageY);
                h.options.coreInstance.setPosition(l, k, 0, true, function() {
                })
            }
        }, attach: function() {
            var g = this;
            g.addEvents();
            g.calculate();
            g.isAttached = true;
            return g
        }, detach: function() {
            var g = this;
            c(document).unbind(".qvscroll" + g.expandoId);
            g.evtElem.unbind("qvscrollstart qvscrollupdate qvscrollstop");
            g.vWrap.hide();
            g.hWrap.hide();
            this.isAttached = false;
            return g
        }, defaults: {enabled: true, coreInstance: null}}
})(jQuery);
function ToDate(g) {
    var c = g.split("-");
    if (c.length === 3) {
        for (var b = 0; b < 3; ++b) {
            while (c[b].charAt(0) === "0") {
                c[b] = c[b].substr(1)
            }
        }
        var h = parseInt(c[0]);
        var a = parseInt(c[1]);
        var f = parseInt(c[2]);
        return new Date(h, a - 1, f, 12)
    } else {
        return new Date(g)
    }
}
if (!Qva.Mgr) {
    Qva.Mgr = {}
}
Qva.Mgr.actionicon = function(a, c, b, d) {
    if (!Qva.MgrSplit(this, b, d)) {
        return
    }
    this.SearchName = this.Name;
    this.Owner = a;
    this.Element = c;
    this.Touched = false;
    a.AddManager(this)
};
Qva.Mgr.actionicon.prototype.GetCellRect = function(a, b) {
    Assert(a == -1 && b == -1);
    var c = Qva.GetAbsolutePageCoords(this.Element);
    return{left: c.x, width: this.Element.offsetWidth, top: c.y, height: this.Element.offsetHeight}
};
Qva.Mgr.actionicon.prototype.Paint = function(f, c) {
    this.Touched = true;
    var k = c.getElementsByTagName("icon");
    if (k.length >= 1) {
        var h = k[0];
        var d = document.createElement("img");
        var a = h.getAttribute("name");
        var g = h.getAttribute("align");
        d.className = "Qv_CellIcon";
        if (g) {
            d.className += "_" + g
        }
        var b = this.PageBinder.BuildBinaryUrl(h.getAttribute("path"), null, a);
        d.src = b;
        this.Img = d;
        var j = this.PageBinder;
        d.ObjectId = j.Name;
        d.action = a;
        d.binderid = j.PageBinder.ID;
        d.style.cursor = "pointer";
        this.Element.appendChild(d);
        d.onclick = function(m) {
            if (!m) {
                m = window.event
            }
            m.cancelBubble = true;
            var l = Qva.GetObjectBinder(this);
            var n = {};
            n.action = "";
            l.Set(l.Name + "." + this.action, n)
        }
    }
};
Qva.Mgr.actionicon.prototype.Remove = function() {
    $(this.Element).html("").remove()
};
Qva.Mgr.date = function(a, c, b, d) {
    if (!Qva.MgrSplit(this, b, d)) {
        return
    }
    this.Owner = a;
    this.Element = c;
    this.Touched = false;
    a.AddManager(this);
    this.Selected = {}
};
Qva.Mgr.date.prototype.GetTranslations = function(f) {
    var c = f.getElementsByTagName("translations");
    if (c.length >= 1) {
        $(c).find("translate").each(function() {
            Calendar._TT[this.getAttribute("name")] = this.getAttribute("text")
        });
        var d = Calendar._TT.ABOUT;
        d = d.replace("%1", String.fromCharCode(8249));
        d = d.replace("%2", String.fromCharCode(8250));
        Calendar._TT.ABOUT = d
    }
    var b = f.getElementsByTagName("fullmonth");
    if (b.length >= 1) {
        Calendar._MN = new Array();
        $(b).find("translate").each(function() {
            Calendar._MN.push(this.getAttribute("text"))
        })
    }
    var a = f.getElementsByTagName("fullday");
    if (a.length >= 1) {
        Calendar._DN = new Array();
        $(a).find("translate").each(function() {
            Calendar._DN.push(this.getAttribute("text"))
        });
        Calendar._DN.push($(a).find("translate")[0].getAttribute("text"))
    }
};
Qva.Mgr.date.prototype.Lock = Qva.LockDisabled;
Qva.Mgr.date.prototype.Unlock = Qva.UnlockDisabled;
Qva.Mgr.date.prototype.Paint = function(k, g) {
    this.Touched = true;
    this.Element.style.display = Qva.MgrGetDisplayFromMode(this, k);
    var h = this.Element;
    var l = this;
    this.GetTranslations(g.parentNode);
    function c(v, u) {
        if (v.startDate && Calendar.CompareDate(u, v.startDate) < 0) {
            return true
        }
        if (v.endDate && Calendar.CompareDate(u, v.endDate) > 0) {
            return true
        }
        var s = u.print("%Y-%m-%d");
        if (l.Selected[s]) {
            return"selected"
        }
        return false
    }
    function n(v, u) {
        if (v.dateClicked) {
            var w = false;
            var s = v.date.print("%Y-%m-%d");
            if (w) {
                if (l.Selected[s]) {
                    delete l.Selected[s]
                } else {
                    l.Selected[s] = v.date
                }
                v.refresh()
            } else {
                l.Selected = {};
                l.Selected[s] = v.date;
                l.Owner.Set(l.Name, "value", s, true)
            }
        } else {
        }
        if (v.dateClicked && !w) {
            v.callCloseHandler()
        }
    }
    function p(s) {
        s.hide()
    }
    if (this.Cal) {
        var b = this.Cal
    } else {
        var a = null;
        var b = new Calendar(a, null, n, p);
        this.Cal = b;
        b.showsTime = false;
        b.weekNumbers = true;
        b.showsOtherMonths = true;
        b.yearStep = 1;
        b.setRange(new Date(2004, 1 - 1, 1), new Date(2005, 11 - 1, 23));
        b.setDateStatusHandler(c);
        b.getDateText = null;
        b.setDateFormat("%m/%d/%Y");
        b.create()
    }
    h.onclick = function() {
        b.hide();
        b.refresh();
        var s = "Tl";
        b.showAtElement(h, s);
        return false
    };
    var r = g.getElementsByTagName("value");
    if (r.length >= 1) {
        var q = r[0];
        var j = ToDate(q.getAttribute("min"));
        var o = ToDate(q.getAttribute("max"));
        if (j && o) {
            b.setRange(j, o)
        }
        var m = q.getAttribute("current");
        this.Selected = {};
        if (m) {
            var f = ToDate(m);
            if (!isNaN(f)) {
                var d = f.print("%Y-%m-%d");
                this.Selected[d] = f;
                b.setDate(new Date(f))
            }
        }
    }
    this.Unlock()
};
Qva.Mgr.date.prototype.Remove = function() {
    $(this.Element).find("img").remove();
    $(this.Element).unbind();
    $(this.Element).html("").remove()
};
Calendar = function(d, c, g, a) {
    this.activeDiv = null;
    this.currentDateEl = null;
    this.getDateStatus = null;
    this.getDateToolTip = null;
    this.getDateText = null;
    this.timeout = null;
    this.onSelected = g || null;
    this.onClose = a || null;
    this.dragging = false;
    this.hidden = false;
    this.startDate = new Date(1970, 1 - 1, 1);
    this.endDate = new Date(2050, 12 - 1, 31);
    this.dateFormat = Calendar._TT.DEF_DATE_FORMAT;
    this.ttDateFormat = Calendar._TT.TT_DATE_FORMAT;
    this.isPopup = true;
    this.weekNumbers = true;
    this.firstDayOfWeek = typeof d == "number" ? d : Calendar._FD;
    this.showsOtherMonths = false;
    this.dateStr = c;
    this.ar_days = null;
    this.showsTime = false;
    this.time24 = true;
    this.yearStep = 2;
    this.hiliteToday = true;
    this.multiple = null;
    this.table = null;
    this.element = null;
    this.tbody = null;
    this.firstdayname = null;
    this.monthsCombo = null;
    this.yearsCombo = null;
    this.hilitedMonth = null;
    this.activeMonth = null;
    this.hilitedYear = null;
    this.activeYear = null;
    this.dateClicked = false;
    if (typeof Calendar._SDN == "undefined") {
        if (typeof Calendar._SDN_len == "undefined") {
            Calendar._SDN_len = 3
        }
        var b = new Array();
        for (var f = 8; f > 0; ) {
            b[--f] = Calendar._DN[f].substr(0, Calendar._SDN_len)
        }
        Calendar._SDN = b;
        if (typeof Calendar._SMN_len == "undefined") {
            Calendar._SMN_len = 3
        }
        b = new Array();
        for (var f = 12; f > 0; ) {
            b[--f] = Calendar._MN[f].substr(0, Calendar._SMN_len)
        }
        Calendar._SMN = b
    }
};
Calendar._C = null;
Calendar.is_ie = (/msie/i.test(navigator.userAgent) && !/opera/i.test(navigator.userAgent));
Calendar.is_ie5 = (Calendar.is_ie && /msie 5\.0/i.test(navigator.userAgent));
Calendar.is_opera = /opera/i.test(navigator.userAgent);
Calendar.is_khtml = /Konqueror|Safari|KHTML/i.test(navigator.userAgent);
Calendar.getAbsolutePos = function(f) {
    var a = 0, d = 0;
    var c = /^div$/i.test(f.tagName);
    if (c && f.scrollLeft) {
        a = f.scrollLeft
    }
    if (c && f.scrollTop) {
        d = f.scrollTop
    }
    var g = {x: f.offsetLeft - a, y: f.offsetTop - d};
    if (f.offsetParent) {
        var b = this.getAbsolutePos(f.offsetParent);
        g.x += b.x;
        g.y += b.y
    }
    return g
};
Calendar.isRelated = function(c, a) {
    var d = a.relatedTarget;
    if (!d) {
        var b = a.type;
        if (b == "mouseover") {
            d = a.fromElement
        } else {
            if (b == "mouseout") {
                d = a.toElement
            }
        }
    }
    while (d) {
        if (d == c) {
            return true
        }
        d = d.parentNode
    }
    return false
};
Calendar.removeClass = function(f, d) {
    if (!(f && f.className)) {
        return
    }
    var a = f.className.split(" ");
    var b = new Array();
    for (var c = a.length; c > 0; ) {
        if (a[--c] != d) {
            b[b.length] = a[c]
        }
    }
    f.className = b.join(" ")
};
Calendar.addClass = function(b, a) {
    Calendar.removeClass(b, a);
    b.className += " " + a
};
Calendar.getElement = function(a) {
    var b = Calendar.is_ie ? window.event.srcElement : a.currentTarget;
    if (b.nodeType == undefined) {
        return b
    }
    while (b.nodeType != 1 || /^div$/i.test(b.tagName)) {
        b = b.parentNode
    }
    return b
};
Calendar.getTargetElement = function(a) {
    var b = Calendar.is_ie ? window.event.srcElement : a.target;
    while (b.nodeType != 1) {
        b = b.parentNode
    }
    return b
};
Calendar.stopEvent = function(a) {
    a || (a = window.event);
    if (Calendar.is_ie) {
        a.cancelBubble = true;
        a.returnValue = false
    } else {
        a.preventDefault();
        a.stopPropagation()
    }
    return false
};
Calendar.addEvent = function(a, c, b) {
    if (a.attachEvent) {
        a.attachEvent("on" + c, b)
    } else {
        if (a.addEventListener) {
            a.addEventListener(c, b, true)
        } else {
            a["on" + c] = b
        }
    }
};
Calendar.removeEvent = function(a, c, b) {
    if (a.detachEvent) {
        a.detachEvent("on" + c, b)
    } else {
        if (a.removeEventListener) {
            a.removeEventListener(c, b, true)
        } else {
            a["on" + c] = null
        }
    }
};
var resizeTimedOut = false;
$(window).resize(function() {
    if (resizeTimedOut !== false) {
        clearTimeout(resizeTimedOut)
    }
    resizeTimedOut = setTimeout(closeCalendarOnResize, 100)
});
function closeCalendarOnResize() {
    if (window._dynarch_popupCalendar != null) {
        window._dynarch_popupCalendar.callCloseHandler()
    }
}
Calendar.createElement = function(c, b) {
    var a = null;
    if (document.createElementNS) {
        a = document.createElementNS("http://www.w3.org/1999/xhtml", c)
    } else {
        a = document.createElement(c)
    }
    if (typeof b != "undefined") {
        b.appendChild(a)
    }
    return a
};
Calendar._add_evs = function(el) {
    with (Calendar) {
        addEvent(el, "mouseover", dayMouseOver);
        addEvent(el, "mousedown", dayMouseDown);
        addEvent(el, "mouseout", dayMouseOut);
        if (is_ie) {
            addEvent(el, "dblclick", dayMouseDblClick);
            el.setAttribute("unselectable", true)
        }
    }
};
Calendar.findMonth = function(a) {
    if (typeof a.month != "undefined") {
        return a
    } else {
        if (typeof a.parentNode.month != "undefined") {
            return a.parentNode
        }
    }
    return null
};
Calendar.findYear = function(a) {
    if (typeof a.year != "undefined") {
        return a
    } else {
        if (typeof a.parentNode.year != "undefined") {
            return a.parentNode
        }
    }
    return null
};
Calendar.showMonthsCombo = function() {
    var h = Calendar._C;
    if (!h) {
        return false
    }
    var j = h.activeDiv;
    var g = h.monthsCombo;
    if (h.hilitedMonth) {
        Calendar.removeClass(h.hilitedMonth, "hilite")
    }
    if (h.activeMonth) {
        Calendar.removeClass(h.activeMonth, "active")
    }
    var f = h.monthsCombo.getElementsByTagName("div")[h.date.getMonth()];
    Calendar.addClass(f, "active");
    h.activeMonth = f;
    var d = g.style;
    if (j.navtype < 0) {
        d.left = j.offsetLeft + "px"
    } else {
        var c = g.offsetWidth;
        if (typeof c == "undefined") {
            c = 50
        }
        d.left = (j.offsetLeft + j.offsetWidth - c) + "px"
    }
    d.top = (j.offsetTop + j.offsetHeight) + "px";
    var a = h.monthsCombo.getElementsByTagName("div");
    for (var b = 0; b < 12; ++b) {
        a[b].style.display = "block"
    }
    if (h.date.getFullYear() == h.startDate.getFullYear()) {
        for (var b = 0; b < h.startDate.getMonth(); ++b) {
            a[b].style.display = "none"
        }
    }
    if (h.date.getFullYear() == h.endDate.getFullYear()) {
        for (var b = h.endDate.getMonth() + 1; b < 12; ++b) {
            a[b].style.display = "none"
        }
    }
    d.display = "block"
};
Calendar.showYearsCombo = function(d) {
    var a = Calendar._C;
    if (!a) {
        return false
    }
    var c = a.activeDiv;
    var g = a.yearsCombo;
    if (a.hilitedYear) {
        Calendar.removeClass(a.hilitedYear, "hilite")
    }
    if (a.activeYear) {
        Calendar.removeClass(a.activeYear, "active")
    }
    a.activeYear = null;
    var b = a.date.getFullYear() + (d ? 1 : -1);
    var k = g.firstChild;
    var j = false;
    for (var f = 12; f > 0; --f) {
        if (b >= a.startDate.getFullYear() && b <= a.endDate.getFullYear()) {
            k.innerHTML = b;
            k.year = b;
            k.style.display = "block";
            j = true
        } else {
            k.style.display = "none"
        }
        k = k.nextSibling;
        b += d ? a.yearStep : -a.yearStep
    }
    if (j) {
        var l = g.style;
        l.display = "block";
        if (c.navtype < 0) {
            l.left = c.offsetLeft + "px"
        } else {
            var h = g.offsetWidth;
            if (typeof h == "undefined") {
                h = 50
            }
            l.left = (c.offsetLeft + c.offsetWidth - h) + "px"
        }
        l.top = (c.offsetTop + c.offsetHeight) + "px"
    }
};
Calendar.tableMouseUp = function(ev) {
    var cal = Calendar._C;
    if (!cal) {
        return false
    }
    if (cal.timeout) {
        clearTimeout(cal.timeout)
    }
    var el = cal.activeDiv;
    if (!el) {
        return false
    }
    var target = Calendar.getTargetElement(ev);
    ev || (ev = window.event);
    Calendar.removeClass(el, "active");
    if (target == el || target.parentNode == el) {
        Calendar.cellClick(el, ev)
    }
    var mon = Calendar.findMonth(target);
    var date = null;
    if (mon) {
        date = new Date(cal.date);
        if (mon.month != date.getMonth()) {
            date.setMonth(mon.month);
            cal.setDate(date);
            cal.dateClicked = false;
            cal.callHandler(ev)
        }
    } else {
        var year = Calendar.findYear(target);
        if (year) {
            date = new Date(cal.date);
            if (year.year != date.getFullYear()) {
                date.setFullYear(year.year);
                cal.setDate(date);
                cal.dateClicked = false;
                cal.callHandler(ev)
            }
        }
    }
    with (Calendar) {
        removeEvent(document, "mouseup", tableMouseUp);
        removeEvent(document, "mouseover", tableMouseOver);
        removeEvent(document, "mousemove", tableMouseOver);
        cal._hideCombos();
        _C = null;
        return stopEvent(ev)
    }
};
Calendar.tableMouseOver = function(o) {
    var a = Calendar._C;
    if (!a) {
        return
    }
    var c = a.activeDiv;
    var k = Calendar.getTargetElement(o);
    if (k == c || k.parentNode == c) {
        Calendar.addClass(c, "hilite active");
        Calendar.addClass(c.parentNode, "rowhilite")
    } else {
        if (typeof c.navtype == "undefined" || (c.navtype != 50 && (c.navtype == 0 || Math.abs(c.navtype) > 2))) {
            Calendar.removeClass(c, "active")
        }
        Calendar.removeClass(c, "hilite");
        Calendar.removeClass(c.parentNode, "rowhilite")
    }
    o || (o = window.event);
    if (c.navtype == 50 && k != c) {
        var n = Calendar.getAbsolutePos(c);
        var q = c.offsetWidth;
        var p = o.clientX;
        var r;
        var m = true;
        if (p > n.x + q) {
            r = p - n.x - q;
            m = false
        } else {
            r = n.x - p
        }
        if (r < 0) {
            r = 0
        }
        var g = c._range;
        var j = c._current;
        var h = Math.floor(r / 10) % g.length;
        for (var f = g.length; --f >= 0; ) {
            if (g[f] == j) {
                break
            }
        }
        while (h-- > 0) {
            if (m) {
                if (--f < 0) {
                    f = g.length - 1
                }
            } else {
                if (++f >= g.length) {
                    f = 0
                }
            }
        }
        var b = g[f];
        c.innerHTML = b;
        a.onUpdateTime(o)
    }
    var d = Calendar.findMonth(k);
    if (d) {
        if (d.month != a.date.getMonth()) {
            if (a.hilitedMonth) {
                Calendar.removeClass(a.hilitedMonth, "hilite")
            }
            Calendar.addClass(d, "hilite");
            a.hilitedMonth = d
        } else {
            if (a.hilitedMonth) {
                Calendar.removeClass(a.hilitedMonth, "hilite")
            }
        }
    } else {
        if (a.hilitedMonth) {
            Calendar.removeClass(a.hilitedMonth, "hilite")
        }
        var l = Calendar.findYear(k);
        if (l) {
            if (l.year != a.date.getFullYear()) {
                if (a.hilitedYear) {
                    Calendar.removeClass(a.hilitedYear, "hilite")
                }
                Calendar.addClass(l, "hilite");
                a.hilitedYear = l
            } else {
                if (a.hilitedYear) {
                    Calendar.removeClass(a.hilitedYear, "hilite")
                }
            }
        } else {
            if (a.hilitedYear) {
                Calendar.removeClass(a.hilitedYear, "hilite")
            }
        }
    }
    return Calendar.stopEvent(o)
};
Calendar.tableMouseDown = function(a) {
    if (Calendar.getTargetElement(a) == Calendar.getElement(a)) {
        return Calendar.stopEvent(a)
    }
};
Calendar.calDragIt = function(b) {
    var c = Calendar._C;
    if (!(c && c.dragging)) {
        return false
    }
    var f;
    var d;
    if (Calendar.is_ie) {
        d = window.event.clientY + document.body.scrollTop;
        f = window.event.clientX + document.body.scrollLeft
    } else {
        f = b.pageX;
        d = b.pageY
    }
    c.hideShowCovered();
    var a = c.element.style;
    a.left = (f - c.xOffs) + "px";
    a.top = (d - c.yOffs) + "px";
    return Calendar.stopEvent(b)
};
Calendar.calDragEnd = function(ev) {
    var cal = Calendar._C;
    if (!cal) {
        return false
    }
    cal.dragging = false;
    with (Calendar) {
        removeEvent(document, "mousemove", calDragIt);
        removeEvent(document, "mouseup", calDragEnd);
        tableMouseUp(ev)
    }
    cal.hideShowCovered()
};
Calendar.dayMouseDown = function(ev) {
    var el = Calendar.getElement(ev);
    if (el.disabled) {
        return false
    }
    var cal = el.calendar;
    cal.activeDiv = el;
    Calendar._C = cal;
    if (el.navtype != 300) {
        with (Calendar) {
            if (el.navtype == 50) {
                el._current = el.innerHTML;
                addEvent(document, "mousemove", tableMouseOver)
            } else {
                addEvent(document, Calendar.is_ie5 ? "mousemove" : "mouseover", tableMouseOver)
            }
            addClass(el, "hilite active");
            addEvent(document, "mouseup", tableMouseUp)
        }
    } else {
        if (cal.isPopup) {
            cal._dragStart(ev)
        }
    }
    if (el.navtype == -1 || el.navtype == 1) {
        if (cal.timeout) {
            clearTimeout(cal.timeout)
        }
        cal.timeout = setTimeout("Calendar.showMonthsCombo()", 250)
    } else {
        if (el.navtype == -2 || el.navtype == 2) {
            if (cal.timeout) {
                clearTimeout(cal.timeout)
            }
            cal.timeout = setTimeout((el.navtype > 0) ? "Calendar.showYearsCombo(true)" : "Calendar.showYearsCombo(false)", 250)
        } else {
            cal.timeout = null
        }
    }
    return Calendar.stopEvent(ev)
};
Calendar.dayMouseDblClick = function(a) {
    Calendar.cellClick(Calendar.getElement(a), a || window.event);
    if (Calendar.is_ie) {
        document.selection.empty()
    }
};
Calendar.dayMouseOver = function(b) {
    var a = Calendar.getElement(b);
    if (Calendar.isRelated(a, b) || Calendar._C || a.disabled) {
        return false
    }
    if (a.ttip) {
        if (a.ttip.substr(0, 1) == "_") {
            a.ttip = a.caldate.print(a.calendar.ttDateFormat) + a.ttip.substr(1)
        }
        a.calendar.tooltips.innerHTML = a.ttip
    }
    if (a.navtype != 300) {
        Calendar.addClass(a, "hilite");
        if (a.caldate) {
            Calendar.addClass(a.parentNode, "rowhilite")
        }
    }
    return Calendar.stopEvent(b)
};
Calendar.dayMouseOut = function(ev) {
    with (Calendar) {
        var el = getElement(ev);
        if (isRelated(el, ev) || _C || el.disabled) {
            return false
        }
        removeClass(el, "hilite");
        if (el.caldate) {
            removeClass(el.parentNode, "rowhilite")
        }
        if (el.calendar) {
            el.calendar.tooltips.innerHTML = _TT.SEL_DATE
        }
        return stopEvent(ev)
    }
};
Calendar.cellClick = function(f, q) {
    var c = f.calendar;
    var j = false;
    var n = false;
    var g = null;
    if (typeof f.navtype == "undefined") {
        if (c.currentDateEl) {
            Calendar.removeClass(c.currentDateEl, "current");
            Calendar.addClass(f, "current");
            j = (c.currentDateEl == f);
            if (!j) {
                c.currentDateEl = f
            }
        }
        c.date.setDateOnly(f.caldate);
        g = c.date;
        var b = !(c.dateClicked = !f.otherMonth);
        if (!b && !c.currentDateEl) {
            c._toggleMultipleDate(new Date(g))
        } else {
            n = !f.disabled
        }
        if (b) {
            c._init(c.firstDayOfWeek, g)
        }
    } else {
        if (f.navtype == 200) {
            Calendar.removeClass(f, "hilite");
            c.callCloseHandler();
            return
        }
        g = new Date(c.date);
        if (f.navtype == 0) {
            g.setDateOnly(new Date())
        }
        c.dateClicked = false;
        var p = g.getFullYear();
        var h = g.getMonth();
        function a(u) {
            var v = g.getDate();
            var s = g.getMonthDays(u);
            if (v > s) {
                g.setDate(s)
            }
            g.setMonth(u)
        }
        switch (f.navtype) {
            case 400:
                Calendar.removeClass(f, "hilite");
                var r = Calendar._TT.ABOUT;
                if (typeof r != "undefined") {
                    r += c.showsTime ? Calendar._TT.ABOUT_TIME : ""
                } else {
                    r = 'Help and about box text is not translated into this language.\nIf you know this language and you feel generous please update\nthe corresponding file in "lang" subdir to match calendar-en.js\nand send it back to <mihai_bazon@yahoo.com> to get it into the distribution  ;-)\n\nThank you!\nhttp://dynarch.com/mishoo/calendar.epl\n'
                }
                alert(r);
                return;
            case -2:
                if (p > c.startDate.getFullYear()) {
                    g.setFullYear(p - 1)
                }
                break;
            case -1:
                if (p == c.startDate.getFullYear() && h <= c.startDate.getMonth()) {
                    break
                }
                if (h > 0) {
                    a(h - 1)
                } else {
                    g.setFullYear(p - 1);
                    a(11)
                }
                break;
            case 1:
                if (p == c.endDate.getFullYear() && h >= c.endDate.getMonth()) {
                    break
                }
                if (h < 11) {
                    a(h + 1)
                } else {
                    g.setFullYear(p + 1);
                    a(0)
                }
                break;
            case 2:
                if (p < c.endDate.getFullYear()) {
                    g.setFullYear(p + 1)
                }
                break;
            case 100:
                c.setFirstDayOfWeek(f.fdow);
                return;
            case 50:
                var m = f._range;
                var o = f.innerHTML;
                for (var l = m.length; --l >= 0; ) {
                    if (m[l] == o) {
                        break
                    }
                }
                if (q && q.shiftKey) {
                    if (--l < 0) {
                        l = m.length - 1
                    }
                } else {
                    if (++l >= m.length) {
                        l = 0
                    }
                }
                var d = m[l];
                f.innerHTML = d;
                c.onUpdateTime(q);
                return;
            case 0:
                if (typeof c.getDateStatus == "function") {
                    var k = c.getDateStatus(this, g);
                    if (k === true || /disabled/i.test(k)) {
                        return false
                    }
                }
                break
        }
        if (!g.equalsTo(c.date)) {
            c.setDate(g);
            n = true
        } else {
            if (f.navtype == 0) {
                n = j = true
            }
        }
    }
    if (n) {
        q && c.callHandler(q)
    }
    if (j) {
        Calendar.removeClass(f, "hilite");
        q && c.callCloseHandler()
    }
};
Calendar.prototype.create = function(o) {
    var n = null;
    if (!o) {
        n = document.getElementsByTagName("body")[0];
        this.isPopup = true
    } else {
        n = o;
        this.isPopup = false
    }
    this.date = this.dateStr ? new Date(this.dateStr) : new Date();
    var r = Calendar.createElement("table");
    this.table = r;
    r.cellSpacing = 0;
    r.cellPadding = 0;
    r.calendar = this;
    Calendar.addEvent(r, "mousedown", Calendar.tableMouseDown);
    var a = Calendar.createElement("div");
    a.style.zIndex = 999;
    this.element = a;
    a.className = "calendar";
    if (this.isPopup) {
        a.style.position = "absolute";
        a.style.display = "none"
    }
    a.appendChild(r);
    var l = Calendar.createElement("thead", r);
    var p = null;
    var s = null;
    var b = this;
    var f = function(v, u, j) {
        p = Calendar.createElement("td", s);
        p.colSpan = u;
        p.className = "button";
        if (j != 0 && Math.abs(j) <= 2) {
            p.className += " nav"
        }
        Calendar._add_evs(p);
        p.calendar = b;
        p.navtype = j;
        p.innerHTML = "<div unselectable='on'>" + v + "</div>";
        return p
    };
    s = Calendar.createElement("tr", l);
    var c = 6;
    (this.isPopup) && --c;
    (this.weekNumbers) && ++c;
    f("?", 1, 400).ttip = Calendar._TT.INFO;
    this.title = f("", c, 300);
    this.title.className = "title";
    if (this.isPopup) {
        this.title.ttip = Calendar._TT.DRAG_TO_MOVE;
        this.title.style.cursor = "move";
        f("&#x00d7;", 1, 200).ttip = Calendar._TT.CLOSE
    }
    s = Calendar.createElement("tr", l);
    s.className = "headrow";
    this._nav_py = f("&#x00ab;", 1, -2);
    this._nav_py.ttip = Calendar._TT.PREV_YEAR;
    this._nav_pm = f("&#x2039;", 1, -1);
    this._nav_pm.ttip = Calendar._TT.PREV_MONTH;
    this._nav_now = f(Calendar._TT.TODAY, this.weekNumbers ? 4 : 3, 0);
    this._nav_now.ttip = Calendar._TT.GO_TODAY;
    this._nav_nm = f("&#x203a;", 1, 1);
    this._nav_nm.ttip = Calendar._TT.NEXT_MONTH;
    this._nav_ny = f("&#x00bb;", 1, 2);
    this._nav_ny.ttip = Calendar._TT.NEXT_YEAR;
    s = Calendar.createElement("tr", l);
    s.className = "daynames";
    if (this.weekNumbers) {
        p = Calendar.createElement("td", s);
        p.className = "name wn";
        p.innerHTML = Calendar._TT.WK
    }
    for (var k = 7; k > 0; --k) {
        p = Calendar.createElement("td", s);
        if (!k) {
            p.navtype = 100;
            p.calendar = this;
            Calendar._add_evs(p)
        }
    }
    this.firstdayname = (this.weekNumbers) ? s.firstChild.nextSibling : s.firstChild;
    this._displayWeekdays();
    var h = Calendar.createElement("tbody", r);
    this.tbody = h;
    for (k = 6; k > 0; --k) {
        s = Calendar.createElement("tr", h);
        if (this.weekNumbers) {
            p = Calendar.createElement("td", s)
        }
        for (var g = 7; g > 0; --g) {
            p = Calendar.createElement("td", s);
            p.calendar = this;
            Calendar._add_evs(p)
        }
    }
    if (this.showsTime) {
        s = Calendar.createElement("tr", h);
        s.className = "time";
        p = Calendar.createElement("td", s);
        p.className = "time";
        p.colSpan = 2;
        p.innerHTML = Calendar._TT.TIME || "&nbsp;";
        p = Calendar.createElement("td", s);
        p.className = "time";
        p.colSpan = this.weekNumbers ? 4 : 3;
        (function() {
            function w(F, H, G, I) {
                var D = Calendar.createElement("span", p);
                D.className = F;
                D.innerHTML = H;
                D.calendar = b;
                D.ttip = Calendar._TT.TIME_PART;
                D.navtype = 50;
                D._range = [];
                if (typeof G != "number") {
                    D._range = G
                } else {
                    for (var E = G; E <= I; ++E) {
                        var C;
                        if (E < 10 && I >= 10) {
                            C = "0" + E
                        } else {
                            C = "" + E
                        }
                        D._range[D._range.length] = C
                    }
                }
                Calendar._add_evs(D);
                return D
            }
            var A = b.date.getHours();
            var j = b.date.getMinutes();
            var B = !b.time24;
            var u = (A > 12);
            if (B && u) {
                A -= 12
            }
            var y = w("hour", A, B ? 1 : 0, B ? 12 : 23);
            var x = Calendar.createElement("span", p);
            x.innerHTML = ":";
            x.className = "colon";
            var v = w("minute", j, 0, 59);
            var z = null;
            p = Calendar.createElement("td", s);
            p.className = "time";
            p.colSpan = 2;
            if (B) {
                z = w("ampm", u ? "pm" : "am", ["am", "pm"])
            } else {
                p.innerHTML = "&nbsp;"
            }
            b.onSetTime = function() {
                var D, C = this.date.getHours(), E = this.date.getMinutes();
                if (B) {
                    D = (C >= 12);
                    if (D) {
                        C -= 12
                    }
                    if (C == 0) {
                        C = 12
                    }
                    z.innerHTML = D ? "pm" : "am"
                }
                y.innerHTML = (C < 10) ? ("0" + C) : C;
                v.innerHTML = (E < 10) ? ("0" + E) : E
            };
            b.onUpdateTime = function(F) {
                var D = this.date;
                var E = parseInt(y.innerHTML, 10);
                if (B) {
                    if (/pm/i.test(z.innerHTML) && E < 12) {
                        E += 12
                    } else {
                        if (/am/i.test(z.innerHTML) && E == 12) {
                            E = 0
                        }
                    }
                }
                var G = D.getDate();
                var C = D.getMonth();
                var H = D.getFullYear();
                D.setHours(E);
                D.setMinutes(parseInt(v.innerHTML, 10));
                D.setFullYear(H);
                D.setMonth(C);
                D.setDate(G);
                this.dateClicked = false;
                this.callHandler(F)
            }
        })()
    } else {
        this.onSetTime = this.onUpdateTime = function() {
        }
    }
    var m = Calendar.createElement("tfoot", r);
    s = Calendar.createElement("tr", m);
    s.className = "footrow";
    p = f(Calendar._TT.SEL_DATE, this.weekNumbers ? 8 : 7, 300);
    p.className = "ttip";
    if (this.isPopup) {
        p.ttip = Calendar._TT.DRAG_TO_MOVE;
        p.style.cursor = "move"
    }
    this.tooltips = p;
    a = Calendar.createElement("div", this.element);
    this.monthsCombo = a;
    a.className = "combo";
    for (k = 0; k < Calendar._MN.length; ++k) {
        var d = Calendar.createElement("div");
        d.className = Calendar.is_ie ? "label-IEfix" : "label";
        d.month = k;
        d.innerHTML = Calendar._SMN[k];
        a.appendChild(d)
    }
    a = Calendar.createElement("div", this.element);
    this.yearsCombo = a;
    a.className = "combo";
    for (k = 12; k > 0; --k) {
        var q = Calendar.createElement("div");
        q.className = Calendar.is_ie ? "label-IEfix" : "label";
        a.appendChild(q)
    }
    this._init(this.firstDayOfWeek, this.date);
    n.appendChild(this.element)
};
Calendar._keyEvent = function(m) {
    var a = window._dynarch_popupCalendar;
    if (!a || a.multiple) {
        return false
    }
    (Calendar.is_ie) && (m = window.event);
    var k = (Calendar.is_ie || m.type == "keypress"), n = m.keyCode;
    if (m.ctrlKey) {
        switch (n) {
            case 37:
                k && Calendar.cellClick(a._nav_pm);
                break;
            case 38:
                k && Calendar.cellClick(a._nav_py);
                break;
            case 39:
                k && Calendar.cellClick(a._nav_nm);
                break;
            case 40:
                k && Calendar.cellClick(a._nav_ny);
                break;
            default:
                return false
            }
    } else {
        switch (n) {
            case 32:
                Calendar.cellClick(a._nav_now);
                break;
            case 27:
                k && a.callCloseHandler();
                break;
            case 37:
            case 38:
            case 39:
            case 40:
                if (k) {
                    var f, o, l, h, c, d;
                    f = n == 37 || n == 38;
                    d = (n == 37 || n == 39) ? 1 : 7;
                    function b() {
                        c = a.currentDateEl;
                        var q = c.pos;
                        o = q & 15;
                        l = q >> 4;
                        h = a.ar_days[l][o]
                    }
                    b();
                    function g() {
                        var p = new Date(a.date);
                        p.setDate(p.getDate() - d);
                        a.setDate(p)
                    }
                    function j() {
                        var p = new Date(a.date);
                        p.setDate(p.getDate() + d);
                        a.setDate(p)
                    }
                    while (1) {
                        switch (n) {
                            case 37:
                                if (--o >= 0) {
                                    h = a.ar_days[l][o]
                                } else {
                                    o = 6;
                                    n = 38;
                                    continue
                                }
                                break;
                            case 38:
                                if (--l >= 0) {
                                    h = a.ar_days[l][o]
                                } else {
                                    g();
                                    b()
                                }
                                break;
                            case 39:
                                if (++o < 7) {
                                    h = a.ar_days[l][o]
                                } else {
                                    o = 0;
                                    n = 40;
                                    continue
                                }
                                break;
                            case 40:
                                if (++l < a.ar_days.length) {
                                    h = a.ar_days[l][o]
                                } else {
                                    j();
                                    b()
                                }
                                break
                        }
                        break
                    }
                    if (h) {
                        if (!h.disabled) {
                            Calendar.cellClick(h)
                        } else {
                            if (f) {
                                g()
                            } else {
                                j()
                            }
                        }
                    }
                }
                break;
            case 13:
                if (k) {
                    Calendar.cellClick(a.currentDateEl, m)
                }
                break;
            default:
                return false
            }
    }
    return Calendar.stopEvent(m)
};
Calendar.prototype._init = function(o, z) {
    var y = new Date();
    var s = y.getFullYear();
    var B = y.getMonth();
    var b = y.getDate();
    this.table.style.visibility = "hidden";
    if (Calendar.CompareDate(z, this.startDate) < 0) {
        z = new Date(this.startDate)
    }
    if (Calendar.CompareDate(z, this.endDate) > 0) {
        z = new Date(this.endDate)
    }
    z.setHours(12, 0, 0, 0);
    this.firstDayOfWeek = o;
    this.date = new Date(z);
    var k = z.getFullYear();
    var A = z.getMonth();
    var D = z.getDate();
    var C = z.getMonthDays();
    z.setDate(1);
    var u = (z.getDay() - this.firstDayOfWeek) % 7;
    if (u < 0) {
        u += 7
    }
    z.setDate(-u);
    z.setDate(z.getDate() + 1);
    var f = this.tbody.firstChild;
    var m = Calendar._SMN[A];
    var q = this.ar_days = new Array();
    var p = Calendar._TT.WEEKEND;
    var d = this.multiple ? (this.datesCells = {}) : null;
    for (var w = 0; w < 6; ++w, f = f.nextSibling) {
        var a = f.firstChild;
        if (this.weekNumbers) {
            a.className = "day wn";
            a.innerHTML = z.getWeekNumber();
            a = a.nextSibling
        }
        f.className = "daysrow";
        var x = false, g, c = q[w] = [];
        for (var v = 0; v < 7; ++v, a = a.nextSibling, z.setDate(g + 1)) {
            g = z.getDate();
            var h = z.getDay();
            a.className = "day";
            a.pos = w << 4 | v;
            c[v] = a;
            var n = (z.getMonth() == A);
            if (!n) {
                if (this.showsOtherMonths) {
                    a.className += " othermonth";
                    a.otherMonth = true
                } else {
                    a.className = "emptycell";
                    a.innerHTML = "&nbsp;";
                    a.disabled = true;
                    continue
                }
            } else {
                a.otherMonth = false;
                x = true
            }
            a.disabled = false;
            a.innerHTML = this.getDateText ? this.getDateText(z, g) : g;
            if (d) {
                d[z.print("%Y%m%d")] = a
            }
            if (this.getDateStatus) {
                var r = this.getDateStatus(this, z);
                if (this.getDateToolTip) {
                    var l = this.getDateToolTip(z, k, A, g);
                    if (l) {
                        a.title = l
                    }
                }
                if (r === true) {
                    a.className += " disabled";
                    a.disabled = true
                } else {
                    if (/disabled/i.test(r)) {
                        a.disabled = true
                    }
                    a.className += " " + r
                }
            }
            if (!a.disabled) {
                a.caldate = new Date(z);
                a.ttip = "_";
                if (!this.multiple && n && g == D && this.hiliteToday) {
                    a.className += " current";
                    this.currentDateEl = a
                }
                if (z.getFullYear() == s && z.getMonth() == B && g == b) {
                    a.className += " today";
                    a.ttip += Calendar._TT.PART_TODAY
                }
                if (p.indexOf(h.toString()) != -1) {
                    a.className += a.otherMonth ? " oweekend" : " weekend"
                }
            }
        }
        if (!(x || this.showsOtherMonths)) {
            f.className = "emptyrow"
        }
    }
    this.title.innerHTML = Calendar._MN[A] + ", " + k;
    this.onSetTime();
    this.table.style.visibility = "visible";
    this._initMultipleDates()
};
Calendar.prototype._initMultipleDates = function() {
    if (this.multiple) {
        for (var b in this.multiple) {
            var a = this.datesCells[b];
            var c = this.multiple[b];
            if (!c) {
                continue
            }
            if (a) {
                a.className += " current"
            }
        }
    }
};
Calendar.prototype._toggleMultipleDate = function(b) {
    if (this.multiple) {
        var c = b.print("%Y%m%d");
        var a = this.datesCells[c];
        if (a) {
            var f = this.multiple[c];
            if (!f) {
                Calendar.addClass(a, "current");
                this.multiple[c] = b
            } else {
                Calendar.removeClass(a, "current");
                delete this.multiple[c]
            }
        }
    }
};
Calendar.prototype.setDateToolTipHandler = function(a) {
    this.getDateToolTip = a
};
Calendar.prototype.setDate = function(a) {
    if (!a.equalsTo(this.date)) {
        this._init(this.firstDayOfWeek, a)
    }
};
Calendar.prototype.refresh = function() {
    this._init(this.firstDayOfWeek, this.date)
};
Calendar.prototype.setFirstDayOfWeek = function(a) {
    this._init(a, this.date);
    this._displayWeekdays()
};
Calendar.prototype.setDateStatusHandler = Calendar.prototype.setDisabledHandler = function(a) {
    this.getDateStatus = a
};
Calendar.prototype.setRange = function(b, c) {
    this.startDate = b;
    this.endDate = c
};
Calendar.prototype.callHandler = function(a) {
    if (this.onSelected) {
        this.onSelected(this, a)
    }
};
Calendar.prototype.callCloseHandler = function() {
    if (this.onClose) {
        this.onClose(this)
    }
    this.hideShowCovered()
};
Calendar.prototype.destroy = function() {
    var a = this.element.parentNode;
    a.removeChild(this.element);
    Calendar._C = null;
    window._dynarch_popupCalendar = null
};
Calendar.prototype.reparent = function(b) {
    var a = this.element;
    a.parentNode.removeChild(a);
    b.appendChild(a)
};
Calendar._checkCalendar = function(b) {
    var c = window._dynarch_popupCalendar;
    if (!c) {
        return false
    }
    var a = Calendar.is_ie ? Calendar.getElement(b) : Calendar.getTargetElement(b);
    for (; a != null && a != c.element; a = a.parentNode) {
    }
    if (a == null) {
        window._dynarch_popupCalendar.callCloseHandler();
        return Calendar.stopEvent(b)
    }
};
Calendar.prototype.show = function() {
    var f = this.table.getElementsByTagName("tr");
    for (var d = f.length; d > 0; ) {
        var g = f[--d];
        Calendar.removeClass(g, "rowhilite");
        var c = g.getElementsByTagName("td");
        for (var b = c.length; b > 0; ) {
            var a = c[--b];
            Calendar.removeClass(a, "hilite");
            Calendar.removeClass(a, "active")
        }
    }
    this.element.style.display = "block";
    this.hidden = false;
    if (this.isPopup) {
        window._dynarch_popupCalendar = this;
        Calendar.addEvent(document, "keydown", Calendar._keyEvent);
        Calendar.addEvent(document, "keypress", Calendar._keyEvent);
        Calendar.addEvent(document, "mousedown", Calendar._checkCalendar)
    }
    this.hideShowCovered()
};
Calendar.prototype.hide = function() {
    if (this.isPopup) {
        Calendar.removeEvent(document, "keydown", Calendar._keyEvent);
        Calendar.removeEvent(document, "keypress", Calendar._keyEvent);
        Calendar.removeEvent(document, "mousedown", Calendar._checkCalendar)
    }
    this.element.style.display = "none";
    this.hidden = true;
    this.hideShowCovered()
};
Calendar.prototype.showAt = function(a, c) {
    var b = this.element.style;
    b.left = a + "px";
    b.top = c + "px";
    this.show()
};
Calendar.prototype.showAtElement = function(c, d) {
    var a = this;
    var f = Calendar.getAbsolutePos(c);
    if (!d || typeof d != "string") {
        this.showAt(f.x, f.y + c.offsetHeight);
        return true
    }
    function b(k) {
        if (k.x < 0) {
            k.x = 0
        }
        if (k.y < 0) {
            k.y = 0
        }
        var l = document.createElement("div");
        var j = l.style;
        j.position = "absolute";
        j.right = j.bottom = j.width = j.height = "0px";
        document.body.appendChild(l);
        var h = Calendar.getAbsolutePos(l);
        document.body.removeChild(l);
        if (Calendar.is_ie) {
            h.y += document.body.scrollTop;
            h.x += document.body.scrollLeft
        } else {
            h.y += window.scrollY;
            h.x += window.scrollX
        }
        var g = k.x + k.width - h.x;
        if (g > 0) {
            k.x -= g
        }
        g = k.y + k.height - h.y;
        if (g > 0) {
            k.y -= g
        }
    }
    this.element.style.display = "block";
    Calendar.continuation_for_the_khtml_browser = function() {
        var g = a.element.offsetWidth;
        var k = a.element.offsetHeight;
        a.element.style.display = "none";
        var j = d.substr(0, 1);
        var l = "l";
        if (d.length > 1) {
            l = d.substr(1, 1)
        }
        switch (j) {
            case"B":
                f.y += c.offsetHeight;
                break;
            case"C":
                f.y += (c.offsetHeight - k) / 2;
                break;
            case"t":
                f.y += c.offsetHeight - k;
                break;
            case"b":
                break
        }
        switch (l) {
            case"L":
                f.x -= g;
                break;
            case"R":
                f.x += c.offsetWidth;
                break;
            case"C":
                f.x += (c.offsetWidth - g) / 2;
                break;
            case"l":
                f.x -= g;
                break;
            case"r":
                break
        }
        f.width = g;
        f.height = k + 40;
        a.monthsCombo.style.display = "none";
        b(f);
        a.showAt(f.x, f.y)
    };
    if (Calendar.is_khtml) {
        setTimeout(Calendar.continuation_for_the_khtml_browser, 10)
    } else {
        Calendar.continuation_for_the_khtml_browser()
    }
};
Calendar.prototype.setDateFormat = function(a) {
    this.dateFormat = a
};
Calendar.prototype.setTtDateFormat = function(a) {
    this.ttDateFormat = a
};
Calendar.prototype.parseDate = function(b, a) {
    if (!a) {
        a = this.dateFormat
    }
    this.setDate(Date.parseDate(b, a))
};
Calendar.prototype.hideShowCovered = function() {
    if (!Calendar.is_ie && !Calendar.is_opera) {
        return
    }
    function b(p) {
        var k = p.style.visibility;
        if (!k) {
            if (document.defaultView && typeof(document.defaultView.getComputedStyle) == "function") {
                if (!Calendar.is_khtml) {
                    k = document.defaultView.getComputedStyle(p, "").getPropertyValue("visibility")
                } else {
                    k = ""
                }
            } else {
                if (p.currentStyle) {
                    k = p.currentStyle.visibility
                } else {
                    k = ""
                }
            }
        }
        return k
    }
    var u = ["applet", "iframe", "select"];
    var c = this.element;
    var a = Calendar.getAbsolutePos(c);
    var g = a.x;
    var d = c.offsetWidth + g;
    var s = a.y;
    var r = c.offsetHeight + s;
    for (var j = u.length; j > 0; ) {
        var h = document.getElementsByTagName(u[--j]);
        var f = null;
        for (var m = h.length; m > 0; ) {
            f = h[--m];
            a = Calendar.getAbsolutePos(f);
            var q = a.x;
            var o = f.offsetWidth + q;
            var n = a.y;
            var l = f.offsetHeight + n;
            if (this.hidden || (q > d) || (o < g) || (n > r) || (l < s)) {
                if (!f.__msh_save_visibility) {
                    f.__msh_save_visibility = b(f)
                }
                f.style.visibility = f.__msh_save_visibility
            } else {
                if (!f.__msh_save_visibility) {
                    f.__msh_save_visibility = b(f)
                }
                f.style.visibility = "hidden"
            }
        }
    }
};
Calendar.prototype._displayWeekdays = function() {
    var b = this.firstDayOfWeek;
    var a = this.firstdayname;
    var d = Calendar._TT.WEEKEND;
    for (var c = 0; c < 7; ++c) {
        a.className = "day name";
        var f = (c + b) % 7;
        if (c) {
            a.ttip = Calendar._TT.DAY_FIRST.replace("%s", Calendar._DN[f]);
            a.navtype = 100;
            a.calendar = this;
            a.fdow = f;
            Calendar._add_evs(a)
        }
        if (d.indexOf(f.toString()) != -1) {
            Calendar.addClass(a, "weekend")
        }
        a.innerHTML = Calendar._SDN[(c + b) % 7];
        a = a.nextSibling
    }
};
Calendar.prototype._hideCombos = function() {
    this.monthsCombo.style.display = "none";
    this.yearsCombo.style.display = "none"
};
Calendar.prototype._dragStart = function(ev) {
    if (this.dragging) {
        return
    }
    this.dragging = true;
    var posX;
    var posY;
    if (Calendar.is_ie) {
        posY = window.event.clientY + document.body.scrollTop;
        posX = window.event.clientX + document.body.scrollLeft
    } else {
        posY = ev.clientY + window.scrollY;
        posX = ev.clientX + window.scrollX
    }
    var st = this.element.style;
    this.xOffs = posX - parseInt(st.left);
    this.yOffs = posY - parseInt(st.top);
    with (Calendar) {
        addEvent(document, "mousemove", calDragIt);
        addEvent(document, "mouseup", calDragEnd)
    }
};
Calendar.CompareDate = function(b, a) {
    if (b.getFullYear() < a.getFullYear()) {
        return -1
    } else {
        if (b.getFullYear() > a.getFullYear()) {
            return 1
        } else {
            if (b.getMonth() < a.getMonth()) {
                return -1
            } else {
                if (b.getMonth() > a.getMonth()) {
                    return 1
                } else {
                    if (b.getDate() < a.getDate()) {
                        return -1
                    } else {
                        if (b.getDate() > a.getDate()) {
                            return 1
                        } else {
                            return 0
                        }
                    }
                }
            }
        }
    }
};
Date._MD = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
Date.SECOND = 1000;
Date.MINUTE = 60 * Date.SECOND;
Date.HOUR = 60 * Date.MINUTE;
Date.DAY = 24 * Date.HOUR;
Date.WEEK = 7 * Date.DAY;
Date.parseDate = function(n, c) {
    var o = new Date();
    var p = 0;
    var f = -1;
    var l = 0;
    var r = n.split(/\W+/);
    var q = c.match(/%./g);
    var k = 0, h = 0;
    var s = 0;
    var g = 0;
    for (k = 0; k < r.length; ++k) {
        if (!r[k]) {
            continue
        }
        switch (q[k]) {
            case"%d":
            case"%e":
                l = parseInt(r[k], 10);
                break;
            case"%m":
                f = parseInt(r[k], 10) - 1;
                break;
            case"%Y":
            case"%y":
                p = parseInt(r[k], 10);
                (p < 100) && (p += (p > 29) ? 1900 : 2000);
                break;
            case"%b":
            case"%B":
                for (h = 0; h < 12; ++h) {
                    if (Calendar._MN[h].substr(0, r[k].length).toLowerCase() == r[k].toLowerCase()) {
                        f = h;
                        break
                    }
                }
                break;
            case"%H":
            case"%I":
            case"%k":
            case"%l":
                s = parseInt(r[k], 10);
                break;
            case"%P":
            case"%p":
                if (/pm/i.test(r[k]) && s < 12) {
                    s += 12
                } else {
                    if (/am/i.test(r[k]) && s >= 12) {
                        s -= 12
                    }
                }
                break;
            case"%M":
                g = parseInt(r[k], 10);
                break
            }
    }
    if (isNaN(p)) {
        p = o.getFullYear()
    }
    if (isNaN(f)) {
        f = o.getMonth()
    }
    if (isNaN(l)) {
        l = o.getDate()
    }
    if (isNaN(s)) {
        s = o.getHours()
    }
    if (isNaN(g)) {
        g = o.getMinutes()
    }
    if (p != 0 && f != -1 && l != 0) {
        return new Date(p, f, l, s, g, 0)
    }
    p = 0;
    f = -1;
    l = 0;
    for (k = 0; k < r.length; ++k) {
        if (r[k].search(/[a-zA-Z]+/) != -1) {
            var u = -1;
            for (h = 0; h < 12; ++h) {
                if (Calendar._MN[h].substr(0, r[k].length).toLowerCase() == r[k].toLowerCase()) {
                    u = h;
                    break
                }
            }
            if (u != -1) {
                if (f != -1) {
                    l = f + 1
                }
                f = u
            }
        } else {
            if (parseInt(r[k], 10) <= 12 && f == -1) {
                f = r[k] - 1
            } else {
                if (parseInt(r[k], 10) > 31 && p == 0) {
                    p = parseInt(r[k], 10);
                    (p < 100) && (p += (p > 29) ? 1900 : 2000)
                } else {
                    if (l == 0) {
                        l = r[k]
                    }
                }
            }
        }
    }
    if (p == 0) {
        p = o.getFullYear()
    }
    if (f != -1 && l != 0) {
        return new Date(p, f, l, s, g, 0)
    }
    return o
};
Date.prototype.getMonthDays = function(b) {
    var a = this.getFullYear();
    if (typeof b == "undefined") {
        b = this.getMonth()
    }
    if (((0 == (a % 4)) && ((0 != (a % 100)) || (0 == (a % 400)))) && b == 1) {
        return 29
    } else {
        return Date._MD[b]
    }
};
Date.prototype.getDayOfYear = function() {
    var a = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);
    var c = new Date(this.getFullYear(), 0, 0, 0, 0, 0);
    var b = a - c;
    return Math.floor(b / Date.DAY)
};
Date.prototype.getWeekNumber = function() {
    var c = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);
    var b = c.getDay();
    c.setDate(c.getDate() - (b + 6) % 7 + 3);
    var a = c.valueOf();
    c.setMonth(0);
    c.setDate(4);
    return Math.round((a - c.valueOf()) / (7 * 86400000)) + 1
};
Date.prototype.equalsTo = function(a) {
    return((this.getFullYear() == a.getFullYear()) && (this.getMonth() == a.getMonth()) && (this.getDate() == a.getDate()) && (this.getHours() == a.getHours()) && (this.getMinutes() == a.getMinutes()))
};
Date.prototype.setDateOnly = function(a) {
    var b = new Date(a);
    this.setDate(1);
    this.setFullYear(b.getFullYear());
    this.setMonth(b.getMonth());
    this.setDate(b.getDate())
};
Date.prototype.print = function(n) {
    var b = this.getMonth();
    var l = this.getDate();
    var o = this.getFullYear();
    var q = this.getWeekNumber();
    var r = this.getDay();
    var z = {};
    var u = this.getHours();
    var c = (u >= 12);
    var j = (c) ? (u - 12) : u;
    var x = this.getDayOfYear();
    if (j == 0) {
        j = 12
    }
    var f = this.getMinutes();
    var k = this.getSeconds();
    z["%a"] = Calendar._SDN[r];
    z["%A"] = Calendar._DN[r];
    z["%b"] = Calendar._SMN[b];
    z["%B"] = Calendar._MN[b];
    z["%C"] = 1 + Math.floor(o / 100);
    z["%d"] = (l < 10) ? ("0" + l) : l;
    z["%e"] = l;
    z["%H"] = (u < 10) ? ("0" + u) : u;
    z["%I"] = (j < 10) ? ("0" + j) : j;
    z["%j"] = (x < 100) ? ((x < 10) ? ("00" + x) : ("0" + x)) : x;
    z["%k"] = u;
    z["%l"] = j;
    z["%m"] = (b < 9) ? ("0" + (1 + b)) : (1 + b);
    z["%M"] = (f < 10) ? ("0" + f) : f;
    z["%n"] = "\n";
    z["%p"] = c ? "PM" : "AM";
    z["%P"] = c ? "pm" : "am";
    z["%s"] = Math.floor(this.getTime() / 1000);
    z["%S"] = (k < 10) ? ("0" + k) : k;
    z["%t"] = "\t";
    z["%U"] = z["%W"] = z["%V"] = (q < 10) ? ("0" + q) : q;
    z["%u"] = r + 1;
    z["%w"] = r;
    z["%y"] = ("" + o).substr(2, 2);
    z["%Y"] = o;
    z["%%"] = "%";
    z["%D"] = z["%m"] + "/" + z["%d"] + "/" + z["%y"];
    z["%r"] = z["%I"] + ":" + z["%M"] + ":" + z["%S"] + " " + z["%p"];
    z["%R"] = z["%H"] + ":" + z["%M"];
    z["%T"] = z["%H"] + ":" + z["%M"] + ":" + z["%S"];
    var v = /%./g;
    if (!Calendar.is_ie5 && !Calendar.is_khtml) {
        return n.replace(v, function(a) {
            return z[a] || a
        })
    }
    var p = n.match(v);
    for (var h = 0; h < p.length; h++) {
        var g = z[p[h]];
        if (g) {
            v = new RegExp(p[h], "g");
            n = n.replace(v, g)
        }
    }
    return n
};
Date.prototype.__msh_oldSetFullYear = Date.prototype.setFullYear;
Date.prototype.setFullYear = function(b) {
    var a = new Date(this);
    a.__msh_oldSetFullYear(b);
    if (a.getMonth() != this.getMonth()) {
        this.setDate(28)
    }
    this.__msh_oldSetFullYear(b)
};
window._dynarch_popupCalendar = null;
Calendar._FD = 0;
Calendar._TT = {};
Calendar._TT.WEEKEND = "0,6";
Calendar._TT.TIME_PART = "(Shift-)Click or drag to change value";
Calendar._TT.DEF_DATE_FORMAT = "%Y-%m-%d";
Calendar._TT.TT_DATE_FORMAT = "%a, %b %e";
Calendar._TT.TIME = "Time:";
(function(d, g) {
    var j = new RegExp("[^a-zA-Z0-9]", "g");
    j.compile(j);
    Qva.Mgr.anchor = function(k, m, l, n) {
        this.Name = Qva.MgrMakeName(l, n);
        this.Element = m;
        k.AddManager(this);
        this.Element.Name = this.Name;
        this.Element.binderid = k.PageBinder.ID;
        d(this.Element).click(function(o) {
            if (d(this).attr("href") != null && d(this).attr("href") == "#") {
                return false
            } else {
                return true
            }
        })
    };
    Qva.Mgr.anchor.prototype.Paint = function(m, l) {
        this.Touched = true;
        var k = this.Element;
        k.disabled = (m != "e");
        k.style.display = Qva.MgrGetDisplayFromMode(this, m)
    };
    Qva.Mgr.accordion = function(k, m, l, n) {
        this.Name = Qva.MgrMakeName(l, n);
        this.Element = m;
        k.AddManager(this);
        this.Element.Name = this.Name;
        this.Element.binderid = k.PageBinder.ID;
        d(this.Element).accordion({autoHeight: false})
    };
    Qva.Mgr.accordion.prototype.Paint = function(m, l) {
        this.Touched = true;
        var k = this.Element;
        k.disabled = (m != "e");
        k.style.display = Qva.MgrGetDisplayFromMode(this, m)
    };
    Qva.Mgr.foldOutMenu = function(k, m, l, n) {
        this.Name = Qva.MgrMakeName(l, n);
        this.Element = m;
        k.AddManager(this);
        k.FoldOutController = this;
        this.Element.binderid = k.PageBinder.ID;
        this.FoldOutVisible = false;
        this.FoldOutAvailable = false;
        this.Buttons = [];
        this.DocumentBinder = k;
        while (this.DocumentBinder && !this.DocumentBinder.LoadHtml) {
            this.DocumentBinder = this.DocumentBinder.PageBinder
        }
    };
    Qva.Mgr.foldOutMenu.prototype.Paint = function(m, l) {
        this.Touched = true;
        var k = this.Element;
        k.disabled = (m != "e");
        k.style.display = Qva.MgrGetDisplayFromMode(this, m)
    };
    Qva.Mgr.foldOutMenu.prototype.SetActiveFoldOut = function(o) {
        var k = {Name: o.Name, AvqDialog: o.AvqDialog, binderid: o.binderid, Index: o.Index};
        var l = true;
        if (!k.AvqDialog) {
            var n = this.FoldOutVisible;
            this.HideFoldOut();
            this.FoldOutVisible = n;
            this.CurrentFoldOut = k;
            this.FoldOutAvailable = false
        } else {
            this.FoldOutAvailable = true
        }
        if (this.FoldOutVisible && (!this.CurrentFoldOut || k.Name != this.CurrentFoldOut.Name || k.AvqDialog != this.CurrentFoldOut.AvqDialog) && this.ContextDialog) {
            this.CurrentFoldOut = k;
            this.HideFoldOut();
            this.ShowFoldOut()
        } else {
            this.CurrentFoldOut = k
        }
        for (var m = 0; m < this.Buttons.length; m++) {
            this.Buttons[m].SetStatus(this.FoldOutVisible, this.FoldOutAvailable)
        }
    };
    Qva.Mgr.foldOutMenu.prototype.SetFoldOutButton = function(k) {
        this.Buttons[this.Buttons.length] = k
    };
    Qva.Mgr.foldOutMenu.prototype.ShowFoldOut = function() {
        var l = this;
        if (this.FoldOutVisible) {
            this.HideFoldOut()
        }
        this.DocumentBinder.LoadHtml(l.CurrentFoldOut.AvqDialog, function(m) {
            l.ShowFoldOutDialog(m)
        });
        this.FoldOutVisible = true;
        for (var k = 0; k < this.Buttons.length; k++) {
            this.Buttons[k].SetStatus(this.FoldOutVisible, this.FoldOutAvailable)
        }
    };
    var f = 340;
    Qva.Mgr.foldOutMenu.prototype.ShowFoldOutDialog = function(n) {
        if (this.ContextDialog == null) {
            this.ContextDialog = document.createElement("div");
            this.ContextDialog.style.position = "absolute";
            this.ContextDialog.style.width = f + "px";
            this.ContextDialog.style.left = "330px";
            this.ContextDialog.style.top = "-2px";
            this.ContextDialog.innerHTML = n;
            this.Element.insertBefore(this.ContextDialog, this.Element.firstChild)
        } else {
            this.ContextDialog.style.zIndex = 666;
            this.ContextDialog.style.position = "absolute";
            this.ContextDialog.style.width = f + "px";
            this.ContextDialog.style.left = "330px";
            this.ContextDialog.style.top = "-2px";
            this.ContextDialog.innerHTML = n;
            d(this.ContextDialog).toggle("fold", 250)
        }
        var m = this.CurrentFoldOut.Name.split(".");
        var k = m[0] + "." + m[1] + "." + m[2];
        this.ContextDialogMgr = new Qva.Mgr.toolwindowbody(this.PageBinder.PageBinder, this.ContextDialog, k);
        this.ContextDialogMgr.TopElement = this.PageBinder.TopElement;
        this.ContextDialogMgr.Scan(this.CurrentFoldOut.Name);
        try {
            this.ContextDialog.focus()
        } catch (l) {
        }
        if (this.PageBinder.node) {
            this.ContextDialogMgr.Paint(this.PageBinder.mode, this.PageBinder.node, this.PageBinder.prefix)
        } else {
            this.PageBinder.PageBinder.Refresh()
        }
    };
    Qva.Mgr.foldOutMenu.prototype.HideFoldOut = function() {
        this.FoldOutVisible = false;
        for (var k = 0; k < this.Buttons.length; k++) {
            this.Buttons[k].SetStatus(this.FoldOutVisible, this.FoldOutAvailable)
        }
        if (this.ContextDialogMgr != null) {
            this.ContextDialogMgr.Close(true);
            this.PageBinder.PageBinder.RemoveFromManagers(this.ContextDialogMgr);
            this.ContextDialogMgr = null
        }
        if (this.ContextDialog != null) {
            this.ContextDialog.style.display = "none"
        }
    };
    Qva.Mgr.ListPanelController = function(k, m, l, n) {
        k.ListController = this
    };
    Qva.Mgr.ListPanelController.prototype.SetActiveListItem = function(k) {
        var l = null;
        if (k.ActiveItem) {
            l = k.ActiveItem.Name
        }
        if (l != this.CurrentItemName) {
            if (this.ListPanel) {
                this.ListPanel.ShowPanel(l)
            }
        }
        this.CurrentItemName = l
    };
    Qva.Mgr.listpanel = function(k, n, l, o, m) {
        if (!Qva.MgrSplit(this, l, o)) {
            return
        }
        k.AddManager(this);
        k.ListController.ListPanel = this;
        this.Element = n;
        this.DlgName = m;
        this.DocumentBinder = k.PageBinder;
        while (this.DocumentBinder && !this.DocumentBinder.LoadHtml) {
            this.DocumentBinder = this.DocumentBinder.PageBinder
        }
    };
    Qva.Mgr.listpanel.prototype.ShowPanel = function(k) {
        if (!k) {
            if (this.Element.firstChild) {
                this.Element.removeChild(this.Element.firstChild)
            }
        } else {
            var l = this;
            this.DocumentBinder.LoadHtml(this.DlgName, function(m) {
                l.Element.innerHTML = m;
                l.PageBinder.Scan(k, l.Element.firstChild);
                l.PageBinder.Paint()
            })
        }
    };
    Qva.Mgr.listpanel.prototype.Paint = function(l, k) {
        this.Touched = true
    };
    Qva.Mgr.activeAccordionHeader = function(k, n, l, o, m) {
        this.Name = Qva.MgrMakeName(l, o) || o;
        this.Element = n;
        k.AddManager(this);
        if (!k.ListController) {
            k.ListController = this
        }
        this.FoldOutController = k.FoldOutController;
        this.Lists = [];
        this.CurrentFoldOut = {};
        if (m) {
            this.SetActiveListItemAndFoldout = function() {
            };
            this.CurrentFoldOut = {Name: this.Name, AvqDialog: m, binderid: k.PageBinder.ID};
            if (d(n).hasClass("ui-state-active")) {
                this.FoldOutController.SetActiveFoldOut(this.CurrentFoldOut)
            }
        }
        var p = this;
        d(n).click(function() {
            p.FoldOutController.SetActiveFoldOut(p.CurrentFoldOut)
        })
    };
    Qva.Mgr.activeAccordionHeader.prototype.SetActiveListItemAndFoldout = function(k) {
        var m = true;
        if (!k.ActiveItem) {
            for (var l = 0; l < this.Lists.length; l++) {
                if (this.Lists[l] == k) {
                    m = false
                }
                if (this.Lists[l] != k && this.Lists[l].ActiveItem) {
                    if (this.CurrentFoldOut.AvqDialog !== this.Lists[l].ActiveItem.AvqDialog && this.CurrentFoldOut.Name !== this.Lists[l].ActiveItem.Name) {
                        this.Lists[l].SetActiveItem(this.Lists[l].ActiveItem)
                    }
                    return
                }
            }
            this.CurrentFoldOut = {}
        } else {
            for (var l = 0; l < this.Lists.length; l++) {
                if (this.Lists[l] != k) {
                    this.Lists[l].ClearActiveItem(true)
                }
                if (this.Lists[l] == k) {
                    m = false
                }
            }
            this.CurrentFoldOut = {Name: k.ActiveItem.Name, AvqDialog: k.ActiveItem.AvqDialog, binderid: k.ActiveItem.binderid, Index: k.ActiveItem.Index}
        }
        if (m) {
            this.Lists[this.Lists.length] = k
        }
        if (d(this.Element).hasClass("ui-state-active")) {
            this.FoldOutController.SetActiveFoldOut(this.CurrentFoldOut)
        }
    };
    Qva.Mgr.activeAccordionHeader.prototype.GetActiveFoldOut = function() {
        return this.CurrentFoldOut
    };
    Qva.Mgr.activeAccordionHeader.prototype.Paint = function(l, k) {
    };
    Qva.Mgr.sortableDimensions = function(k, m, l, n) {
        this.Name = Qva.MgrMakeName(l, n);
        this.Element = m;
        k.AddManager(this);
        this.Element.Name = this.Name;
        this.Element.binderid = k.PageBinder.ID;
        d(this.Element).sortable({handle: "span"});
        d(this.Element).disableSelection()
    };
    Qva.Mgr.sortableDimensions.prototype.Paint = function(m, l) {
        this.Touched = true;
        var k = this.Element;
        k.disabled = (m != "e");
        k.style.display = Qva.MgrGetDisplayFromMode(this, m)
    };
    Qva.Mgr.chartDimensionsButton = function(k, m, l, n) {
        this.Name = Qva.MgrMakeName(l, n);
        this.Element = m;
        k.AddManager(this);
        this.Element.Name = this.Name;
        this.Element.binderid = k.PageBinder.ID;
        d(this.Element).click(function() {
            var o = Qva.GetBinder(this.binderid);
            if (!o.Enabled) {
                return
            }
            o.Set(this.Name, "action", "", true)
        })
    };
    Qva.Mgr.chartDimensionsButton.prototype.Paint = function(m, l) {
        this.Touched = true;
        var k = this.Element;
        k.disabled = (m != "e");
        k.style.display = Qva.MgrGetDisplayFromMode(this, m)
    };
    Qva.Mgr.propertySlider = function(k, o, n, p, m) {
        this.Name = Qva.MgrMakeName(n, p);
        this.Element = o;
        this.Input = m;
        k.AddManager(this);
        var q = this;
        var l = Qva.GetBinder(this.binderid);
        if (this.Input) {
            this.DisplayToServer = function(r) {
                if (!this.DisplayPercent) {
                    return r
                }
                return Math.round(r * this.serverMax / 100)
            };
            this.ServerToDisplay = function(r) {
                if (!this.DisplayPercent) {
                    return r
                }
                return Math.round((r * 100) / this.serverMax)
            };
            d(this.Input).bind("change", function(r) {
                var s = parseInt(q.DisplayToServer(this.value));
                if (!isNaN(s) && s > q.serverMin && s < q.serverMax) {
                    l.Set(q.Name, "value", s, true)
                } else {
                    this.value = q.ServerToDisplay(q.serverValue)
                }
            })
        }
        d(this.Element).slider({slide: function(r, s) {
                if (q.Input) {
                    q.Input.value = q.ServerToDisplay(s.value)
                }
            }, stop: function(r, s) {
                l.Set(q.Name, "value", s.value, true)
            }})
    };
    Qva.Mgr.propertySlider.prototype.Paint = function(n, m) {
        this.serverMin = isNaN(parseInt(m.getAttribute("min"))) ? 0 : parseInt(m.getAttribute("min"));
        d(this.Element).slider("option", "min", this.serverMin);
        this.serverMax = isNaN(parseInt(m.getAttribute("max"))) ? 0 : parseInt(m.getAttribute("max"));
        d(this.Element).slider("option", "max", this.serverMax);
        var k = isNaN(parseInt(m.getAttribute("value"))) ? 0 : parseInt(m.getAttribute("value"));
        this.serverValue = Math.max(this.serverMin, Math.min(k, this.serverMax));
        this.DisplayPercent = m.getAttribute("range") == "percent";
        if (this.Input) {
            this.Input.value = this.ServerToDisplay(k)
        }
        d(this.Element).slider("value", this.serverValue);
        this.Touched = true;
        var l = this.Element;
        if (n != "e") {
            d(this.Element).slider("disable")
        } else {
            d(this.Element).slider("enable")
        }
        if (this.Input) {
            this.Input.readOnly = n != "e"
        }
        l.style.display = Qva.MgrGetDisplayFromMode(this, n)
    };
    Qva.Mgr.foldOutMenuButton = function(k, m) {
        this.Element = m;
        var l = k.FoldOutController;
        if (l) {
            l.SetFoldOutButton(this);
            m.FoldOutVisible = false;
            this.IsLessButton = m.getAttribute("isless") == "true";
            if (this.IsLessButton) {
                m.style.display = "none"
            }
            d(this.Element).button().click(function() {
                if (this.disabled) {
                    return
                }
                if (this.FoldOutVisible) {
                    l.HideFoldOut()
                } else {
                    l.ShowFoldOut()
                }
            })
        } else {
            m.style.display = "none"
        }
    };
    Qva.Mgr.foldOutMenuButton.prototype.SetStatus = function(l, k) {
        this.Element.FoldOutVisible = l;
        d(this.Element).button(k ? "enable" : "disable");
        if (l == this.IsLessButton) {
            this.Element.style.display = ""
        } else {
            this.Element.style.display = "none"
        }
    };
    Qva.Mgr.TabSource = function(k, n, l, o, m) {
        if (!Qva.MgrSplit(this, l, o)) {
            return
        }
        k.AddManager(this);
        this.Element = n;
        n.binderid = k.binderid;
        n.Name = this.Name;
        n.AvqDialog = m;
        var p = this;
        n.onmousedown = function(q) {
            p.PageBinder.SetActiveItem(this)
        }
    };
    Qva.Mgr.TabSource.prototype.Paint = function(m, l) {
        this.Touched = true;
        var k = this.Element;
        k.disabled = (m != "e");
        k.style.display = Qva.MgrGetDisplayFromMode(this, m)
    };
    Qva.Mgr.tabs = function(k, q, o, r, p) {
        if (!Qva.MgrSplit(this, o, r)) {
            return
        }
        k.AddManager(this);
        k.Tabs = this;
        this.Element = q;
        this.MgrType = "tabs";
        var n = this.Name.replace(j, ""), m = d(q), l = this;
        m.tabs().find("[name='tab']").each(function() {
            var u = d(this), v = u.attr("href") ? "href" : "id", s = u.attr(v);
            if (v && s) {
                u.attr(v, s + "-" + n)
            }
            u.click(function() {
                l.drawFoldoutScrollShadow(u.parent().index())
            })
        });
        m.tabs()
    };
    Qva.Mgr.tabs.prototype.drawFoldoutScrollShadow = function(n) {
        var q = d(this.Element), o = q.find("[name='tab']"), p = q.find(".tab-container .ui-tabs-panel > .prop-grid_container").eq(n), m = 3, k = o.children(":visible"), l, r;
        p = p.length ? p : q.find(".tab-container > *").eq(0);
        p.siblings().each(function() {
            var s = d(this).data("qvScroll");
            if (s && s.isAttached) {
                s.detach()
            }
        });
        l = p.data("qvScroll") || this.createScroll(p);
        if (p.is(":visible")) {
            l.attach().calculateScrollValues();
            r = l.overflowHeight > m;
            if (r) {
                p.parent().addClass("prop-grid_foldout-shadow")
            } else {
                p.parent().removeClass("prop-grid_foldout-shadow");
                l.detach()
            }
        }
        p.data("qvScroll", l)
    };
    Qva.Mgr.tabs.prototype.createScroll = function(k) {
        return new QvScroll({attachElement: k[0], horizontal: "disabled", cancelEvents: true, startAttached: false, indicators: {enabled: true}})
    };
    Qva.Mgr.tabs.prototype.Paint = function(l, k) {
        this.Element.style.display = Qva.MgrGetDisplayFromMode(this, l)
    };
    Qva.Mgr.align = function(k, n, l, o, m) {
        if (!Qva.MgrSplit(this, l, o)) {
            return
        }
        k.AddManager(this);
        this.Element = n;
        this.Element.Name = this.Name;
        this.Element.binderid = k.PageBinder.ID
    };
    Qva.Mgr.align.prototype.Paint = function(q, k) {
        var l = parseInt(k.getAttribute("value"));
        var r = k.getElementsByTagName("element");
        this.Element.innerHTML = "";
        var n = (q != "e");
        var s = [];
        var m = false;
        for (var o = 0; o < r.length; o++) {
            s[s.length] = parseInt(r[o].getAttribute("value"));
            if (s[s.length - 1] == 4) {
                m = true
            }
        }
        for (var o = 0; o < s.length; o++) {
            var p = window.document.createElement("button");
            p.setAttribute("value1", s[o]);
            this.AddImage(p, s[o], l, m, n);
            p.Name = this.Element.Name;
            p.binderid = this.Element.ID;
            if (!n) {
                d(p).click(function() {
                    var u = Qva.GetBinder(this.binderid);
                    if (!u.Enabled) {
                        return
                    }
                    u.Set(this.Name, "value", this.getAttribute("value1"), true)
                })
            }
            this.Element.appendChild(p)
        }
    };
    Qva.Mgr.align.prototype.AddImage = function(l, o, p, k, n) {
        var q = d(l);
        q.button({text: false});
        q.removeClass("ui-corner-all");
        if (q.attr("value1") == 0) {
            q.addClass("ui-corner-left").addClass("prop-button-align")
        }
        if (q.attr("value1") == 1) {
            q.addClass("prop-button-align")
        }
        if (q.attr("value1") == 2) {
            q.addClass("ui-corner-right").addClass("prop-button-align-last")
        }
        if (q.attr("value1") == 4) {
            q.addClass("prop-button-align")
        }
        if (q.attr("value1") == 8) {
            q.addClass("ui-corner-right").addClass("prop-button-align-last")
        }
        q.addClass("prop-weld-align-icons");
        var m = window.document.createElement("div");
        d(m).addClass("prop-grid_left prop-grid_button prop-icon-24x24");
        switch (o) {
            case 0:
                if (k) {
                    d(m).addClass("prop-vertical-icon-top")
                } else {
                    d(m).addClass("prop-horizontal-icon-left")
                }
                break;
            case 1:
                d(m).addClass("prop-horizontal-icon-center");
                break;
            case 2:
                d(m).addClass("prop-horizontal-icon-right");
                break;
            case 4:
                d(m).addClass("prop-vertical-icon-middle");
                break;
            case 8:
                d(m).addClass("prop-vertical-icon-bottom");
                break
        }
        if (o == p) {
            q.addClass("ui-state-active")
        } else {
            q.removeClass("ui-state-active")
        }
        if (n) {
            d(m).addClass("prop-icon-disabled")
        }
        q.bind("mouseout", function() {
            if (o == p) {
                q.addClass("ui-state-active")
            }
        });
        if (n) {
            q.unbind()
        }
        d(m).insertBefore(q.children()[0])
    };
    Qva.PageBinding.prototype.GetDynamicDropdownContent = function(q) {
        if (!this.dynamicDropdownContent) {
            this.dynamicDropdownContent = {}
        }
        if (this.dynamicDropdownContent[q]) {
            return this.dynamicDropdownContent[q]
        } else {
            this.dynamicDropdownContent[q] = [];
            var p = {list: [], containsIcons: false};
            var l = this["Get" + q]();
            for (var k = 0; k < l.length; ++k) {
                var o = null;
                if (l[k].type) {
                    o = l[k].type;
                    p.containsIcons = true
                }
                if (l[k].SubItems != null && l[k].SubItems.length > 0) {
                    for (var m = 0; m < l[k].SubItems.length; ++m) {
                        var n = null;
                        if (l[k].SubItems[m].type) {
                            n = l[k].SubItems[m].type;
                            p.containsIcons = true
                        }
                        if (l[k].SubItems[m].text != null) {
                            p.list.push({label: l[k].SubItems[m].text, value: l[k].SubItems[m].text, iconType: n, param: l[k].SubItems[m].param, tooltip: l[k].SubItems[m].tooltip, category: l[k].text})
                        }
                    }
                } else {
                    p.list.push({label: l[k].text, value: l[k].text, iconType: o, param: l[k].param, tooltip: l[k].tooltip, category: null})
                }
            }
            this.dynamicDropdownContent[q] = p;
            return this.dynamicDropdownContent[q]
        }
    };
    Qva.Mgr.dynamicDropdown = function(m, z, E, y, s, r) {
        s = s || "Fields";
        r = r || "";
        if (!Qva.MgrSplit(this, E, y)) {
            return
        }
        m.AddManager(this);
        var w = this, u = this.PageBinder, D = d('<span class="prop-icon-24x24 prop-dyn-dynamic-dropdown-search-icon prop-dyn-hidden"></span>'), o = d('<input class="prop-dyn-dynamic-dropdown" type="text" />'), q = d('<button class="prop-icon-24x24 prop-dyn-dynamic-dropdown-button-open"></button>'), n = d(z), C = n.closest(".expression-ac").length, B;
        while (u && !u.GetFields) {
            u = u.PageBinder
        }
        d.extend(w, {Property: s, Element: d.extend(z, {Name: w.Name, binderid: m.PageBinder.ID, Property: s, dynamicDropdownContent: u.GetDynamicDropdownContent(s)})});
        n.append(D).append(o).append(q);
        function x(G) {
            var H = "addClass", F = "removeClass";
            if (G) {
                H = F;
                F = "addClass"
            }
            D[H]("prop-dyn-hidden");
            q[H]("prop-dyn-dynamic-dropdown-button-open")[F]("prop-dyn-dynamic-dropdown-button-close");
            if (o.closest("ul").length) {
                o[H]("prop-dyn-clear-border-background").parent()[H]("prop-dyn-clear-border-background");
                q[H]("prop-dyn-clear-border-background")
            }
        }
        function l(G, H) {
            var F = Qva.GetBinder(z.binderid);
            if (!F.Enabled) {
                return
            }
            F.Set(z.Name, {position: H.item.value, action: ""});
            o.dynamicdropdown("close").trigger("blur")
        }
        function A(F, G) {
            o.prop("value", C ? r : o.data("originalValue"))
        }
        function p() {
            x(true);
            o.prop("value", "").dynamicdropdown("search", "")
        }
        function k(I) {
            var F = o.val();
            var J = jQuery.grep(z.dynamicDropdownContent.list, function(K) {
                return K.value.toLowerCase() === F
            }).length > 0;
            if (J === false && I.which == 13) {
                I.preventDefault();
                return false
            }
            if (J === true && I.which == 13) {
                var G = jQuery.grep(z.dynamicDropdownContent.list, function(K) {
                    return K.value.toLowerCase() === F
                })[0];
                var H = {item: G};
                l(null, H)
            }
            return true
        }
        function v() {
            x(false)
        }
        o.css("width", n.width() - D.width() - q.width() - parseFloat(o.css("padding-left"))).dynamicdropdown({source: z.dynamicDropdownContent.list, appendTo: C ? o.parent() : "body", minLength: 0, select: l, change: A}).keydown(k).focus(p).blur(v);
        q.mousedown(function() {
            var F = D.is(".prop-dyn-hidden") ? "focus" : "blur";
            o.trigger(F);
            return false
        });
        B = o.data("dynamicdropdown");
        (function() {
            var F = B.menu.options.selected;
            B.menu.options.selected = function() {
                var G = B.element.focus;
                B.element.focus = d.noop;
                F.apply(this, arguments);
                B.element.focus = G
            }
        })();
        if (C) {
            var w = this;
            o.val(r);
            QvaExpressionEditor.Element = o.closest(".popup-toolwindow-subdialog-content").find("textarea")[0];
            B.options.select = function(F, H) {
                var G = H.item;
                o.val(r);
                QvaExpressionEditor.Insert(G.param || G.value, QvaExpressionEditor.Element)
            };
            if (IS_IE) {
                QvaExpressionEditor.Element.onbeforedeactivate = function(F) {
                    if (this.setSelectionRange) {
                        this.ieselstart = this.selectionStart;
                        this.ieselend = this.selectionEnd
                    } else {
                        if (document.selection && document.selection.createRange) {
                            this.ierange = document.selection.createRange()
                        }
                    }
                }
            }
        }
    };
    Qva.Mgr.dynamicDropdown.prototype.Paint = function(l, k) {
        this.Element.style.display = Qva.MgrGetDisplayFromMode(this, l);
        var m = d(this.Element).find("input");
        m.prop("value", k.getAttribute("text"));
        m.data("originalValue", k.getAttribute("text"));
        if (k.getAttribute("mode") == "disabled") {
            if (IS_IE && IE_VERSION < 9) {
                this.Element.childNodes[1].onselectstart = function() {
                    this.blur();
                    return false
                }
            } else {
                this.Element.childNodes[1].onmousedown = function() {
                    this.blur();
                    return false
                }
            }
            d(this.Element.childNodes[1]).dynamicdropdown("option", "disabled", true).attr("readonly", true).unbind().addClass("prop-dyn-dimmed");
            d(this.Element.childNodes[2]).addClass("prop-dyn-transparency")
        } else {
            if (m.attr("newrow") == "true") {
                Qva.ActiveElement = m[0]
            } else {
                m.trigger("blur")
            }
        }
    };
    Qva.Mgr.backgroundcolor = function(k, m, l, n) {
        this.Name = Qva.MgrMakeName(l, n);
        k.AddManager(this);
        this.Element = m
    };
    Qva.Mgr.backgroundcolor.prototype.Paint = function(m, l) {
        this.Touched = true;
        var k = this.Element;
        k.style.display = Qva.MgrGetDisplayFromMode(this, m);
        k.style.backgroundColor = l.getAttribute("value")
    };
    window.log = function(k) {
        try {
            console.log(k)
        } catch (l) {
        }
    };
    Qva.Mgr.closeself = function(k, m, l, n) {
        if (l != null) {
            if (!Qva.MgrSplit(this, l, n)) {
                return
            }
            this.Element = m;
            k.AddManager(this);
            this.Mode = "h"
        }
        this.Parent = k;
        m.onclick = function() {
            k.CloseSelf()
        }
    };
    Qva.Mgr.closeself.prototype.Paint = function(l, k) {
        if (this.Mode == "h" && l != "e") {
            return
        }
        this.Mode = l;
        if (this.Mode == "h") {
            this.Parent.CloseSelf()
        }
    };
    Qva.Mgr.abortself = function(k, l) {
        this.Parent = k;
        l.onclick = function() {
            k.AbortSelf()
        }
    };
    Qva.Mgr.imagepicker = function(k, m, l, n) {
        if (!Qva.MgrSplit(this, l, n)) {
            return
        }
        this.Element = m;
        k.AddManager(this)
    };
    Qva.Mgr.imagepicker.prototype.Paint = function(s, k) {
        this.Element.innerHTML = "";
        var u = k.getElementsByTagName("image");
        var r = 0;
        for (var q = 0; q < u.length; q++) {
            var l = document.createElement("div");
            l.className = "prop-grid_image-picker-image";
            var m = document.createElement("div");
            m.style.clear = "both";
            var n = u[q];
            var p = document.createElement("img");
            var v = n.getAttribute("stamp");
            var o = n.getAttribute("image");
            o += "." + n.getAttribute("value");
            p.setAttribute("src", Qva.GetBinder(this.PageBinder.binderid).BuildBinaryUrl(n.getAttribute("path"), v, o) + "&width=90&height=90");
            p.binderid = this.PageBinder.binderid;
            p.Name = this.Name;
            p.value = n.getAttribute("value");
            if (s == "e") {
                p.onclick = function() {
                    var w = Qva.GetBinder(this.binderid);
                    if (!w.Enabled) {
                        return
                    }
                    w.Set(this.Name, "value", this.value, true)
                }
            }
            if (n.getAttribute("selected") == "true") {
                p.className = "prop-selected-image"
            }
            l.appendChild(p);
            this.Element.appendChild(l);
            if (++r > 2) {
                this.Element.appendChild(m);
                r = 0
            }
        }
        this.Touched = true
    };
    Qva.Mgr.colorpicker = function(k, m, l, n) {
        this.Name = Qva.MgrMakeName(l, n);
        this.primaryColor;
        this.secondaryColor;
        this.counter = 0;
        this.isFirstRunTwoColor = true;
        this.disableColorPalette = false;
        k.AddManager(this);
        this.Element = m;
        this.PickerAreas = []
    };
    Qva.Mgr.colorpicker.prototype.Paint = function(l, k) {
        this.PickerAreas[0].DisablePalette(this.disableColorPalette)
    };
    Qva.Mgr.colorpicker.prototype.Setcolor = function(k, l) {
        if (!l) {
            this.primaryColor = k;
            this.PrimaryInput.SelectColor(k, false)
        } else {
            this.secondaryColor = k;
            this.SecondaryInput.SelectColor(k, true)
        }
    };
    Qva.Mgr.colorpicker.prototype.highlightSecondaryInPalette = function() {
        if (this.PickerAreas) {
            for (var k in this.PickerAreas) {
                if (this.PickerAreas[k] && this.secondaryColor == this.PickerAreas[k].Color) {
                    this.PickerAreas[k].highlightSecondaryArea(this.oneColorPalette);
                    break
                }
            }
        }
    };
    Qva.Mgr.colorpicker.prototype.highlightPrimaryInPalette = function() {
        if (this.PickerAreas) {
            for (var k in this.PickerAreas) {
                if (this.PickerAreas[k] && this.primaryColor == this.PickerAreas[k].Color) {
                    this.PickerAreas[k].highlightPrimaryArea(this.oneColorPalette);
                    break
                }
            }
        }
    };
    Qva.Mgr.colorpicker.prototype.DisablePalette = function(k) {
    };
    Qva.Mgr.colorpicker.prototype.Markcolor = function(k) {
        this.noColorPalette = (this.firstColorMode != "e" && this.secondColorMode != "e");
        var m = (this.firstColorMode == "e" && this.secondColorMode != "e");
        var o = (this.firstColorMode != "e" && this.secondColorMode == "e");
        var n = (this.firstColorMode == "e" && this.secondColorMode == "e");
        this.oneColorPalette = (this.secondColorMode == "h");
        var l = false;
        if (this.noColorPalette) {
            this.counter = 0;
            this.isFirstRunTwoColor = true
        } else {
            if (m) {
                this.counter = 1;
                this.isFirstRunTwoColor = true;
                this.Setcolor(k, false)
            } else {
                if (o) {
                    this.counter = 0;
                    l = (this.counter == 0);
                    this.Setcolor(k, l)
                } else {
                    if (n) {
                        if (this.isFirstRunTwoColor) {
                            this.isFirstRunTwoColor = false;
                            this.counter = 1
                        } else {
                            this.counter = (this.counter + 1) % 2
                        }
                        l = (this.counter == 0);
                        this.Setcolor(k, l)
                    } else {
                    }
                }
            }
        }
        this.ResetColorPalette()
    };
    Qva.Mgr.colorpicker.prototype.SetColorPalette = function(k, l) {
        if (!l) {
            this.primaryColor = k;
            this.highlightPrimaryInPalette()
        } else {
            this.secondaryColor = k;
            this.highlightSecondaryInPalette()
        }
    };
    Qva.Mgr.colorpicker.prototype.ResetColorPalette = function() {
        if (this.PickerAreas) {
            for (var k in this.PickerAreas) {
                if (this.PickerAreas[k]) {
                    if (this.PickerAreas[k].nolightArea) {
                        this.PickerAreas[k].nolightArea()
                    }
                }
            }
        }
    };
    Qva.Mgr.colorpicker.prototype.DisplayColor = function(l) {
        var k = /\.SecondaryColorHex$/.test(l.Element.Name);
        if (!k) {
            this.firstColorMode = l.mode;
            this.ResetColorPalette()
        } else {
            this.secondColorMode = l.mode;
            this.oneColorPalette = (this.secondColorMode == "h")
        }
        this.disableColorPalette = (this.firstColorMode != "e" && this.secondColorMode != "e");
        this.PickerAreas[0].DisablePalette(this.disableColorPalette);
        if (this.disableColorPalette) {
            return
        }
        if (this.firstColorMode != "e" && this.secondColorMode == "e" && !k) {
            return
        }
        if (this.firstColorMode == "e" && this.secondColorMode != "e" && k) {
            if (this.oneColorPalette) {
                this.SetColorPalette(this.primaryColor, false)
            }
            return
        }
        this.SetColorPalette(l.Element.value, k)
    };
    Qva.Mgr.colorpickerarea = function(m, n, l, r, p) {
        this.Name = Qva.MgrMakeName(l, r);
        m.AddManager(this);
        this.Element = n;
        this.Color = p;
        n.binderid = m.binderid;
        n.Name = this.Name;
        n.setAttribute("value", p);
        var k = document.createElement("div");
        n.appendChild(k);
        k.className = "ToolProperty-Color-Picker";
        try {
            k.style.backgroundColor = p
        } catch (s) {
            alert("Invalid color:" + p)
        }
        var o = m.Managers[this.Name];
        for (var q = 0; q < o.length; q++) {
            if (o[q].PickerAreas) {
                o[q].PickerAreas[o[q].PickerAreas.length] = this;
                this.colorpicker = o[q];
                n.colorpicker = this.colorpicker;
                break
            }
        }
        n.onclick = function() {
            this.colorpicker.Markcolor(this.getAttribute("value"))
        }
    };
    Qva.Mgr.colorpickerarea.prototype.Paint = function(l, k) {
    };
    Qva.Mgr.colorpickerarea.prototype.highlightArea = function(l, m) {
        var n = d(this.Element);
        n.find(".prop-icon-24x24").remove();
        var k = n.children().first();
        if (!m) {
            var o = d(window.document.createElement("div"));
            o.addClass("prop-icon-24x24").addClass(l ? "prop-colorpicker-icon-second" : "prop-colorpicker-icon-first").addClass("prop-colorpicker-icon");
            o.appendTo(k)
        }
        k.addClass("popup-grid_colorpicker_highlight_border");
        n.addClass("popup-grid_colorpicker_highlight")
    };
    Qva.Mgr.colorpickerarea.prototype.DisablePalette = function(k) {
        if (k) {
            d(this.Element).parents("[palette='palette']").addClass("colorpickerpalette-disabled")
        } else {
            d(this.Element).parents("[palette='palette']").removeClass("colorpickerpalette-disabled")
        }
    };
    Qva.Mgr.colorpickerarea.prototype.highlightSecondaryArea = function(k) {
        this.highlightArea(true, k)
    };
    Qva.Mgr.colorpickerarea.prototype.highlightPrimaryArea = function(k) {
        this.highlightArea(false, k)
    };
    Qva.Mgr.colorpickerarea.prototype.nolightArea = function() {
        var k = d(this.Element);
        k.find(".prop-icon-24x24").remove();
        k.children().first().removeClass("popup-grid_colorpicker_highlight_border");
        k.removeClass("popup-grid_colorpicker_highlight")
    };
    Qva.Mgr.inputcolor = function(l, p, m, q, o) {
        if (!Qva.MgrSplit(this, m, q)) {
            return
        }
        this.Element = p;
        p.mgr = this;
        p.Name = this.Name;
        p.binderid = l.binderid;
        p.Attr = this.Attr;
        this.IsSecondary = o == "true";
        l.AddManager(this);
        p.onclick = function(r) {
            Qva.ActiveObjectsCloak = true;
            if (!r) {
                r = window.event
            }
            r.cancelBubble = true
        };
        p.onchange = function() {
            var r = l.PageBinder;
            if (this.value == "") {
                r.Set(this.Name, "text", "", true)
            } else {
                r.Set(this.Name, this.Attr, this.value, true)
            }
        };
        var k = l.Managers[q];
        for (var n = 0; n < k.length; n++) {
            if (k[n].PickerAreas) {
                this.colorpicker = k[n];
                if (this.IsSecondary) {
                    k[n].SecondaryInput = this
                } else {
                    k[n].PrimaryInput = this
                }
                break
            }
        }
    };
    Qva.Mgr.inputcolor.prototype.Lock = Qva.LockReadOnly;
    Qva.Mgr.inputcolor.prototype.Unlock = Qva.UnlockReadOnly;
    Qva.Mgr.inputcolor.prototype.Paint = function(n, l) {
        this.Touched = true;
        this.mode = n;
        var k = this.Element;
        k.readOnly = (n != "e");
        k.style.color = k.readOnly ? "graytext" : "";
        k.disabled = false;
        var m = "";
        if (n != "n") {
            m = l.getAttribute(this.Attr);
            if (this.Attr == "value" && l.getAttribute("text") == "") {
                m = ""
            }
        }
        if (m == "" && this.TextIfNull) {
            m = this.TextIfNull
        }
        if (this.Dec != null) {
            k.value = Qva.Trunc(m, this.Dec)
        } else {
            k.value = m
        }
        this.Locked = k.disabled;
        k.style.display = Qva.MgrGetDisplayFromMode(this, n);
        this.colorpicker.DisplayColor(this)
    };
    Qva.Mgr.inputcolor.prototype.SelectColor = function(l) {
        var k = this.PageBinder.PageBinder;
        k.Set(this.Name, this.Attr, l, true)
    };
    var a = 355;
    Qva.Mgr.toolwindowbody.prototype.ShowContextDialog = function(p, w) {
        if (this.ContextDialog == null) {
            this.ContextDialog = document.createElement("div");
            this.ContextDialog.style.position = "absolute";
            this.ContextDialog.style.zIndex = 10666;
            this.ContextDialog.className = "contextdialog";
            this.ContextDialog.onclick = Qva.CancelBubble;
            this.Element.insertBefore(this.ContextDialog, this.Element.firstChild)
        }
        this.ContextDialog.innerHTML = p;
        var o = this.CurrentDialog.ButtonMgr.Name.split(".");
        var k = o[0] + "." + o[1] + "." + o[2];
        this.ContextDialogMgr = new Qva.Mgr.toolwindowbody(this.PageBinder, this.ContextDialog, k, this);
        this.ContextDialogMgr.TopElement = this.ContextDialog;
        this.ContextDialog.style.display = "none";
        this.ContextDialogMgr.Scan(this.CurrentDialog.ButtonMgr.Name);
        this.CurrentDialog.ButtonMgr.ToggleUIState();
        if (parseInt(d(this.Element).css("width")) == a) {
            this.ContextDialog.style.left = "-1px"
        } else {
            var l = a - parseInt(d(this.Element).css("width"));
            if (l == a) {
                l = a - 334
            }
            l = Math.round(l / 2);
            this.ContextDialog.style.left = -l + "px"
        }
        try {
            this.ContextDialog.focus()
        } catch (n) {
        }
        if (typeof(w) == "string") {
            this.ContextDialogMgr.SetSingleMode(this.CurrentDialog.ButtonMgr.Name, w)
        } else {
            if (this.node) {
                this.ContextDialogMgr.Paint(this.mode, this.node, this.prefix)
            } else {
                this.DocumentBinder.Refresh()
            }
        }
        this.ContextDialog.style.display = "";
        var u = d(this.Element).offset().top - d(this.TopElement).offset().top;
        var m = d(this.TopElement).height();
        var v = d(this.ContextDialog).height();
        var s = Math.round(this.CurrentDialog.buttonheight / 2);
        if (m < d(this.ContextDialog).height()) {
            this.ContextDialog.style.top = "-1px"
        } else {
            if (((this.CurrentDialog.buttonoffset + u) > (m / 2)) && ((this.CurrentDialog.buttonoffset + u) > v)) {
                this.ContextDialog.style.top = this.CurrentDialog.buttonoffset - s - v - 4 + "px"
            } else {
                if (m < 300) {
                    this.ContextDialog.style.top = this.CurrentDialog.buttonoffset - s - v - 4 + "px"
                } else {
                    this.ContextDialog.style.top = this.CurrentDialog.buttonoffset + s + 4 + "px"
                }
            }
        }
        var r = [this.TopElement, document];
        if (this.TopElement != this.Element) {
            r.push(this.Element)
        }
        var q = this;
        d(r).bind("click.ToolWindowBody", function(x) {
            q.HideContextDialog(true, true);
            x.stopPropagation()
        })
    };
    Qva.Mgr.toolwindowbody.prototype.CloseSelf = function() {
        this.HideContextDialog();
        this.UIParent.HideContextDialog(true)
    };
    Qva.Mgr.toolwindowbody.prototype.AbortSelf = function() {
        this.HideContextDialog();
        this.UIParent.HideContextDialog(true, true)
    };
    Qva.Mgr.toolwindowbody.prototype.HideContextDialog = function(l, m) {
        var k = [this.TopElement, document];
        if (this.TopElement != this.Element) {
            k.push(this.Element)
        }
        d(k).unbind("click.ToolWindowBody");
        Qva.HideContextMenu();
        if (this.CurrentDialog) {
            if (this.ContextDialogMgr != null) {
                if (m) {
                    this.ContextDialogMgr.Abort(true)
                } else {
                    this.ContextDialogMgr.Close(true)
                }
                this.DocumentBinder.RemoveFromManagers(this.ContextDialogMgr);
                this.ContextDialogMgr = null
            }
            if (this.ContextDialog != null) {
                this.ContextDialog.style.display = "none"
            }
            this.CurrentDialog.ButtonMgr.ToggleUIState();
            if (l) {
                this.CurrentDialog = null
            }
        }
    };
    Qva.Mgr.toolwindowbody.prototype.ExpressionDialog = function(k) {
        if (!this.DocumentBinder.Enabled) {
            return
        }
        if (this.DocumentBinder.IsHosted) {
            var l = external.AvqExpressionDialog(this.CurrentDialog.ButtonMgr.Value, this.CurrentDialog.ButtonMgr.ExpressionType == "always");
            if (l != this.CurrentDialog.ButtonMgr.Value) {
                this.DocumentBinder.Set(this.CurrentDialog.ButtonMgr.Name, "value", l, true)
            }
        } else {
            var m = this;
            this.DocumentBinder.LoadHtml("Expression.Qvpp", function(n) {
                m.ShowContextDialog(n, m.CurrentDialog.ButtonMgr.Value)
            })
        }
    };
    Qva.Mgr.toolwindowbody.prototype.HideMe = function(l, k) {
        if (this.CurrentDialog) {
            if (this.CurrentDialog.ButtonMgr.Name == l.Name && this.CurrentDialog.dlg == k) {
                this.HideContextDialog();
                this.CurrentDialog = null;
                return
            }
        }
    };
    Qva.Mgr.toolwindowbody.prototype.SetContextDialog = function(l, k) {
        if (this.CurrentDialog) {
            this.HideContextDialog();
            if (this.CurrentDialog.ButtonMgr.Name == l.Name && this.CurrentDialog.dlg == k) {
                this.CurrentDialog = null;
                return
            }
        }
        var m = d(l.ButtonElement ? l.ButtonElement : l.Element);
        this.CurrentDialog = {ButtonMgr: l, dlg: k, buttonoffset: (m.offset().top - d(this.Element).offset().top + Math.round(m.height() / 2)), buttonheight: m.height()};
        var n = this;
        if (l.IsExpression) {
            if (l.Element.disabled) {
                return
            }
            this.ExpressionDialog()
        } else {
            var n = this;
            this.DocumentBinder.LoadHtml(n.CurrentDialog.dlg, function(o) {
                n.ShowContextDialog(o, n.CurrentDialog.ButtonMgr.Value)
            })
        }
    };
    Qva.Mgr.dlgpropjqui = function(k, n, l, o, m) {
        this.Init(k, n, l, o, m)
    };
    Qva.Mgr.dlgpropjqui.prototype.Init = function(k, n, l, o, m) {
        if (!Qva.MgrSplit(this, l, o)) {
            return
        }
        k.AddManager(this);
        this.Element = n;
        this.DlgName = m;
        if (this.DlgName !== null && this.DlgName.toUpperCase() == "EXPRESSION.QVPP") {
            this.IsExpression = true
        }
        var p = this;
        this.DialogOwner = k;
        while (!this.DialogOwner.SetContextDialog) {
            this.DialogOwner = this.DialogOwner.PageBinder
        }
        this.iconType = n.getAttribute("propicontype");
        this.ButtonElement = this.CreateButton(l, o, this.iconType, this.iconType == "expression" || this.iconType == "expression-text");
        d(this.Element).prepend(this.ButtonElement);
        this.ButtonElement.bind("click", function(q) {
            if (!p.disabled) {
                p.DialogOwner.SetContextDialog(p, p.DlgName)
            }
            q.stopPropagation()
        })
    };
    Qva.Mgr.dlgpropjqui.prototype.CreateButton = function(l, q, n, o, r) {
        var p = window.document.createElement("button");
        if (r) {
            p.setAttribute("type", r)
        }
        $button = d(p).button({text: false});
        var k = window.document.createElement("div");
        var s = d(k);
        $button.prepend(s);
        s.addClass("prop-icon-24x24");
        $button.addClass("prop-jqui-icon-border-fix");
        if (o) {
            $button.attr("border", true);
            s.addClass("prop-icon-expression-standalone")
        } else {
            $button.addClass("prop-jqui-icon-state-no-border").removeClass("ui-state-default")
        }
        switch (n) {
            case"togglefont_bold":
                s.addClass("prop-font-bold-icon");
                break;
            case"togglefont_italic":
                s.addClass("prop-font-italic-icon");
                break;
            case"togglefont_underline":
                s.addClass("prop-font-uline-icon");
                break;
            case"delete-row":
                s.addClass("prop-sortable-list-close-button");
                d(this.Element).attr("name", "sortable-list-item-close-button");
                break;
            case"add-row":
                s.addClass("prop-dimension-icon-close");
                break;
            case"expression-text":
                $button.addClass("prop-right");
                break;
            case"expression":
                s.addClass("prop-left");
                break;
            case"image":
                s.addClass("prop-grid_button").addClass("prop-image-icon-enabled");
                break;
            case"fontcolor":
                s.addClass("prop-left").addClass("prop-font-color-icon");
                var m = window.document.createElement("div");
                d(m).addClass("prop-font-color-icon-box");
                d(m).insertAfter(k);
                new Qva.Mgr.backgroundcolor(this.PageBinder, m, l + ".ColorHex", q);
                break;
            case"tool":
                s.addClass("prop-grid_button").addClass("prop-jqui-icon");
                break;
            case"font":
                s.addClass("prop-left").addClass("prop-font-icon");
                break
        }
        return $button
    };
    Qva.Mgr.dlgpropjqui.Enable = function(k, n) {
        var o = d(k.find("button")[0]);
        var m = o.children("div")[0];
        var p = o.children("div")[1];
        var l = d(m).hasClass("prop-icon-expression-standalone");
        if (!n) {
            o.button("disable");
            if (!l) {
                o.addClass("prop-jqui-icon-state-no-border-disabled").removeClass("prop-jqui-icon-state-no-border")
            }
        } else {
            o.button("enable");
            if (!l) {
                o.addClass("prop-jqui-icon-state-no-border").removeClass("prop-jqui-icon-state-no-border-disabled")
            }
        }
        if (p) {
            o.prepend(p)
        }
        o.prepend(m)
    };
    Qva.Mgr.propjquibutton = function(k, n, m, o, l) {
        this.Element = n;
        this.iconType = n.getAttribute("propicontype");
        this.ButtonElement = this.CreateButton(m, o, this.iconType, this.iconType == "expression" || this.iconType == "expression-text", l);
        d(this.Element).prepend(this.ButtonElement);
        new Qva.Mgr.action(k, n, m, o)
    };
    Qva.Mgr.propjquibutton.prototype.CreateButton = Qva.Mgr.dlgpropjqui.prototype.CreateButton;
    Qva.Mgr.dlgpropjqui.prototype.ToggleUIState = function() {
        var k = this.ButtonElement;
        k.toggleClass("ui-state-active");
        if (k.attr("border") == "false") {
            if (k.hasClass("ui-state-active")) {
                k.removeClass("prop-jqui-icon-state-no-border")
            } else {
                k.addClass("prop-jqui-icon-state-no-border")
            }
        }
        k.bind("mouseup mouseout", function() {
            k.toggleClass("ui-state-active");
            if (k.attr("border") == "false") {
                if (k.hasClass("ui-state-active")) {
                    k.removeClass("prop-jqui-icon-state-no-border")
                } else {
                    k.addClass("prop-jqui-icon-state-no-border")
                }
            }
        })
    };
    Qva.Mgr.dlgpropjqui.prototype.CommonPaint = Qva.Mgr.dlg.prototype.Paint;
    Qva.Mgr.dlgpropjqui.prototype.Paint = function(n, m) {
        if (n == "h") {
            this.DialogOwner.HideMe(this, this.DlgName)
        }
        this.CommonPaint(n, m);
        if (this.Element.getAttribute("newrow") == "true") {
            this.DialogOwner.SetContextDialog(this, this.DlgName)
        }
        if (this.iconType == "expression" || this.iconType == "expression-text") {
            var k = d(this.Element);
            var l = d(k.find("button")[0]);
            if (d(l.children("div")[0]).hasClass("prop-icon-expression-standalone")) {
                Qva.Mgr.dlgpropjqui.Enable(k, n == "e")
            } else {
                var l = d(k.find("button")[0]);
                if (n == "d") {
                    this.disabled = true;
                    l.addClass("prop-icon-expression-disabled").removeClass("prop-icon-expression")
                } else {
                    this.disabled = false;
                    l.addClass("prop-icon-expression").removeClass("prop-icon-expression-disabled")
                }
            }
        }
    };
    Qva.Mgr.dlgprop = function(k, n, l, o, m) {
        this.Init(k, n, l, o, m)
    };
    Qva.Mgr.dlgprop.prototype.Init = Qva.Mgr.dlgpropjqui.prototype.Init;
    Qva.Mgr.dlgprop.prototype.CreateButton = function(m, q, l) {
        if (l == "colorpicker" || l == "singlecolor") {
            var o = window.document.createElement("span");
            var k = d(o);
            k.addClass("prop-left").addClass("prop-icon-24x24").addClass("prop-color-icon");
            new Qva.Mgr.backgroundcolor(this.PageBinder, o, l == "colorpicker" ? m + ".ColorHex" : m, q);
            return k
        } else {
            if (l == "expression") {
                var n = window.document.createElement("button");
                var p = d(n);
                p.addClass("prop-icon-24x24").addClass("prop-icon-expression").addClass("prop-grid_button").addClass("prop-expression-button");
                return p
            } else {
                Assert(false)
            }
        }
    };
    Qva.Mgr.dlgprop.prototype.ToggleUIState = function() {
        if (this.ButtonElement.hasClass("prop-color-icon") || this.ButtonElement.hasClass("prop-color-icon-active")) {
            this.ButtonElement.toggleClass("prop-color-icon-active");
            this.ButtonElement.toggleClass("prop-color-icon")
        }
        if (this.ButtonElement.hasClass("prop-icon-expression") || this.ButtonElement.hasClass("prop-icon-expression-active")) {
            this.ButtonElement.toggleClass("prop-icon-expression-active");
            this.ButtonElement.toggleClass("prop-icon-expression")
        }
    };
    Qva.Mgr.dlgprop.prototype.CommonPaint = Qva.Mgr.dlg.prototype.Paint;
    Qva.Mgr.dlgprop.prototype.Paint = Qva.Mgr.dlgpropjqui.prototype.Paint;
    Qva.Mgr.jqueryToggle = function(m, n, l, q) {
        if (!Qva.MgrSplit(this, l, q)) {
            return
        }
        this.Element = n;
        n.binderid = m.binderid;
        n.Name = this.Name;
        this.Active = 0;
        this.iconType = n.getAttribute("propicontype");
        if (this.iconType == "togglefont") {
            var p = window.document.createElement("button");
            d(p).button({text: false});
            var s = d(p);
            s.css("height", "24px");
            var k = window.document.createElement("div");
            var o = d(k);
            o.addClass("prop-icon-24x24");
            var r = n.getAttribute("propicon");
            if (l == ".Bold" || r == "bold") {
                o.addClass("prop-font-bold-icon")
            }
            if (l == ".Italic" || r == "italic") {
                o.addClass("prop-font-italic-icon")
            }
            if (l == ".Underline" || r == "underline") {
                o.addClass("prop-font-uline-icon")
            }
            o.insertBefore(s.children()[0]);
            n.appendChild(p)
        } else {
            this.ButtonElement = this.CreateButton(l, q, this.iconType, true);
            d(this.Element).prepend(this.ButtonElement)
        }
        d(n).click(function() {
            var u = Qva.GetBinder(this.binderid);
            if (!u.Enabled) {
                return
            }
            u.Set(this.Name, "value", this.getAttribute("value1"), true)
        });
        d(n).mouseleave(function(v) {
            var u = d(this).children()[0];
            if (this.getAttribute("value1") == 0) {
                d(u).addClass("ui-state-active")
            }
        });
        m.AddManager(this)
    };
    Qva.Mgr.jqueryToggle.prototype.CreateButton = Qva.Mgr.dlgpropjqui.prototype.CreateButton;
    Qva.Mgr.jqueryToggle.prototype.Paint = function(m, l) {
        this.Active = parseInt(l.getAttribute("value"));
        var k = m == "d" || isNaN(this.Active);
        var n = d(d(this.Element).children()[0]);
        if (!isNaN(this.Active)) {
            this.Element.setAttribute("value1", (this.Active == 0 ? 1 : 0));
            if (this.Active == 0) {
                n.removeClass("ui-state-active")
            } else {
                n.addClass("ui-state-active")
            }
            if (k) {
                n.addClass("ui-state-disabled")
            } else {
                n.removeClass("ui-state-disabled")
            }
        } else {
            n.addClass("ui-state-disabled")
        }
    };
    Qva.Mgr.arrowstyle = function(k, n, l, o, m) {
        if (!Qva.MgrSplit(this, l, o)) {
            return
        }
        k.AddManager(this);
        this.Element = n;
        this.Element.Name = this.Name;
        this.Element.binderid = k.PageBinder.ID;
        this.ClassPrefix = "prop-linearrow-"
    };
    Qva.Mgr.arrowstyle.prototype.SetRange = function(k) {
        this.First = this.Current < 7 ? 0 : 7;
        this.Last = this.Current < 7 ? 6 : 13
    };
    Qva.Mgr.arrowstyle.prototype.Paint = function(q, p) {
        var n = p.getElementsByTagName("element");
        this.Element.innerHTML = "";
        var o = (q != "e");
        var k = [];
        for (var m = 0; m < n.length; m++) {
            k[k.length] = parseInt(n[m].getAttribute("value"))
        }
        this.Current = parseInt(p.getAttribute("value"));
        this.SetRange(k);
        for (var m = this.First; m <= this.Last; m++) {
            var l = window.document.createElement("button");
            l.setAttribute("value1", m);
            this.AddImage(l, m, o);
            l.Name = this.Element.Name;
            l.binderid = this.Element.ID;
            if (!o) {
                d(l).click(function() {
                    var r = Qva.GetBinder(this.binderid);
                    if (!r.Enabled) {
                        return
                    }
                    r.Set(this.Name, "value", this.getAttribute("value1"), true)
                })
            }
            this.Element.appendChild(l)
        }
    };
    Qva.Mgr.arrowstyle.prototype.AddImage = function(k, n, m) {
        d(k).button({text: false});
        d(k).removeClass("ui-corner-all");
        switch (n) {
            case this.First:
                d(k).addClass("ui-corner-left");
                d(k).addClass("prop-button-align");
                break;
            case this.Last:
                d(k).addClass("ui-corner-right");
                d(k).addClass("prop-button-align-last");
                break;
            default:
                d(k).addClass("prop-button-align");
                break
        }
        d(k).addClass("prop-weld-align-icons");
        var l = window.document.createElement("div");
        d(l).addClass("prop-grid_button prop-icon-24x24");
        d(l).css("position", "relative");
        d(l).addClass(this.ClassPrefix + n);
        if (n == this.Current) {
            d(k).addClass("ui-state-active")
        } else {
            d(k).removeClass("ui-state-active")
        }
        if (m) {
            d(l).addClass("prop-icon-disabled")
        }
        var o = this.Current;
        d(k).bind("mouseout", function() {
            if (n == o) {
                d(k).addClass("ui-state-active")
            }
        });
        if (m) {
            d(k).unbind()
        }
        d(l).insertBefore(d(k).children()[0])
    };
    Qva.Mgr.linestyle = function(k, n, l, o, m) {
        if (!Qva.MgrSplit(this, l, o)) {
            return
        }
        k.AddManager(this);
        this.Element = n;
        this.Element.Name = this.Name;
        this.Element.binderid = k.PageBinder.ID;
        this.ClassPrefix = "prop-linestyle-"
    };
    Qva.Mgr.linestyle.prototype.SetRange = function(k) {
        this.First = 0;
        this.Last = k.length - 1
    };
    Qva.Mgr.linestyle.prototype.Paint = Qva.Mgr.arrowstyle.prototype.Paint;
    Qva.Mgr.linestyle.prototype.AddImage = Qva.Mgr.arrowstyle.prototype.AddImage;
    function c(l, p) {
        l = d(l);
        var o = 0;
        var m = parseFloat(l.css("margin-right")) + parseFloat(l.css("margin-left"));
        if (!isNaN(m)) {
            o += m
        }
        var n = parseFloat(l.css("padding-right")) + parseFloat(l.css("padding-left"));
        if (!isNaN(n)) {
            o += n
        }
        var k = parseFloat(l.css("border-right-width")) + parseFloat(l.css("border-left-width"));
        if (!isNaN(k)) {
            o += k
        }
        if (!p) {
            p = l.parent().width()
        }
        l.css("width", p - o)
    }
    Qva.Mgr.prop_editexpression = function(k, q, m, r) {
        var p = window.document.createElement("div");
        p.className = "prop-grid_vertical_align";
        q.appendChild(p);
        c(p, d(q).width());
        var o = d(p).width();
        var l = window.document.createElement("input");
        d(l).addClass("prop-expression-input").attr("type", "text");
        new Qva.Mgr.inputtext(k, l, m, r);
        p.appendChild(l);
        c(l, o);
        var n = window.document.createElement("span");
        d(n).attr("propicontype", "expression");
        new Qva.Mgr.dlgprop(k, n, m, r, "Expression.qvpp");
        p.appendChild(n)
    };
    Qva.Mgr.prop_dynamicDropdown = function(k, m, l, o, n) {
        var p = document.createElement("div"), r = document.createElement("div"), q = m.innerHTML;
        r.className = "prop-dyn-dynamic-dropdown-wrapper";
        p.className = "prop-grid_vertical_align";
        p.appendChild(r);
        m.innerHTML = "";
        m.appendChild(p);
        if (d(m).hasClass("expression-ac")) {
            d(p).css("width", "150");
            d(r).css("width", "150")
        } else {
            c(p, d(m).width());
            c(r)
        }
        new Qva.Mgr.dynamicDropdown(k, r, l, o, n, q)
    };
    Qva.Mgr.dropdown = function(k, o, m, q, p) {
        var l = d(o), n = l.parent();
        if (l.is("button")) {
            l = d("<div/>");
            n.find("*").remove().end().append(l)
        }
        Qva.Mgr.prop_dynamicDropdown.call(this, k, l[0], m, q, p)
    };
    Qva.Mgr.prop_select = function(l, o, m, p) {
        new Qva.Mgr.label(l, o, m, p);
        var n = window.document.createElement("div");
        n.className = "prop-grid_vertical_align";
        var k = window.document.createElement("select");
        d(k).addClass("prop-select");
        n.appendChild(k);
        o.appendChild(n);
        c(n);
        new Qva.Mgr.select(l, k, m, p)
    };
    Qva.Mgr.prop_label = function(k, m, l, n) {
        d(m).wrapInner('<div class="prop-grid_vertical_align">');
        if (l) {
            var o = d(m).children()[0];
            new Qva.Mgr.text(k, o, l, n)
        }
    };
    Qva.Mgr.prop_centeredlabel = function(k, m, l, n) {
        Qva.Mgr.prop_label(k, m);
        var o = d(d(m).children()[0]);
        o.css("text-align", "center");
        c(o)
    };
    Qva.Mgr.prop_checkbox = function(k, n, l, p, q) {
        var m = window.document.createElement("div");
        m.className = "prop-grid_vertical_align";
        n.appendChild(m);
        var o = window.document.createElement("input");
        d(o).attr("type", "checkbox").addClass("prop-grid_checkbox");
        new Qva.Mgr.inputcheckbox(k, o, l, p, q);
        m.appendChild(o)
    };
    Qva.Mgr.prop_radiobutton = function(k, o, m, p, l) {
        if (!l) {
            return
        }
        var q = l.split(":");
        if (q.length < 2) {
            return
        }
        var n = window.document.createElement("div");
        n.className = "prop-grid_vertical_align";
        o.appendChild(n);
        var r = window.document.createElement("input");
        d(r).attr("type", "radio").attr("name", !!q[0] ? m : q[0]).attr("value", q[1]).addClass("prop-grid_checkbox");
        new Qva.Mgr.inputradio(k, r, m, p);
        n.appendChild(r)
    };
    Qva.Mgr.prop_editinput = function(k, m, l, n, o) {
        this.Create(k, m, l, n, o)
    };
    function b(n, m) {
        var k = n.height();
        var l = parseFloat(n.css("border-top-width")) + parseFloat(n.css("border-bottom-width"));
        if (!isNaN(l)) {
            k += l
        }
        var p = parseFloat(n.css("margin-top")) + parseFloat(n.css("margin-bottom"));
        if (!isNaN(p)) {
            k += p
        }
        var q = parseFloat(n.css("padding-top")) + parseFloat(n.css("padding-bottom"));
        if (!isNaN(q)) {
            k += q
        }
        var m = m ? m : n.parent();
        var o = (m.height() - k) / 2;
        m.css("height", k).css("padding-top", o).css("padding-bottom", o)
    }
    function h(m, l) {
        var p = 0;
        if (l) {
            var n = parseFloat(m.css("margin-right")) + parseFloat(m.css("margin-left"));
            if (!isNaN(n)) {
                p += n
            }
        }
        var o = parseFloat(m.css("padding-right")) + parseFloat(m.css("padding-left"));
        if (!isNaN(o)) {
            p += o
        }
        var k = parseFloat(m.css("border-right-width")) + parseFloat(m.css("border-left-width"));
        if (!isNaN(k)) {
            p += k
        }
        return m.width() + p
    }
    Qva.Mgr.prop_editinput.prototype.Create = function(k, o, m, p, r) {
        var l = window.document.createElement("input");
        var q = d(o);
        var n = d(l);
        n.addClass("prop-expression-input").attr("type", "text");
        this.AddManager(k, l, m, p);
        o.appendChild(l);
        if (r) {
            n.addClass(r);
            if (parseInt(n.css("width")) > 0) {
                n.css("margin-left", q.width() - h(n, false)).css("margin-right", 0)
            } else {
                c(l)
            }
        } else {
            c(l)
        }
        b(n)
    };
    Qva.Mgr.prop_editinput.prototype.AddManager = function(k, m, l, n) {
        new Qva.Mgr.inputtext(k, m, l, n)
    };
    Qva.Mgr.prop_text = function(k, m, l, o, n) {
        d(m).wrapInner('<div class="prop-grid_vertical_align">');
        var p = d(m).children()[0];
        c(p);
        new Qva.Mgr.text(k, p, l, o, n)
    };
    Qva.Mgr.prop_inputcolor = function(k, p, m, q, o) {
        var l = window.document.createElement("input");
        var n = d(l);
        n.addClass("prop-expression-input").attr("type", "text");
        new Qva.Mgr.inputcolor(k, l, m, q, o);
        p.appendChild(l);
        c(l);
        b(n)
    };
    Qva.Mgr.prop_dlgbutton = function(k, n, m, o, p) {
        new Qva.Mgr.dlgprop(k, n, m, o, p);
        new Qva.Mgr.label(k, n, m, o);
        var l = d(n).children("span:eq(0)");
        b(l)
    };
    Qva.Mgr.prop_dlgbuttonjqui = function(k, n, l, o, p) {
        new Qva.Mgr.dlgpropjqui(k, n, l, o, p);
        var m = d(d(n).children("button")[0]);
        b(m, d(n));
        new Qva.Mgr.label(k, n, l, o)
    };
    Qva.Mgr.prop_buttonjqui = function(k, n, l, o) {
        new Qva.Mgr.propjquibutton(k, n, l, o);
        var m = d(d(n).children("button")[0]);
        b(m, d(n))
    };
    Qva.Mgr.prop_inputbuttonjqui = function(k, n, l, o) {
        new Qva.Mgr.propjquibutton(k, n, l, o, "button");
        var m = d(d(n).children("button")[0]);
        b(m, d(n))
    };
    Qva.Mgr.prop_toollabel = function(k, p, m, q, r) {
        d(p).wrapInner('<div class="prop-grid_vertical_align">').wrapInner('<div  style="float:left">');
        var o = window.document.createElement("div");
        d(o).css("float", "left").css("padding-left", "3px");
        p.appendChild(o);
        var n = window.document.createElement("div");
        n.className = "prop-grid_vertical_align";
        o.appendChild(n);
        var l = window.document.createElement("div");
        d(l).attr("propicontype", d(p).attr("propicontype"));
        n.appendChild(l);
        new Qva.Mgr.prop_dlgbuttonjqui(k, l, m, q, r)
    };
    Qva.Mgr.prop_arrowstyle = function(k, n, l, o) {
        var m = window.document.createElement("div");
        var p = d(m);
        p.css("height", "26px").css("float", "right");
        n.appendChild(m);
        new Qva.Mgr.arrowstyle(k, m, l, o);
        b(p)
    };
    Qva.Mgr.prop_linestyle = function(k, n, l, o) {
        var m = window.document.createElement("div");
        var p = d(m);
        d(m).css("height", "26px");
        n.appendChild(m);
        new Qva.Mgr.linestyle(k, m, l, o);
        b(p)
    };
    Qva.Mgr.prop_selectoneicon = function(m, q, l, u) {
        q = d(q);
        var k = q.width();
        var o = d(q).children("div");
        var p = 26;
        for (var s = 0; s < o.length; s++) {
            var n = d(o[s]);
            var v = d(n).children("div")[0];
            if (v) {
                n = d(v)
            }
            var r = n.attr("propicontype");
            if (r) {
                if (r == "colorpicker") {
                    n.css("width", p - 4).css("padding-left", 2).css("padding-right", 2)
                } else {
                    n.css("width", p)
                }
            } else {
                n.css("width", k - p - 6)
            }
        }
    };
    Qva.Mgr.prop_selecttwoicons = function(m, q, l, u) {
        q = d(q);
        var k = q.width();
        var o = d(q).children("div");
        var p = 26;
        for (var s = 0; s < o.length; s++) {
            var n = d(o[s]);
            if (n.width() == 0) {
                n = d(n).children("div")[0];
                if (!n) {
                    continue
                }
                n = d(n)
            }
            var r = n.attr("propicontype");
            if (r) {
                if (r == "colorpicker") {
                    n.css("width", p - 4).css("padding-left", 2).css("padding-right", 2)
                } else {
                    n.css("width", p)
                }
            } else {
                n.css("width", k - 2 * p - 6)
            }
        }
    };
    Qva.Mgr.prop_percentslider = function(k, n, l, o) {
        var m = d(d(n).children("div")[0]);
        m.css("width", m.width() + 7)
    };
    Qva.Mgr.prop_align = function(k, n, l, o) {
        var m = window.document.createElement("div");
        var p = d(m);
        p.css("height", "26px");
        n.appendChild(m);
        new Qva.Mgr.align(k, m, l, o);
        b(p)
    };
    Qva.Mgr.prop_disablebuttonif = function(k, m, l, o, n) {
        if (!Qva.MgrSplit(this, l, o)) {
            return
        }
        k.AddManager(this);
        this.Element = m;
        this.Value = n
    };
    Qva.Mgr.prop_disablebuttonif.prototype.Paint = function(m, l) {
        var k = m == "e";
        if (this.Value != null) {
            k = k && l.getAttribute("value") != this.Value
        }
        Qva.Mgr.dlgpropjqui.Enable(d(this.Element), k)
    };
    Qva.Mgr.prop_disablebuttonifhidden = function(k, m, l, o, n) {
        if (!Qva.MgrSplit(this, l, o)) {
            return
        }
        k.AddManager(this);
        this.Element = m
    };
    Qva.Mgr.prop_disablebuttonifhidden.prototype.Paint = function(l, k) {
        Qva.Mgr.dlgpropjqui.Enable(d(this.Element), l == "e")
    };
    Qva.Mgr.list_movehandle = function(k, o, n, p) {
        var l = d(window.document.createElement("div"));
        var m = d(o);
        m.addClass("prop-clear-none").addClass("prop-dyn-sortable-item-handle");
        l.addClass("prop-icon-24x24");
        m.append(l)
    };
    Qva.Mgr.prop_listheader = function(k, n, m, o) {
        var l = d(n);
        var p = l.text();
        d('<div class="prop-grid_span-9" style="margin-left:7px;"><div class="prop-grid_vertical_align"/></div>').appendTo(l.empty()).find(".prop-grid_vertical_align").append('<span style="float:left">' + p + "</span>").append('<span style="float:left; margin-left:6px;">(<span></span>)</span>');
        l.append('<div class="prop-sortable-right-width-28px prop-margin-right-3px"><div class="prop-sortable-width-28px" propicontype="add-row"></div></div>');
        new Qva.Mgr.text(k, l.find(".prop-grid_vertical_align > span:last > span")[0], m + "@value", o);
        new Qva.Mgr.prop_buttonjqui(k, l.find(".prop-sortable-width-28px")[0], m + ".Add", o);
        new Qva.Mgr.prop_disablebuttonifhidden(k, l.find(".prop-sortable-width-28px")[0], m, o)
    };
    Qva.Mgr.prop_slider = function(k, m, l, n, o) {
        this.Name = Qva.MgrMakeName(l, n);
        k.AddManager(this);
        this.Element = m;
        this.$Element = d(m);
        this.$SliderParent = d('<div style="float:left;">');
        this.$Slider = d('<div class="prop-grid_slider2" type="radio">').appendTo(this.$SliderParent);
        this.$InputParent = d('<div style="float:left;">');
        this.$Input = d('<input class="prop-expression-input ' + o + '"></input>').appendTo(this.$InputParent);
        this.$SliderParent.appendTo(this.$Element);
        this.$InputParent.appendTo(this.$Element);
        new Qva.Mgr.propertySlider(k, this.$Slider[0], l, n, this.$Input[0])
    };
    Qva.Mgr.prop_slider.prototype.Paint = function(m, l) {
        this.PageBinder.RemoveFromManagers(this);
        var k = this.$Input.outerWidth(true);
        this.$InputParent.css("width", k);
        this.$InputParent.css("height", this.$Element.height());
        b(this.$Input);
        this.$SliderParent.css("width", this.$Element.width() - k);
        this.$SliderParent.css("height", this.$Element.height());
        b(this.$Slider)
    }
})(jQuery);
/*! A fix for the iOS orientationchange zoom bug.
 Script by @scottjehl, rebound by @wilto.
 MIT / GPLv2 License.
 */
(function(q) {
    var d = navigator.userAgent;
    if (!(/iPhone|iPad|iPod/.test(navigator.platform) && /OS [1-5]_[0-9_]* like Mac OS X/i.test(d) && d.indexOf("AppleWebKit") > -1)) {
        return
    }
    var p = q.document;
    if (!p.querySelector) {
        return
    }
    if (!p.querySelector("meta[name=viewport]")) {
        var n = p.createElement("meta");
        n.name = "viewport";
        n.content = "width=device-height";
        p.getElementsByTagName("head")[0].appendChild(n)
    }
    var r = p.querySelector("meta[name=viewport]"), a = r && r.getAttribute("content"), o = a + ",maximum-scale=1", f = a + ",maximum-scale=10", j = true, m, l, k, c;
    if (!r) {
        return
    }
    function h() {
        j = true;
        r.setAttribute("content", f)
    }
    function b() {
        r.setAttribute("content", o);
        j = false
    }
    function g(s) {
        c = s.accelerationIncludingGravity;
        m = Math.abs(c.x);
        l = Math.abs(c.y);
        k = Math.abs(c.z);
        if ((!q.orientation || q.orientation === 180) && (m > 7 || ((k > 6 && l < 8 || k < 8 && l > 6) && m > 5))) {
            if (j) {
                b()
            }
        } else {
            if (!j) {
                h()
            }
        }
    }
    q.addEventListener("orientationchange", h, false);
    q.addEventListener("devicemotion", g, false)
})(this);